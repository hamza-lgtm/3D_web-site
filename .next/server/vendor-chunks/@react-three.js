"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-three";
exports.ids = ["vendor-chunks/@react-three"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-three/cannon/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@react-three/cannon/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Debug: () => (/* binding */ DebugProvider),\n/* harmony export */   Physics: () => (/* binding */ PhysicsProvider),\n/* harmony export */   useBox: () => (/* binding */ useBox),\n/* harmony export */   useCompoundBody: () => (/* binding */ useCompoundBody),\n/* harmony export */   useConeTwistConstraint: () => (/* binding */ useConeTwistConstraint),\n/* harmony export */   useContactMaterial: () => (/* binding */ useContactMaterial),\n/* harmony export */   useConvexPolyhedron: () => (/* binding */ useConvexPolyhedron),\n/* harmony export */   useCylinder: () => (/* binding */ useCylinder),\n/* harmony export */   useDistanceConstraint: () => (/* binding */ useDistanceConstraint),\n/* harmony export */   useHeightfield: () => (/* binding */ useHeightfield),\n/* harmony export */   useHingeConstraint: () => (/* binding */ useHingeConstraint),\n/* harmony export */   useLockConstraint: () => (/* binding */ useLockConstraint),\n/* harmony export */   useParticle: () => (/* binding */ useParticle),\n/* harmony export */   usePlane: () => (/* binding */ usePlane),\n/* harmony export */   usePointToPointConstraint: () => (/* binding */ usePointToPointConstraint),\n/* harmony export */   useRaycastAll: () => (/* binding */ useRaycastAll),\n/* harmony export */   useRaycastAny: () => (/* binding */ useRaycastAny),\n/* harmony export */   useRaycastClosest: () => (/* binding */ useRaycastClosest),\n/* harmony export */   useRaycastVehicle: () => (/* binding */ useRaycastVehicle),\n/* harmony export */   useSphere: () => (/* binding */ useSphere),\n/* harmony export */   useSpring: () => (/* binding */ useSpring),\n/* harmony export */   useTrimesh: () => (/* binding */ useTrimesh)\n/* harmony export */ });\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\nvar events = {exports: {}};\n\nvar R = typeof Reflect === 'object' ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  };\n\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n};\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nevents.exports = EventEmitter;\nevents.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    }\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\nvar EventEmitter$1 = events.exports;\n\nfunction decodeBase64(base64, enableUnicode) {\n    var binaryString = atob(base64);\n    if (enableUnicode) {\n        var binaryView = new Uint8Array(binaryString.length);\n        for (var i = 0, n = binaryString.length; i < n; ++i) {\n            binaryView[i] = binaryString.charCodeAt(i);\n        }\n        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));\n    }\n    return binaryString;\n}\n\nfunction createURL(base64, sourcemapArg, enableUnicodeArg) {\n    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;\n    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;\n    var source = decodeBase64(base64, enableUnicode);\n    var start = source.indexOf('\\n', 10) + 1;\n    var body = source.substring(start) + (sourcemap ? '\\/\\/# sourceMappingURL=' + sourcemap : '');\n    var blob = new Blob([body], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\n\nfunction createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {\n    var url;\n    return function WorkerFactory(options) {\n        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);\n        return new Worker(url, options);\n    };\n}\n\nvar WorkerFactory = createBase64WorkerFactory('', null, false);\n/* eslint-enable */\n\nclass CannonWorkerAPI extends EventEmitter$1 {\n  get axisIndex() {\n    return this.config.axisIndex;\n  }\n  set axisIndex(value) {\n    this.config.axisIndex = value;\n    this.postMessage({\n      op: 'setAxisIndex',\n      props: value\n    });\n  }\n  get broadphase() {\n    return this.config.broadphase;\n  }\n  set broadphase(value) {\n    this.config.broadphase = value;\n    this.postMessage({\n      op: 'setBroadphase',\n      props: value\n    });\n  }\n  get frictionGravity() {\n    return this.config.frictionGravity;\n  }\n  set frictionGravity(value) {\n    this.config.frictionGravity = value;\n    this.postMessage({\n      op: 'setFrictionGravity',\n      props: value\n    });\n  }\n  get gravity() {\n    return this.config.gravity;\n  }\n  set gravity(value) {\n    this.config.gravity = value;\n    this.postMessage({\n      op: 'setGravity',\n      props: value\n    });\n  }\n  get iterations() {\n    return this.config.iterations;\n  }\n  set iterations(value) {\n    this.config.iterations = value;\n    this.postMessage({\n      op: 'setIterations',\n      props: value\n    });\n  }\n  get tolerance() {\n    return this.config.tolerance;\n  }\n  set tolerance(value) {\n    this.config.tolerance = value;\n    this.postMessage({\n      op: 'setTolerance',\n      props: value\n    });\n  }\n  messageQueue = [];\n  worker = null;\n  constructor(_ref) {\n    let {\n      allowSleep = false,\n      axisIndex = 0,\n      broadphase = 'Naive',\n      defaultContactMaterial = {\n        contactEquationStiffness: 1e6\n      },\n      frictionGravity = null,\n      gravity = [0, -9.81, 0],\n      iterations = 5,\n      quatNormalizeFast = false,\n      quatNormalizeSkip = 0,\n      size = 1000,\n      solver = 'GS',\n      tolerance = 0.001\n    } = _ref;\n    super();\n    this.config = {\n      allowSleep,\n      axisIndex,\n      broadphase,\n      defaultContactMaterial,\n      frictionGravity,\n      gravity,\n      iterations,\n      quatNormalizeFast,\n      quatNormalizeSkip,\n      size,\n      solver,\n      tolerance\n    };\n    this.buffers = {\n      positions: new Float32Array(size * 3),\n      quaternions: new Float32Array(size * 4)\n    };\n  }\n  addBodies(_ref2) {\n    let {\n      props,\n      type,\n      uuid\n    } = _ref2;\n    this.postMessage({\n      op: 'addBodies',\n      props,\n      type,\n      uuid\n    });\n  }\n  addConstraint(_ref3) {\n    let {\n      props: [refA, refB, optns],\n      type,\n      uuid\n    } = _ref3;\n    this.postMessage({\n      op: 'addConstraint',\n      props: [refA, refB, optns],\n      type,\n      uuid\n    });\n  }\n  addContactMaterial(_ref4) {\n    let {\n      props,\n      uuid\n    } = _ref4;\n    this.postMessage({\n      op: 'addContactMaterial',\n      props,\n      uuid\n    });\n  }\n  addRay(_ref5) {\n    let {\n      props,\n      uuid\n    } = _ref5;\n    this.postMessage({\n      op: 'addRay',\n      props,\n      uuid\n    });\n  }\n  addRaycastVehicle(_ref6) {\n    let {\n      props: [chassisBodyUUID, wheelUUIDs, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis],\n      uuid\n    } = _ref6;\n    this.postMessage({\n      op: 'addRaycastVehicle',\n      props: [chassisBodyUUID, wheelUUIDs, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis],\n      uuid\n    });\n  }\n  addSpring(_ref7) {\n    let {\n      props: [refA, refB, optns],\n      uuid\n    } = _ref7;\n    this.postMessage({\n      op: 'addSpring',\n      props: [refA, refB, optns],\n      uuid\n    });\n  }\n  applyForce(_ref8) {\n    let {\n      props,\n      uuid\n    } = _ref8;\n    this.postMessage({\n      op: 'applyForce',\n      props,\n      uuid\n    });\n  }\n  applyImpulse(_ref9) {\n    let {\n      props,\n      uuid\n    } = _ref9;\n    this.postMessage({\n      op: 'applyImpulse',\n      props,\n      uuid\n    });\n  }\n  applyLocalForce(_ref10) {\n    let {\n      props,\n      uuid\n    } = _ref10;\n    this.postMessage({\n      op: 'applyLocalForce',\n      props,\n      uuid\n    });\n  }\n  applyLocalImpulse(_ref11) {\n    let {\n      props,\n      uuid\n    } = _ref11;\n    this.postMessage({\n      op: 'applyLocalImpulse',\n      props,\n      uuid\n    });\n  }\n  applyRaycastVehicleEngineForce(_ref12) {\n    let {\n      props,\n      uuid\n    } = _ref12;\n    this.postMessage({\n      op: 'applyRaycastVehicleEngineForce',\n      props,\n      uuid\n    });\n  }\n  applyTorque(_ref13) {\n    let {\n      props,\n      uuid\n    } = _ref13;\n    this.postMessage({\n      op: 'applyTorque',\n      props,\n      uuid\n    });\n  }\n  connect() {\n    this.worker = new WorkerFactory();\n    this.worker.onmessage = message => {\n      if (message.data.op === 'frame') {\n        this.buffers.positions = message.data.positions;\n        this.buffers.quaternions = message.data.quaternions;\n        this.emit(message.data.op, message.data);\n        return;\n      }\n      this.emit(message.data.type, message.data);\n    };\n    for (const message of this.messageQueue) {\n      this.worker.postMessage(message);\n    }\n    this.messageQueue.length = 0;\n  }\n  disableConstraint(_ref14) {\n    let {\n      uuid\n    } = _ref14;\n    this.postMessage({\n      op: 'disableConstraint',\n      uuid\n    });\n  }\n  disableConstraintMotor(_ref15) {\n    let {\n      uuid\n    } = _ref15;\n    this.postMessage({\n      op: 'disableConstraintMotor',\n      uuid\n    });\n  }\n  disconnect() {\n    if (this.worker) this.worker.onmessage = null;\n  }\n  enableConstraint(_ref16) {\n    let {\n      uuid\n    } = _ref16;\n    this.postMessage({\n      op: 'enableConstraint',\n      uuid\n    });\n  }\n  enableConstraintMotor(_ref17) {\n    let {\n      uuid\n    } = _ref17;\n    this.postMessage({\n      op: 'enableConstraintMotor',\n      uuid\n    });\n  }\n  init() {\n    const {\n      allowSleep,\n      axisIndex,\n      broadphase,\n      defaultContactMaterial,\n      frictionGravity,\n      gravity,\n      iterations,\n      quatNormalizeFast,\n      quatNormalizeSkip,\n      solver,\n      tolerance\n    } = this.config;\n    this.postMessage({\n      op: 'init',\n      props: {\n        allowSleep,\n        axisIndex,\n        broadphase,\n        defaultContactMaterial,\n        frictionGravity,\n        gravity,\n        iterations,\n        quatNormalizeFast,\n        quatNormalizeSkip,\n        solver,\n        tolerance\n      }\n    });\n  }\n  removeBodies(_ref18) {\n    let {\n      uuid\n    } = _ref18;\n    this.postMessage({\n      op: 'removeBodies',\n      uuid\n    });\n  }\n  removeConstraint(_ref19) {\n    let {\n      uuid\n    } = _ref19;\n    this.postMessage({\n      op: 'removeConstraint',\n      uuid\n    });\n  }\n  removeContactMaterial(_ref20) {\n    let {\n      uuid\n    } = _ref20;\n    this.postMessage({\n      op: 'removeContactMaterial',\n      uuid\n    });\n  }\n  removeRay(_ref21) {\n    let {\n      uuid\n    } = _ref21;\n    this.postMessage({\n      op: 'removeRay',\n      uuid\n    });\n  }\n  removeRaycastVehicle(_ref22) {\n    let {\n      uuid\n    } = _ref22;\n    this.postMessage({\n      op: 'removeRaycastVehicle',\n      uuid\n    });\n  }\n  removeSpring(_ref23) {\n    let {\n      uuid\n    } = _ref23;\n    this.postMessage({\n      op: 'removeSpring',\n      uuid\n    });\n  }\n  setAllowSleep(_ref24) {\n    let {\n      props,\n      uuid\n    } = _ref24;\n    this.postMessage({\n      op: 'setAllowSleep',\n      props,\n      uuid\n    });\n  }\n  setAngularDamping(_ref25) {\n    let {\n      props,\n      uuid\n    } = _ref25;\n    this.postMessage({\n      op: 'setAngularDamping',\n      props,\n      uuid\n    });\n  }\n  setAngularFactor(_ref26) {\n    let {\n      props,\n      uuid\n    } = _ref26;\n    this.postMessage({\n      op: 'setAngularFactor',\n      props,\n      uuid\n    });\n  }\n  setAngularVelocity(_ref27) {\n    let {\n      props,\n      uuid\n    } = _ref27;\n    this.postMessage({\n      op: 'setAngularVelocity',\n      props,\n      uuid\n    });\n  }\n  setCollisionFilterGroup(_ref28) {\n    let {\n      props,\n      uuid\n    } = _ref28;\n    this.postMessage({\n      op: 'setCollisionFilterGroup',\n      props,\n      uuid\n    });\n  }\n  setCollisionFilterMask(_ref29) {\n    let {\n      props,\n      uuid\n    } = _ref29;\n    this.postMessage({\n      op: 'setCollisionFilterMask',\n      props,\n      uuid\n    });\n  }\n  setCollisionResponse(_ref30) {\n    let {\n      props,\n      uuid\n    } = _ref30;\n    this.postMessage({\n      op: 'setCollisionResponse',\n      props,\n      uuid\n    });\n  }\n  setConstraintMotorMaxForce(_ref31) {\n    let {\n      props,\n      uuid\n    } = _ref31;\n    this.postMessage({\n      op: 'setConstraintMotorMaxForce',\n      props,\n      uuid\n    });\n  }\n  setConstraintMotorSpeed(_ref32) {\n    let {\n      props,\n      uuid\n    } = _ref32;\n    this.postMessage({\n      op: 'setConstraintMotorSpeed',\n      props,\n      uuid\n    });\n  }\n  setFixedRotation(_ref33) {\n    let {\n      props,\n      uuid\n    } = _ref33;\n    this.postMessage({\n      op: 'setFixedRotation',\n      props,\n      uuid\n    });\n  }\n  setIsTrigger(_ref34) {\n    let {\n      props,\n      uuid\n    } = _ref34;\n    this.postMessage({\n      op: 'setIsTrigger',\n      props,\n      uuid\n    });\n  }\n  setLinearDamping(_ref35) {\n    let {\n      props,\n      uuid\n    } = _ref35;\n    this.postMessage({\n      op: 'setLinearDamping',\n      props,\n      uuid\n    });\n  }\n  setLinearFactor(_ref36) {\n    let {\n      props,\n      uuid\n    } = _ref36;\n    this.postMessage({\n      op: 'setLinearFactor',\n      props,\n      uuid\n    });\n  }\n  setMass(_ref37) {\n    let {\n      props,\n      uuid\n    } = _ref37;\n    this.postMessage({\n      op: 'setMass',\n      props,\n      uuid\n    });\n  }\n  setMaterial(_ref38) {\n    let {\n      props,\n      uuid\n    } = _ref38;\n    this.postMessage({\n      op: 'setMaterial',\n      props,\n      uuid\n    });\n  }\n  setPosition(_ref39) {\n    let {\n      props,\n      uuid\n    } = _ref39;\n    this.postMessage({\n      op: 'setPosition',\n      props,\n      uuid\n    });\n  }\n  setQuaternion(_ref40) {\n    let {\n      props: [x, y, z, w],\n      uuid\n    } = _ref40;\n    this.postMessage({\n      op: 'setQuaternion',\n      props: [x, y, z, w],\n      uuid\n    });\n  }\n  setRaycastVehicleBrake(_ref41) {\n    let {\n      props,\n      uuid\n    } = _ref41;\n    this.postMessage({\n      op: 'setRaycastVehicleBrake',\n      props,\n      uuid\n    });\n  }\n  setRaycastVehicleSteeringValue(_ref42) {\n    let {\n      props,\n      uuid\n    } = _ref42;\n    this.postMessage({\n      op: 'setRaycastVehicleSteeringValue',\n      props,\n      uuid\n    });\n  }\n  setRotation(_ref43) {\n    let {\n      props,\n      uuid\n    } = _ref43;\n    this.postMessage({\n      op: 'setRotation',\n      props,\n      uuid\n    });\n  }\n  setSleepSpeedLimit(_ref44) {\n    let {\n      props,\n      uuid\n    } = _ref44;\n    this.postMessage({\n      op: 'setSleepSpeedLimit',\n      props,\n      uuid\n    });\n  }\n  setSleepTimeLimit(_ref45) {\n    let {\n      props,\n      uuid\n    } = _ref45;\n    this.postMessage({\n      op: 'setSleepTimeLimit',\n      props,\n      uuid\n    });\n  }\n  setSpringDamping(_ref46) {\n    let {\n      props,\n      uuid\n    } = _ref46;\n    this.postMessage({\n      op: 'setSpringDamping',\n      props,\n      uuid\n    });\n  }\n  setSpringRestLength(_ref47) {\n    let {\n      props,\n      uuid\n    } = _ref47;\n    this.postMessage({\n      op: 'setSpringRestLength',\n      props,\n      uuid\n    });\n  }\n  setSpringStiffness(_ref48) {\n    let {\n      props,\n      uuid\n    } = _ref48;\n    this.postMessage({\n      op: 'setSpringStiffness',\n      props,\n      uuid\n    });\n  }\n  setUserData(_ref49) {\n    let {\n      props,\n      uuid\n    } = _ref49;\n    this.postMessage({\n      op: 'setUserData',\n      props,\n      uuid\n    });\n  }\n  setVelocity(_ref50) {\n    let {\n      props,\n      uuid\n    } = _ref50;\n    this.postMessage({\n      op: 'setVelocity',\n      props,\n      uuid\n    });\n  }\n  sleep(_ref51) {\n    let {\n      uuid\n    } = _ref51;\n    this.postMessage({\n      op: 'sleep',\n      uuid\n    });\n  }\n  step(props) {\n    var _this$worker;\n    const {\n      buffers: {\n        positions,\n        quaternions\n      }\n    } = this;\n    if (!positions.byteLength && !quaternions.byteLength) return;\n    (_this$worker = this.worker) == null ? void 0 : _this$worker.postMessage({\n      op: 'step',\n      positions,\n      props,\n      quaternions\n    }, [positions.buffer, quaternions.buffer]);\n  }\n  subscribe(_ref52) {\n    let {\n      props: {\n        id,\n        target,\n        type\n      },\n      uuid\n    } = _ref52;\n    this.postMessage({\n      op: 'subscribe',\n      props: {\n        id,\n        target,\n        type\n      },\n      uuid\n    });\n  }\n  terminate() {\n    var _this$worker2;\n    (_this$worker2 = this.worker) == null ? void 0 : _this$worker2.terminate();\n    this.worker = null;\n  }\n  unsubscribe(_ref53) {\n    let {\n      props\n    } = _ref53;\n    this.postMessage({\n      op: 'unsubscribe',\n      props\n    });\n  }\n  wakeUp(_ref54) {\n    let {\n      uuid\n    } = _ref54;\n    this.postMessage({\n      op: 'wakeUp',\n      uuid\n    });\n  }\n  postMessage(message) {\n    if (this.worker) return this.worker.postMessage(message);\n    this.messageQueue.push(message);\n  }\n}\n\n/**\n * Records what objects are colliding with each other\n */\n\n/**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */\nclass Mat3$1 {\n  /**\n   * A vector of length 9, containing all matrix elements.\n   */\n\n  /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */\n  constructor(elements) {\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.elements = elements;\n  }\n  /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\n   * Set all elements to zero\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\n   * Sets the matrix diagonal elements from a Vec3\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\n   * Gets the matrix diagonal elements\n   */\n\n\n  getTrace(target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n    return target;\n  }\n  /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\n   * Matrix-scalar multiplication\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */\n\n\n  mmult(matrix, target) {\n    if (target === void 0) {\n      target = new Mat3$1();\n    }\n\n    const A = this.elements;\n    const B = matrix.elements;\n    const T = target.elements;\n    const a11 = A[0],\n          a12 = A[1],\n          a13 = A[2],\n          a21 = A[3],\n          a22 = A[4],\n          a23 = A[5],\n          a31 = A[6],\n          a32 = A[7],\n          a33 = A[8];\n    const b11 = B[0],\n          b12 = B[1],\n          b13 = B[2],\n          b21 = B[3],\n          b22 = B[4],\n          b23 = B[5],\n          b31 = B[6],\n          b32 = B[7],\n          b33 = B[8];\n    T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n    T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n    T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n    T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n    T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n    T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n    T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return target;\n  }\n  /**\n   * Scale each column of the matrix\n   */\n\n\n  scale(vector, target) {\n    if (target === void 0) {\n      target = new Mat3$1();\n    }\n\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */\n\n\n  solve(b, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n    }\n\n    return target;\n  }\n  /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\n   * Copy another matrix into this matrix object.\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\n   * Returns a string representation of the matrix.\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */\n\n\n  reverse(target) {\n    if (target === void 0) {\n      target = new Mat3$1();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = reverse_eqns$1;\n    let i;\n    let j;\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw `Could not reverse! A=[${this.toString()}]`;\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\n   * Set the matrix from a quaterion\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */\n\n\n  transpose(target) {\n    if (target === void 0) {\n      target = new Mat3$1();\n    }\n\n    const M = this.elements;\n    const T = target.elements;\n    let tmp; //Set diagonals\n\n    T[0] = M[0];\n    T[4] = M[4];\n    T[8] = M[8];\n    tmp = M[1];\n    T[1] = M[3];\n    T[3] = tmp;\n    tmp = M[2];\n    T[2] = M[6];\n    T[6] = tmp;\n    tmp = M[5];\n    T[5] = M[7];\n    T[7] = tmp;\n    return target;\n  }\n\n}\nconst reverse_eqns$1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */\n\nclass Vec3$1 {\n  constructor(x, y, z) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */\n\n\n  cross(vector, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\n   * Set the vectors' 3 elements\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\n   * Set all components of the vector to zero.\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\n   * Vector addition\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3$1(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3$1(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */\n\n\n  crossmat() {\n    return new Mat3$1([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */\n\n\n  unit(target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\n   * Get the length of the vector\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Get the squared length of the vector.\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\n   * Get distance from this point to another point\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\n   * Get squared distance from this point to another point\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */\n\n\n  scale(scalar, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */\n\n\n  vmul(vector, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */\n\n\n  addScaledVector(scalar, vector, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\n   * Calculate dot product\n   * @param vector\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */\n\n\n  negate(target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n$1;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec$1;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\n   * Converts to a more readable format\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z}`;\n  }\n  /**\n   * Converts to an array\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\n   * Copies value of source to this vector.\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\n   * Check if a vector equals is almost equal to another one.\n   */\n\n\n  almostEquals(vector, precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if a vector is almost zero\n   */\n\n\n  almostZero(precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg$1);\n    return antip_neg$1.almostEquals(vector, precision);\n  }\n  /**\n   * Clone the vector\n   */\n\n\n  clone() {\n    return new Vec3$1(this.x, this.y, this.z);\n  }\n\n}\nVec3$1.ZERO = new Vec3$1(0, 0, 0);\nVec3$1.UNIT_X = new Vec3$1(1, 0, 0);\nVec3$1.UNIT_Y = new Vec3$1(0, 1, 0);\nVec3$1.UNIT_Z = new Vec3$1(0, 0, 1);\nconst Vec3_tangents_n$1 = new Vec3$1();\nconst Vec3_tangents_randVec$1 = new Vec3$1();\nconst antip_neg$1 = new Vec3$1();\n\n/**\n * Axis aligned bounding box class.\n */\nclass AABB$1 {\n  /**\n   * The lower bound of the bounding box\n   */\n\n  /**\n   * The upper bound of the bounding box\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.lowerBound = new Vec3$1();\n    this.upperBound = new Vec3$1();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp$1$1);\n        p = tmp$1$1;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\n   * Clone an AABB\n   */\n\n\n  clone() {\n    return new AABB$1().copy(this);\n  }\n  /**\n   * Extend this AABB so that it covers the given AABB too.\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\n   * Returns true if the given AABB overlaps this AABB.\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners$1;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners$1;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Check if the AABB is hit by a ray.\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray; // const t = 0\n    // ray.direction is unit direction vector of ray\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp$1$1 = new Vec3$1();\nconst transformIntoFrame_corners$1 = [new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1()];\n\n/**\n * Base class for objects that dispatches events.\n */\nclass EventTarget {\n  /**\n   * Add an event listener\n   * @return The self object, for chainability.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\n   * Check if an event listener is added\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if any event listener of the given type is added\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\n   * Remove an event listener\n   * @return The self object, for chainability.\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\n   * Emit an event.\n   * @return The self object, for chainability.\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion$1 {\n  constructor(x, y, z, w) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    if (w === void 0) {\n      w = 1;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z},${this.w}`;\n  }\n  /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis) {\n    if (targetAxis === void 0) {\n      targetAxis = new Vec3$1();\n    }\n\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1$1;\n      const t2 = sfv_t2$1;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target) {\n    if (target === void 0) {\n      target = new Quaternion$1();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target) {\n    if (target === void 0) {\n      target = new Quaternion$1();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target) {\n    if (target === void 0) {\n      target = new Quaternion$1();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order) {\n    if (order === void 0) {\n      order = 'YZX';\n    }\n\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(`Euler order ${order} not supported yet.`);\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */\n\n\n  setFromEuler(x, y, z, order) {\n    if (order === void 0) {\n      order = 'XYZ';\n    }\n\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Quaternion$1(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target) {\n    if (target === void 0) {\n      target = new Quaternion$1();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target) {\n    if (target === void 0) {\n      target = new Quaternion$1();\n    }\n\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1$1 = new Vec3$1();\nconst sfv_t2$1 = new Vec3$1();\n\n/**\n * The available shape types.\n */\nconst SHAPE_TYPES$1 = {\n  /** SPHERE */\n  SPHERE: 1,\n\n  /** PLANE */\n  PLANE: 2,\n\n  /** BOX */\n  BOX: 4,\n\n  /** COMPOUND */\n  COMPOUND: 8,\n\n  /** CONVEXPOLYHEDRON */\n  CONVEXPOLYHEDRON: 16,\n\n  /** HEIGHTFIELD */\n  HEIGHTFIELD: 32,\n\n  /** PARTICLE */\n  PARTICLE: 64,\n\n  /** CYLINDER */\n  CYLINDER: 128,\n\n  /** TRIMESH */\n  TRIMESH: 256\n};\n/**\n * ShapeType\n */\n\n/**\n * Base class for shapes\n */\nclass Shape$1 {\n  /**\n   * Identifier of the Shape.\n   */\n\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */\n\n  /**\n   * The local bounding sphere radius of this shape.\n   */\n\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * @default -1\n   */\n\n  /**\n   * Optional material of the shape that regulates contact properties.\n   */\n\n  /**\n   * The body to which the shape is added to.\n   */\n\n  /**\n   * All the Shape types.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.id = Shape$1.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Get the volume of this shape\n   */\n\n\n  volume() {\n    throw `volume() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * @todo use abstract for these kind of methods\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n  }\n\n}\nShape$1.idCounter = 0;\nShape$1.types = SHAPE_TYPES$1;\n\n/**\n * Transformation utilities.\n */\nclass Transform$1 {\n  /**\n   * position\n   */\n\n  /**\n   * quaternion\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.position = new Vec3$1();\n    this.quaternion = new Quaternion$1();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\n   * Get a global point in local transform coordinates.\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform$1.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\n   * Get a local point in global transform coordinates.\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform$1.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * pointToLocalFrame\n   */\n\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat$1$1);\n    tmpQuat$1$1.vmult(result, result);\n    return result;\n  }\n  /**\n   * pointToWorldFrame\n   */\n\n\n  static pointToWorldFrame(position, quaternion, localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  static vectorToWorldFrame(quaternion, localVector, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * vectorToLocalFrame\n   */\n\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat$1$1 = new Quaternion$1();\n\n/**\n * A set of polygons describing a convex shape.\n *\n * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n * @example\n *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })\n *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })\n *     world.addBody(convexBody)\n */\nclass ConvexPolyhedron extends Shape$1 {\n  /** vertices */\n\n  /**\n   * Array of integer arrays, indicating which vertices each face consists of\n   */\n\n  /** faceNormals */\n\n  /** worldVertices */\n\n  /** worldVerticesNeedsUpdate */\n\n  /** worldFaceNormals */\n\n  /** worldFaceNormalsNeedsUpdate */\n\n  /**\n   * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n   */\n\n  /** uniqueEdges */\n\n  /**\n   * @param vertices An array of Vec3's\n   * @param faces Array of integer arrays, describing which vertices that is included in each face.\n   */\n  constructor(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape$1.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\n   * Computes uniqueEdges\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3$1();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normals of the faces.\n   * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(`Vertex ${this.faces[i][j]} not found!`);\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3$1();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normal of a face from its vertices\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    const cb = new Vec3$1();\n    const ab = new Vec3$1();\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * @param minDist Clamp distance\n   * @param result The an array of contact point objects, see clipFaceAgainstHull\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3$1();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3$1();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\n   * Find the separating axis between this hull and another\n   * @param target The target vector to save the axis in\n   * @return Returns false if a separation is found, else true\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3$1();\n    const Worldnormal1 = new Vec3$1();\n    const deltaC = new Vec3$1();\n    const worldEdge0 = new Vec3$1();\n    const worldEdge1 = new Vec3$1();\n    const Cross = new Vec3$1();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n   * @return The overlap depth, or FALSE if no penetration.\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3$1();\n    const aabbmin = new Vec3$1();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\n   * @param face_i Index of the face\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\n   * Clip a face against a hull.\n   * @param worldVertsB1 An array of Vec3 with vertices in the world frame.\n   * @param minDist Distance clamping\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3$1();\n    const edge0 = new Vec3$1();\n    const WorldEdge0 = new Vec3$1();\n    const worldPlaneAnormal1 = new Vec3$1();\n    const planeNormalWS1 = new Vec3$1();\n    const worldA1 = new Vec3$1();\n    const localPlaneNormal = new Vec3$1();\n    const planeNormalWS = new Vec3$1();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(`clamped: depth=${depth} to minDist=${minDist}`);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\n   * Clip a face in a hull against the back of a plane.\n   * @param planeConstant The constant in the mathematical plane equation\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3$1();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3$1();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3$1();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  }\n  /**\n   * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3$1());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\n   * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3$1());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3$1();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\n   * Get approximate convex volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Get an average of all the vertices positions\n   */\n\n\n  getAveragePointLocal(target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\n   * Transform all local points. Will change the .vertices\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\n            // Rotate edges\n            for(let i=0; i<this.uniqueEdges.length; i++){\n                const v = this.uniqueEdges[i];\n                quat.vmult(v,v);\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\n   * Checks whether p is inside the polyhedra. Must be in local coords.\n   * The point lies outside of the convex hull of the other points if and only if the direction\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\n   * @param p A point given in local coordinates\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const positiveResult = null;\n    const pointInside = new Vec3$1();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3$1();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3$1();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return positiveResult ? 1 : -1;\n  }\n  /**\n   * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\n   * Results are saved in the array maxmin.\n   * @param result result[0] and result[1] will be set to maximum and minimum, respectively.\n   */\n\n\n  static project(shape, axis, pos, quat, result) {\n    const n = shape.vertices.length;\n    const localAxis = project_localAxis;\n    let max = 0;\n    let min = 0;\n    const localOrigin = project_localOrigin;\n    const vs = shape.vertices;\n    localOrigin.setZero(); // Transform the axis to local\n\n    Transform$1.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform$1.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    const add = localOrigin.dot(localAxis);\n    min = max = vs[0].dot(localAxis);\n\n    for (let i = 1; i < n; i++) {\n      const val = vs[i].dot(localAxis);\n\n      if (val > max) {\n        max = val;\n      }\n\n      if (val < min) {\n        min = val;\n      }\n    }\n\n    min -= add;\n    max -= add;\n\n    if (min > max) {\n      // Inconsistent - swap\n      const temp = min;\n      min = max;\n      max = temp;\n    } // Output\n\n\n    result[0] = max;\n    result[1] = min;\n  }\n\n}\nconst maxminA = [];\nconst maxminB = [];\nnew Vec3$1();\nconst project_localAxis = new Vec3$1();\nconst project_localOrigin = new Vec3$1();\n\n/**\n * A 3d box shape.\n * @example\n *     const size = 1\n *     const halfExtents = new CANNON.Vec3(size, size, size)\n *     const boxShape = new CANNON.Box(halfExtents)\n *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })\n *     world.addBody(boxBody)\n */\nclass Box extends Shape$1 {\n  /**\n   * The half extents of the box.\n   */\n\n  /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example.\n   */\n  constructor(halfExtents) {\n    super({\n      type: Shape$1.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3$1;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\n   * Calculate the inertia of the box.\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n\n  static calculateInertia(halfExtents, mass, target) {\n    const e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n    target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n    target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n  }\n  /**\n   * Get the box 6 side normals\n   * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n  /**\n   * Returns the volume of the box.\n   */\n\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n  /**\n   * forEachWorldCorner\n   */\n\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\nconst worldCornerTempPos = new Vec3$1();\nconst worldCornersTemp = [new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1()];\n\n/**\n * BODY_TYPES\n */\nconst BODY_TYPES = {\n  /** DYNAMIC */\n  DYNAMIC: 1,\n\n  /** STATIC */\n  STATIC: 2,\n\n  /** KINEMATIC */\n  KINEMATIC: 4\n};\n/**\n * BodyType\n */\n\n/**\n * BODY_SLEEP_STATES\n */\nconst BODY_SLEEP_STATES = {\n  /** AWAKE */\n  AWAKE: 0,\n\n  /** SLEEPY */\n  SLEEPY: 1,\n\n  /** SLEEPING */\n  SLEEPING: 2\n};\n/**\n * BodySleepState\n */\n\n/**\n * Base class for all body types.\n * @example\n *     const shape = new CANNON.Sphere(1)\n *     const body = new CANNON.Body({\n *       mass: 1,\n *       shape,\n *     })\n *     world.addBody(body)\n */\nclass Body extends EventTarget {\n  /**\n   * Dispatched after two bodies collide. This event is dispatched on each\n   * of the two bodies involved in the collision.\n   * @event collide\n   * @param body The body that was involved in the collision.\n   * @param contact The details of the collision.\n   */\n\n  /**\n   * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n   */\n\n  /**\n   * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * AWAKE\n   */\n\n  /**\n   * SLEEPY\n   */\n\n  /**\n   * SLEEPING\n   */\n\n  /**\n   * Dispatched after a sleeping body has woken up.\n   * @event wakeup\n   */\n\n  /**\n   * Dispatched after a body has gone in to the sleepy state.\n   * @event sleepy\n   */\n\n  /**\n   * Dispatched after a body has fallen asleep.\n   * @event sleep\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.vlambda = new Vec3$1();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3$1();\n    this.previousPosition = new Vec3$1();\n    this.interpolatedPosition = new Vec3$1();\n    this.initPosition = new Vec3$1();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3$1();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3$1();\n    this.force = new Vec3$1();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = Body.AWAKE;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3$1();\n    this.quaternion = new Quaternion$1();\n    this.initQuaternion = new Quaternion$1();\n    this.previousQuaternion = new Quaternion$1();\n    this.interpolatedQuaternion = new Quaternion$1();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3$1();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3$1();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3$1();\n    this.invInertia = new Vec3$1();\n    this.invInertiaWorld = new Mat3$1();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3$1();\n    this.invInertiaWorldSolve = new Mat3$1();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3$1(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3$1(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB$1();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3$1();\n    this.isTrigger = Boolean(options.isTrigger);\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\n   * Wake the body up.\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = Body.AWAKE;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\n   * Force body sleep\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\n   * @param time The world time in seconds\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\n   * Convert a world point to local body frame.\n   */\n\n\n  pointToLocalFrame(worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\n   * Convert a world vector to local body frame.\n   */\n\n\n  vectorToLocalFrame(worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  pointToWorldFrame(localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3$1();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * Add a shape to the body with a local offset and orientation.\n   * @return The body object, for chainability.\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3$1();\n    const orientation = new Quaternion$1();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\n   * Remove a shape from the body.\n   * @return The body object, for chainability.\n   */\n\n\n  removeShape(shape) {\n    const index = this.shapes.indexOf(shape);\n\n    if (index === -1) {\n      console.warn('Shape does not belong to the body');\n      return this;\n    }\n\n    this.shapes.splice(index, 1);\n    this.shapeOffsets.splice(index, 1);\n    this.shapeOrientations.splice(index, 1);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = null;\n    return this;\n  }\n  /**\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\n   * Updates the .aabb\n   */\n\n\n  updateAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = updateAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\n   * Update `.inertiaWorld` and `.invInertiaWorld`\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n  /**\n   * Apply force to a point of the body. This could for example be a point on the Body surface.\n   * Applying force this way will add to Body.force and Body.torque.\n   * @param force The amount of force to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyForce(force, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3$1();\n    }\n\n    // Needed?\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n  /**\n   * Apply force to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalForce(localForce, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3$1();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n  /**\n   * Apply torque to the body.\n   * @param torque The amount of torque to add.\n   */\n\n\n  applyTorque(torque) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Add rotational force\n\n\n    this.torque.vadd(torque, this.torque);\n  }\n  /**\n   * Apply impulse to a point of the body. This could for example be a point on the Body surface.\n   * An impulse is a force added to a body during a short period of time (impulse = force * time).\n   * Impulses will be added to Body.velocity and Body.angularVelocity.\n   * @param impulse The amount of impulse to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyImpulse(impulse, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3$1();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\n     rotVelo.x *= this.invInertia.x;\n     rotVelo.y *= this.invInertia.y;\n     rotVelo.z *= this.invInertia.z;\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n  /**\n   * Apply locally-defined impulse to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3$1();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\n   * Should be called whenever you change the body shape or mass.\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.updateAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\n   * Get world velocity of a point in the body.\n   * @param worldPoint\n   * @param result\n   * @return The result vector.\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3$1();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\n   * Move the body forward in time.\n   * @param dt Time step\n   * @param quatNormalize Set to true to normalize the body quaternion\n   * @param quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = 'collide';\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3$1();\nconst tmpQuat = new Quaternion$1();\nconst updateAABB_shapeAABB = new AABB$1();\nconst uiw_m1 = new Mat3$1();\nconst uiw_m2 = new Mat3$1();\nnew Mat3$1();\nconst Body_applyForce_rotForce = new Vec3$1();\nconst Body_applyLocalForce_worldForce = new Vec3$1();\nconst Body_applyLocalForce_relativePointWorld = new Vec3$1();\nconst Body_applyImpulse_velo = new Vec3$1();\nconst Body_applyImpulse_rotVelo = new Vec3$1();\nconst Body_applyLocalImpulse_worldImpulse = new Vec3$1();\nconst Body_applyLocalImpulse_relativePoint = new Vec3$1();\nconst Body_updateMassProperties_halfExtents = new Vec3$1();\n\nnew Vec3$1();\nnew Vec3$1();\nnew Quaternion$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\n/**\n * Storage for Ray casting data\n */\nclass RaycastResult$1 {\n  /**\n   * rayFromWorld\n   */\n\n  /**\n   * rayToWorld\n   */\n\n  /**\n   * hitNormalWorld\n   */\n\n  /**\n   * hitPointWorld\n   */\n\n  /**\n   * hasHit\n   */\n\n  /**\n   * shape\n   */\n\n  /**\n   * body\n   */\n\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */\n\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */\n\n  /**\n   * If the ray should stop traversing the bodies\n   */\n  constructor() {\n    this.rayFromWorld = new Vec3$1();\n    this.rayToWorld = new Vec3$1();\n    this.hitNormalWorld = new Vec3$1();\n    this.hitPointWorld = new Vec3$1();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * Reset all result data.\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * abort\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\n   * Set result data.\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nlet _Shape$types$SPHERE$1, _Shape$types$PLANE$1, _Shape$types$BOX$1, _Shape$types$CYLINDER$1, _Shape$types$CONVEXPO$1, _Shape$types$HEIGHTFI$1, _Shape$types$TRIMESH$1;\n\n/**\n * RAY_MODES\n */\nconst RAY_MODES$1 = {\n  /** CLOSEST */\n  CLOSEST: 1,\n\n  /** ANY */\n  ANY: 2,\n\n  /** ALL */\n  ALL: 4\n};\n/**\n * RayMode\n */\n\n_Shape$types$SPHERE$1 = Shape$1.types.SPHERE;\n_Shape$types$PLANE$1 = Shape$1.types.PLANE;\n_Shape$types$BOX$1 = Shape$1.types.BOX;\n_Shape$types$CYLINDER$1 = Shape$1.types.CYLINDER;\n_Shape$types$CONVEXPO$1 = Shape$1.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI$1 = Shape$1.types.HEIGHTFIELD;\n_Shape$types$TRIMESH$1 = Shape$1.types.TRIMESH;\n\n/**\n * A line in 3D space that intersects bodies and return points.\n */\nclass Ray$1 {\n  /**\n   * from\n   */\n\n  /**\n   * to\n   */\n\n  /**\n   * direction\n   */\n\n  /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */\n\n  /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */\n\n  /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */\n\n  /**\n   * collisionFilterMask\n   * @default -1\n   */\n\n  /**\n   * collisionFilterGroup\n   * @default -1\n   */\n\n  /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */\n\n  /**\n   * Current result object.\n   */\n\n  /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */\n\n  /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */\n\n  /**\n   * CLOSEST\n   */\n\n  /**\n   * ANY\n   */\n\n  /**\n   * ALL\n   */\n  get [_Shape$types$SPHERE$1]() {\n    return this._intersectSphere;\n  }\n\n  get [_Shape$types$PLANE$1]() {\n    return this._intersectPlane;\n  }\n\n  get [_Shape$types$BOX$1]() {\n    return this._intersectBox;\n  }\n\n  get [_Shape$types$CYLINDER$1]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$CONVEXPO$1]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$HEIGHTFI$1]() {\n    return this._intersectHeightfield;\n  }\n\n  get [_Shape$types$TRIMESH$1]() {\n    return this._intersectTrimesh;\n  }\n\n  constructor(from, to) {\n    if (from === void 0) {\n      from = new Vec3$1();\n    }\n\n    if (to === void 0) {\n      to = new Vec3$1();\n    }\n\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3$1();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray$1.ANY;\n    this.result = new RaycastResult$1();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray$1.ANY;\n    this.result = options.result || new RaycastResult$1();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB$1$1);\n    tmpArray$1.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB$1$1, tmpArray$1);\n    this.intersectBodies(tmpArray$1);\n    return this.hasHit;\n  }\n  /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi$1;\n    const qi = intersectBody_qi$1;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\n   * Updates the direction vector.\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection$1(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3$1(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3$1();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3$1();\n    const dir_scaled_with_t = new Vec3$1();\n    const hitPointWorld = new Vec3$1();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\n   * Get the world AABB of the ray.\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    shape.data;\n    shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay$1; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform$1.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform$1.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index$1;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB$1();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform$1.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset$1);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset$1, body, reportedShape, intersectConvexOptions$1);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform$1.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset$1);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset$1, body, reportedShape, intersectConvexOptions$1);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint$1;\n    const normal = Ray_intersectSphere_normal$1;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    const normal = intersectConvex_normal$1;\n    const vector = intersectConvex_vector$1;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint$1);\n      intersectPoint$1.vadd(from, intersectPoint$1); // a is the point we compare points b and c with.\n\n      a$1.copy(vertices[face[0]]);\n      q.vmult(a$1, a$1);\n      x.vadd(a$1, a$1);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b$1.copy(vertices[face[i]]);\n        c$1.copy(vertices[face[i + 1]]);\n        q.vmult(b$1, b$1);\n        q.vmult(c$1, c$1);\n        x.vadd(b$1, b$1);\n        x.vadd(c$1, c$1);\n        const distance = intersectPoint$1.distanceTo(from);\n\n        if (!(Ray$1.pointInTriangle(intersectPoint$1, a$1, b$1, c$1) || Ray$1.pointInTriangle(intersectPoint$1, b$1, a$1, c$1)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint$1, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal$1;\n    const triangles = intersectTrimesh_triangles$1;\n    const treeTransform = intersectTrimesh_treeTransform$1;\n    const vector = intersectConvex_vector$1;\n    const localDirection = intersectTrimesh_localDirection$1;\n    const localFrom = intersectTrimesh_localFrom$1;\n    const localTo = intersectTrimesh_localTo$1;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint$1;\n    const worldNormal = intersectTrimesh_worldNormal$1; // Checking faces\n\n    const indices = mesh.indices;\n    mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform$1.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform$1.pointToLocalFrame(position, quat, from, localFrom);\n    Transform$1.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a$1); // ...but make it relative to the ray from. We'll fix this later.\n\n      a$1.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint$1);\n      intersectPoint$1.vadd(localFrom, intersectPoint$1); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b$1);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c$1);\n      const squaredDistance = intersectPoint$1.distanceSquared(localFrom);\n\n      if (!(Ray$1.pointInTriangle(intersectPoint$1, b$1, a$1, c$1) || Ray$1.pointInTriangle(intersectPoint$1, a$1, b$1, c$1)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform$1.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform$1.pointToWorldFrame(position, quat, intersectPoint$1, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\n   * @return True if the intersections should continue\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray$1.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray$1.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray$1.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n  /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */\n\n\n  static pointInTriangle(p, a, b, c) {\n    c.vsub(a, v0$1);\n    b.vsub(a, v1$1);\n    p.vsub(a, v2$1);\n    const dot00 = v0$1.dot(v0$1);\n    const dot01 = v0$1.dot(v1$1);\n    const dot02 = v0$1.dot(v2$1);\n    const dot11 = v1$1.dot(v1$1);\n    const dot12 = v1$1.dot(v2$1);\n    let u;\n    let v;\n    return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n  }\n\n}\nRay$1.CLOSEST = RAY_MODES$1.CLOSEST;\nRay$1.ANY = RAY_MODES$1.ANY;\nRay$1.ALL = RAY_MODES$1.ALL;\nconst tmpAABB$1$1 = new AABB$1();\nconst tmpArray$1 = [];\nconst v1$1 = new Vec3$1();\nconst v2$1 = new Vec3$1();\nconst intersectBody_xi$1 = new Vec3$1();\nconst intersectBody_qi$1 = new Quaternion$1();\nconst intersectPoint$1 = new Vec3$1();\nconst a$1 = new Vec3$1();\nconst b$1 = new Vec3$1();\nconst c$1 = new Vec3$1();\nnew Vec3$1();\nnew RaycastResult$1();\nconst intersectConvexOptions$1 = {\n  faceList: [0]\n};\nconst worldPillarOffset$1 = new Vec3$1();\nconst intersectHeightfield_localRay$1 = new Ray$1();\nconst intersectHeightfield_index$1 = [];\nconst Ray_intersectSphere_intersectionPoint$1 = new Vec3$1();\nconst Ray_intersectSphere_normal$1 = new Vec3$1();\nconst intersectConvex_normal$1 = new Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nconst intersectConvex_vector$1 = new Vec3$1();\nconst intersectTrimesh_normal$1 = new Vec3$1();\nconst intersectTrimesh_localDirection$1 = new Vec3$1();\nconst intersectTrimesh_localFrom$1 = new Vec3$1();\nconst intersectTrimesh_localTo$1 = new Vec3$1();\nconst intersectTrimesh_worldNormal$1 = new Vec3$1();\nconst intersectTrimesh_worldIntersectPoint$1 = new Vec3$1();\nnew AABB$1();\nconst intersectTrimesh_triangles$1 = [];\nconst intersectTrimesh_treeTransform$1 = new Transform$1();\nconst v0$1 = new Vec3$1();\nconst intersect$1 = new Vec3$1();\n\nfunction distanceFromIntersection$1(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0$1);\n  const dot = v0$1.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect$1);\n  intersect$1.vadd(from, intersect$1);\n  const distance = position.distanceTo(intersect$1);\n  return distance;\n}\n\nclass Utils {\n  /**\n   * Extend an options object with default values.\n   * @param options The options object. May be falsy: in this case, a new object is created and returned.\n   * @param defaults An object containing default values.\n   * @return The modified options object.\n   */\n  static defaults(options, defaults) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    for (let key in defaults) {\n      if (!(key in options)) {\n        options[key] = defaults[key];\n      }\n    }\n\n    return options;\n  }\n\n}\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // Temp vectors\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\n/**\n * Defines a physics material.\n */\nclass Material {\n  /**\n   * Material name.\n   * If options is a string, name will be set to that string.\n   * @todo Deprecate this\n   */\n\n  /** Material id. */\n\n  /**\n   * Friction for this material.\n   * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n\n  /**\n   * Restitution for this material.\n   * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Ray$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n[new Vec3$1(1, 0, 0), new Vec3$1(0, 1, 0), new Vec3$1(0, 0, 1)];\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // bilateral constraint between two dynamic objects\n\n/**\n * Spherical shape\n * @example\n *     const radius = 1\n *     const sphereShape = new CANNON.Sphere(radius)\n *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })\n *     world.addBody(sphereBody)\n */\nclass Sphere extends Shape$1 {\n  /**\n   * The radius of the sphere.\n   */\n\n  /**\n   *\n   * @param radius The radius of the sphere, a non-negative number.\n   */\n  constructor(radius) {\n    super({\n      type: Shape$1.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n  /** calculateLocalInertia */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n  /** volume */\n\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // Temp vectors for calculation\n\nnew Vec3$1(); // Relative velocity\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\n/**\n * Cylinder class.\n * @example\n *     const radiusTop = 0.5\n *     const radiusBottom = 0.5\n *     const height = 2\n *     const numSegments = 12\n *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)\n *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })\n *     world.addBody(cylinderBody)\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  /** The radius of the top of the Cylinder. */\n\n  /** The radius of the bottom of the Cylinder. */\n\n  /** The height of the Cylinder. */\n\n  /** The number of segments to build the cylinder out of. */\n\n  /**\n   * @param radiusTop The radius of the top of the Cylinder.\n   * @param radiusBottom The radius of the bottom of the Cylinder.\n   * @param height The height of the Cylinder.\n   * @param numSegments The number of segments to build the cylinder out of.\n   */\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    if (radiusTop === void 0) {\n      radiusTop = 1;\n    }\n\n    if (radiusBottom === void 0) {\n      radiusBottom = 1;\n    }\n\n    if (height === void 0) {\n      height = 1;\n    }\n\n    if (numSegments === void 0) {\n      numSegments = 8;\n    }\n\n    if (radiusTop < 0) {\n      throw new Error('The cylinder radiusTop cannot be negative.');\n    }\n\n    if (radiusBottom < 0) {\n      throw new Error('The cylinder radiusBottom cannot be negative.');\n    }\n\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3$1(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3$1(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3$1(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3$1(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3$1(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n\n    faces.push(bottomface);\n    axes.push(new Vec3$1(0, 1, 0)); // Reorder top face\n\n    const temp = [];\n\n    for (let i = 0; i < topface.length; i++) {\n      temp.push(topface[topface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n    this.type = Shape$1.types.CYLINDER;\n    this.radiusTop = radiusTop;\n    this.radiusBottom = radiusBottom;\n    this.height = height;\n    this.numSegments = numSegments;\n  }\n\n}\n\n/**\n * Particle shape.\n * @example\n *     const particleShape = new CANNON.Particle()\n *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })\n *     world.addBody(particleBody)\n */\nclass Particle extends Shape$1 {\n  constructor() {\n    super({\n      type: Shape$1.types.PARTICLE\n    });\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\n * @example\n *     const planeShape = new CANNON.Plane()\n *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })\n *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up\n *     world.addBody(planeBody)\n */\nclass Plane extends Shape$1 {\n  /** worldNormal */\n\n  /** worldNormalNeedsUpdate */\n  constructor() {\n    super({\n      type: Shape$1.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3$1();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n  /** computeWorldNormal */\n\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3$1();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = []\n *     for (let i = 0; i < 1000; i++) {\n *         const y = 0.5 * Math.cos(0.2 * i)\n *         data.push(y)\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new CANNON.Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     })\n *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })\n *     world.addBody(heightfieldBody)\n */\nclass Heightfield extends Shape$1 {\n  /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   */\n\n  /**\n   * Max value of the data points in the data array.\n   */\n\n  /**\n   * Minimum value of the data points in the data array.\n   */\n\n  /**\n   * World spacing between the data points in X and Y direction.\n   * @todo elementSizeX and Y\n   * @default 1\n   */\n\n  /**\n   * @default true\n   */\n\n  /**\n   * @param data An array of numbers, or height values, that are spread out along the x axis.\n   */\n  constructor(data, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape$1.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3$1();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\n   * Call whenever you change the data array.\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\n   * Update the `minValue` property\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\n   * Update the `maxValue` property\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\n   * Get max/min in a rectangle in the matrix data\n   * @param result An array to store the results in.\n   * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @param result Two-element array\n   * @param clamp If the position should be clamped to the heightfield edge.\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\n   * Get an AABB of a square in the heightfield\n   * @param xi\n   * @param yi\n   * @param result\n   */\n\n\n  getAabbAtIndex(xi, yi, _ref) {\n    let {\n      lowerBound,\n      upperBound\n    } = _ref;\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\n   * Get the height in the heightfield at a given position\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\n   * Get a triangle from the heightfield\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3$1();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3$1();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3$1();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /** @TODO do it properly */\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3$1(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\n   * Sets the height values from an image. Currently only supported in browser.\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3$1();\nconst getHeightAt_a = new Vec3$1();\nconst getHeightAt_b = new Vec3$1();\nconst getHeightAt_c = new Vec3$1();\nconst getNormalAt_a = new Vec3$1();\nconst getNormalAt_b = new Vec3$1();\nconst getNormalAt_c = new Vec3$1();\nconst getNormalAt_e0 = new Vec3$1();\nconst getNormalAt_e1 = new Vec3$1(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\n * OctreeNode\n */\nclass OctreeNode {\n  /** The root node */\n\n  /** Boundary of this node */\n\n  /** Contained data at the current node level */\n\n  /** Children to this node */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB$1();\n    this.data = [];\n    this.children = [];\n  }\n  /**\n   * reset\n   */\n\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\n   * Insert data into this node\n   * @return True if successful, otherwise false\n   */\n\n\n  insert(aabb, elementData, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\n   * Create 8 equally sized children nodes and put them in the `children` array.\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB$1({\n        lowerBound: new Vec3$1(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\n   * Get all data, potentially within an AABB\n   * @return The \"result\" object\n   */\n\n\n  aabbQuery(aabb, result) {\n    this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\n   * Get all data, potentially intersected by a ray.\n   * @return The \"result\" object\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n\n    /** @todo implement real ray query which needs less lookups */\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n    return result;\n  }\n  /**\n   * removeEmptyNodes\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\n * Octree\n */\n\n\nclass Octree extends OctreeNode {\n  /**\n   * Maximum subdivision depth\n   * @default 8\n   */\n\n  /**\n   * @param aabb The total AABB of the tree\n   */\n  constructor(aabb, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3$1();\nconst tmpAABB = new AABB$1();\n\n/**\n * Trimesh.\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ]\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ]\n *     const trimeshShape = new CANNON.Trimesh(vertices, indices)\n */\nclass Trimesh extends Shape$1 {\n  /**\n   * vertices\n   */\n\n  /**\n   * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n   */\n\n  /**\n   * The normals data.\n   */\n\n  /**\n   * The local AABB of the mesh.\n   */\n\n  /**\n   * References to vertex pairs, making up all unique edges in the trimesh.\n   */\n\n  /**\n   * Local scaling of the mesh. Use .setScale() to set it.\n   */\n\n  /**\n   * The indexed triangles. Use .updateTree() to update it.\n   */\n  constructor(vertices, indices) {\n    super({\n      type: Shape$1.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB$1();\n    this.edges = null;\n    this.scale = new Vec3$1(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\n   * updateTree\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB$1();\n    const a = new Vec3$1();\n    const b = new Vec3$1();\n    const c = new Vec3$1();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\n   * Get triangles in a local AABB from the trimesh.\n   * @param result An array of integers, referencing the queried triangles.\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\n   * setScale\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Compute the normals of the faces. Will save in the `.normals` array.\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\n   * Update the `.edges` property\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? `${a}_${b}` : `${b}_${a}`;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\n   * Get an edge vertex\n   * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param vertexStore Where to store the result\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\n   * Get a vector along an edge.\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * Get vertex i.\n   * @return The \"out\" vector object\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\n   * Get raw vertex i\n   * @return The \"out\" vector object\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @return The \"out\" vector object\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform$1.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\n   * Get the three vertices for triangle i.\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\n   * Compute the normal of triangle i.\n   * @return The \"target\" vector object\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\n   * @return The \"target\" vector object\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\n   * Compute the local AABB for the trimesh\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\n   * Update the `.aabb` property\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\n   * Will update the `.boundingSphereRadius` property\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3$1();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\n   * Get approximate volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Create a Trimesh instance, shaped as a torus.\n   */\n\n\n  static createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (tube === void 0) {\n      tube = 0.5;\n    }\n\n    if (radialSegments === void 0) {\n      radialSegments = 8;\n    }\n\n    if (tubularSegments === void 0) {\n      tubularSegments = 6;\n    }\n\n    if (arc === void 0) {\n      arc = Math.PI * 2;\n    }\n\n    const vertices = [];\n    const indices = [];\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n        const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        const z = tube * Math.sin(v);\n        vertices.push(x, y, z);\n      }\n    }\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return new Trimesh(vertices, indices);\n  }\n\n}\nconst computeNormals_n = new Vec3$1();\nconst unscaledAABB = new AABB$1();\nconst getEdgeVector_va = new Vec3$1();\nconst getEdgeVector_vb = new Vec3$1();\nconst cb = new Vec3$1();\nconst ab = new Vec3$1();\nconst va = new Vec3$1();\nconst vb = new Vec3$1();\nconst vc = new Vec3$1();\nconst cli_aabb = new AABB$1();\nconst computeLocalAABB_worldVert = new Vec3$1();\nconst calculateWorldAABB_frame = new Transform$1();\nconst calculateWorldAABB_aabb = new AABB$1();\n\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\n({\n  sphereSphere: Shape$1.types.SPHERE,\n  spherePlane: Shape$1.types.SPHERE | Shape$1.types.PLANE,\n  boxBox: Shape$1.types.BOX | Shape$1.types.BOX,\n  sphereBox: Shape$1.types.SPHERE | Shape$1.types.BOX,\n  planeBox: Shape$1.types.PLANE | Shape$1.types.BOX,\n  convexConvex: Shape$1.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape$1.types.SPHERE | Shape$1.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape$1.types.PLANE | Shape$1.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape$1.types.BOX | Shape$1.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape$1.types.SPHERE | Shape$1.types.HEIGHTFIELD,\n  boxHeightfield: Shape$1.types.BOX | Shape$1.types.HEIGHTFIELD,\n  convexHeightfield: Shape$1.types.CONVEXPOLYHEDRON | Shape$1.types.HEIGHTFIELD,\n  sphereParticle: Shape$1.types.PARTICLE | Shape$1.types.SPHERE,\n  planeParticle: Shape$1.types.PLANE | Shape$1.types.PARTICLE,\n  boxParticle: Shape$1.types.BOX | Shape$1.types.PARTICLE,\n  convexParticle: Shape$1.types.PARTICLE | Shape$1.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape$1.types.CYLINDER,\n  sphereCylinder: Shape$1.types.SPHERE | Shape$1.types.CYLINDER,\n  planeCylinder: Shape$1.types.PLANE | Shape$1.types.CYLINDER,\n  boxCylinder: Shape$1.types.BOX | Shape$1.types.CYLINDER,\n  convexCylinder: Shape$1.types.CONVEXPOLYHEDRON | Shape$1.types.CYLINDER,\n  heightfieldCylinder: Shape$1.types.HEIGHTFIELD | Shape$1.types.CYLINDER,\n  particleCylinder: Shape$1.types.PARTICLE | Shape$1.types.CYLINDER,\n  sphereTrimesh: Shape$1.types.SPHERE | Shape$1.types.TRIMESH,\n  planeTrimesh: Shape$1.types.PLANE | Shape$1.types.TRIMESH\n});\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Quaternion$1();\nnew Quaternion$1();\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew AABB$1();\nnew Vec3$1();\nnew Vec3$1(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n[new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1(), new Vec3$1()];\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // WIP\n\nnew Quaternion$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n\nnew AABB$1();\nnew Ray$1(); // performance.now() fallback on Date.now()\n\nconst performance$1 = globalThis.performance || {};\n\nif (!performance$1.now) {\n  let nowOffset = Date.now();\n\n  if (performance$1.timing && performance$1.timing.navigationStart) {\n    nowOffset = performance$1.timing.navigationStart;\n  }\n\n  performance$1.now = () => Date.now() - nowOffset;\n}\n\nnew Vec3$1(); // Dispatched after the world has stepped forward in time.\n\n/**\n * @typedef { import('cannon-es').MaterialOptions } MaterialOptions\n */\n\nconst makeVec3 = _ref => {\n  let [x, y, z] = _ref;\n  return new Vec3$1(x, y, z);\n};\nconst prepareSphere = args => Array.isArray(args) ? args : [args];\nconst prepareConvexPolyhedron = _ref2 => {\n  let [v, faces, n, a, boundingSphereRadius] = _ref2;\n  return [{\n    axes: a ? a.map(makeVec3) : undefined,\n    boundingSphereRadius,\n    faces,\n    normals: n ? n.map(makeVec3) : undefined,\n    vertices: v ? v.map(makeVec3) : undefined\n  }];\n};\nfunction createShape(type, args) {\n  switch (type) {\n    case 'Box':\n      return new Box(new Vec3$1(...args.map(v => v / 2)));\n    // extents => halfExtents\n    case 'ConvexPolyhedron':\n      return new ConvexPolyhedron(...prepareConvexPolyhedron(args));\n    case 'Cylinder':\n      return new Cylinder(...args);\n    // [ radiusTop, radiusBottom, height, numSegments ] = args\n    case 'Heightfield':\n      return new Heightfield(...args);\n    // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\n    case 'Particle':\n      return new Particle();\n    // no args\n    case 'Plane':\n      return new Plane();\n    // no args, infinite x and y\n    case 'Sphere':\n      return new Sphere(...prepareSphere(args));\n    // radius = args\n    case 'Trimesh':\n      return new Trimesh(...args);\n    // [vertices, indices] = args\n  }\n}\n\n/**\n * @param {THREE.Quaternion} target\n * @param {{ rotation?: THREE.Vector3Tuple quaternion?: THREE.Vector4Tuple }} props\n * @returns {THREE.Quaternion}\n */\nconst setQuaternion = (target, _ref3) => {\n  let {\n    quaternion,\n    rotation\n  } = _ref3;\n  if (quaternion) {\n    target.set(...quaternion);\n  } else if (rotation) {\n    target.setFromEuler(...rotation);\n  }\n  return target;\n};\n\n/**\n * @function\n * @param {Object} options\n * @param {string} options.uuid\n * @param {BodyProps} options.props\n * @param {BodyShapeType} options.type\n * @param {(materialOptions: MaterialOptions) => Material =} options.createMaterial\n * @returns {Body}\n */\nconst propsToBody = options => {\n  const {\n    uuid,\n    props,\n    type,\n    createMaterial = materialOptions => new Material(materialOptions)\n  } = options;\n  const {\n    angularFactor = [1, 1, 1],\n    angularVelocity = [0, 0, 0],\n    args = [],\n    collisionResponse,\n    linearFactor = [1, 1, 1],\n    mass,\n    material,\n    onCollide,\n    position = [0, 0, 0],\n    rotation,\n    quaternion,\n    shapes,\n    type: bodyType,\n    velocity = [0, 0, 0],\n    ...extra\n  } = props;\n  const body = new Body({\n    ...extra,\n    mass: bodyType === 'Static' ? 0 : mass,\n    material: material ? createMaterial(material) : undefined,\n    type: bodyType ? Body[bodyType.toUpperCase()] : undefined\n  });\n  body.uuid = uuid;\n  if (collisionResponse !== undefined) {\n    body.collisionResponse = collisionResponse;\n  }\n  if (type === 'Compound') {\n    shapes.forEach(_ref4 => {\n      let {\n        type,\n        args,\n        position,\n        rotation,\n        quaternion,\n        material,\n        ...extra\n      } = _ref4;\n      const shapeBody = body.addShape(createShape(type, args), position ? new Vec3$1(...position) : undefined, setQuaternion(new Quaternion$1(0, 0, 0, 1), {\n        quaternion,\n        rotation\n      }));\n      if (material) shapeBody.material = createMaterial(material);\n      Object.assign(shapeBody, extra);\n    });\n  } else {\n    body.addShape(createShape(type, args));\n  }\n  body.position.set(position[0], position[1], position[2]);\n  body.velocity.set(velocity[0], velocity[1], velocity[2]);\n  body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2]);\n  body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2]);\n  body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2]);\n  setQuaternion(body.quaternion, {\n    quaternion,\n    rotation\n  });\n  return body;\n};\n\n/**\n * Records what objects are colliding with each other\n */\n\n/**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */\nclass Mat3 {\n  /**\n   * A vector of length 9, containing all matrix elements.\n   */\n\n  /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */\n  constructor(elements) {\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.elements = elements;\n  }\n  /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\n   * Set all elements to zero\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\n   * Sets the matrix diagonal elements from a Vec3\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\n   * Gets the matrix diagonal elements\n   */\n\n\n  getTrace(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n    return target;\n  }\n  /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\n   * Matrix-scalar multiplication\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */\n\n\n  mmult(matrix, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const A = this.elements;\n    const B = matrix.elements;\n    const T = target.elements;\n    const a11 = A[0],\n          a12 = A[1],\n          a13 = A[2],\n          a21 = A[3],\n          a22 = A[4],\n          a23 = A[5],\n          a31 = A[6],\n          a32 = A[7],\n          a33 = A[8];\n    const b11 = B[0],\n          b12 = B[1],\n          b13 = B[2],\n          b21 = B[3],\n          b22 = B[4],\n          b23 = B[5],\n          b31 = B[6],\n          b32 = B[7],\n          b33 = B[8];\n    T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n    T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n    T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n    T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n    T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n    T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n    T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return target;\n  }\n  /**\n   * Scale each column of the matrix\n   */\n\n\n  scale(vector, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */\n\n\n  solve(b, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n    }\n\n    return target;\n  }\n  /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\n   * Copy another matrix into this matrix object.\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\n   * Returns a string representation of the matrix.\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */\n\n\n  reverse(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = reverse_eqns;\n    let i;\n    let j;\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw `Could not reverse! A=[${this.toString()}]`;\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\n   * Set the matrix from a quaterion\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */\n\n\n  transpose(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const M = this.elements;\n    const T = target.elements;\n    let tmp; //Set diagonals\n\n    T[0] = M[0];\n    T[4] = M[4];\n    T[8] = M[8];\n    tmp = M[1];\n    T[1] = M[3];\n    T[3] = tmp;\n    tmp = M[2];\n    T[2] = M[6];\n    T[6] = tmp;\n    tmp = M[5];\n    T[5] = M[7];\n    T[7] = tmp;\n    return target;\n  }\n\n}\nconst reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */\n\nclass Vec3 {\n  constructor(x, y, z) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */\n\n\n  cross(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\n   * Set the vectors' 3 elements\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\n   * Set all components of the vector to zero.\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\n   * Vector addition\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */\n\n\n  unit(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\n   * Get the length of the vector\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Get the squared length of the vector.\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\n   * Get distance from this point to another point\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\n   * Get squared distance from this point to another point\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */\n\n\n  scale(scalar, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */\n\n\n  vmul(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */\n\n\n  addScaledVector(scalar, vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\n   * Calculate dot product\n   * @param vector\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */\n\n\n  negate(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\n   * Converts to a more readable format\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z}`;\n  }\n  /**\n   * Converts to an array\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\n   * Copies value of source to this vector.\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\n   * Check if a vector equals is almost equal to another one.\n   */\n\n\n  almostEquals(vector, precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if a vector is almost zero\n   */\n\n\n  almostZero(precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\n   * Clone the vector\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\n * Axis aligned bounding box class.\n */\nclass AABB {\n  /**\n   * The lower bound of the bounding box\n   */\n\n  /**\n   * The upper bound of the bounding box\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp$1);\n        p = tmp$1;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\n   * Clone an AABB\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\n   * Extend this AABB so that it covers the given AABB too.\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\n   * Returns true if the given AABB overlaps this AABB.\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Check if the AABB is hit by a ray.\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray; // const t = 0\n    // ray.direction is unit direction vector of ray\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp$1 = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion {\n  constructor(x, y, z, w) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    if (w === void 0) {\n      w = 1;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z},${this.w}`;\n  }\n  /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis) {\n    if (targetAxis === void 0) {\n      targetAxis = new Vec3();\n    }\n\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order) {\n    if (order === void 0) {\n      order = 'YZX';\n    }\n\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(`Euler order ${order} not supported yet.`);\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */\n\n\n  setFromEuler(x, y, z, order) {\n    if (order === void 0) {\n      order = 'XYZ';\n    }\n\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\n/**\n * The available shape types.\n */\nconst SHAPE_TYPES = {\n  /** SPHERE */\n  SPHERE: 1,\n\n  /** PLANE */\n  PLANE: 2,\n\n  /** BOX */\n  BOX: 4,\n\n  /** COMPOUND */\n  COMPOUND: 8,\n\n  /** CONVEXPOLYHEDRON */\n  CONVEXPOLYHEDRON: 16,\n\n  /** HEIGHTFIELD */\n  HEIGHTFIELD: 32,\n\n  /** PARTICLE */\n  PARTICLE: 64,\n\n  /** CYLINDER */\n  CYLINDER: 128,\n\n  /** TRIMESH */\n  TRIMESH: 256\n};\n/**\n * ShapeType\n */\n\n/**\n * Base class for shapes\n */\nclass Shape {\n  /**\n   * Identifier of the Shape.\n   */\n\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */\n\n  /**\n   * The local bounding sphere radius of this shape.\n   */\n\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * @default -1\n   */\n\n  /**\n   * Optional material of the shape that regulates contact properties.\n   */\n\n  /**\n   * The body to which the shape is added to.\n   */\n\n  /**\n   * All the Shape types.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Get the volume of this shape\n   */\n\n\n  volume() {\n    throw `volume() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * @todo use abstract for these kind of methods\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n  }\n\n}\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\n\n/**\n * Transformation utilities.\n */\nclass Transform {\n  /**\n   * position\n   */\n\n  /**\n   * quaternion\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\n   * Get a global point in local transform coordinates.\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\n   * Get a local point in global transform coordinates.\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * pointToLocalFrame\n   */\n\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat$1);\n    tmpQuat$1.vmult(result, result);\n    return result;\n  }\n  /**\n   * pointToWorldFrame\n   */\n\n\n  static pointToWorldFrame(position, quaternion, localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  static vectorToWorldFrame(quaternion, localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * vectorToLocalFrame\n   */\n\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat$1 = new Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n[new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nnew Vec3();\nnew Quaternion();\nnew AABB();\nnew Mat3();\nnew Mat3();\nnew Mat3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n\nnew Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n\n/**\n * Storage for Ray casting data\n */\nclass RaycastResult {\n  /**\n   * rayFromWorld\n   */\n\n  /**\n   * rayToWorld\n   */\n\n  /**\n   * hitNormalWorld\n   */\n\n  /**\n   * hitPointWorld\n   */\n\n  /**\n   * hasHit\n   */\n\n  /**\n   * shape\n   */\n\n  /**\n   * body\n   */\n\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */\n\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */\n\n  /**\n   * If the ray should stop traversing the bodies\n   */\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * Reset all result data.\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * abort\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\n   * Set result data.\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nlet _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\n\n/**\n * RAY_MODES\n */\nconst RAY_MODES = {\n  /** CLOSEST */\n  CLOSEST: 1,\n\n  /** ANY */\n  ANY: 2,\n\n  /** ALL */\n  ALL: 4\n};\n/**\n * RayMode\n */\n\n_Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\n\n/**\n * A line in 3D space that intersects bodies and return points.\n */\nclass Ray {\n  /**\n   * from\n   */\n\n  /**\n   * to\n   */\n\n  /**\n   * direction\n   */\n\n  /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */\n\n  /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */\n\n  /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */\n\n  /**\n   * collisionFilterMask\n   * @default -1\n   */\n\n  /**\n   * collisionFilterGroup\n   * @default -1\n   */\n\n  /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */\n\n  /**\n   * Current result object.\n   */\n\n  /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */\n\n  /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */\n\n  /**\n   * CLOSEST\n   */\n\n  /**\n   * ANY\n   */\n\n  /**\n   * ALL\n   */\n  get [_Shape$types$SPHERE]() {\n    return this._intersectSphere;\n  }\n\n  get [_Shape$types$PLANE]() {\n    return this._intersectPlane;\n  }\n\n  get [_Shape$types$BOX]() {\n    return this._intersectBox;\n  }\n\n  get [_Shape$types$CYLINDER]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$CONVEXPO]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$HEIGHTFI]() {\n    return this._intersectHeightfield;\n  }\n\n  get [_Shape$types$TRIMESH]() {\n    return this._intersectTrimesh;\n  }\n\n  constructor(from, to) {\n    if (from === void 0) {\n      from = new Vec3();\n    }\n\n    if (to === void 0) {\n      to = new Vec3();\n    }\n\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB$1);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\n   * Updates the direction vector.\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\n   * Get the world AABB of the ray.\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    shape.data;\n    shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal; // Checking faces\n\n    const indices = mesh.indices;\n    mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\n   * @return True if the intersections should continue\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n  /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */\n\n\n  static pointInTriangle(p, a, b, c) {\n    c.vsub(a, v0);\n    b.vsub(a, v1);\n    p.vsub(a, v2);\n    const dot00 = v0.dot(v0);\n    const dot01 = v0.dot(v1);\n    const dot02 = v0.dot(v2);\n    const dot11 = v1.dot(v1);\n    const dot12 = v1.dot(v2);\n    let u;\n    let v;\n    return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n  }\n\n}\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nconst tmpAABB$1 = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nconst intersectConvex_normal = new Vec3();\nnew Vec3();\nnew Vec3();\nconst intersectConvex_vector = new Vec3();\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // Temp vectors\n\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Ray();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n[new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n\nnew Vec3();\nnew Vec3();\nnew Vec3(); // bilateral constraint between two dynamic objects\nnew Vec3();\nnew Vec3();\nnew Vec3(); // Temp vectors for calculation\n\nnew Vec3(); // Relative velocity\n\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew Transform();\nnew AABB();\n\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\n({\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape.types.CYLINDER,\n  sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n  planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n  boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n  convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n  heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n  particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n});\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Quaternion();\nnew Quaternion();\n\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nnew Vec3();\nnew Vec3();\nnew Vec3();\n\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n[new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // WIP\n\nnew Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n\nnew AABB();\nnew Ray(); // performance.now() fallback on Date.now()\n\nconst performance = globalThis.performance || {};\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n\nnew Vec3(); // Dispatched after the world has stepped forward in time.\n\nfunction CannonDebugger(scene, world, _temp) {\n  let {\n    color = 0x00ff00,\n    scale = 1,\n    onInit,\n    onUpdate\n  } = _temp === void 0 ? {} : _temp;\n  const _meshes = [];\n\n  const _material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n    color: color != null ? color : 0x00ff00,\n    wireframe: true\n  });\n\n  const _tempVec0 = new Vec3();\n\n  const _tempVec1 = new Vec3();\n\n  const _tempVec2 = new Vec3();\n\n  const _tempQuat0 = new Quaternion();\n\n  const _sphereGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1);\n\n  const _boxGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry(1, 1, 1);\n\n  const _planeGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(10, 10, 10, 10); // Move the planeGeometry forward a little bit to prevent z-fighting\n\n\n  _planeGeometry.translate(0, 0, 0.0001);\n\n  function createConvexPolyhedronGeometry(shape) {\n    const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry(); // Add vertices\n\n    const positions = [];\n\n    for (let i = 0; i < shape.vertices.length; i++) {\n      const vertex = shape.vertices[i];\n      positions.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3)); // Add faces\n\n    const indices = [];\n\n    for (let i = 0; i < shape.faces.length; i++) {\n      const face = shape.faces[i];\n      const a = face[0];\n\n      for (let j = 1; j < face.length - 1; j++) {\n        const b = face[j];\n        const c = face[j + 1];\n        indices.push(a, b, c);\n      }\n    }\n\n    geometry.setIndex(indices);\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n\n  function createTrimeshGeometry(shape) {\n    const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n    const positions = [];\n    const v0 = _tempVec0;\n    const v1 = _tempVec1;\n    const v2 = _tempVec2;\n\n    for (let i = 0; i < shape.indices.length / 3; i++) {\n      shape.getTriangleVertices(i, v0, v1, v2);\n      positions.push(v0.x, v0.y, v0.z);\n      positions.push(v1.x, v1.y, v1.z);\n      positions.push(v2.x, v2.y, v2.z);\n    }\n\n    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n\n  function createHeightfieldGeometry(shape) {\n    const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n    const s = shape.elementSize || 1; // assumes square heightfield, else i*x, j*y\n\n    const positions = shape.data.flatMap((row, i) => row.flatMap((z, j) => [i * s, j * s, z]));\n    const indices = [];\n\n    for (let xi = 0; xi < shape.data.length - 1; xi++) {\n      for (let yi = 0; yi < shape.data[xi].length - 1; yi++) {\n        const stride = shape.data[xi].length;\n        const index = xi * stride + yi;\n        indices.push(index + 1, index + stride, index + stride + 1);\n        indices.push(index + stride, index + 1, index);\n      }\n    }\n\n    geometry.setIndex(indices);\n    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n\n  function createMesh(shape) {\n    let mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh();\n    const {\n      SPHERE,\n      BOX,\n      PLANE,\n      CYLINDER,\n      CONVEXPOLYHEDRON,\n      TRIMESH,\n      HEIGHTFIELD\n    } = Shape.types;\n\n    switch (shape.type) {\n      case SPHERE:\n        {\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(_sphereGeometry, _material);\n          break;\n        }\n\n      case BOX:\n        {\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(_boxGeometry, _material);\n          break;\n        }\n\n      case PLANE:\n        {\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(_planeGeometry, _material);\n          break;\n        }\n\n      case CYLINDER:\n        {\n          const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.CylinderGeometry(shape.radiusTop, shape.radiusBottom, shape.height, shape.numSegments);\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n\n      case CONVEXPOLYHEDRON:\n        {\n          const geometry = createConvexPolyhedronGeometry(shape);\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n\n      case TRIMESH:\n        {\n          const geometry = createTrimeshGeometry(shape);\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n\n      case HEIGHTFIELD:\n        {\n          const geometry = createHeightfieldGeometry(shape);\n          mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n    }\n\n    scene.add(mesh);\n    return mesh;\n  }\n\n  function scaleMesh(mesh, shape) {\n    const {\n      SPHERE,\n      BOX,\n      PLANE,\n      CYLINDER,\n      CONVEXPOLYHEDRON,\n      TRIMESH,\n      HEIGHTFIELD\n    } = Shape.types;\n\n    switch (shape.type) {\n      case SPHERE:\n        {\n          const {\n            radius\n          } = shape;\n          mesh.scale.set(radius * scale, radius * scale, radius * scale);\n          break;\n        }\n\n      case BOX:\n        {\n          mesh.scale.copy(shape.halfExtents);\n          mesh.scale.multiplyScalar(2 * scale);\n          break;\n        }\n\n      case PLANE:\n        {\n          break;\n        }\n\n      case CYLINDER:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n\n      case CONVEXPOLYHEDRON:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n\n      case TRIMESH:\n        {\n          mesh.scale.copy(shape.scale).multiplyScalar(scale);\n          break;\n        }\n\n      case HEIGHTFIELD:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n    }\n  }\n\n  function typeMatch(mesh, shape) {\n    if (!mesh) return false;\n    const {\n      geometry\n    } = mesh;\n    return geometry instanceof three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry && shape.type === Shape.types.SPHERE || geometry instanceof three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry && shape.type === Shape.types.BOX || geometry instanceof three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry && shape.type === Shape.types.PLANE || geometry.id === shape.geometryId && shape.type === Shape.types.CYLINDER || geometry.id === shape.geometryId && shape.type === Shape.types.CONVEXPOLYHEDRON || geometry.id === shape.geometryId && shape.type === Shape.types.TRIMESH || geometry.id === shape.geometryId && shape.type === Shape.types.HEIGHTFIELD;\n  }\n\n  function updateMesh(index, shape) {\n    let mesh = _meshes[index];\n    let didCreateNewMesh = false;\n\n    if (!typeMatch(mesh, shape)) {\n      if (mesh) scene.remove(mesh);\n      _meshes[index] = mesh = createMesh(shape);\n      didCreateNewMesh = true;\n    }\n\n    scaleMesh(mesh, shape);\n    return didCreateNewMesh;\n  }\n\n  function update() {\n    const meshes = _meshes;\n    const shapeWorldPosition = _tempVec0;\n    const shapeWorldQuaternion = _tempQuat0;\n    let meshIndex = 0;\n\n    for (const body of world.bodies) {\n      for (let i = 0; i !== body.shapes.length; i++) {\n        const shape = body.shapes[i];\n        const didCreateNewMesh = updateMesh(meshIndex, shape);\n        const mesh = meshes[meshIndex];\n\n        if (mesh) {\n          // Get world position\n          body.quaternion.vmult(body.shapeOffsets[i], shapeWorldPosition);\n          body.position.vadd(shapeWorldPosition, shapeWorldPosition); // Get world quaternion\n\n          body.quaternion.mult(body.shapeOrientations[i], shapeWorldQuaternion); // Copy to meshes\n\n          mesh.position.copy(shapeWorldPosition);\n          mesh.quaternion.copy(shapeWorldQuaternion);\n          if (didCreateNewMesh && onInit instanceof Function) onInit(body, mesh, shape);\n          if (!didCreateNewMesh && onUpdate instanceof Function) onUpdate(body, mesh, shape);\n        }\n\n        meshIndex++;\n      }\n    }\n\n    for (let i = meshIndex; i < meshes.length; i++) {\n      const mesh = meshes[i];\n      if (mesh) scene.remove(mesh);\n    }\n\n    meshes.length = meshIndex;\n  }\n\n  return {\n    update\n  };\n}\n\nconst debugContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useDebugContext = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(debugContext);\n\nconst physicsContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst usePhysicsContext = () => {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(physicsContext);\n  if (!context) throw new Error('Physics context not found. @react-three/cannon & components can only be used within a Physics provider');\n  return context;\n};\n\nconst q$2 = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\nconst s$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1);\nconst v$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\nconst m$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nconst getMatrix = o => {\n  if (o instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh) {\n    o.getMatrixAt(parseInt(o.uuid.split('/')[1]), m$1);\n    return m$1;\n  }\n  return o.matrix;\n};\nfunction DebugProvider(_ref) {\n  let {\n    children,\n    color = 'black',\n    impl = CannonDebugger,\n    scale = 1\n  } = _ref;\n  const [{\n    bodies,\n    bodyMap\n  }] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    bodies: [],\n    bodyMap: {}\n  });\n  const {\n    refs\n  } = usePhysicsContext();\n  const [scene] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => new three__WEBPACK_IMPORTED_MODULE_2__.Scene());\n  const cannonDebuggerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(impl(scene, {\n    bodies\n  }, {\n    color,\n    scale\n  }));\n  (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.F)(() => {\n    for (const uuid in bodyMap) {\n      getMatrix(refs[uuid]).decompose(v$1, q$2, s$1);\n      bodyMap[uuid].position.copy(v$1);\n      bodyMap[uuid].quaternion.copy(q$2);\n    }\n    cannonDebuggerRef.current.update();\n  });\n  const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    add(uuid, props, type) {\n      const body = propsToBody({\n        props,\n        type,\n        uuid\n      });\n      bodies.push(body);\n      bodyMap[uuid] = body;\n    },\n    remove(uuid) {\n      const index = bodies.indexOf(bodyMap[uuid]);\n      if (index !== -1) bodies.splice(index, 1);\n      delete bodyMap[uuid];\n    }\n  }), [bodies, bodyMap]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(debugContext.Provider, {\n    value: api,\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"primitive\", {\n      object: scene\n    }), children]\n  });\n}\n\nconst temp = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\nfunction useForwardedRef(ref) {\n  const nullRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return ref && typeof ref !== 'function' ? ref : nullRef;\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction getUUID(ref, index) {\n  const suffix = index === undefined ? '' : `/${index}`;\n  if (typeof ref === 'function') return null;\n  return ref && ref.current && `${ref.current.uuid}${suffix}`;\n}\nconst e = new three__WEBPACK_IMPORTED_MODULE_2__.Euler();\nconst q$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\nconst quaternionToRotation = callback => {\n  return v => callback(e.setFromQuaternion(q$1.fromArray(v)).toArray());\n};\nlet incrementingId = 0;\nfunction subscribe(ref, worker, subscriptions, type, index, target) {\n  if (target === void 0) {\n    target = 'bodies';\n  }\n  return callback => {\n    const id = incrementingId++;\n    subscriptions[id] = {\n      [type]: callback\n    };\n    const uuid = getUUID(ref, index);\n    uuid && worker.subscribe({\n      props: {\n        id,\n        target,\n        type\n      },\n      uuid\n    });\n    return () => {\n      delete subscriptions[id];\n      worker.unsubscribe({\n        props: id\n      });\n    };\n  };\n}\nfunction prepare(object, _ref) {\n  let {\n    position = [0, 0, 0],\n    rotation = [0, 0, 0],\n    userData = {}\n  } = _ref;\n  object.userData = userData;\n  object.position.set(...position);\n  object.rotation.set(...rotation);\n  object.updateMatrix();\n}\nfunction setupCollision(events, _ref2, uuid) {\n  let {\n    onCollide,\n    onCollideBegin,\n    onCollideEnd\n  } = _ref2;\n  events[uuid] = {\n    collide: onCollide,\n    collideBegin: onCollideBegin,\n    collideEnd: onCollideEnd\n  };\n}\nfunction useBody(type, fn, argsFn, fwdRef, deps) {\n  if (fwdRef === void 0) {\n    fwdRef = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  const ref = useForwardedRef(fwdRef);\n  const {\n    events,\n    refs,\n    scaleOverrides,\n    subscriptions,\n    worker\n  } = usePhysicsContext();\n  const debugApi = useDebugContext();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    if (!ref.current) {\n      // When the reference isn't used we create a stub\n      // The body doesn't have a visual representation but can still be constrained\n      // Yes, this type may be technically incorrect\n      ref.current = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\n    }\n    const object = ref.current;\n    const currentWorker = worker;\n    const objectCount = object instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh ? (object.instanceMatrix.setUsage(three__WEBPACK_IMPORTED_MODULE_2__.DynamicDrawUsage), object.count) : 1;\n    const uuid = object instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh ? new Array(objectCount).fill(0).map((_, i) => `${object.uuid}/${i}`) : [object.uuid];\n    const props = object instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh ? uuid.map((id, i) => {\n      const props = fn(i);\n      prepare(temp, props);\n      object.setMatrixAt(i, temp.matrix);\n      object.instanceMatrix.needsUpdate = true;\n      refs[id] = object;\n      debugApi == null ? void 0 : debugApi.add(id, props, type);\n      setupCollision(events, props, id);\n      return {\n        ...props,\n        args: argsFn(props.args)\n      };\n    }) : uuid.map((id, i) => {\n      const props = fn(i);\n      prepare(object, props);\n      refs[id] = object;\n      debugApi == null ? void 0 : debugApi.add(id, props, type);\n      setupCollision(events, props, id);\n      return {\n        ...props,\n        args: argsFn(props.args)\n      };\n    });\n\n    // Register on mount, unregister on unmount\n    currentWorker.addBodies({\n      props: props.map(_ref3 => {\n        let {\n          onCollide,\n          onCollideBegin,\n          onCollideEnd,\n          ...serializableProps\n        } = _ref3;\n        return {\n          onCollide: Boolean(onCollide),\n          ...serializableProps\n        };\n      }),\n      type,\n      uuid\n    });\n    return () => {\n      uuid.forEach(id => {\n        delete refs[id];\n        debugApi == null ? void 0 : debugApi.remove(id);\n        delete events[id];\n      });\n      currentWorker.removeBodies({\n        uuid\n      });\n    };\n  }, deps);\n  const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const makeAtomic = (type, index) => {\n      const op = `set${capitalize(type)}`;\n      return {\n        set: value => {\n          const uuid = getUUID(ref, index);\n          uuid && worker[op]({\n            props: value,\n            uuid\n          });\n        },\n        subscribe: subscribe(ref, worker, subscriptions, type, index)\n      };\n    };\n    const makeQuaternion = index => {\n      const type = 'quaternion';\n      return {\n        copy: _ref4 => {\n          let {\n            w,\n            x,\n            y,\n            z\n          } = _ref4;\n          const uuid = getUUID(ref, index);\n          uuid && worker.setQuaternion({\n            props: [x, y, z, w],\n            uuid\n          });\n        },\n        set: (x, y, z, w) => {\n          const uuid = getUUID(ref, index);\n          uuid && worker.setQuaternion({\n            props: [x, y, z, w],\n            uuid\n          });\n        },\n        subscribe: subscribe(ref, worker, subscriptions, type, index)\n      };\n    };\n    const makeRotation = index => {\n      return {\n        copy: _ref5 => {\n          let {\n            x,\n            y,\n            z\n          } = _ref5;\n          const uuid = getUUID(ref, index);\n          uuid && worker.setRotation({\n            props: [x, y, z],\n            uuid\n          });\n        },\n        set: (x, y, z) => {\n          const uuid = getUUID(ref, index);\n          uuid && worker.setRotation({\n            props: [x, y, z],\n            uuid\n          });\n        },\n        subscribe: callback => {\n          const id = incrementingId++;\n          const target = 'bodies';\n          const type = 'quaternion';\n          const uuid = getUUID(ref, index);\n          subscriptions[id] = {\n            [type]: quaternionToRotation(callback)\n          };\n          uuid && worker.subscribe({\n            props: {\n              id,\n              target,\n              type\n            },\n            uuid\n          });\n          return () => {\n            delete subscriptions[id];\n            worker.unsubscribe({\n              props: id\n            });\n          };\n        }\n      };\n    };\n    const makeVec = (type, index) => {\n      const op = `set${capitalize(type)}`;\n      return {\n        copy: _ref6 => {\n          let {\n            x,\n            y,\n            z\n          } = _ref6;\n          const uuid = getUUID(ref, index);\n          uuid && worker[op]({\n            props: [x, y, z],\n            uuid\n          });\n        },\n        set: (x, y, z) => {\n          const uuid = getUUID(ref, index);\n          uuid && worker[op]({\n            props: [x, y, z],\n            uuid\n          });\n        },\n        subscribe: subscribe(ref, worker, subscriptions, type, index)\n      };\n    };\n    function makeApi(index) {\n      return {\n        allowSleep: makeAtomic('allowSleep', index),\n        angularDamping: makeAtomic('angularDamping', index),\n        angularFactor: makeVec('angularFactor', index),\n        angularVelocity: makeVec('angularVelocity', index),\n        applyForce(force, worldPoint) {\n          const uuid = getUUID(ref, index);\n          uuid && worker.applyForce({\n            props: [force, worldPoint],\n            uuid\n          });\n        },\n        applyImpulse(impulse, worldPoint) {\n          const uuid = getUUID(ref, index);\n          uuid && worker.applyImpulse({\n            props: [impulse, worldPoint],\n            uuid\n          });\n        },\n        applyLocalForce(force, localPoint) {\n          const uuid = getUUID(ref, index);\n          uuid && worker.applyLocalForce({\n            props: [force, localPoint],\n            uuid\n          });\n        },\n        applyLocalImpulse(impulse, localPoint) {\n          const uuid = getUUID(ref, index);\n          uuid && worker.applyLocalImpulse({\n            props: [impulse, localPoint],\n            uuid\n          });\n        },\n        applyTorque(torque) {\n          const uuid = getUUID(ref, index);\n          uuid && worker.applyTorque({\n            props: [torque],\n            uuid\n          });\n        },\n        collisionFilterGroup: makeAtomic('collisionFilterGroup', index),\n        collisionFilterMask: makeAtomic('collisionFilterMask', index),\n        collisionResponse: makeAtomic('collisionResponse', index),\n        fixedRotation: makeAtomic('fixedRotation', index),\n        isTrigger: makeAtomic('isTrigger', index),\n        linearDamping: makeAtomic('linearDamping', index),\n        linearFactor: makeVec('linearFactor', index),\n        mass: makeAtomic('mass', index),\n        material: makeAtomic('material', index),\n        position: makeVec('position', index),\n        quaternion: makeQuaternion(index),\n        rotation: makeRotation(index),\n        scaleOverride(scale) {\n          const uuid = getUUID(ref, index);\n          if (uuid) scaleOverrides[uuid] = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(...scale);\n        },\n        sleep() {\n          const uuid = getUUID(ref, index);\n          uuid && worker.sleep({\n            uuid\n          });\n        },\n        sleepSpeedLimit: makeAtomic('sleepSpeedLimit', index),\n        sleepTimeLimit: makeAtomic('sleepTimeLimit', index),\n        userData: makeAtomic('userData', index),\n        velocity: makeVec('velocity', index),\n        wakeUp() {\n          const uuid = getUUID(ref, index);\n          uuid && worker.wakeUp({\n            uuid\n          });\n        }\n      };\n    }\n    const cache = {};\n    return {\n      ...makeApi(undefined),\n      at: index => cache[index] || (cache[index] = makeApi(index))\n    };\n  }, []);\n  return [ref, api];\n}\nfunction makeTriplet(v) {\n  return v instanceof three__WEBPACK_IMPORTED_MODULE_2__.Vector3 ? [v.x, v.y, v.z] : v;\n}\nfunction usePlane(fn, fwdRef, deps) {\n  return useBody('Plane', fn, () => [], fwdRef, deps);\n}\nfunction useBox(fn, fwdRef, deps) {\n  const defaultBoxArgs = [1, 1, 1];\n  return useBody('Box', fn, function (args) {\n    if (args === void 0) {\n      args = defaultBoxArgs;\n    }\n    return args;\n  }, fwdRef, deps);\n}\nfunction useCylinder(fn, fwdRef, deps) {\n  return useBody('Cylinder', fn, function (args) {\n    if (args === void 0) {\n      args = [];\n    }\n    return args;\n  }, fwdRef, deps);\n}\nfunction useHeightfield(fn, fwdRef, deps) {\n  return useBody('Heightfield', fn, args => args, fwdRef, deps);\n}\nfunction useParticle(fn, fwdRef, deps) {\n  return useBody('Particle', fn, () => [], fwdRef, deps);\n}\nfunction useSphere(fn, fwdRef, deps) {\n  return useBody('Sphere', fn, function (args) {\n    if (args === void 0) {\n      args = [1];\n    }\n    if (!Array.isArray(args)) throw new Error('useSphere args must be an array');\n    return [args[0]];\n  }, fwdRef, deps);\n}\nfunction useTrimesh(fn, fwdRef, deps) {\n  return useBody('Trimesh', fn, args => args, fwdRef, deps);\n}\nfunction useConvexPolyhedron(fn, fwdRef, deps) {\n  return useBody('ConvexPolyhedron', fn, function (_temp) {\n    let [vertices, faces, normals, axes, boundingSphereRadius] = _temp === void 0 ? [] : _temp;\n    return [vertices && vertices.map(makeTriplet), faces, normals && normals.map(makeTriplet), axes && axes.map(makeTriplet), boundingSphereRadius];\n  }, fwdRef, deps);\n}\nfunction useCompoundBody(fn, fwdRef, deps) {\n  return useBody('Compound', fn, args => args, fwdRef, deps);\n}\nfunction useConstraint(type, bodyA, bodyB, optns, deps) {\n  if (optns === void 0) {\n    optns = {};\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  const {\n    worker\n  } = usePhysicsContext();\n  const uuid = three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID();\n  const refA = useForwardedRef(bodyA);\n  const refB = useForwardedRef(bodyB);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (refA.current && refB.current) {\n      worker.addConstraint({\n        props: [refA.current.uuid, refB.current.uuid, optns],\n        type,\n        uuid\n      });\n      return () => worker.removeConstraint({\n        uuid\n      });\n    }\n  }, deps);\n  const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const enableDisable = {\n      disable: () => worker.disableConstraint({\n        uuid\n      }),\n      enable: () => worker.enableConstraint({\n        uuid\n      })\n    };\n    if (type === 'Hinge') {\n      return {\n        ...enableDisable,\n        disableMotor: () => worker.disableConstraintMotor({\n          uuid\n        }),\n        enableMotor: () => worker.enableConstraintMotor({\n          uuid\n        }),\n        setMotorMaxForce: value => worker.setConstraintMotorMaxForce({\n          props: value,\n          uuid\n        }),\n        setMotorSpeed: value => worker.setConstraintMotorSpeed({\n          props: value,\n          uuid\n        })\n      };\n    }\n    return enableDisable;\n  }, deps);\n  return [refA, refB, api];\n}\nfunction usePointToPointConstraint(bodyA, bodyB, optns, deps) {\n  if (bodyA === void 0) {\n    bodyA = null;\n  }\n  if (bodyB === void 0) {\n    bodyB = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  return useConstraint('PointToPoint', bodyA, bodyB, optns, deps);\n}\nfunction useConeTwistConstraint(bodyA, bodyB, optns, deps) {\n  if (bodyA === void 0) {\n    bodyA = null;\n  }\n  if (bodyB === void 0) {\n    bodyB = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  return useConstraint('ConeTwist', bodyA, bodyB, optns, deps);\n}\nfunction useDistanceConstraint(bodyA, bodyB, optns, deps) {\n  if (bodyA === void 0) {\n    bodyA = null;\n  }\n  if (bodyB === void 0) {\n    bodyB = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  return useConstraint('Distance', bodyA, bodyB, optns, deps);\n}\nfunction useHingeConstraint(bodyA, bodyB, optns, deps) {\n  if (bodyA === void 0) {\n    bodyA = null;\n  }\n  if (bodyB === void 0) {\n    bodyB = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  return useConstraint('Hinge', bodyA, bodyB, optns, deps);\n}\nfunction useLockConstraint(bodyA, bodyB, optns, deps) {\n  if (bodyA === void 0) {\n    bodyA = null;\n  }\n  if (bodyB === void 0) {\n    bodyB = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  return useConstraint('Lock', bodyA, bodyB, optns, deps);\n}\nfunction useSpring(bodyA, bodyB, optns, deps) {\n  if (bodyA === void 0) {\n    bodyA = null;\n  }\n  if (bodyB === void 0) {\n    bodyB = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  const {\n    worker\n  } = usePhysicsContext();\n  const [uuid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID());\n  const refA = useForwardedRef(bodyA);\n  const refB = useForwardedRef(bodyB);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (refA.current && refB.current) {\n      worker.addSpring({\n        props: [refA.current.uuid, refB.current.uuid, optns],\n        uuid\n      });\n      return () => {\n        worker.removeSpring({\n          uuid\n        });\n      };\n    }\n  }, deps);\n  const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    setDamping: value => worker.setSpringDamping({\n      props: value,\n      uuid\n    }),\n    setRestLength: value => worker.setSpringRestLength({\n      props: value,\n      uuid\n    }),\n    setStiffness: value => worker.setSpringStiffness({\n      props: value,\n      uuid\n    })\n  }), deps);\n  return [refA, refB, api];\n}\nfunction useRay(mode, options, callback, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  const {\n    worker,\n    events\n  } = usePhysicsContext();\n  const [uuid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID());\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    events[uuid] = {\n      rayhit: callback\n    };\n    worker.addRay({\n      props: {\n        ...options,\n        mode\n      },\n      uuid\n    });\n    return () => {\n      worker.removeRay({\n        uuid\n      });\n      delete events[uuid];\n    };\n  }, deps);\n}\nfunction useRaycastClosest(options, callback, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  useRay('Closest', options, callback, deps);\n}\nfunction useRaycastAny(options, callback, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  useRay('Any', options, callback, deps);\n}\nfunction useRaycastAll(options, callback, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  useRay('All', options, callback, deps);\n}\nfunction isString(v) {\n  return typeof v === 'string';\n}\nfunction useRaycastVehicle(fn, fwdRef, deps) {\n  if (fwdRef === void 0) {\n    fwdRef = null;\n  }\n  if (deps === void 0) {\n    deps = [];\n  }\n  const ref = useForwardedRef(fwdRef);\n  const {\n    worker,\n    subscriptions\n  } = usePhysicsContext();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    if (!ref.current) {\n      // When the reference isn't used we create a stub\n      // The body doesn't have a visual representation but can still be constrained\n      // Yes, this type may be technically incorrect\n      ref.current = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\n    }\n    const currentWorker = worker;\n    const uuid = ref.current.uuid;\n    const {\n      chassisBody,\n      indexForwardAxis = 2,\n      indexRightAxis = 0,\n      indexUpAxis = 1,\n      wheelInfos,\n      wheels\n    } = fn();\n    const chassisBodyUUID = getUUID(chassisBody);\n    const wheelUUIDs = wheels.map(ref => getUUID(ref));\n    if (!chassisBodyUUID || !wheelUUIDs.every(isString)) return;\n    currentWorker.addRaycastVehicle({\n      props: [chassisBodyUUID, wheelUUIDs, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis],\n      uuid\n    });\n    return () => {\n      currentWorker.removeRaycastVehicle({\n        uuid\n      });\n    };\n  }, deps);\n  const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    return {\n      applyEngineForce(value, wheelIndex) {\n        const uuid = getUUID(ref);\n        uuid && worker.applyRaycastVehicleEngineForce({\n          props: [value, wheelIndex],\n          uuid\n        });\n      },\n      setBrake(brake, wheelIndex) {\n        const uuid = getUUID(ref);\n        uuid && worker.setRaycastVehicleBrake({\n          props: [brake, wheelIndex],\n          uuid\n        });\n      },\n      setSteeringValue(value, wheelIndex) {\n        const uuid = getUUID(ref);\n        uuid && worker.setRaycastVehicleSteeringValue({\n          props: [value, wheelIndex],\n          uuid\n        });\n      },\n      sliding: {\n        subscribe: subscribe(ref, worker, subscriptions, 'sliding', undefined, 'vehicles')\n      }\n    };\n  }, deps);\n  return [ref, api];\n}\nfunction useContactMaterial(materialA, materialB, options, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  const {\n    worker\n  } = usePhysicsContext();\n  const [uuid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID());\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.addContactMaterial({\n      props: [materialA, materialB, options],\n      uuid\n    });\n    return () => {\n      worker.removeContactMaterial({\n        uuid\n      });\n    };\n  }, deps);\n}\n\nconst v = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\nconst s = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1);\nconst q = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\nconst m = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nfunction apply(index, positions, quaternions, scale, object) {\n  if (scale === void 0) {\n    scale = s;\n  }\n  if (index !== undefined) {\n    m.compose(v.fromArray(positions, index * 3), q.fromArray(quaternions, index * 4), scale);\n    if (object) {\n      object.matrixAutoUpdate = false;\n      object.matrix.copy(m);\n    }\n    return m;\n  }\n  return m.identity();\n}\nconst unique = () => {\n  const values = [];\n  return value => values.includes(value) ? false : !!values.push(value);\n};\nfunction PhysicsProvider(_ref) {\n  let {\n    allowSleep = false,\n    axisIndex = 0,\n    broadphase = 'Naive',\n    children,\n    defaultContactMaterial = {\n      contactEquationStiffness: 1e6\n    },\n    frictionGravity = null,\n    gravity = [0, -9.81, 0],\n    isPaused = false,\n    iterations = 5,\n    maxSubSteps = 10,\n    quatNormalizeFast = false,\n    quatNormalizeSkip = 0,\n    shouldInvalidate = true,\n    size = 1000,\n    solver = 'GS',\n    stepSize = 1 / 60,\n    tolerance = 0.001\n  } = _ref;\n  const {\n    invalidate\n  } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.D)();\n  const [{\n    bodies,\n    events,\n    refs,\n    scaleOverrides,\n    subscriptions,\n    worker\n  }] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => ({\n    bodies: {},\n    events: {},\n    refs: {},\n    scaleOverrides: {},\n    subscriptions: {},\n    worker: new CannonWorkerAPI({\n      allowSleep,\n      axisIndex,\n      broadphase,\n      defaultContactMaterial,\n      frictionGravity,\n      gravity,\n      iterations,\n      quatNormalizeFast,\n      quatNormalizeSkip,\n      size,\n      solver,\n      tolerance\n    })\n  }));\n  let timeSinceLastCalled = 0;\n  const loop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((_, delta) => {\n    if (isPaused) return;\n    timeSinceLastCalled += delta;\n    worker.step({\n      maxSubSteps,\n      stepSize,\n      timeSinceLastCalled\n    });\n    timeSinceLastCalled = 0;\n  }, [isPaused, maxSubSteps, stepSize]);\n  const collideHandler = _ref2 => {\n    var _events$target;\n    let {\n      body,\n      contact: {\n        bi,\n        bj,\n        ...contactRest\n      },\n      target,\n      ...rest\n    } = _ref2;\n    const cb = (_events$target = events[target]) == null ? void 0 : _events$target.collide;\n    cb && cb({\n      body: refs[body],\n      contact: {\n        bi: refs[bi],\n        bj: refs[bj],\n        ...contactRest\n      },\n      target: refs[target],\n      ...rest\n    });\n  };\n  const collideBeginHandler = _ref3 => {\n    var _events$bodyA, _events$bodyB;\n    let {\n      bodyA,\n      bodyB\n    } = _ref3;\n    const cbA = (_events$bodyA = events[bodyA]) == null ? void 0 : _events$bodyA.collideBegin;\n    cbA && cbA({\n      body: refs[bodyB],\n      op: 'event',\n      target: refs[bodyA],\n      type: 'collideBegin'\n    });\n    const cbB = (_events$bodyB = events[bodyB]) == null ? void 0 : _events$bodyB.collideBegin;\n    cbB && cbB({\n      body: refs[bodyA],\n      op: 'event',\n      target: refs[bodyB],\n      type: 'collideBegin'\n    });\n  };\n  const collideEndHandler = _ref4 => {\n    var _events$bodyA2, _events$bodyB2;\n    let {\n      bodyA,\n      bodyB\n    } = _ref4;\n    const cbA = (_events$bodyA2 = events[bodyA]) == null ? void 0 : _events$bodyA2.collideEnd;\n    cbA && cbA({\n      body: refs[bodyB],\n      op: 'event',\n      target: refs[bodyA],\n      type: 'collideEnd'\n    });\n    const cbB = (_events$bodyB2 = events[bodyB]) == null ? void 0 : _events$bodyB2.collideEnd;\n    cbB && cbB({\n      body: refs[bodyA],\n      op: 'event',\n      target: refs[bodyB],\n      type: 'collideEnd'\n    });\n  };\n  const frameHandler = _ref5 => {\n    let {\n      active,\n      bodies: uuids = [],\n      observations,\n      positions,\n      quaternions\n    } = _ref5;\n    for (let i = 0; i < uuids.length; i++) {\n      bodies[uuids[i]] = i;\n    }\n    observations.forEach(_ref6 => {\n      let [id, value, type] = _ref6;\n      const subscription = subscriptions[id] || {};\n      const cb = subscription[type];\n      // HELP: We clearly know the type of the callback, but typescript can't deal with it\n      cb && cb(value);\n    });\n    if (!active) return;\n    for (const ref of Object.values(refs).filter(unique())) {\n      if (ref instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh) {\n        for (let i = 0; i < ref.count; i++) {\n          const uuid = `${ref.uuid}/${i}`;\n          const index = bodies[uuid];\n          if (index !== undefined) {\n            ref.setMatrixAt(i, apply(index, positions, quaternions, scaleOverrides[uuid]));\n            ref.instanceMatrix.needsUpdate = true;\n          }\n        }\n      } else {\n        const scale = scaleOverrides[ref.uuid] || ref.scale;\n        apply(bodies[ref.uuid], positions, quaternions, scale, ref);\n      }\n    }\n    if (shouldInvalidate) {\n      invalidate();\n    }\n  };\n  const rayhitHandler = _ref7 => {\n    var _events$uuid;\n    let {\n      body,\n      ray: {\n        uuid,\n        ...rayRest\n      },\n      ...rest\n    } = _ref7;\n    const cb = (_events$uuid = events[uuid]) == null ? void 0 : _events$uuid.rayhit;\n    cb && cb({\n      body: body ? refs[body] : null,\n      ray: {\n        uuid,\n        ...rayRest\n      },\n      ...rest\n    });\n  };\n\n  // Run loop *after* all the physics objects have ran theirs!\n  // Otherwise the buffers will be invalidated by the browser\n  (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.F)(loop);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.connect();\n    worker.init();\n    worker.on('collide', collideHandler);\n    worker.on('collideBegin', collideBeginHandler);\n    worker.on('collideEnd', collideEndHandler);\n    worker.on('frame', frameHandler);\n    worker.on('rayhit', rayhitHandler);\n    return () => {\n      worker.terminate();\n      worker.removeAllListeners();\n    };\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.axisIndex = axisIndex;\n  }, [axisIndex]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.broadphase = broadphase;\n  }, [broadphase]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.gravity = gravity;\n  }, [gravity]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.iterations = iterations;\n  }, [iterations]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    worker.tolerance = tolerance;\n  }, [tolerance]);\n  const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    bodies,\n    events,\n    refs,\n    scaleOverrides,\n    subscriptions,\n    worker\n  }), [bodies, events, refs, subscriptions, worker]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(physicsContext.Provider, {\n    value: value,\n    children: children\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2Nhbm5vbi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Q7QUFDZ047QUFDbEo7QUFDeEU7O0FBRTlDLGNBQWM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUEsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyx5QkFBeUI7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsWUFBWTtBQUMxRTtBQUNBLDhEQUE4RCxZQUFZO0FBQzFFO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsWUFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGdDQUFnQztBQUNsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQjs7QUFFbEIsa0JBQWtCOztBQUVsQjtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTs7QUFFQSxnQkFBZ0IsT0FBTztBQUN2QixrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCOztBQUVsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLE1BQU0sYUFBYTs7O0FBR25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdEQUFnRCxrQkFBa0IsUUFBUSxhQUFhLFFBQVEsZ0JBQWdCO0FBQy9HOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLE9BQU87QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0I7O0FBRWxCLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixPQUFPO0FBQ3ZCLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5COztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsTUFBTSxhQUFhOzs7QUFHbkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFFBQVE7QUFDUixNQUFNLGFBQWE7OztBQUduQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE1BQU07O0FBRU47O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLGdCQUFnQjtBQUN6RDs7QUFFQTtBQUNBLFFBQVE7QUFDUixNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxjQUFjLE9BQU8sR0FBRyxPQUFPLEdBQUcsT0FBTztBQUN6QztBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7O0FBRTFCLDZDQUE2Qzs7QUFFN0Msb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCOztBQUUxQiw2Q0FBNkM7O0FBRTdDLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sT0FBTztBQUNiOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0M7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7O0FBRUE7QUFDQSwyRkFBMkY7O0FBRTNGO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnREFBZ0QsT0FBTztBQUN2RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxjQUFjLE9BQU8sR0FBRyxPQUFPLEdBQUcsT0FBTyxHQUFHLE9BQU87QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCOztBQUV0QjtBQUNBLDhDQUE4Qzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFFQUFxRTs7QUFFbEc7QUFDQTtBQUNBLE1BQU07QUFDTixpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTs7QUFFOUUsMENBQTBDOztBQUUxQywyRUFBMkU7QUFDM0U7O0FBRUE7O0FBRUE7QUFDQSx1Q0FBdUMsT0FBTztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHVKQUF1SjtBQUNqSzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQixtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLDBFQUEwRSxVQUFVO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLHFEQUFxRCxVQUFVO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0Esb0VBQW9FLFVBQVU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsaUVBQWlFLFVBQVU7QUFDM0U7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsaUJBQWlCO0FBQzFFLDRDQUE0Qyw2QkFBNkI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBLDZCQUE2Qjs7QUFFN0I7QUFDQSxnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7O0FBRUEsc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsaURBQWlEOztBQUVqRCxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0Esc0JBQXNCLDBCQUEwQjtBQUNoRDtBQUNBLG9DQUFvQyxrQkFBa0I7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDLEVBQUUsV0FBVyxhQUFhOztBQUVoRSx3QkFBd0IsMEJBQTBCO0FBQ2xELG9DQUFvQyxpQkFBaUIsV0FBVywyQ0FBMkM7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLDJCQUEyQjtBQUNsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxvQkFBb0Isc0NBQXNDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkVBQTJFOztBQUUzRSxzQkFBc0IsZUFBZTtBQUNyQyxpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLHNCQUFzQiwrQkFBK0I7QUFDckQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixlQUFlO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esc0JBQXNCLCtCQUErQjtBQUNyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR04scUJBQXFCLGlDQUFpQztBQUN0RDtBQUNBOztBQUVBLHVCQUF1QixpQ0FBaUM7QUFDeEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7O0FBRWpDLHVCQUF1QiwyQkFBMkI7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7O0FBRUEsb0JBQW9CLHdCQUF3QjtBQUM1QyxzQkFBc0IsMkJBQTJCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOzs7QUFHQTs7QUFFQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFOztBQUVoRSw0RUFBNEU7O0FBRTVFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkMsNERBQTREOztBQUU1RDtBQUNBLHNDQUFzQyxPQUFPLGFBQWEsUUFBUTtBQUNsRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixlQUFlO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0IsNEJBQTRCO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQiwwQkFBMEI7QUFDOUM7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLG9CQUFvQjtBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0Esc0JBQXNCLE9BQU87QUFDN0I7QUFDQTtBQUNBLFFBQVE7OztBQUdSLHNCQUFzQiw2QkFBNkI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwyQkFBMkI7QUFDcEQ7QUFDQTtBQUNBLGFBQWE7O0FBRWIsTUFBTTs7O0FBR047QUFDQSxzQkFBc0IsT0FBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0Esb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLE9BQU87QUFDM0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDBCQUEwQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUM7O0FBRXZDO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsdUJBQXVCO0FBQ3ZCLFFBQVE7QUFDUixzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCLCtCQUErQjs7QUFFL0I7QUFDQSwwQ0FBMEM7O0FBRTFDLHdEQUF3RDs7QUFFeEQ7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0EsMENBQTBDOztBQUUxQyx3Q0FBd0M7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3RUFBd0U7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR04sNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0Esb0NBQW9DOztBQUVwQyw2Q0FBNkM7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtEQUFrRDs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFFQUFxRTs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStEOztBQUUvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBLGlDQUFpQzs7QUFFakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0Q0FBNEMsT0FBTztBQUNuRDs7QUFFQTtBQUNBLGtCQUFrQjtBQUNsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1QyxrQ0FBa0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0Qjs7QUFFNUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCOztBQUV2QixzREFBc0Q7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLFdBQVc7QUFDbkMsMEJBQTBCLFdBQVc7QUFDckM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVOzs7QUFHVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVOzs7QUFHVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixrQ0FBa0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOEJBQThCOztBQUU5QixpQ0FBaUM7O0FBRWpDLG1DQUFtQzs7QUFFbkMseUNBQXlDOztBQUV6QztBQUNBO0FBQ0EsUUFBUTs7O0FBR1IsK0NBQStDOztBQUUvQztBQUNBO0FBQ0EsUUFBUTtBQUNSOzs7QUFHQTtBQUNBLHFEQUFxRDs7QUFFckQ7QUFDQTtBQUNBOztBQUVBLHNCQUFzQiwyQ0FBMkM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEOztBQUV4RDtBQUNBLG1CQUFtQjs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBDQUEwQyxvQ0FBb0M7QUFDOUU7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTs7QUFFQSx3REFBd0Q7O0FBRXhELG1DQUFtQzs7QUFFbkMsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQzs7QUFFL0M7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0EsMERBQTBEOztBQUUxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0scUVBQXFFO0FBQzNFOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyw2QkFBNkI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZCxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QywrQkFBK0I7QUFDN0U7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7O0FBRTFCO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBOztBQUVBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DOztBQUVwQztBQUNBLGlDQUFpQzs7QUFFakM7QUFDQSxRQUFRO0FBQ1IsOENBQThDO0FBQzlDLFFBQVE7OztBQUdSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DOztBQUVwQzs7QUFFQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsK0JBQStCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw2QkFBNkI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssR0FBRzs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFVBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsaURBQWlELHlCQUF5QjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNCQUFzQjtBQUM3RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkMsc0JBQXNCLHNCQUFzQjtBQUM1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDLHNCQUFzQixzQkFBc0I7QUFDNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsMEJBQTBCOztBQUUxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCOztBQUU1Qjs7QUFFQSx3QkFBd0IsWUFBWTtBQUNwQywwQkFBMEIsWUFBWTtBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxHQUFHLEdBQUcsR0FBRyxHQUFHLHlCQUF5QjtBQUNuRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQzs7QUFFaEM7O0FBRUEsb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047O0FBRUEsb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLG1GQUFtRjs7QUFFbkY7QUFDQTtBQUNBLCtFQUErRTs7QUFFL0U7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCOztBQUV2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLG1GQUFtRjs7QUFFbkY7QUFDQTtBQUNBLCtFQUErRTs7QUFFL0U7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCOztBQUV2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHNCQUFzQjtBQUMxQzs7QUFFQSxzQkFBc0IscUJBQXFCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDOztBQUVoQztBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFROzs7QUFHUixzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCLGlDQUFpQzs7QUFFakMseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiw2Q0FBNkMsU0FBUztBQUN6RTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsZ0NBQWdDOztBQUVoQzs7QUFFQSxvQkFBb0IsNkJBQTZCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7QUFDbEQ7QUFDQTs7QUFFQSxvQkFBb0IsNkJBQTZCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsS0FBSztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0IscUJBQXFCO0FBQ3pDLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IscUJBQXFCO0FBQ3pDLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7O0FBRWI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxjQUFjOztBQUVkO0FBQ0EsY0FBYyxzQ0FBc0M7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0NBQWtDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixhQUFhLGlFQUFpRTtBQUM5RSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsV0FBVztBQUN0QixXQUFXLGVBQWU7QUFDMUIsV0FBVyxrREFBa0Q7QUFDN0QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCOztBQUVsQixrQkFBa0I7O0FBRWxCO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBOztBQUVBLGdCQUFnQixPQUFPO0FBQ3ZCLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7O0FBRWxCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsTUFBTSxhQUFhOzs7QUFHbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdELGtCQUFrQixRQUFRLGFBQWEsUUFBUSxnQkFBZ0I7QUFDL0c7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0Esb0JBQW9CLDRCQUE0QjtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQjs7QUFFbEIsa0JBQWtCOztBQUVsQjtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLE9BQU87QUFDdkIsa0JBQWtCLE9BQU87QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjs7QUFFbkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxNQUFNLGFBQWE7OztBQUduQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsUUFBUTtBQUNSLE1BQU0sYUFBYTs7O0FBR25COztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsTUFBTTs7QUFFTjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEOztBQUVBO0FBQ0EsUUFBUTtBQUNSLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLGNBQWMsT0FBTyxHQUFHLE9BQU8sR0FBRyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCOztBQUUxQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsb0JBQW9CLG1CQUFtQjtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUIsNkNBQTZDOztBQUU3QyxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7O0FBRTFCLDZDQUE2Qzs7QUFFN0Msb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxPQUFPO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDs7QUFFQTtBQUNBLDJGQUEyRjs7QUFFM0Y7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsY0FBYyxPQUFPLEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjs7QUFFdEI7QUFDQSw4Q0FBOEM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixxRUFBcUU7O0FBRWxHO0FBQ0E7QUFDQSxNQUFNO0FBQ04saUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEU7O0FBRTlFLDBDQUEwQzs7QUFFMUMsMkVBQTJFO0FBQzNFOztBQUVBOztBQUVBO0FBQ0EsdUNBQXVDLE9BQU87QUFDOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1SkFBdUo7QUFDaks7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEIsbURBQW1EOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSwwRUFBMEUsVUFBVTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxxREFBcUQsVUFBVTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLG9FQUFvRSxVQUFVO0FBQzlFO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLGlFQUFpRSxVQUFVO0FBQzNFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlEQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDRDQUE0QyxPQUFPO0FBQ25EOztBQUVBO0FBQ0Esa0JBQWtCO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDLGtDQUFrQztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCOztBQUU1Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCLG9EQUFvRDs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsV0FBVztBQUNuQywwQkFBMEIsV0FBVztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7OztBQUdWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7OztBQUdWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMERBQTBEOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLGtDQUFrQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEI7O0FBRTlCLGlDQUFpQzs7QUFFakMsbUNBQW1DOztBQUVuQyx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQSxRQUFROzs7QUFHUiwrQ0FBK0M7O0FBRS9DO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7OztBQUdBO0FBQ0EsaURBQWlEOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLDJDQUEyQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7O0FBRXREO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLG9DQUFvQztBQUM5RTtBQUNBLDhDQUE4QztBQUM5QztBQUNBOztBQUVBLHNEQUFzRDs7QUFFdEQsaUNBQWlDOztBQUVqQyw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDOztBQUUvQztBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQSxzREFBc0Q7O0FBRXREO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxRUFBcUU7QUFDM0U7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTs7QUFFWixZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXOztBQUVYOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHdCQUF3QjtBQUM1Qjs7QUFFQSx3QkFBd0Isb0RBQWlCO0FBQ3pDO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBOztBQUVBOztBQUVBOztBQUVBLDhCQUE4QixpREFBYzs7QUFFNUMsMkJBQTJCLDhDQUFXOztBQUV0Qyw2QkFBNkIsZ0RBQWEsa0JBQWtCOzs7QUFHNUQ7O0FBRUE7QUFDQSx5QkFBeUIsaURBQWMsSUFBSTs7QUFFM0M7O0FBRUEsb0JBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLHlEQUFzQixpQkFBaUI7O0FBRWpGOztBQUVBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTs7QUFFQSxzQkFBc0IscUJBQXFCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixpREFBYztBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLHlEQUFzQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixpREFBYztBQUN2QyxzQ0FBc0M7O0FBRXRDO0FBQ0E7O0FBRUEscUJBQXFCLDRCQUE0QjtBQUNqRCx1QkFBdUIsZ0NBQWdDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyx5REFBc0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsdUNBQUk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVDQUFJO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQix1Q0FBSTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsdUNBQUk7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLG1EQUFnQjtBQUMvQyxxQkFBcUIsdUNBQUk7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1Q0FBSTtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVDQUFJO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUNBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLCtCQUErQixpREFBYyw2REFBNkQsOENBQVcsMERBQTBELGdEQUFhO0FBQzVMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCLDBCQUEwQjtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFOztBQUV0RSxpRkFBaUY7O0FBRWpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDLG9EQUFhO0FBQy9DLDhCQUE4QixpREFBVTs7QUFFeEMsb0NBQW9DLG9EQUFhO0FBQ2pEO0FBQ0Esa0JBQWtCLGlEQUFVO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsNkNBQVk7QUFDNUIsZ0JBQWdCLDBDQUFPO0FBQ3ZCLGdCQUFnQiwwQ0FBTztBQUN2QixnQkFBZ0IsMENBQU87QUFDdkI7QUFDQSxtQkFBbUIsZ0RBQWE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQUksK0NBQVE7QUFDZjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0osa0JBQWtCLCtDQUFRLFdBQVcsd0NBQUs7QUFDMUMsNEJBQTRCLDZDQUFNO0FBQ2xDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRSxxREFBUTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLDhDQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHNCQUFzQix1REFBSTtBQUMxQjtBQUNBLDRCQUE0QixzREFBRztBQUMvQjtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsaUJBQWlCLDJDQUFRO0FBQ3pCO0FBQ0Esa0JBQWtCLDZDQUFNO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxNQUFNO0FBQ3REO0FBQ0Esa0NBQWtDLGlCQUFpQixFQUFFLE9BQU87QUFDNUQ7QUFDQSxjQUFjLHdDQUFLO0FBQ25CLGdCQUFnQiw2Q0FBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFLHNEQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDJDQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxnREFBYSxtQ0FBbUMsbURBQWdCO0FBQzFHLG1DQUFtQyxnREFBYSxtREFBbUQsWUFBWSxHQUFHLEVBQUU7QUFDcEgsb0NBQW9DLGdEQUFhO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNILGNBQWMsOENBQU87QUFDckI7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQkFBaUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLDBDQUFPO0FBQ3RELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixlQUFlLDRDQUFTO0FBQ3hCO0FBQ0E7QUFDQSxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNILGNBQWMsOENBQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixpQkFBaUIsK0NBQVEsT0FBTyw0Q0FBUztBQUN6QztBQUNBO0FBQ0EsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRztBQUNILGNBQWMsOENBQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixpQkFBaUIsK0NBQVEsT0FBTyw0Q0FBUztBQUN6QyxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUUsc0RBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkNBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSCxjQUFjLDhDQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixpQkFBaUIsK0NBQVEsT0FBTyw0Q0FBUztBQUN6QyxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQSxjQUFjLDBDQUFPO0FBQ3JCLGNBQWMsMENBQU87QUFDckIsY0FBYyw2Q0FBWTtBQUMxQixjQUFjLDBDQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJLEVBQUUscURBQVE7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsSUFBSSwrQ0FBUTtBQUNmLGNBQWM7QUFDZCxjQUFjO0FBQ2QsWUFBWTtBQUNaLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsZUFBZSxrREFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHlCQUF5QixnREFBYTtBQUN0Qyx3QkFBd0IsZUFBZTtBQUN2QywwQkFBMEIsU0FBUyxHQUFHLEVBQUU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLEVBQUUscURBQVE7QUFDVixFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFTO0FBQ1g7QUFDQSxHQUFHO0FBQ0gsRUFBRSxnREFBUztBQUNYO0FBQ0EsR0FBRztBQUNILEVBQUUsZ0RBQVM7QUFDWDtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFTO0FBQ1g7QUFDQSxHQUFHO0FBQ0gsRUFBRSxnREFBUztBQUNYO0FBQ0EsR0FBRztBQUNILGdCQUFnQiw4Q0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsc0JBQXNCLHNEQUFHO0FBQ3pCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRTJZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25pcGVyLWFpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9jYW5ub24vZGlzdC9pbmRleC5qcz81ZWQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUZyYW1lLCB1c2VUaHJlZSB9IGZyb20gJ0ByZWFjdC10aHJlZS9maWJlcic7XG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCwgU3BoZXJlR2VvbWV0cnksIEJveEdlb21ldHJ5LCBQbGFuZUdlb21ldHJ5LCBNZXNoLCBDeWxpbmRlckdlb21ldHJ5LCBCdWZmZXJHZW9tZXRyeSwgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSwgUXVhdGVybmlvbiBhcyBRdWF0ZXJuaW9uJDIsIFZlY3RvcjMsIE1hdHJpeDQsIFNjZW5lLCBJbnN0YW5jZWRNZXNoLCBPYmplY3QzRCwgRXVsZXIsIE1hdGhVdGlscywgRHluYW1pY0RyYXdVc2FnZSB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeHMsIGpzeCB9IGZyb20gJ3JlYWN0L2pzeC1ydW50aW1lJztcblxudmFyIGV2ZW50cyA9IHtleHBvcnRzOiB7fX07XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGw7XG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfTtcblxudmFyIFJlZmxlY3RPd25LZXlzO1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5cztcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5ldmVudHMuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbmV2ZW50cy5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9XG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cblxudmFyIEV2ZW50RW1pdHRlciQxID0gZXZlbnRzLmV4cG9ydHM7XG5cbmZ1bmN0aW9uIGRlY29kZUJhc2U2NChiYXNlNjQsIGVuYWJsZVVuaWNvZGUpIHtcbiAgICB2YXIgYmluYXJ5U3RyaW5nID0gYXRvYihiYXNlNjQpO1xuICAgIGlmIChlbmFibGVVbmljb2RlKSB7XG4gICAgICAgIHZhciBiaW5hcnlWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5U3RyaW5nLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gYmluYXJ5U3RyaW5nLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgYmluYXJ5Vmlld1tpXSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50MTZBcnJheShiaW5hcnlWaWV3LmJ1ZmZlcikpO1xuICAgIH1cbiAgICByZXR1cm4gYmluYXJ5U3RyaW5nO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwoYmFzZTY0LCBzb3VyY2VtYXBBcmcsIGVuYWJsZVVuaWNvZGVBcmcpIHtcbiAgICB2YXIgc291cmNlbWFwID0gc291cmNlbWFwQXJnID09PSB1bmRlZmluZWQgPyBudWxsIDogc291cmNlbWFwQXJnO1xuICAgIHZhciBlbmFibGVVbmljb2RlID0gZW5hYmxlVW5pY29kZUFyZyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBlbmFibGVVbmljb2RlQXJnO1xuICAgIHZhciBzb3VyY2UgPSBkZWNvZGVCYXNlNjQoYmFzZTY0LCBlbmFibGVVbmljb2RlKTtcbiAgICB2YXIgc3RhcnQgPSBzb3VyY2UuaW5kZXhPZignXFxuJywgMTApICsgMTtcbiAgICB2YXIgYm9keSA9IHNvdXJjZS5zdWJzdHJpbmcoc3RhcnQpICsgKHNvdXJjZW1hcCA/ICdcXC9cXC8jIHNvdXJjZU1hcHBpbmdVUkw9JyArIHNvdXJjZW1hcCA6ICcnKTtcbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtib2R5XSwgeyB0eXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcgfSk7XG4gICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2U2NFdvcmtlckZhY3RvcnkoYmFzZTY0LCBzb3VyY2VtYXBBcmcsIGVuYWJsZVVuaWNvZGVBcmcpIHtcbiAgICB2YXIgdXJsO1xuICAgIHJldHVybiBmdW5jdGlvbiBXb3JrZXJGYWN0b3J5KG9wdGlvbnMpIHtcbiAgICAgICAgdXJsID0gdXJsIHx8IGNyZWF0ZVVSTChiYXNlNjQsIHNvdXJjZW1hcEFyZywgZW5hYmxlVW5pY29kZUFyZyk7XG4gICAgICAgIHJldHVybiBuZXcgV29ya2VyKHVybCwgb3B0aW9ucyk7XG4gICAgfTtcbn1cblxudmFyIFdvcmtlckZhY3RvcnkgPSBjcmVhdGVCYXNlNjRXb3JrZXJGYWN0b3J5KCdMeW9nY205c2JIVndMWEJzZFdkcGJpMTNaV0l0ZDI5eWEyVnlMV3h2WVdSbGNpQXFMd29vWm5WdVkzUnBiMjRnS0NrZ2V3b2dJQ2QxYzJVZ2MzUnlhV04wSnpzS0NpQWdMeW9xQ2lBZ0lDb2dVbVZqYjNKa2N5QjNhR0YwSUc5aWFtVmpkSE1nWVhKbElHTnZiR3hwWkdsdVp5QjNhWFJvSUdWaFkyZ2diM1JvWlhJS0lDQWdLaThLQ2lBZ0x5b3FDaUFnSUNvZ1FTQXplRE1nYldGMGNtbDRMZ29nSUNBcUlFRjFkR2h2Y21Wa0lHSjVJSHRBYkdsdWF5Qm9kSFJ3T2k4dloybDBhSFZpTG1OdmJTOXpZMmgwWlhCd1pTOGdjMk5vZEdWd2NHVjlDaUFnSUNvdkNpQWdZMnhoYzNNZ1RXRjBNeUI3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRUVnZG1WamRHOXlJRzltSUd4bGJtZDBhQ0E1TENCamIyNTBZV2x1YVc1bklHRnNiQ0J0WVhSeWFYZ2daV3hsYldWdWRITXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFQndZWEpoYlNCbGJHVnRaVzUwY3lCQklIWmxZM1J2Y2lCdlppQnNaVzVuZEdnZ09Td2dZMjl1ZEdGcGJtbHVaeUJoYkd3Z2JXRjBjbWw0SUdWc1pXMWxiblJ6TGdvZ0lDQWdJQ292Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsYkdWdFpXNTBjeWtnZXdvZ0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZEhNZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJR1ZzWlcxbGJuUnpJRDBnV3pBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREJkT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5SeklEMGdaV3hsYldWdWRITTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZObGRITWdkR2hsSUcxaGRISnBlQ0IwYnlCcFpHVnVkR2wwZVFvZ0lDQWdJQ29nUUhSdlpHOGdVMmh2ZFd4a0lIQmxjbWhoY0hNZ1ltVWdjbVZ1WVcxbFpDQjBieUJnYzJWMFNXUmxiblJwZEhrb0tXQWdkRzhnWW1VZ2JXOXlaU0JqYkdWaGNpNEtJQ0FnSUNBcUlFQjBiMlJ2SUVOeVpXRjBaU0JoYm05MGFHVnlJR1oxYm1OMGFXOXVJSFJvWVhRZ2FXMXRaV1JwWVhSbGJIa2dZM0psWVhSbGN5QmhiaUJwWkdWdWRHbDBlU0J0WVhSeWFYZ2daV2N1SUdCbGVXVW9LV0FLSUNBZ0lDQXFMd29LQ2lBZ0lDQnBaR1Z1ZEdsMGVTZ3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ1pTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUdWYk1GMGdQU0F4T3dvZ0lDQWdJQ0JsV3pGZElEMGdNRHNLSUNBZ0lDQWdaVnN5WFNBOUlEQTdDaUFnSUNBZ0lHVmJNMTBnUFNBd093b2dJQ0FnSUNCbFd6UmRJRDBnTVRzS0lDQWdJQ0FnWlZzMVhTQTlJREE3Q2lBZ0lDQWdJR1ZiTmwwZ1BTQXdPd29nSUNBZ0lDQmxXemRkSUQwZ01Ec0tJQ0FnSUNBZ1pWczRYU0E5SURFN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5sZENCaGJHd2daV3hsYldWdWRITWdkRzhnZW1WeWJ3b2dJQ0FnSUNvdkNnb0tJQ0FnSUhObGRGcGxjbThvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR1VnUFNCMGFHbHpMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQmxXekJkSUQwZ01Ec0tJQ0FnSUNBZ1pWc3hYU0E5SURBN0NpQWdJQ0FnSUdWYk1sMGdQU0F3T3dvZ0lDQWdJQ0JsV3pOZElEMGdNRHNLSUNBZ0lDQWdaVnMwWFNBOUlEQTdDaUFnSUNBZ0lHVmJOVjBnUFNBd093b2dJQ0FnSUNCbFd6WmRJRDBnTURzS0lDQWdJQ0FnWlZzM1hTQTlJREE3Q2lBZ0lDQWdJR1ZiT0YwZ1BTQXdPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCdFlYUnlhWGdnWkdsaFoyOXVZV3dnWld4bGJXVnVkSE1nWm5KdmJTQmhJRlpsWXpNS0lDQWdJQ0FxTHdvS0NpQWdJQ0J6WlhSVWNtRmpaU2gyWldOMGIzSXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ1pTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUdWYk1GMGdQU0IyWldOMGIzSXVlRHNLSUNBZ0lDQWdaVnMwWFNBOUlIWmxZM1J2Y2k1NU93b2dJQ0FnSUNCbFd6aGRJRDBnZG1WamRHOXlMbm83Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFZGxkSE1nZEdobElHMWhkSEpwZUNCa2FXRm5iMjVoYkNCbGJHVnRaVzUwY3dvZ0lDQWdJQ292Q2dvS0lDQWdJR2RsZEZSeVlXTmxLSFJoY21kbGRDa2dld29nSUNBZ0lDQnBaaUFvZEdGeVoyVjBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCMFlYSm5aWFFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCamIyNXpkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdkR0Z5WjJWMExuZ2dQU0JsV3pCZE93b2dJQ0FnSUNCMFlYSm5aWFF1ZVNBOUlHVmJORjA3Q2lBZ0lDQWdJSFJoY21kbGRDNTZJRDBnWlZzNFhUc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1RXRjBjbWw0TFZabFkzUnZjaUJ0ZFd4MGFYQnNhV05oZEdsdmJnb2dJQ0FnSUNvZ1FIQmhjbUZ0SUhZZ1ZHaGxJSFpsWTNSdmNpQjBieUJ0ZFd4MGFYQnNlU0IzYVhSb0NpQWdJQ0FnS2lCQWNHRnlZVzBnZEdGeVoyVjBJRTl3ZEdsdmJtRnNMQ0IwWVhKblpYUWdkRzhnYzJGMlpTQjBhR1VnY21WemRXeDBJR2x1TGdvZ0lDQWdJQ292Q2dvS0lDQWdJSFp0ZFd4MEtIWXNJSFJoY21kbGRDa2dld29nSUNBZ0lDQnBaaUFvZEdGeVoyVjBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCMFlYSm5aWFFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCamIyNXpkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdZMjl1YzNRZ2VDQTlJSFl1ZURzS0lDQWdJQ0FnWTI5dWMzUWdlU0E5SUhZdWVUc0tJQ0FnSUNBZ1kyOXVjM1FnZWlBOUlIWXVlanNLSUNBZ0lDQWdkR0Z5WjJWMExuZ2dQU0JsV3pCZElDb2dlQ0FySUdWYk1WMGdLaUI1SUNzZ1pWc3lYU0FxSUhvN0NpQWdJQ0FnSUhSaGNtZGxkQzU1SUQwZ1pWc3pYU0FxSUhnZ0t5QmxXelJkSUNvZ2VTQXJJR1ZiTlYwZ0tpQjZPd29nSUNBZ0lDQjBZWEpuWlhRdWVpQTlJR1ZiTmwwZ0tpQjRJQ3NnWlZzM1hTQXFJSGtnS3lCbFd6aGRJQ29nZWpzS0lDQWdJQ0FnY21WMGRYSnVJSFJoY21kbGREc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVFdGMGNtbDRMWE5qWVd4aGNpQnRkV3gwYVhCc2FXTmhkR2x2YmdvZ0lDQWdJQ292Q2dvS0lDQWdJSE50ZFd4MEtITXBJSHNLSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IwYUdsekxtVnNaVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MGMxdHBYU0FxUFNCek93b2dJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRTFoZEhKcGVDQnRkV3gwYVhCc2FXTmhkR2x2YmdvZ0lDQWdJQ29nUUhCaGNtRnRJRzFoZEhKcGVDQk5ZWFJ5YVhnZ2RHOGdiWFZzZEdsd2JIa2dkMmwwYUNCbWNtOXRJR3hsWm5RZ2MybGtaUzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnRiWFZzZENodFlYUnlhWGdzSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQnVaWGNnVFdGME15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCQklEMGdkR2hwY3k1bGJHVnRaVzUwY3pzS0lDQWdJQ0FnWTI5dWMzUWdRaUE5SUcxaGRISnBlQzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdZMjl1YzNRZ1ZDQTlJSFJoY21kbGRDNWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ1kyOXVjM1FnWVRFeElEMGdRVnN3WFN3S0lDQWdJQ0FnSUNBZ0lDQWdZVEV5SUQwZ1FWc3hYU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lURXpJRDBnUVZzeVhTd0tJQ0FnSUNBZ0lDQWdJQ0FnWVRJeElEMGdRVnN6WFN3S0lDQWdJQ0FnSUNBZ0lDQWdZVEl5SUQwZ1FWczBYU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lUSXpJRDBnUVZzMVhTd0tJQ0FnSUNBZ0lDQWdJQ0FnWVRNeElEMGdRVnMyWFN3S0lDQWdJQ0FnSUNBZ0lDQWdZVE15SUQwZ1FWczNYU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lUTXpJRDBnUVZzNFhUc0tJQ0FnSUNBZ1kyOXVjM1FnWWpFeElEMGdRbHN3WFN3S0lDQWdJQ0FnSUNBZ0lDQWdZakV5SUQwZ1Fsc3hYU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lqRXpJRDBnUWxzeVhTd0tJQ0FnSUNBZ0lDQWdJQ0FnWWpJeElEMGdRbHN6WFN3S0lDQWdJQ0FnSUNBZ0lDQWdZakl5SUQwZ1FsczBYU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lqSXpJRDBnUWxzMVhTd0tJQ0FnSUNBZ0lDQWdJQ0FnWWpNeElEMGdRbHMyWFN3S0lDQWdJQ0FnSUNBZ0lDQWdZak15SUQwZ1FsczNYU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lqTXpJRDBnUWxzNFhUc0tJQ0FnSUNBZ1ZGc3dYU0E5SUdFeE1TQXFJR0l4TVNBcklHRXhNaUFxSUdJeU1TQXJJR0V4TXlBcUlHSXpNVHNLSUNBZ0lDQWdWRnN4WFNBOUlHRXhNU0FxSUdJeE1pQXJJR0V4TWlBcUlHSXlNaUFySUdFeE15QXFJR0l6TWpzS0lDQWdJQ0FnVkZzeVhTQTlJR0V4TVNBcUlHSXhNeUFySUdFeE1pQXFJR0l5TXlBcklHRXhNeUFxSUdJek16c0tJQ0FnSUNBZ1ZGc3pYU0E5SUdFeU1TQXFJR0l4TVNBcklHRXlNaUFxSUdJeU1TQXJJR0V5TXlBcUlHSXpNVHNLSUNBZ0lDQWdWRnMwWFNBOUlHRXlNU0FxSUdJeE1pQXJJR0V5TWlBcUlHSXlNaUFySUdFeU15QXFJR0l6TWpzS0lDQWdJQ0FnVkZzMVhTQTlJR0V5TVNBcUlHSXhNeUFySUdFeU1pQXFJR0l5TXlBcklHRXlNeUFxSUdJek16c0tJQ0FnSUNBZ1ZGczJYU0E5SUdFek1TQXFJR0l4TVNBcklHRXpNaUFxSUdJeU1TQXJJR0V6TXlBcUlHSXpNVHNLSUNBZ0lDQWdWRnMzWFNBOUlHRXpNU0FxSUdJeE1pQXJJR0V6TWlBcUlHSXlNaUFySUdFek15QXFJR0l6TWpzS0lDQWdJQ0FnVkZzNFhTQTlJR0V6TVNBcUlHSXhNeUFySUdFek1pQXFJR0l5TXlBcklHRXpNeUFxSUdJek16c0tJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1UyTmhiR1VnWldGamFDQmpiMngxYlc0Z2IyWWdkR2hsSUcxaGRISnBlQW9nSUNBZ0lDb3ZDZ29LSUNBZ0lITmpZV3hsS0habFkzUnZjaXdnZEdGeVoyVjBLU0I3Q2lBZ0lDQWdJR2xtSUNoMFlYSm5aWFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lIUmhjbWRsZENBOUlHNWxkeUJOWVhRektDazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUdVZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0JqYjI1emRDQjBJRDBnZEdGeVoyVjBMbVZzWlcxbGJuUnpPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dJVDA5SURNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUhSYk15QXFJR2tnS3lBd1hTQTlJSFpsWTNSdmNpNTRJQ29nWlZzeklDb2dhU0FySURCZE93b2dJQ0FnSUNBZ0lIUmJNeUFxSUdrZ0t5QXhYU0E5SUhabFkzUnZjaTU1SUNvZ1pWc3pJQ29nYVNBcklERmRPd29nSUNBZ0lDQWdJSFJiTXlBcUlHa2dLeUF5WFNBOUlIWmxZM1J2Y2k1NklDb2daVnN6SUNvZ2FTQXJJREpkT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUYjJ4MlpTQkJlRDFpQ2lBZ0lDQWdLaUJBY0dGeVlXMGdZaUJVYUdVZ2NtbG5hSFFnYUdGdVpDQnphV1JsQ2lBZ0lDQWdLaUJBY0dGeVlXMGdkR0Z5WjJWMElFOXdkR2x2Ym1Gc0xpQlVZWEpuWlhRZ2RtVmpkRzl5SUhSdklITmhkbVVnYVc0dUNpQWdJQ0FnS2lCQWNtVjBkWEp1SUZSb1pTQnpiMngxZEdsdmJpQjRDaUFnSUNBZ0tpQkFkRzlrYnlCemFHOTFiR1FnY21WMWMyVWdZWEp5WVhsekNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzI5c2RtVW9ZaXdnZEdGeVoyVjBLU0I3Q2lBZ0lDQWdJR2xtSUNoMFlYSm5aWFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lIUmhjbWRsZENBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lDOHZJRU52Ym5OMGNuVmpkQ0JsY1hWaGRHbHZibk1LSUNBZ0lDQWdZMjl1YzNRZ2JuSWdQU0F6T3lBdkx5QnVkVzBnY205M2N3b0tJQ0FnSUNBZ1kyOXVjM1FnYm1NZ1BTQTBPeUF2THlCdWRXMGdZMjlzY3dvS0lDQWdJQ0FnWTI5dWMzUWdaWEZ1Y3lBOUlGdGRPd29nSUNBZ0lDQnNaWFFnYVRzS0lDQWdJQ0FnYkdWMElHbzdDZ29nSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JuSWdLaUJ1WXpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWlhGdWN5NXdkWE5vS0RBcE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnTXpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWm05eUlDaHFJRDBnTURzZ2FpQThJRE03SUdvckt5a2dld29nSUNBZ0lDQWdJQ0FnWlhGdWMxdHBJQ3NnYm1NZ0tpQnFYU0E5SUhSb2FYTXVaV3hsYldWdWRITmJhU0FySURNZ0tpQnFYVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR1Z4Ym5OYk15QXJJRFFnS2lBd1hTQTlJR0l1ZURzS0lDQWdJQ0FnWlhGdWMxc3pJQ3NnTkNBcUlERmRJRDBnWWk1NU93b2dJQ0FnSUNCbGNXNXpXek1nS3lBMElDb2dNbDBnUFNCaUxubzdJQzh2SUVOdmJYQjFkR1VnY21sbmFIUWdkWEJ3WlhJZ2RISnBZVzVuZFd4aGNpQjJaWEp6YVc5dUlHOW1JSFJvWlNCdFlYUnlhWGdnTFNCSFlYVnpjeUJsYkdsdGFXNWhkR2x2YmdvS0lDQWdJQ0FnYkdWMElHNGdQU0F6T3dvZ0lDQWdJQ0JqYjI1emRDQnJJRDBnYmpzS0lDQWdJQ0FnYkdWMElHNXdPd29nSUNBZ0lDQmpiMjV6ZENCcmNDQTlJRFE3SUM4dklHNTFiU0J5YjNkekNnb2dJQ0FnSUNCc1pYUWdjRHNLQ2lBZ0lDQWdJR1J2SUhzS0lDQWdJQ0FnSUNCcElEMGdheUF0SUc0N0Nnb2dJQ0FnSUNBZ0lHbG1JQ2hsY1c1elcya2dLeUJ1WXlBcUlHbGRJRDA5UFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0F2THlCMGFHVWdjR2wyYjNRZ2FYTWdiblZzYkN3Z2MzZGhjQ0JzYVc1bGN3b2dJQ0FnSUNBZ0lDQWdabTl5SUNocUlEMGdhU0FySURFN0lHb2dQQ0JyT3lCcUt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z4Ym5OYmFTQXJJRzVqSUNvZ2FsMGdJVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWNDQTlJR3R3T3dvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYnlCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmtieUJzYVdkdVpTZ2dhU0FwSUQwZ2JHbG5ibVVvSUdrZ0tTQXJJR3hwWjI1bEtDQnJJQ2tLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEFnUFNCcmNDQXRJRzV3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhGdWMxdHdJQ3NnYm1NZ0tpQnBYU0FyUFNCbGNXNXpXM0FnS3lCdVl5QXFJR3BkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnZDJocGJHVWdLQzB0Ym5BcE93b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnYVdZZ0tHVnhibk5iYVNBcklHNWpJQ29nYVYwZ0lUMDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYWlBOUlHa2dLeUF4T3lCcUlEd2dhenNnYWlzcktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzExYkhScGNHeHBaWElnUFNCbGNXNXpXMmtnS3lCdVl5QXFJR3BkSUM4Z1pYRnVjMXRwSUNzZ2JtTWdLaUJwWFRzS0lDQWdJQ0FnSUNBZ0lDQWdibkFnUFNCcmNEc0tDaUFnSUNBZ0lDQWdJQ0FnSUdSdklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmtieUJzYVdkdVpTZ2dheUFwSUQwZ2JHbG5ibVVvSUdzZ0tTQXRJRzExYkhScGNHeHBaWElnS2lCc2FXZHVaU2dnYVNBcENpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0NBOUlHdHdJQzBnYm5BN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhGdWMxdHdJQ3NnYm1NZ0tpQnFYU0E5SUhBZ1BEMGdhU0EvSURBZ09pQmxjVzV6VzNBZ0t5QnVZeUFxSUdwZElDMGdaWEZ1YzF0d0lDc2dibU1nS2lCcFhTQXFJRzExYkhScGNHeHBaWEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdkMmhwYkdVZ0tDMHRibkFwT3dvZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZTQjNhR2xzWlNBb0xTMXVLVHNnTHk4Z1IyVjBJSFJvWlNCemIyeDFkR2x2YmdvS0NpQWdJQ0FnSUhSaGNtZGxkQzU2SUQwZ1pYRnVjMXN5SUNvZ2JtTWdLeUF6WFNBdklHVnhibk5iTWlBcUlHNWpJQ3NnTWwwN0NpQWdJQ0FnSUhSaGNtZGxkQzU1SUQwZ0tHVnhibk5iTVNBcUlHNWpJQ3NnTTEwZ0xTQmxjVzV6V3pFZ0tpQnVZeUFySURKZElDb2dkR0Z5WjJWMExub3BJQzhnWlhGdWMxc3hJQ29nYm1NZ0t5QXhYVHNLSUNBZ0lDQWdkR0Z5WjJWMExuZ2dQU0FvWlhGdWMxc3dJQ29nYm1NZ0t5QXpYU0F0SUdWeGJuTmJNQ0FxSUc1aklDc2dNbDBnS2lCMFlYSm5aWFF1ZWlBdElHVnhibk5iTUNBcUlHNWpJQ3NnTVYwZ0tpQjBZWEpuWlhRdWVTa2dMeUJsY1c1eld6QWdLaUJ1WXlBcklEQmRPd29LSUNBZ0lDQWdhV1lnS0dselRtRk9LSFJoY21kbGRDNTRLU0I4ZkNCcGMwNWhUaWgwWVhKblpYUXVlU2tnZkh3Z2FYTk9ZVTRvZEdGeVoyVjBMbm9wSUh4OElIUmhjbWRsZEM1NElEMDlQU0JKYm1acGJtbDBlU0I4ZkNCMFlYSm5aWFF1ZVNBOVBUMGdTVzVtYVc1cGRIa2dmSHdnZEdGeVoyVjBMbm9nUFQwOUlFbHVabWx1YVhSNUtTQjdDaUFnSUNBZ0lDQWdkR2h5YjNjZ1lFTnZkV3hrSUc1dmRDQnpiMngyWlNCbGNYVmhkR2x2YmlFZ1IyOTBJSGc5V3lSN2RHRnlaMlYwTG5SdlUzUnlhVzVuS0NsOVhTd2dZajFiSkh0aUxuUnZVM1J5YVc1bktDbDlYU3dnUVQxYkpIdDBhR2x6TG5SdlUzUnlhVzVuS0NsOVhXQTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFE3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFZGxkQ0JoYmlCbGJHVnRaVzUwSUdsdUlIUm9aU0J0WVhSeWFYZ2dZbmtnYVc1a1pYZ3VJRWx1WkdWNElITjBZWEowY3lCaGRDQXdMQ0J1YjNRZ01TRWhJUW9nSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUVsbUlIQnliM1pwWkdWa0xDQjBhR1VnYldGMGNtbDRJR1ZzWlcxbGJuUWdkMmxzYkNCaVpTQnpaWFFnZEc4Z2RHaHBjeUIyWVd4MVpTNEtJQ0FnSUNBcUx3b0tDaUFnSUNCbEtISnZkeXdnWTI5c2RXMXVMQ0IyWVd4MVpTa2dld29nSUNBZ0lDQnBaaUFvZG1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzWlcxbGJuUnpXMk52YkhWdGJpQXJJRE1nS2lCeWIzZGRPd29nSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDOHZJRk5sZENCMllXeDFaUW9nSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEhOYlkyOXNkVzF1SUNzZ015QXFJSEp2ZDEwZ1BTQjJZV3gxWlRzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRiM0I1SUdGdWIzUm9aWElnYldGMGNtbDRJR2x1ZEc4Z2RHaHBjeUJ0WVhSeWFYZ2diMkpxWldOMExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdOdmNIa29iV0YwY21sNEtTQjdDaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diV0YwY21sNExtVnNaVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MGMxdHBYU0E5SUcxaGRISnBlQzVsYkdWdFpXNTBjMXRwWFRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRkpsZEhWeWJuTWdZU0J6ZEhKcGJtY2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUcxaGRISnBlQzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQjBiMU4wY21sdVp5Z3BJSHNLSUNBZ0lDQWdiR1YwSUhJZ1BTQW5KenNLSUNBZ0lDQWdZMjl1YzNRZ2MyVndJRDBnSnl3bk93b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQTVPeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQnlJQ3M5SUhSb2FYTXVaV3hsYldWdWRITmJhVjBnS3lCelpYQTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCeU93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJ5WlhabGNuTmxJSFJvWlNCdFlYUnlhWGdLSUNBZ0lDQXFJRUJ3WVhKaGJTQjBZWEpuWlhRZ1ZHRnlaMlYwSUcxaGRISnBlQ0IwYnlCellYWmxJR2x1TGdvZ0lDQWdJQ29nUUhKbGRIVnliaUJVYUdVZ2MyOXNkWFJwYjI0Z2VBb2dJQ0FnSUNvdkNnb0tJQ0FnSUhKbGRtVnljMlVvZEdGeVoyVjBLU0I3Q2lBZ0lDQWdJR2xtSUNoMFlYSm5aWFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lIUmhjbWRsZENBOUlHNWxkeUJOWVhRektDazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lDOHZJRU52Ym5OMGNuVmpkQ0JsY1hWaGRHbHZibk1LSUNBZ0lDQWdZMjl1YzNRZ2JuSWdQU0F6T3lBdkx5QnVkVzBnY205M2N3b0tJQ0FnSUNBZ1kyOXVjM1FnYm1NZ1BTQTJPeUF2THlCdWRXMGdZMjlzY3dvS0lDQWdJQ0FnWTI5dWMzUWdaWEZ1Y3lBOUlISmxkbVZ5YzJWZlpYRnVjenNLSUNBZ0lDQWdiR1YwSUdrN0NpQWdJQ0FnSUd4bGRDQnFPd29LSUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElETTdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lHWnZjaUFvYWlBOUlEQTdJR29nUENBek95QnFLeXNwSUhzS0lDQWdJQ0FnSUNBZ0lHVnhibk5iYVNBcklHNWpJQ29nYWwwZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6VzJrZ0t5QXpJQ29nYWwwN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNnb2dJQ0FnSUNCbGNXNXpXek1nS3lBMklDb2dNRjBnUFNBeE93b2dJQ0FnSUNCbGNXNXpXek1nS3lBMklDb2dNVjBnUFNBd093b2dJQ0FnSUNCbGNXNXpXek1nS3lBMklDb2dNbDBnUFNBd093b2dJQ0FnSUNCbGNXNXpXelFnS3lBMklDb2dNRjBnUFNBd093b2dJQ0FnSUNCbGNXNXpXelFnS3lBMklDb2dNVjBnUFNBeE93b2dJQ0FnSUNCbGNXNXpXelFnS3lBMklDb2dNbDBnUFNBd093b2dJQ0FnSUNCbGNXNXpXelVnS3lBMklDb2dNRjBnUFNBd093b2dJQ0FnSUNCbGNXNXpXelVnS3lBMklDb2dNVjBnUFNBd093b2dJQ0FnSUNCbGNXNXpXelVnS3lBMklDb2dNbDBnUFNBeE95QXZMeUJEYjIxd2RYUmxJSEpwWjJoMElIVndjR1Z5SUhSeWFXRnVaM1ZzWVhJZ2RtVnljMmx2YmlCdlppQjBhR1VnYldGMGNtbDRJQzBnUjJGMWMzTWdaV3hwYldsdVlYUnBiMjRLQ2lBZ0lDQWdJR3hsZENCdUlEMGdNenNLSUNBZ0lDQWdZMjl1YzNRZ2F5QTlJRzQ3Q2lBZ0lDQWdJR3hsZENCdWNEc0tJQ0FnSUNBZ1kyOXVjM1FnYTNBZ1BTQnVZenNnTHk4Z2JuVnRJSEp2ZDNNS0NpQWdJQ0FnSUd4bGRDQndPd29LSUNBZ0lDQWdaRzhnZXdvZ0lDQWdJQ0FnSUdrZ1BTQnJJQzBnYmpzS0NpQWdJQ0FnSUNBZ2FXWWdLR1Z4Ym5OYmFTQXJJRzVqSUNvZ2FWMGdQVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJQzh2SUhSb1pTQndhWFp2ZENCcGN5QnVkV3hzTENCemQyRndJR3hwYm1WekNpQWdJQ0FnSUNBZ0lDQm1iM0lnS0dvZ1BTQnBJQ3NnTVRzZ2FpQThJR3M3SUdvckt5a2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWEZ1YzF0cElDc2dibU1nS2lCcVhTQWhQVDBnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUc1d0lEMGdhM0E3Q2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHUnZJR3hwYm1Vb0lHa2dLU0E5SUd4cGJtVW9JR2tnS1NBcklHeHBibVVvSUdzZ0tRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDQTlJR3R3SUMwZ2JuQTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjVzV6VzNBZ0t5QnVZeUFxSUdsZElDczlJR1Z4Ym5OYmNDQXJJRzVqSUNvZ2FsMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQjNhR2xzWlNBb0xTMXVjQ2s3Q2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQnBaaUFvWlhGdWMxdHBJQ3NnYm1NZ0tpQnBYU0FoUFQwZ01Da2dld29nSUNBZ0lDQWdJQ0FnWm05eUlDaHFJRDBnYVNBcklERTdJR29nUENCck95QnFLeXNwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JYVnNkR2x3YkdsbGNpQTlJR1Z4Ym5OYmFTQXJJRzVqSUNvZ2FsMGdMeUJsY1c1elcya2dLeUJ1WXlBcUlHbGRPd29nSUNBZ0lDQWdJQ0FnSUNCdWNDQTlJR3R3T3dvS0lDQWdJQ0FnSUNBZ0lDQWdaRzhnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdSdklHeHBibVVvSUdzZ0tTQTlJR3hwYm1Vb0lHc2dLU0F0SUcxMWJIUnBjR3hwWlhJZ0tpQnNhVzVsS0NCcElDa0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCd0lEMGdhM0FnTFNCdWNEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNXNXpXM0FnS3lCdVl5QXFJR3BkSUQwZ2NDQThQU0JwSUQ4Z01DQTZJR1Z4Ym5OYmNDQXJJRzVqSUNvZ2FsMGdMU0JsY1c1elczQWdLeUJ1WXlBcUlHbGRJQ29nYlhWc2RHbHdiR2xsY2pzS0lDQWdJQ0FnSUNBZ0lDQWdmU0IzYUdsc1pTQW9MUzF1Y0NrN0NpQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQjlJSGRvYVd4bElDZ3RMVzRwT3lBdkx5QmxiR2x0YVc1aGRHVWdkR2hsSUhWd2NHVnlJR3hsWm5RZ2RISnBZVzVuYkdVZ2IyWWdkR2hsSUcxaGRISnBlQW9LQ2lBZ0lDQWdJR2tnUFNBeU93b0tJQ0FnSUNBZ1pHOGdld29nSUNBZ0lDQWdJR29nUFNCcElDMGdNVHNLQ2lBZ0lDQWdJQ0FnWkc4Z2V3b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JYVnNkR2x3YkdsbGNpQTlJR1Z4Ym5OYmFTQXJJRzVqSUNvZ2FsMGdMeUJsY1c1elcya2dLeUJ1WXlBcUlHbGRPd29nSUNBZ0lDQWdJQ0FnYm5BZ1BTQnVZenNLQ2lBZ0lDQWdJQ0FnSUNCa2J5QjdDaUFnSUNBZ0lDQWdJQ0FnSUhBZ1BTQnVZeUF0SUc1d093b2dJQ0FnSUNBZ0lDQWdJQ0JsY1c1elczQWdLeUJ1WXlBcUlHcGRJRDBnWlhGdWMxdHdJQ3NnYm1NZ0tpQnFYU0F0SUdWeGJuTmJjQ0FySUc1aklDb2dhVjBnS2lCdGRXeDBhWEJzYVdWeU93b2dJQ0FnSUNBZ0lDQWdmU0IzYUdsc1pTQW9MUzF1Y0NrN0NpQWdJQ0FnSUNBZ2ZTQjNhR2xzWlNBb2FpMHRLVHNLSUNBZ0lDQWdmU0IzYUdsc1pTQW9MUzFwS1RzZ0x5OGdiM0JsY21GMGFXOXVjeUJ2YmlCMGFHVWdaR2xoWjI5dVlXd0tDZ29nSUNBZ0lDQnBJRDBnTWpzS0NpQWdJQ0FnSUdSdklIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCdGRXeDBhWEJzYVdWeUlEMGdNU0F2SUdWeGJuTmJhU0FySUc1aklDb2dhVjA3Q2lBZ0lDQWdJQ0FnYm5BZ1BTQnVZenNLQ2lBZ0lDQWdJQ0FnWkc4Z2V3b2dJQ0FnSUNBZ0lDQWdjQ0E5SUc1aklDMGdibkE3Q2lBZ0lDQWdJQ0FnSUNCbGNXNXpXM0FnS3lCdVl5QXFJR2xkSUQwZ1pYRnVjMXR3SUNzZ2JtTWdLaUJwWFNBcUlHMTFiSFJwY0d4cFpYSTdDaUFnSUNBZ0lDQWdmU0IzYUdsc1pTQW9MUzF1Y0NrN0NpQWdJQ0FnSUgwZ2QyaHBiR1VnS0drdExTazdDZ29nSUNBZ0lDQnBJRDBnTWpzS0NpQWdJQ0FnSUdSdklIc0tJQ0FnSUNBZ0lDQnFJRDBnTWpzS0NpQWdJQ0FnSUNBZ1pHOGdld29nSUNBZ0lDQWdJQ0FnY0NBOUlHVnhibk5iYm5JZ0t5QnFJQ3NnYm1NZ0tpQnBYVHNLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9hWE5PWVU0b2NDa2dmSHdnY0NBOVBUMGdTVzVtYVc1cGRIa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWUVOdmRXeGtJRzV2ZENCeVpYWmxjbk5sSVNCQlBWc2tlM1JvYVhNdWRHOVRkSEpwYm1jb0tYMWRZRHNLSUNBZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRdVpTaHBMQ0JxTENCd0tUc0tJQ0FnSUNBZ0lDQjlJSGRvYVd4bElDaHFMUzBwT3dvZ0lDQWdJQ0I5SUhkb2FXeGxJQ2hwTFMwcE93b0tJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1UyVjBJSFJvWlNCdFlYUnlhWGdnWm5KdmJTQmhJSEYxWVhSbGNtbHZiZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lITmxkRkp2ZEdGMGFXOXVSbkp2YlZGMVlYUmxjbTVwYjI0b2NTa2dld29nSUNBZ0lDQmpiMjV6ZENCNElEMGdjUzU0T3dvZ0lDQWdJQ0JqYjI1emRDQjVJRDBnY1M1NU93b2dJQ0FnSUNCamIyNXpkQ0I2SUQwZ2NTNTZPd29nSUNBZ0lDQmpiMjV6ZENCM0lEMGdjUzUzT3dvZ0lDQWdJQ0JqYjI1emRDQjRNaUE5SUhnZ0t5QjRPd29nSUNBZ0lDQmpiMjV6ZENCNU1pQTlJSGtnS3lCNU93b2dJQ0FnSUNCamIyNXpkQ0I2TWlBOUlIb2dLeUI2T3dvZ0lDQWdJQ0JqYjI1emRDQjRlQ0E5SUhnZ0tpQjRNanNLSUNBZ0lDQWdZMjl1YzNRZ2VIa2dQU0I0SUNvZ2VUSTdDaUFnSUNBZ0lHTnZibk4wSUhoNklEMGdlQ0FxSUhveU93b2dJQ0FnSUNCamIyNXpkQ0I1ZVNBOUlIa2dLaUI1TWpzS0lDQWdJQ0FnWTI5dWMzUWdlWG9nUFNCNUlDb2dlakk3Q2lBZ0lDQWdJR052Ym5OMElIcDZJRDBnZWlBcUlIb3lPd29nSUNBZ0lDQmpiMjV6ZENCM2VDQTlJSGNnS2lCNE1qc0tJQ0FnSUNBZ1kyOXVjM1FnZDNrZ1BTQjNJQ29nZVRJN0NpQWdJQ0FnSUdOdmJuTjBJSGQ2SUQwZ2R5QXFJSG95T3dvZ0lDQWdJQ0JqYjI1emRDQmxJRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ1pWc3pJQ29nTUNBcklEQmRJRDBnTVNBdElDaDVlU0FySUhwNktUc0tJQ0FnSUNBZ1pWc3pJQ29nTUNBcklERmRJRDBnZUhrZ0xTQjNlanNLSUNBZ0lDQWdaVnN6SUNvZ01DQXJJREpkSUQwZ2VIb2dLeUIzZVRzS0lDQWdJQ0FnWlZzeklDb2dNU0FySURCZElEMGdlSGtnS3lCM2Vqc0tJQ0FnSUNBZ1pWc3pJQ29nTVNBcklERmRJRDBnTVNBdElDaDRlQ0FySUhwNktUc0tJQ0FnSUNBZ1pWc3pJQ29nTVNBcklESmRJRDBnZVhvZ0xTQjNlRHNLSUNBZ0lDQWdaVnN6SUNvZ01pQXJJREJkSUQwZ2VIb2dMU0IzZVRzS0lDQWdJQ0FnWlZzeklDb2dNaUFySURGZElEMGdlWG9nS3lCM2VEc0tJQ0FnSUNBZ1pWc3pJQ29nTWlBcklESmRJRDBnTVNBdElDaDRlQ0FySUhsNUtUc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSeVlXNXpjRzl6WlNCMGFHVWdiV0YwY21sNENpQWdJQ0FnS2lCQWNHRnlZVzBnZEdGeVoyVjBJRTl3ZEdsdmJtRnNMaUJYYUdWeVpTQjBieUJ6ZEc5eVpTQjBhR1VnY21WemRXeDBMZ29nSUNBZ0lDb2dRSEpsZEhWeWJpQlVhR1VnZEdGeVoyVjBJRTFoZERNc0lHOXlJR0VnYm1WM0lFMWhkRE1nYVdZZ2RHRnlaMlYwSUhkaGN5QnZiV2wwZEdWa0xnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhSeVlXNXpjRzl6WlNoMFlYSm5aWFFwSUhzS0lDQWdJQ0FnYVdZZ0tIUmhjbWRsZENBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdkR0Z5WjJWMElEMGdibVYzSUUxaGRETW9LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ1RTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUdOdmJuTjBJRlFnUFNCMFlYSm5aWFF1Wld4bGJXVnVkSE03Q2lBZ0lDQWdJR3hsZENCMGJYQTdJQzh2VTJWMElHUnBZV2R2Ym1Gc2N3b0tJQ0FnSUNBZ1ZGc3dYU0E5SUUxYk1GMDdDaUFnSUNBZ0lGUmJORjBnUFNCTld6UmRPd29nSUNBZ0lDQlVXemhkSUQwZ1RWczRYVHNLSUNBZ0lDQWdkRzF3SUQwZ1RWc3hYVHNLSUNBZ0lDQWdWRnN4WFNBOUlFMWJNMTA3Q2lBZ0lDQWdJRlJiTTEwZ1BTQjBiWEE3Q2lBZ0lDQWdJSFJ0Y0NBOUlFMWJNbDA3Q2lBZ0lDQWdJRlJiTWwwZ1BTQk5XelpkT3dvZ0lDQWdJQ0JVV3paZElEMGdkRzF3T3dvZ0lDQWdJQ0IwYlhBZ1BTQk5XelZkT3dvZ0lDQWdJQ0JVV3pWZElEMGdUVnMzWFRzS0lDQWdJQ0FnVkZzM1hTQTlJSFJ0Y0RzS0lDQWdJQ0FnY21WMGRYSnVJSFJoY21kbGREc0tJQ0FnSUgwS0NpQWdmUW9nSUdOdmJuTjBJSEpsZG1WeWMyVmZaWEZ1Y3lBOUlGc3dMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd1hUc0tDaUFnTHlvcUNpQWdJQ29nTXkxa2FXMWxibk5wYjI1aGJDQjJaV04wYjNJS0lDQWdLaUJBWlhoaGJYQnNaUW9nSUNBcUlDQWdJQ0JqYjI1emRDQjJJRDBnYm1WM0lGWmxZek1vTVN3Z01pd2dNeWtLSUNBZ0tpQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0ozZzlKeUFySUhZdWVDa2dMeThnZUQweENpQWdJQ292Q2dvZ0lHTnNZWE56SUZabFl6TWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9lQ3dnZVN3Z2Vpa2dld29nSUNBZ0lDQnBaaUFvZUNBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdlQ0E5SURBdU1Ec0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLSGtnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lIa2dQU0F3TGpBN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaDZJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCNklEMGdNQzR3T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxuZ2dQU0I0T3dvZ0lDQWdJQ0IwYUdsekxua2dQU0I1T3dvZ0lDQWdJQ0IwYUdsekxub2dQU0I2T3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQldaV04wYjNJZ1kzSnZjM01nY0hKdlpIVmpkQW9nSUNBZ0lDb2dRSEJoY21GdElIUmhjbWRsZENCUGNIUnBiMjVoYkNCMFlYSm5aWFFnZEc4Z2MyRjJaU0JwYmk0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JqY205emN5aDJaV04wYjNJc0lIUmhjbWRsZENrZ2V3b2dJQ0FnSUNCcFppQW9kR0Z5WjJWMElEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JqYjI1emRDQjJlQ0E5SUhabFkzUnZjaTU0T3dvZ0lDQWdJQ0JqYjI1emRDQjJlU0E5SUhabFkzUnZjaTU1T3dvZ0lDQWdJQ0JqYjI1emRDQjJlaUE5SUhabFkzUnZjaTU2T3dvZ0lDQWdJQ0JqYjI1emRDQjRJRDBnZEdocGN5NTRPd29nSUNBZ0lDQmpiMjV6ZENCNUlEMGdkR2hwY3k1NU93b2dJQ0FnSUNCamIyNXpkQ0I2SUQwZ2RHaHBjeTU2T3dvZ0lDQWdJQ0IwWVhKblpYUXVlQ0E5SUhrZ0tpQjJlaUF0SUhvZ0tpQjJlVHNLSUNBZ0lDQWdkR0Z5WjJWMExua2dQU0I2SUNvZ2RuZ2dMU0I0SUNvZ2RubzdDaUFnSUNBZ0lIUmhjbWRsZEM1NklEMGdlQ0FxSUhaNUlDMGdlU0FxSUhaNE93b2dJQ0FnSUNCeVpYUjFjbTRnZEdGeVoyVjBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFpYUWdkR2hsSUhabFkzUnZjbk1uSURNZ1pXeGxiV1Z1ZEhNS0lDQWdJQ0FxTHdvS0NpQWdJQ0J6WlhRb2VDd2dlU3dnZWlrZ2V3b2dJQ0FnSUNCMGFHbHpMbmdnUFNCNE93b2dJQ0FnSUNCMGFHbHpMbmtnUFNCNU93b2dJQ0FnSUNCMGFHbHpMbm9nUFNCNk93b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTJWMElHRnNiQ0JqYjIxd2IyNWxiblJ6SUc5bUlIUm9aU0IyWldOMGIzSWdkRzhnZW1WeWJ5NEtJQ0FnSUNBcUx3b0tDaUFnSUNCelpYUmFaWEp2S0NrZ2V3b2dJQ0FnSUNCMGFHbHpMbmdnUFNCMGFHbHpMbmtnUFNCMGFHbHpMbm9nUFNBd093b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJXWldOMGIzSWdZV1JrYVhScGIyNEtJQ0FnSUNBcUx3b0tDaUFnSUNCMllXUmtLSFpsWTNSdmNpd2dkR0Z5WjJWMEtTQjdDaUFnSUNBZ0lHbG1JQ2gwWVhKblpYUXBJSHNLSUNBZ0lDQWdJQ0IwWVhKblpYUXVlQ0E5SUhabFkzUnZjaTU0SUNzZ2RHaHBjeTU0T3dvZ0lDQWdJQ0FnSUhSaGNtZGxkQzU1SUQwZ2RtVmpkRzl5TG5rZ0t5QjBhR2x6TG5rN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwTG5vZ1BTQjJaV04wYjNJdWVpQXJJSFJvYVhNdWVqc0tJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGWmxZek1vZEdocGN5NTRJQ3NnZG1WamRHOXlMbmdzSUhSb2FYTXVlU0FySUhabFkzUnZjaTU1TENCMGFHbHpMbm9nS3lCMlpXTjBiM0l1ZWlrN0NpQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWbVZqZEc5eUlITjFZblJ5WVdOMGFXOXVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RHRnlaMlYwSUU5d2RHbHZibUZzSUhSaGNtZGxkQ0IwYnlCellYWmxJR2x1TGdvZ0lDQWdJQ292Q2dvS0lDQWdJSFp6ZFdJb2RtVmpkRzl5TENCMFlYSm5aWFFwSUhzS0lDQWdJQ0FnYVdZZ0tIUmhjbWRsZENrZ2V3b2dJQ0FnSUNBZ0lIUmhjbWRsZEM1NElEMGdkR2hwY3k1NElDMGdkbVZqZEc5eUxuZzdDaUFnSUNBZ0lDQWdkR0Z5WjJWMExua2dQU0IwYUdsekxua2dMU0IyWldOMGIzSXVlVHNLSUNBZ0lDQWdJQ0IwWVhKblpYUXVlaUE5SUhSb2FYTXVlaUF0SUhabFkzUnZjaTU2T3dvZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVm1Wak15aDBhR2x6TG5nZ0xTQjJaV04wYjNJdWVDd2dkR2hwY3k1NUlDMGdkbVZqZEc5eUxua3NJSFJvYVhNdWVpQXRJSFpsWTNSdmNpNTZLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCSFpYUWdkR2hsSUdOeWIzTnpJSEJ5YjJSMVkzUWdiV0YwY21sNElHRmZZM0p2YzNNZ1puSnZiU0JoSUhabFkzUnZjaXdnYzNWamFDQjBhR0YwSUdFZ2VDQmlJRDBnWVY5amNtOXpjeUFxSUdJZ1BTQmpDaUFnSUNBZ0tnb2dJQ0FnSUNvZ1UyVmxJSHRBYkdsdWF5Qm9kSFJ3Y3pvdkwzZDNkemd1WTNNdWRXMTFMbk5sTDJ0MWNuTmxjaTlVUkVKRU1qUXZWbFF3Tmk5c1pXTjBkWEpsY3k5TVpXTjBkWEpsTmk1d1pHWWdWVzFsdzZVZ1ZXNXBkbVZ5YzJsMGVTQk1aV04wZFhKbGZRb2dJQ0FnSUNvdkNnb0tJQ0FnSUdOeWIzTnpiV0YwS0NrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMWhkRE1vV3pBc0lDMTBhR2x6TG5vc0lIUm9hWE11ZVN3Z2RHaHBjeTU2TENBd0xDQXRkR2hwY3k1NExDQXRkR2hwY3k1NUxDQjBhR2x6TG5nc0lEQmRLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1RtOXliV0ZzYVhwbElIUm9aU0IyWldOMGIzSXVJRTV2ZEdVZ2RHaGhkQ0IwYUdseklHTm9ZVzVuWlhNZ2RHaGxJSFpoYkhWbGN5QnBiaUIwYUdVZ2RtVmpkRzl5TGdvZ0lDQWdJQ0FxSUVCeVpYUjFjbTRnVW1WMGRYSnVjeUIwYUdVZ2JtOXliU0J2WmlCMGFHVWdkbVZqZEc5eUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYm05eWJXRnNhWHBsS0NrZ2V3b2dJQ0FnSUNCamIyNXpkQ0I0SUQwZ2RHaHBjeTU0T3dvZ0lDQWdJQ0JqYjI1emRDQjVJRDBnZEdocGN5NTVPd29nSUNBZ0lDQmpiMjV6ZENCNklEMGdkR2hwY3k1Nk93b2dJQ0FnSUNCamIyNXpkQ0J1SUQwZ1RXRjBhQzV6Y1hKMEtIZ2dLaUI0SUNzZ2VTQXFJSGtnS3lCNklDb2dlaWs3Q2dvZ0lDQWdJQ0JwWmlBb2JpQStJREF1TUNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdsdWRrNGdQU0F4SUM4Z2Jqc0tJQ0FnSUNBZ0lDQjBhR2x6TG5nZ0tqMGdhVzUyVGpzS0lDQWdJQ0FnSUNCMGFHbHpMbmtnS2owZ2FXNTJUanNLSUNBZ0lDQWdJQ0IwYUdsekxub2dLajBnYVc1MlRqc0tJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhOdmJXVjBhR2x1WnlCMWNBb2dJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlEQTdDaUFnSUNBZ0lDQWdkR2hwY3k1NUlEMGdNRHNLSUNBZ0lDQWdJQ0IwYUdsekxub2dQU0F3T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J5WlhSMWNtNGdianNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1IyVjBJSFJvWlNCMlpYSnphVzl1SUc5bUlIUm9hWE1nZG1WamRHOXlJSFJvWVhRZ2FYTWdiMllnYkdWdVozUm9JREV1Q2lBZ0lDQWdLaUJBY0dGeVlXMGdkR0Z5WjJWMElFOXdkR2x2Ym1Gc0lIUmhjbWRsZENCMGJ5QnpZWFpsSUdsdUNpQWdJQ0FnS2lCQWNtVjBkWEp1SUZKbGRIVnlibk1nZEdobElIVnVhWFFnZG1WamRHOXlDaUFnSUNBZ0tpOEtDZ29nSUNBZ2RXNXBkQ2gwWVhKblpYUXBJSHNLSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1kyOXVjM1FnZUNBOUlIUm9hWE11ZURzS0lDQWdJQ0FnWTI5dWMzUWdlU0E5SUhSb2FYTXVlVHNLSUNBZ0lDQWdZMjl1YzNRZ2VpQTlJSFJvYVhNdWVqc0tJQ0FnSUNBZ2JHVjBJRzVwYm5ZZ1BTQk5ZWFJvTG5OeGNuUW9lQ0FxSUhnZ0t5QjVJQ29nZVNBcklIb2dLaUI2S1RzS0NpQWdJQ0FnSUdsbUlDaHVhVzUySUQ0Z01DNHdLU0I3Q2lBZ0lDQWdJQ0FnYm1sdWRpQTlJREV1TUNBdklHNXBiblk3Q2lBZ0lDQWdJQ0FnZEdGeVoyVjBMbmdnUFNCNElDb2dibWx1ZGpzS0lDQWdJQ0FnSUNCMFlYSm5aWFF1ZVNBOUlIa2dLaUJ1YVc1Mk93b2dJQ0FnSUNBZ0lIUmhjbWRsZEM1NklEMGdlaUFxSUc1cGJuWTdDaUFnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwTG5nZ1BTQXhPd29nSUNBZ0lDQWdJSFJoY21kbGRDNTVJRDBnTURzS0lDQWdJQ0FnSUNCMFlYSm5aWFF1ZWlBOUlEQTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFE3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFZGxkQ0IwYUdVZ2JHVnVaM1JvSUc5bUlIUm9aU0IyWldOMGIzSUtJQ0FnSUNBcUx3b0tDaUFnSUNCc1pXNW5kR2dvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJSGdnUFNCMGFHbHpMbmc3Q2lBZ0lDQWdJR052Ym5OMElIa2dQU0IwYUdsekxuazdDaUFnSUNBZ0lHTnZibk4wSUhvZ1BTQjBhR2x6TG5vN0NpQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuTnhjblFvZUNBcUlIZ2dLeUI1SUNvZ2VTQXJJSG9nS2lCNktUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUjJWMElIUm9aU0J6Y1hWaGNtVmtJR3hsYm1kMGFDQnZaaUIwYUdVZ2RtVmpkRzl5TGdvZ0lDQWdJQ292Q2dvS0lDQWdJR3hsYm1kMGFGTnhkV0Z5WldRb0tTQjdDaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJ2ZENoMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1IyVjBJR1JwYzNSaGJtTmxJR1p5YjIwZ2RHaHBjeUJ3YjJsdWRDQjBieUJoYm05MGFHVnlJSEJ2YVc1MENpQWdJQ0FnS2k4S0Nnb2dJQ0FnWkdsemRHRnVZMlZVYnlod0tTQjdDaUFnSUNBZ0lHTnZibk4wSUhnZ1BTQjBhR2x6TG5nN0NpQWdJQ0FnSUdOdmJuTjBJSGtnUFNCMGFHbHpMbms3Q2lBZ0lDQWdJR052Ym5OMElIb2dQU0IwYUdsekxubzdDaUFnSUNBZ0lHTnZibk4wSUhCNElEMGdjQzU0T3dvZ0lDQWdJQ0JqYjI1emRDQndlU0E5SUhBdWVUc0tJQ0FnSUNBZ1kyOXVjM1FnY0hvZ1BTQndMbm83Q2lBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5OeGNuUW9LSEI0SUMwZ2VDa2dLaUFvY0hnZ0xTQjRLU0FySUNod2VTQXRJSGtwSUNvZ0tIQjVJQzBnZVNrZ0t5QW9jSG9nTFNCNktTQXFJQ2h3ZWlBdElIb3BLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1IyVjBJSE54ZFdGeVpXUWdaR2x6ZEdGdVkyVWdabkp2YlNCMGFHbHpJSEJ2YVc1MElIUnZJR0Z1YjNSb1pYSWdjRzlwYm5RS0lDQWdJQ0FxTHdvS0NpQWdJQ0JrYVhOMFlXNWpaVk54ZFdGeVpXUW9jQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQjRJRDBnZEdocGN5NTRPd29nSUNBZ0lDQmpiMjV6ZENCNUlEMGdkR2hwY3k1NU93b2dJQ0FnSUNCamIyNXpkQ0I2SUQwZ2RHaHBjeTU2T3dvZ0lDQWdJQ0JqYjI1emRDQndlQ0E5SUhBdWVEc0tJQ0FnSUNBZ1kyOXVjM1FnY0hrZ1BTQndMbms3Q2lBZ0lDQWdJR052Ym5OMElIQjZJRDBnY0M1Nk93b2dJQ0FnSUNCeVpYUjFjbTRnS0hCNElDMGdlQ2tnS2lBb2NIZ2dMU0I0S1NBcklDaHdlU0F0SUhrcElDb2dLSEI1SUMwZ2VTa2dLeUFvY0hvZ0xTQjZLU0FxSUNod2VpQXRJSG9wT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQk5kV3gwYVhCc2VTQmhiR3dnZEdobElHTnZiWEJ2Ym1WdWRITWdiMllnZEdobElIWmxZM1J2Y2lCM2FYUm9JR0VnYzJOaGJHRnlMZ29nSUNBZ0lDb2dRSEJoY21GdElIUmhjbWRsZENCVWFHVWdkbVZqZEc5eUlIUnZJSE5oZG1VZ2RHaGxJSEpsYzNWc2RDQnBiaTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnpZMkZzWlNoelkyRnNZWElzSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCNElEMGdkR2hwY3k1NE93b2dJQ0FnSUNCamIyNXpkQ0I1SUQwZ2RHaHBjeTU1T3dvZ0lDQWdJQ0JqYjI1emRDQjZJRDBnZEdocGN5NTZPd29nSUNBZ0lDQjBZWEpuWlhRdWVDQTlJSE5qWVd4aGNpQXFJSGc3Q2lBZ0lDQWdJSFJoY21kbGRDNTVJRDBnYzJOaGJHRnlJQ29nZVRzS0lDQWdJQ0FnZEdGeVoyVjBMbm9nUFNCelkyRnNZWElnS2lCNk93b2dJQ0FnSUNCeVpYUjFjbTRnZEdGeVoyVjBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCTmRXeDBhWEJzZVNCMGFHVWdkbVZqZEc5eUlIZHBkR2dnWVc0Z2IzUm9aWElnZG1WamRHOXlMQ0JqYjIxd2IyNWxiblF0ZDJselpTNEtJQ0FnSUNBcUlFQndZWEpoYlNCMFlYSm5aWFFnVkdobElIWmxZM1J2Y2lCMGJ5QnpZWFpsSUhSb1pTQnlaWE4xYkhRZ2FXNHVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2RtMTFiQ2gyWldOMGIzSXNJSFJoY21kbGRDa2dld29nSUNBZ0lDQnBaaUFvZEdGeVoyVjBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCMFlYSm5aWFFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMFlYSm5aWFF1ZUNBOUlIWmxZM1J2Y2k1NElDb2dkR2hwY3k1NE93b2dJQ0FnSUNCMFlYSm5aWFF1ZVNBOUlIWmxZM1J2Y2k1NUlDb2dkR2hwY3k1NU93b2dJQ0FnSUNCMFlYSm5aWFF1ZWlBOUlIWmxZM1J2Y2k1NklDb2dkR2hwY3k1Nk93b2dJQ0FnSUNCeVpYUjFjbTRnZEdGeVoyVjBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFkyRnNaU0JoSUhabFkzUnZjaUJoYm1RZ1lXUmtJR2wwSUhSdklIUm9hWE1nZG1WamRHOXlMaUJUWVhabElIUm9aU0J5WlhOMWJIUWdhVzRnSW5SaGNtZGxkQ0l1SUNoMFlYSm5aWFFnUFNCMGFHbHpJQ3NnZG1WamRHOXlJQ29nYzJOaGJHRnlLUW9nSUNBZ0lDb2dRSEJoY21GdElIUmhjbWRsZENCVWFHVWdkbVZqZEc5eUlIUnZJSE5oZG1VZ2RHaGxJSEpsYzNWc2RDQnBiaTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQmhaR1JUWTJGc1pXUldaV04wYjNJb2MyTmhiR0Z5TENCMlpXTjBiM0lzSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBZWEpuWlhRdWVDQTlJSFJvYVhNdWVDQXJJSE5qWVd4aGNpQXFJSFpsWTNSdmNpNTRPd29nSUNBZ0lDQjBZWEpuWlhRdWVTQTlJSFJvYVhNdWVTQXJJSE5qWVd4aGNpQXFJSFpsWTNSdmNpNTVPd29nSUNBZ0lDQjBZWEpuWlhRdWVpQTlJSFJvYVhNdWVpQXJJSE5qWVd4aGNpQXFJSFpsWTNSdmNpNTZPd29nSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRZV3hqZFd4aGRHVWdaRzkwSUhCeWIyUjFZM1FLSUNBZ0lDQXFJRUJ3WVhKaGJTQjJaV04wYjNJS0lDQWdJQ0FxTHdvS0NpQWdJQ0JrYjNRb2RtVmpkRzl5S1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLaUIyWldOMGIzSXVlQ0FySUhSb2FYTXVlU0FxSUhabFkzUnZjaTU1SUNzZ2RHaHBjeTU2SUNvZ2RtVmpkRzl5TG5vN0NpQWdJQ0I5Q2dvZ0lDQWdhWE5hWlhKdktDa2dld29nSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwOVBTQXdJQ1ltSUhSb2FYTXVlU0E5UFQwZ01DQW1KaUIwYUdsekxub2dQVDA5SURBN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRTFoYTJVZ2RHaGxJSFpsWTNSdmNpQndiMmx1ZENCcGJpQjBhR1VnYjNCd2IzTnBkR1VnWkdseVpXTjBhVzl1TGdvZ0lDQWdJQ29nUUhCaGNtRnRJSFJoY21kbGRDQlBjSFJwYjI1aGJDQjBZWEpuWlhRZ2RHOGdjMkYyWlNCcGJnb2dJQ0FnSUNvdkNnb0tJQ0FnSUc1bFoyRjBaU2gwWVhKblpYUXBJSHNLSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2RHRnlaMlYwTG5nZ1BTQXRkR2hwY3k1NE93b2dJQ0FnSUNCMFlYSm5aWFF1ZVNBOUlDMTBhR2x6TG5rN0NpQWdJQ0FnSUhSaGNtZGxkQzU2SUQwZ0xYUm9hWE11ZWpzS0lDQWdJQ0FnY21WMGRYSnVJSFJoY21kbGREc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTI5dGNIVjBaU0IwZDI4Z1lYSjBhV1pwWTJsaGJDQjBZVzVuWlc1MGN5QjBieUIwYUdVZ2RtVmpkRzl5Q2lBZ0lDQWdLaUJBY0dGeVlXMGdkREVnVm1WamRHOXlJRzlpYW1WamRDQjBieUJ6WVhabElIUm9aU0JtYVhKemRDQjBZVzVuWlc1MElHbHVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RESWdWbVZqZEc5eUlHOWlhbVZqZENCMGJ5QnpZWFpsSUhSb1pTQnpaV052Ym1RZ2RHRnVaMlZ1ZENCcGJnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhSaGJtZGxiblJ6S0hReExDQjBNaWtnZXdvZ0lDQWdJQ0JqYjI1emRDQnViM0p0SUQwZ2RHaHBjeTVzWlc1bmRHZ29LVHNLQ2lBZ0lDQWdJR2xtSUNodWIzSnRJRDRnTUM0d0tTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2JpQTlJRlpsWXpOZmRHRnVaMlZ1ZEhOZmJqc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJtOXliU0E5SURFZ0x5QnViM0p0T3dvZ0lDQWdJQ0FnSUc0dWMyVjBLSFJvYVhNdWVDQXFJR2x1YjNKdExDQjBhR2x6TG5rZ0tpQnBibTl5YlN3Z2RHaHBjeTU2SUNvZ2FXNXZjbTBwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEpoYm1SV1pXTWdQU0JXWldNelgzUmhibWRsYm5SelgzSmhibVJXWldNN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2hOWVhSb0xtRmljeWh1TG5ncElEd2dNQzQ1S1NCN0NpQWdJQ0FnSUNBZ0lDQnlZVzVrVm1WakxuTmxkQ2d4TENBd0xDQXdLVHNLSUNBZ0lDQWdJQ0FnSUc0dVkzSnZjM01vY21GdVpGWmxZeXdnZERFcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQnlZVzVrVm1WakxuTmxkQ2d3TENBeExDQXdLVHNLSUNBZ0lDQWdJQ0FnSUc0dVkzSnZjM01vY21GdVpGWmxZeXdnZERFcE93b2dJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdiaTVqY205emN5aDBNU3dnZERJcE93b2dJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUM4dklGUm9aU0J1YjNKdFlXd2diR1Z1WjNSb0lHbHpJSHBsY204c0lHMWhhMlVnYzI5dFpYUm9hVzVuSUhWd0NpQWdJQ0FnSUNBZ2RERXVjMlYwS0RFc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUhReUxuTmxkQ2d3TENBeExDQXdLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRGIyNTJaWEowY3lCMGJ5QmhJRzF2Y21VZ2NtVmhaR0ZpYkdVZ1ptOXliV0YwQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdkRzlUZEhKcGJtY29LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQmdKSHQwYUdsekxuaDlMQ1I3ZEdocGN5NTVmU3drZTNSb2FYTXVlbjFnT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRiMjUyWlhKMGN5QjBieUJoYmlCaGNuSmhlUW9nSUNBZ0lDb3ZDZ29LSUNBZ0lIUnZRWEp5WVhrb0tTQjdDaUFnSUNBZ0lISmxkSFZ5YmlCYmRHaHBjeTU0TENCMGFHbHpMbmtzSUhSb2FYTXVlbDA3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZjR2xsY3lCMllXeDFaU0J2WmlCemIzVnlZMlVnZEc4Z2RHaHBjeUIyWldOMGIzSXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyOXdlU2gyWldOMGIzSXBJSHNLSUNBZ0lDQWdkR2hwY3k1NElEMGdkbVZqZEc5eUxuZzdDaUFnSUNBZ0lIUm9hWE11ZVNBOUlIWmxZM1J2Y2k1NU93b2dJQ0FnSUNCMGFHbHpMbm9nUFNCMlpXTjBiM0l1ZWpzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRVJ2SUdFZ2JHbHVaV0Z5SUdsdWRHVnljRzlzWVhScGIyNGdZbVYwZDJWbGJpQjBkMjhnZG1WamRHOXljd29nSUNBZ0lDb2dRSEJoY21GdElIUWdRU0J1ZFcxaVpYSWdZbVYwZDJWbGJpQXdJR0Z1WkNBeExpQXdJSGRwYkd3Z2JXRnJaU0IwYUdseklHWjFibU4wYVc5dUlISmxkSFZ5YmlCMUxDQmhibVFnTVNCM2FXeHNJRzFoYTJVZ2FYUWdjbVYwZFhKdUlIWXVJRTUxYldKbGNuTWdhVzRnWW1WMGQyVmxiaUIzYVd4c0lHZGxibVZ5WVhSbElHRWdkbVZqZEc5eUlHbHVJR0psZEhkbFpXNGdkR2hsYlM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JzWlhKd0tIWmxZM1J2Y2l3Z2RDd2dkR0Z5WjJWMEtTQjdDaUFnSUNBZ0lHTnZibk4wSUhnZ1BTQjBhR2x6TG5nN0NpQWdJQ0FnSUdOdmJuTjBJSGtnUFNCMGFHbHpMbms3Q2lBZ0lDQWdJR052Ym5OMElIb2dQU0IwYUdsekxubzdDaUFnSUNBZ0lIUmhjbWRsZEM1NElEMGdlQ0FySUNoMlpXTjBiM0l1ZUNBdElIZ3BJQ29nZERzS0lDQWdJQ0FnZEdGeVoyVjBMbmtnUFNCNUlDc2dLSFpsWTNSdmNpNTVJQzBnZVNrZ0tpQjBPd29nSUNBZ0lDQjBZWEpuWlhRdWVpQTlJSG9nS3lBb2RtVmpkRzl5TG5vZ0xTQjZLU0FxSUhRN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRU5vWldOcklHbG1JR0VnZG1WamRHOXlJR1Z4ZFdGc2N5QnBjeUJoYkcxdmMzUWdaWEYxWVd3Z2RHOGdZVzV2ZEdobGNpQnZibVV1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZV3h0YjNOMFJYRjFZV3h6S0habFkzUnZjaXdnY0hKbFkybHphVzl1S1NCN0NpQWdJQ0FnSUdsbUlDaHdjbVZqYVhOcGIyNGdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhCeVpXTnBjMmx2YmlBOUlERmxMVFk3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNoTllYUm9MbUZpY3loMGFHbHpMbmdnTFNCMlpXTjBiM0l1ZUNrZ1BpQndjbVZqYVhOcGIyNGdmSHdnVFdGMGFDNWhZbk1vZEdocGN5NTVJQzBnZG1WamRHOXlMbmtwSUQ0Z2NISmxZMmx6YVc5dUlIeDhJRTFoZEdndVlXSnpLSFJvYVhNdWVpQXRJSFpsWTNSdmNpNTZLU0ErSUhCeVpXTnBjMmx2YmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTm9aV05ySUdsbUlHRWdkbVZqZEc5eUlHbHpJR0ZzYlc5emRDQjZaWEp2Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZV3h0YjNOMFdtVnlieWh3Y21WamFYTnBiMjRwSUhzS0lDQWdJQ0FnYVdZZ0tIQnlaV05wYzJsdmJpQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnY0hKbFkybHphVzl1SUQwZ01XVXROanNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0UxaGRHZ3VZV0p6S0hSb2FYTXVlQ2tnUGlCd2NtVmphWE5wYjI0Z2ZId2dUV0YwYUM1aFluTW9kR2hwY3k1NUtTQStJSEJ5WldOcGMybHZiaUI4ZkNCTllYUm9MbUZpY3loMGFHbHpMbm9wSUQ0Z2NISmxZMmx6YVc5dUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlRzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMmhsWTJzZ2FXWWdkR2hsSUhabFkzUnZjaUJwY3lCaGJuUnBMWEJoY21Gc2JHVnNJSFJ2SUdGdWIzUm9aWElnZG1WamRHOXlMZ29nSUNBZ0lDb2dRSEJoY21GdElIQnlaV05wYzJsdmJpQlRaWFFnZEc4Z2VtVnlieUJtYjNJZ1pYaGhZM1FnWTI5dGNHRnlhWE52Ym5NS0lDQWdJQ0FxTHdvS0NpQWdJQ0JwYzBGdWRHbHdZWEpoYkd4bGJGUnZLSFpsWTNSdmNpd2djSEpsWTJsemFXOXVLU0I3Q2lBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJsS0dGdWRHbHdYMjVsWnlrN0NpQWdJQ0FnSUhKbGRIVnliaUJoYm5ScGNGOXVaV2N1WVd4dGIzTjBSWEYxWVd4ektIWmxZM1J2Y2l3Z2NISmxZMmx6YVc5dUtUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTJ4dmJtVWdkR2hsSUhabFkzUnZjZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGWmxZek1vZEdocGN5NTRMQ0IwYUdsekxua3NJSFJvYVhNdWVpazdDaUFnSUNCOUNnb2dJSDBLSUNCV1pXTXpMbHBGVWs4Z1BTQnVaWGNnVm1Wak15Z3dMQ0F3TENBd0tUc0tJQ0JXWldNekxsVk9TVlJmV0NBOUlHNWxkeUJXWldNektERXNJREFzSURBcE93b2dJRlpsWXpNdVZVNUpWRjlaSUQwZ2JtVjNJRlpsWXpNb01Dd2dNU3dnTUNrN0NpQWdWbVZqTXk1VlRrbFVYMW9nUFNCdVpYY2dWbVZqTXlnd0xDQXdMQ0F4S1RzS0lDQmpiMjV6ZENCV1pXTXpYM1JoYm1kbGJuUnpYMjRnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElGWmxZek5mZEdGdVoyVnVkSE5mY21GdVpGWmxZeUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ1lXNTBhWEJmYm1WbklEMGdibVYzSUZabFl6TW9LVHNLQ2lBZ0x5b3FDaUFnSUNvZ1FYaHBjeUJoYkdsbmJtVmtJR0p2ZFc1a2FXNW5JR0p2ZUNCamJHRnpjeTRLSUNBZ0tpOEtJQ0JqYkdGemN5QkJRVUpDSUhzS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVkdobElHeHZkMlZ5SUdKdmRXNWtJRzltSUhSb1pTQmliM1Z1WkdsdVp5QmliM2dLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWR2hsSUhWd2NHVnlJR0p2ZFc1a0lHOW1JSFJvWlNCaWIzVnVaR2x1WnlCaWIzZ0tJQ0FnSUNBcUx3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lrZ2V3b2dJQ0FnSUNCcFppQW9iM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUh0OU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGFHbHpMbXh2ZDJWeVFtOTFibVFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCMGFHbHpMblZ3Y0dWeVFtOTFibVFnUFNCdVpYY2dWbVZqTXlncE93b0tJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXViRzkzWlhKQ2IzVnVaQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXViRzkzWlhKQ2IzVnVaQzVqYjNCNUtHOXdkR2x2Ym5NdWJHOTNaWEpDYjNWdVpDazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMblZ3Y0dWeVFtOTFibVFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMblZ3Y0dWeVFtOTFibVF1WTI5d2VTaHZjSFJwYjI1ekxuVndjR1Z5UW05MWJtUXBPd29nSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZObGRDQjBhR1VnUVVGQ1FpQmliM1Z1WkhNZ1puSnZiU0JoSUhObGRDQnZaaUJ3YjJsdWRITXVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NHOXBiblJ6SUVGdUlHRnljbUY1SUc5bUlGWmxZek1uY3k0S0lDQWdJQ0FxSUVCeVpYUjFjbTRnVkdobElITmxiR1lnYjJKcVpXTjBDaUFnSUNBZ0tpOEtDZ29nSUNBZ2MyVjBSbkp2YlZCdmFXNTBjeWh3YjJsdWRITXNJSEJ2YzJsMGFXOXVMQ0J4ZFdGMFpYSnVhVzl1TENCemEybHVVMmw2WlNrZ2V3b2dJQ0FnSUNCamIyNXpkQ0JzSUQwZ2RHaHBjeTVzYjNkbGNrSnZkVzVrT3dvZ0lDQWdJQ0JqYjI1emRDQjFJRDBnZEdocGN5NTFjSEJsY2tKdmRXNWtPd29nSUNBZ0lDQmpiMjV6ZENCeElEMGdjWFZoZEdWeWJtbHZianNnTHk4Z1UyVjBJSFJ2SUhSb1pTQm1hWEp6ZENCd2IybHVkQW9LSUNBZ0lDQWdiQzVqYjNCNUtIQnZhVzUwYzFzd1hTazdDZ29nSUNBZ0lDQnBaaUFvY1NrZ2V3b2dJQ0FnSUNBZ0lIRXVkbTExYkhRb2JDd2diQ2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFV1WTI5d2VTaHNLVHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBeE95QnBJRHdnY0c5cGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSEFnUFNCd2IybHVkSE5iYVYwN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2h4S1NCN0NpQWdJQ0FnSUNBZ0lDQnhMblp0ZFd4MEtIQXNJSFJ0Y0NReEtUc0tJQ0FnSUNBZ0lDQWdJSEFnUFNCMGJYQWtNVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHdMbmdnUGlCMUxuZ3BJSHNLSUNBZ0lDQWdJQ0FnSUhVdWVDQTlJSEF1ZURzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lHbG1JQ2h3TG5nZ1BDQnNMbmdwSUhzS0lDQWdJQ0FnSUNBZ0lHd3VlQ0E5SUhBdWVEc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR2xtSUNod0xua2dQaUIxTG5rcElIc0tJQ0FnSUNBZ0lDQWdJSFV1ZVNBOUlIQXVlVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHdMbmtnUENCc0xua3BJSHNLSUNBZ0lDQWdJQ0FnSUd3dWVTQTlJSEF1ZVRzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lHbG1JQ2h3TG5vZ1BpQjFMbm9wSUhzS0lDQWdJQ0FnSUNBZ0lIVXVlaUE5SUhBdWVqc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR2xtSUNod0xub2dQQ0JzTG5vcElIc0tJQ0FnSUNBZ0lDQWdJR3d1ZWlBOUlIQXVlanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBnTHk4Z1FXUmtJRzltWm5ObGRBb0tDaUFnSUNBZ0lHbG1JQ2h3YjNOcGRHbHZiaWtnZXdvZ0lDQWdJQ0FnSUhCdmMybDBhVzl1TG5aaFpHUW9iQ3dnYkNrN0NpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0dWRtRmtaQ2gxTENCMUtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLSE5yYVc1VGFYcGxLU0I3Q2lBZ0lDQWdJQ0FnYkM1NElDMDlJSE5yYVc1VGFYcGxPd29nSUNBZ0lDQWdJR3d1ZVNBdFBTQnphMmx1VTJsNlpUc0tJQ0FnSUNBZ0lDQnNMbm9nTFQwZ2MydHBibE5wZW1VN0NpQWdJQ0FnSUNBZ2RTNTRJQ3M5SUhOcmFXNVRhWHBsT3dvZ0lDQWdJQ0FnSUhVdWVTQXJQU0J6YTJsdVUybDZaVHNLSUNBZ0lDQWdJQ0IxTG5vZ0t6MGdjMnRwYmxOcGVtVTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRGIzQjVJR0p2ZFc1a2N5Qm1jbTl0SUdGdUlFRkJRa0lnZEc4Z2RHaHBjeUJCUVVKQ0NpQWdJQ0FnS2lCQWNHRnlZVzBnWVdGaVlpQlRiM1Z5WTJVZ2RHOGdZMjl3ZVNCbWNtOXRDaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUm9aU0IwYUdseklHOWlhbVZqZEN3Z1ptOXlJR05vWVdsdVlXSnBiR2wwZVFvZ0lDQWdJQ292Q2dvS0lDQWdJR052Y0hrb1lXRmlZaWtnZXdvZ0lDQWdJQ0IwYUdsekxteHZkMlZ5UW05MWJtUXVZMjl3ZVNoaFlXSmlMbXh2ZDJWeVFtOTFibVFwT3dvZ0lDQWdJQ0IwYUdsekxuVndjR1Z5UW05MWJtUXVZMjl3ZVNoaFlXSmlMblZ3Y0dWeVFtOTFibVFwT3dvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMnh2Ym1VZ1lXNGdRVUZDUWdvZ0lDQWdJQ292Q2dvS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQnlaWFIxY200Z2JtVjNJRUZCUWtJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRmVIUmxibVFnZEdocGN5QkJRVUpDSUhOdklIUm9ZWFFnYVhRZ1kyOTJaWEp6SUhSb1pTQm5hWFpsYmlCQlFVSkNJSFJ2Ynk0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JsZUhSbGJtUW9ZV0ZpWWlrZ2V3b2dJQ0FnSUNCMGFHbHpMbXh2ZDJWeVFtOTFibVF1ZUNBOUlFMWhkR2d1YldsdUtIUm9hWE11Ykc5M1pYSkNiM1Z1WkM1NExDQmhZV0ppTG14dmQyVnlRbTkxYm1RdWVDazdDaUFnSUNBZ0lIUm9hWE11ZFhCd1pYSkNiM1Z1WkM1NElEMGdUV0YwYUM1dFlYZ29kR2hwY3k1MWNIQmxja0p2ZFc1a0xuZ3NJR0ZoWW1JdWRYQndaWEpDYjNWdVpDNTRLVHNLSUNBZ0lDQWdkR2hwY3k1c2IzZGxja0p2ZFc1a0xua2dQU0JOWVhSb0xtMXBiaWgwYUdsekxteHZkMlZ5UW05MWJtUXVlU3dnWVdGaVlpNXNiM2RsY2tKdmRXNWtMbmtwT3dvZ0lDQWdJQ0IwYUdsekxuVndjR1Z5UW05MWJtUXVlU0E5SUUxaGRHZ3ViV0Y0S0hSb2FYTXVkWEJ3WlhKQ2IzVnVaQzU1TENCaFlXSmlMblZ3Y0dWeVFtOTFibVF1ZVNrN0NpQWdJQ0FnSUhSb2FYTXViRzkzWlhKQ2IzVnVaQzU2SUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTVzYjNkbGNrSnZkVzVrTG5vc0lHRmhZbUl1Ykc5M1pYSkNiM1Z1WkM1NktUc0tJQ0FnSUNBZ2RHaHBjeTUxY0hCbGNrSnZkVzVrTG5vZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG5Wd2NHVnlRbTkxYm1RdWVpd2dZV0ZpWWk1MWNIQmxja0p2ZFc1a0xub3BPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSeWRXVWdhV1lnZEdobElHZHBkbVZ1SUVGQlFrSWdiM1psY214aGNITWdkR2hwY3lCQlFVSkNMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHOTJaWEpzWVhCektHRmhZbUlwSUhzS0lDQWdJQ0FnWTI5dWMzUWdiREVnUFNCMGFHbHpMbXh2ZDJWeVFtOTFibVE3Q2lBZ0lDQWdJR052Ym5OMElIVXhJRDBnZEdocGN5NTFjSEJsY2tKdmRXNWtPd29nSUNBZ0lDQmpiMjV6ZENCc01pQTlJR0ZoWW1JdWJHOTNaWEpDYjNWdVpEc0tJQ0FnSUNBZ1kyOXVjM1FnZFRJZ1BTQmhZV0ppTG5Wd2NHVnlRbTkxYm1RN0lDOHZJQ0FnSUNBZ2JESWdJQ0FnSUNBZ0lIVXlDaUFnSUNBZ0lDOHZJQ0FnSUNBZ2ZDMHRMUzB0TFMwdExYd0tJQ0FnSUNBZ0x5OGdmQzB0TFMwdExTMHRmQW9nSUNBZ0lDQXZMeUJzTVNBZ0lDQWdJQ0IxTVFvS0lDQWdJQ0FnWTI5dWMzUWdiM1psY214aGNITllJRDBnYkRJdWVDQThQU0IxTVM1NElDWW1JSFV4TG5nZ1BEMGdkVEl1ZUNCOGZDQnNNUzU0SUR3OUlIVXlMbmdnSmlZZ2RUSXVlQ0E4UFNCMU1TNTRPd29nSUNBZ0lDQmpiMjV6ZENCdmRtVnliR0Z3YzFrZ1BTQnNNaTU1SUR3OUlIVXhMbmtnSmlZZ2RURXVlU0E4UFNCMU1pNTVJSHg4SUd3eExua2dQRDBnZFRJdWVTQW1KaUIxTWk1NUlEdzlJSFV4TG5rN0NpQWdJQ0FnSUdOdmJuTjBJRzkyWlhKc1lYQnpXaUE5SUd3eUxub2dQRDBnZFRFdWVpQW1KaUIxTVM1NklEdzlJSFV5TG5vZ2ZId2diREV1ZWlBOFBTQjFNaTU2SUNZbUlIVXlMbm9nUEQwZ2RURXVlanNLSUNBZ0lDQWdjbVYwZFhKdUlHOTJaWEpzWVhCeldDQW1KaUJ2ZG1WeWJHRndjMWtnSmlZZ2IzWmxjbXhoY0hOYU93b2dJQ0FnZlNBdkx5Qk5iM04wYkhrZ1ptOXlJR1JsWW5WbloybHVad29LQ2lBZ0lDQjJiMngxYldVb0tTQjdDaUFnSUNBZ0lHTnZibk4wSUd3Z1BTQjBhR2x6TG14dmQyVnlRbTkxYm1RN0NpQWdJQ0FnSUdOdmJuTjBJSFVnUFNCMGFHbHpMblZ3Y0dWeVFtOTFibVE3Q2lBZ0lDQWdJSEpsZEhWeWJpQW9kUzU0SUMwZ2JDNTRLU0FxSUNoMUxua2dMU0JzTG5rcElDb2dLSFV1ZWlBdElHd3VlaWs3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RISjFaU0JwWmlCMGFHVWdaMmwyWlc0Z1FVRkNRaUJwY3lCbWRXeHNlU0JqYjI1MFlXbHVaV1FnYVc0Z2RHaHBjeUJCUVVKQ0xnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdOdmJuUmhhVzV6S0dGaFltSXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ2JERWdQU0IwYUdsekxteHZkMlZ5UW05MWJtUTdDaUFnSUNBZ0lHTnZibk4wSUhVeElEMGdkR2hwY3k1MWNIQmxja0p2ZFc1a093b2dJQ0FnSUNCamIyNXpkQ0JzTWlBOUlHRmhZbUl1Ykc5M1pYSkNiM1Z1WkRzS0lDQWdJQ0FnWTI5dWMzUWdkVElnUFNCaFlXSmlMblZ3Y0dWeVFtOTFibVE3SUM4dklDQWdJQ0FnYkRJZ0lDQWdJQ0FnSUhVeUNpQWdJQ0FnSUM4dklDQWdJQ0FnZkMwdExTMHRMUzB0TFh3S0lDQWdJQ0FnTHk4Z2ZDMHRMUzB0TFMwdExTMHRMUzB0TFh3S0lDQWdJQ0FnTHk4Z2JERWdJQ0FnSUNBZ0lDQWdJQ0FnSUhVeENnb2dJQ0FnSUNCeVpYUjFjbTRnYkRFdWVDQThQU0JzTWk1NElDWW1JSFV4TG5nZ1BqMGdkVEl1ZUNBbUppQnNNUzU1SUR3OUlHd3lMbmtnSmlZZ2RURXVlU0ErUFNCMU1pNTVJQ1ltSUd3eExub2dQRDBnYkRJdWVpQW1KaUIxTVM1NklENDlJSFV5TG5vN0NpQWdJQ0I5Q2dvZ0lDQWdaMlYwUTI5eWJtVnljeWhoTENCaUxDQmpMQ0JrTENCbExDQm1MQ0JuTENCb0tTQjdDaUFnSUNBZ0lHTnZibk4wSUd3Z1BTQjBhR2x6TG14dmQyVnlRbTkxYm1RN0NpQWdJQ0FnSUdOdmJuTjBJSFVnUFNCMGFHbHpMblZ3Y0dWeVFtOTFibVE3Q2lBZ0lDQWdJR0V1WTI5d2VTaHNLVHNLSUNBZ0lDQWdZaTV6WlhRb2RTNTRMQ0JzTG5rc0lHd3VlaWs3Q2lBZ0lDQWdJR011YzJWMEtIVXVlQ3dnZFM1NUxDQnNMbm9wT3dvZ0lDQWdJQ0JrTG5ObGRDaHNMbmdzSUhVdWVTd2dkUzU2S1RzS0lDQWdJQ0FnWlM1elpYUW9kUzU0TENCc0xua3NJSFV1ZWlrN0NpQWdJQ0FnSUdZdWMyVjBLR3d1ZUN3Z2RTNTVMQ0JzTG5vcE93b2dJQ0FnSUNCbkxuTmxkQ2hzTG5nc0lHd3VlU3dnZFM1NktUc0tJQ0FnSUNBZ2FDNWpiM0I1S0hVcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJIWlhRZ2RHaGxJSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JR0Z1SUVGQlFrSWdhVzRnWVc1dmRHaGxjaUJtY21GdFpTNEtJQ0FnSUNBcUlFQnlaWFIxY200Z1ZHaGxJQ0owWVhKblpYUWlJRUZCUWtJZ2IySnFaV04wTGdvZ0lDQWdJQ292Q2dvS0lDQWdJSFJ2VEc5allXeEdjbUZ0WlNobWNtRnRaU3dnZEdGeVoyVjBLU0I3Q2lBZ0lDQWdJR052Ym5OMElHTnZjbTVsY25NZ1BTQjBjbUZ1YzJadmNtMUpiblJ2Um5KaGJXVmZZMjl5Ym1WeWN6c0tJQ0FnSUNBZ1kyOXVjM1FnWVNBOUlHTnZjbTVsY25OYk1GMDdDaUFnSUNBZ0lHTnZibk4wSUdJZ1BTQmpiM0p1WlhKeld6RmRPd29nSUNBZ0lDQmpiMjV6ZENCaklEMGdZMjl5Ym1WeWMxc3lYVHNLSUNBZ0lDQWdZMjl1YzNRZ1pDQTlJR052Y201bGNuTmJNMTA3Q2lBZ0lDQWdJR052Ym5OMElHVWdQU0JqYjNKdVpYSnpXelJkT3dvZ0lDQWdJQ0JqYjI1emRDQm1JRDBnWTI5eWJtVnljMXMxWFRzS0lDQWdJQ0FnWTI5dWMzUWdaeUE5SUdOdmNtNWxjbk5iTmwwN0NpQWdJQ0FnSUdOdmJuTjBJR2dnUFNCamIzSnVaWEp6V3pkZE95QXZMeUJIWlhRZ1kyOXlibVZ5Y3lCcGJpQmpkWEp5Wlc1MElHWnlZVzFsQ2dvZ0lDQWdJQ0IwYUdsekxtZGxkRU52Y201bGNuTW9ZU3dnWWl3Z1l5d2daQ3dnWlN3Z1ppd2daeXdnYUNrN0lDOHZJRlJ5WVc1elptOXliU0IwYUdWdElIUnZJRzVsZHlCc2IyTmhiQ0JtY21GdFpRb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ0lUMDlJRGc3SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElHTnZjbTVsY2lBOUlHTnZjbTVsY25OYmFWMDdDaUFnSUNBZ0lDQWdabkpoYldVdWNHOXBiblJVYjB4dlkyRnNLR052Y201bGNpd2dZMjl5Ym1WeUtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkQzV6WlhSR2NtOXRVRzlwYm5SektHTnZjbTVsY25NcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJIWlhRZ2RHaGxJSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JR0Z1SUVGQlFrSWdhVzRnZEdobElHZHNiMkpoYkNCbWNtRnRaUzRLSUNBZ0lDQXFJRUJ5WlhSMWNtNGdWR2hsSUNKMFlYSm5aWFFpSUVGQlFrSWdiMkpxWldOMExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhSdlYyOXliR1JHY21GdFpTaG1jbUZ0WlN3Z2RHRnlaMlYwS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR052Y201bGNuTWdQU0IwY21GdWMyWnZjbTFKYm5SdlJuSmhiV1ZmWTI5eWJtVnljenNLSUNBZ0lDQWdZMjl1YzNRZ1lTQTlJR052Y201bGNuTmJNRjA3Q2lBZ0lDQWdJR052Ym5OMElHSWdQU0JqYjNKdVpYSnpXekZkT3dvZ0lDQWdJQ0JqYjI1emRDQmpJRDBnWTI5eWJtVnljMXN5WFRzS0lDQWdJQ0FnWTI5dWMzUWdaQ0E5SUdOdmNtNWxjbk5iTTEwN0NpQWdJQ0FnSUdOdmJuTjBJR1VnUFNCamIzSnVaWEp6V3pSZE93b2dJQ0FnSUNCamIyNXpkQ0JtSUQwZ1kyOXlibVZ5YzFzMVhUc0tJQ0FnSUNBZ1kyOXVjM1FnWnlBOUlHTnZjbTVsY25OYk5sMDdDaUFnSUNBZ0lHTnZibk4wSUdnZ1BTQmpiM0p1WlhKeld6ZGRPeUF2THlCSFpYUWdZMjl5Ym1WeWN5QnBiaUJqZFhKeVpXNTBJR1p5WVcxbENnb2dJQ0FnSUNCMGFHbHpMbWRsZEVOdmNtNWxjbk1vWVN3Z1lpd2dZeXdnWkN3Z1pTd2daaXdnWnl3Z2FDazdJQzh2SUZSeVlXNXpabTl5YlNCMGFHVnRJSFJ2SUc1bGR5QnNiMk5oYkNCbWNtRnRaUW9LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dJVDA5SURnN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJR052Y201bGNpQTlJR052Y201bGNuTmJhVjA3Q2lBZ0lDQWdJQ0FnWm5KaGJXVXVjRzlwYm5SVWIxZHZjbXhrS0dOdmNtNWxjaXdnWTI5eWJtVnlLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlIUmhjbWRsZEM1elpYUkdjbTl0VUc5cGJuUnpLR052Y201bGNuTXBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRGFHVmpheUJwWmlCMGFHVWdRVUZDUWlCcGN5Qm9hWFFnWW5rZ1lTQnlZWGt1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdiM1psY214aGNITlNZWGtvY21GNUtTQjdDaUFnSUNBZ0lHTnZibk4wSUhzS0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0c0NpQWdJQ0FnSUNBZ1puSnZiUW9nSUNBZ0lDQjlJRDBnY21GNU95QXZMeUJqYjI1emRDQjBJRDBnTUFvZ0lDQWdJQ0F2THlCeVlYa3VaR2x5WldOMGFXOXVJR2x6SUhWdWFYUWdaR2x5WldOMGFXOXVJSFpsWTNSdmNpQnZaaUJ5WVhrS0NpQWdJQ0FnSUdOdmJuTjBJR1JwY2taeVlXTllJRDBnTVNBdklHUnBjbVZqZEdsdmJpNTRPd29nSUNBZ0lDQmpiMjV6ZENCa2FYSkdjbUZqV1NBOUlERWdMeUJrYVhKbFkzUnBiMjR1ZVRzS0lDQWdJQ0FnWTI5dWMzUWdaR2x5Um5KaFkxb2dQU0F4SUM4Z1pHbHlaV04wYVc5dUxubzdJQzh2SUhSb2FYTXViRzkzWlhKQ2IzVnVaQ0JwY3lCMGFHVWdZMjl5Ym1WeUlHOW1JRUZCUWtJZ2QybDBhQ0J0YVc1cGJXRnNJR052YjNKa2FXNWhkR1Z6SUMwZ2JHVm1kQ0JpYjNSMGIyMHNJSEowSUdseklHMWhlR2x0WVd3Z1kyOXlibVZ5Q2dvZ0lDQWdJQ0JqYjI1emRDQjBNU0E5SUNoMGFHbHpMbXh2ZDJWeVFtOTFibVF1ZUNBdElHWnliMjB1ZUNrZ0tpQmthWEpHY21GaldEc0tJQ0FnSUNBZ1kyOXVjM1FnZERJZ1BTQW9kR2hwY3k1MWNIQmxja0p2ZFc1a0xuZ2dMU0JtY205dExuZ3BJQ29nWkdseVJuSmhZMWc3Q2lBZ0lDQWdJR052Ym5OMElIUXpJRDBnS0hSb2FYTXViRzkzWlhKQ2IzVnVaQzU1SUMwZ1puSnZiUzU1S1NBcUlHUnBja1p5WVdOWk93b2dJQ0FnSUNCamIyNXpkQ0IwTkNBOUlDaDBhR2x6TG5Wd2NHVnlRbTkxYm1RdWVTQXRJR1p5YjIwdWVTa2dLaUJrYVhKR2NtRmpXVHNLSUNBZ0lDQWdZMjl1YzNRZ2REVWdQU0FvZEdocGN5NXNiM2RsY2tKdmRXNWtMbm9nTFNCbWNtOXRMbm9wSUNvZ1pHbHlSbkpoWTFvN0NpQWdJQ0FnSUdOdmJuTjBJSFEySUQwZ0tIUm9hWE11ZFhCd1pYSkNiM1Z1WkM1NklDMGdabkp2YlM1NktTQXFJR1JwY2taeVlXTmFPeUF2THlCamIyNXpkQ0IwYldsdUlEMGdUV0YwYUM1dFlYZ29UV0YwYUM1dFlYZ29UV0YwYUM1dGFXNG9kREVzSUhReUtTd2dUV0YwYUM1dGFXNG9kRE1zSUhRMEtTa3BPd29nSUNBZ0lDQXZMeUJqYjI1emRDQjBiV0Y0SUQwZ1RXRjBhQzV0YVc0b1RXRjBhQzV0YVc0b1RXRjBhQzV0WVhnb2RERXNJSFF5S1N3Z1RXRjBhQzV0WVhnb2RETXNJSFEwS1NrcE93b0tJQ0FnSUNBZ1kyOXVjM1FnZEcxcGJpQTlJRTFoZEdndWJXRjRLRTFoZEdndWJXRjRLRTFoZEdndWJXbHVLSFF4TENCME1pa3NJRTFoZEdndWJXbHVLSFF6TENCME5Da3BMQ0JOWVhSb0xtMXBiaWgwTlN3Z2REWXBLVHNLSUNBZ0lDQWdZMjl1YzNRZ2RHMWhlQ0E5SUUxaGRHZ3ViV2x1S0UxaGRHZ3ViV2x1S0UxaGRHZ3ViV0Y0S0hReExDQjBNaWtzSUUxaGRHZ3ViV0Y0S0hRekxDQjBOQ2twTENCTllYUm9MbTFoZUNoME5Td2dkRFlwS1RzZ0x5OGdhV1lnZEcxaGVDQThJREFzSUhKaGVTQW9iR2x1WlNrZ2FYTWdhVzUwWlhKelpXTjBhVzVuSUVGQlFrSXNJR0oxZENCM2FHOXNaU0JCUVVKQ0lHbHpJR0psYUdsdVp5QjFjd29LSUNBZ0lDQWdhV1lnS0hSdFlYZ2dQQ0F3S1NCN0NpQWdJQ0FnSUNBZ0x5OTBJRDBnZEcxaGVEc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3Q2lBZ0lDQWdJSDBnTHk4Z2FXWWdkRzFwYmlBK0lIUnRZWGdzSUhKaGVTQmtiMlZ6YmlkMElHbHVkR1Z5YzJWamRDQkJRVUpDQ2dvS0lDQWdJQ0FnYVdZZ0tIUnRhVzRnUGlCMGJXRjRLU0I3Q2lBZ0lDQWdJQ0FnTHk5MElEMGdkRzFoZURzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPd29nSUNBZ2ZRb0tJQ0I5Q2lBZ1kyOXVjM1FnZEcxd0pERWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUhSeVlXNXpabTl5YlVsdWRHOUdjbUZ0WlY5amIzSnVaWEp6SUQwZ1cyNWxkeUJXWldNektDa3NJRzVsZHlCV1pXTXpLQ2tzSUc1bGR5QldaV016S0Nrc0lHNWxkeUJXWldNektDa3NJRzVsZHlCV1pXTXpLQ2tzSUc1bGR5QldaV016S0Nrc0lHNWxkeUJXWldNektDa3NJRzVsZHlCV1pXTXpLQ2xkT3dvS0lDQXZLaW9LSUNBZ0tpQkRiMnhzYVhOcGIyNGdJbTFoZEhKcGVDSXVDaUFnSUNvZ1NYUW5jeUJoWTNSMVlXeHNlU0JoSUhSeWFXRnVaM1ZzWVhJdGMyaGhjR1ZrSUdGeWNtRjVJRzltSUhkb1pYUm9aWElnZEhkdklHSnZaR2xsY3lCaGNtVWdkRzkxWTJocGJtY2dkR2hwY3lCemRHVndMQ0JtYjNJZ2NtVm1aWEpsYm1ObElHNWxlSFFnYzNSbGNBb2dJQ0FxTHdvZ0lHTnNZWE56SUVGeWNtRjVRMjlzYkdsemFXOXVUV0YwY21sNElIc0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZHaGxJRzFoZEhKcGVDQnpkRzl5WVdkbExnb2dJQ0FnSUNvdkNpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIc0tJQ0FnSUNBZ2RHaHBjeTV0WVhSeWFYZ2dQU0JiWFRzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dSMlYwSUdGdUlHVnNaVzFsYm5RS0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhRb1lta3NJR0pxS1NCN0NpQWdJQ0FnSUd4bGRDQjdDaUFnSUNBZ0lDQWdhVzVrWlhnNklHa0tJQ0FnSUNBZ2ZTQTlJR0pwT3dvZ0lDQWdJQ0JzWlhRZ2V3b2dJQ0FnSUNBZ0lHbHVaR1Y0T2lCcUNpQWdJQ0FnSUgwZ1BTQmlhanNLQ2lBZ0lDQWdJR2xtSUNocUlENGdhU2tnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSFJsYlhBZ1BTQnFPd29nSUNBZ0lDQWdJR29nUFNCcE93b2dJQ0FnSUNBZ0lHa2dQU0IwWlcxd093b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRZWFJ5YVhoYktHa2dLaUFvYVNBcklERXBJRDQrSURFcElDc2dhaUF0SURGZE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUWlhRZ1lXNGdaV3hsYldWdWRBb2dJQ0FnSUNvdkNnb0tJQ0FnSUhObGRDaGlhU3dnWW1vc0lIWmhiSFZsS1NCN0NpQWdJQ0FnSUd4bGRDQjdDaUFnSUNBZ0lDQWdhVzVrWlhnNklHa0tJQ0FnSUNBZ2ZTQTlJR0pwT3dvZ0lDQWdJQ0JzWlhRZ2V3b2dJQ0FnSUNBZ0lHbHVaR1Y0T2lCcUNpQWdJQ0FnSUgwZ1BTQmlhanNLQ2lBZ0lDQWdJR2xtSUNocUlENGdhU2tnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSFJsYlhBZ1BTQnFPd29nSUNBZ0lDQWdJR29nUFNCcE93b2dJQ0FnSUNBZ0lHa2dQU0IwWlcxd093b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGFHbHpMbTFoZEhKcGVGc29hU0FxSUNocElDc2dNU2tnUGo0Z01Ta2dLeUJxSUMwZ01WMGdQU0IyWVd4MVpTQS9JREVnT2lBd093b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUWlhSeklHRnNiQ0JsYkdWdFpXNTBjeUIwYnlCNlpYSnZDaUFnSUNBZ0tpOEtDZ29nSUNBZ2NtVnpaWFFvS1NCN0NpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzSUQwZ2RHaHBjeTV0WVhSeWFYZ3ViR1Z1WjNSb095QnBJQ0U5UFNCc095QnBLeXNwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTFoZEhKcGVGdHBYU0E5SURBN0NpQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVMlYwY3lCMGFHVWdiV0Y0SUc1MWJXSmxjaUJ2WmlCdlltcGxZM1J6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdjMlYwVG5WdFQySnFaV04wY3lodUtTQjdDaUFnSUNBZ0lIUm9hWE11YldGMGNtbDRMbXhsYm1kMGFDQTlJRzRnS2lBb2JpQXRJREVwSUQ0K0lERTdDaUFnSUNCOUNnb2dJSDBLQ2lBZ0x5b3FDaUFnSUNvZ1FtRnpaU0JqYkdGemN5Qm1iM0lnYjJKcVpXTjBjeUIwYUdGMElHUnBjM0JoZEdOb1pYTWdaWFpsYm5Sekxnb2dJQ0FxTHdvZ0lHTnNZWE56SUVWMlpXNTBWR0Z5WjJWMElIc0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1FXUmtJR0Z1SUdWMlpXNTBJR3hwYzNSbGJtVnlDaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUm9aU0J6Wld4bUlHOWlhbVZqZEN3Z1ptOXlJR05vWVdsdVlXSnBiR2wwZVM0S0lDQWdJQ0FxTHdvZ0lDQWdZV1JrUlhabGJuUk1hWE4wWlc1bGNpaDBlWEJsTENCc2FYTjBaVzVsY2lrZ2V3b2dJQ0FnSUNCcFppQW9kR2hwY3k1ZmJHbHpkR1Z1WlhKeklEMDlQU0IxYm1SbFptbHVaV1FwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDlzYVhOMFpXNWxjbk1nUFNCN2ZUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1kyOXVjM1FnYkdsemRHVnVaWEp6SUQwZ2RHaHBjeTVmYkdsemRHVnVaWEp6T3dvS0lDQWdJQ0FnYVdZZ0tHeHBjM1JsYm1WeWMxdDBlWEJsWFNBOVBUMGdkVzVrWldacGJtVmtLU0I3Q2lBZ0lDQWdJQ0FnYkdsemRHVnVaWEp6VzNSNWNHVmRJRDBnVzEwN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDZ2hiR2x6ZEdWdVpYSnpXM1I1Y0dWZExtbHVZMngxWkdWektHeHBjM1JsYm1WeUtTa2dld29nSUNBZ0lDQWdJR3hwYzNSbGJtVnljMXQwZVhCbFhTNXdkWE5vS0d4cGMzUmxibVZ5S1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRU5vWldOcklHbG1JR0Z1SUdWMlpXNTBJR3hwYzNSbGJtVnlJR2x6SUdGa1pHVmtDaUFnSUNBZ0tpOEtDZ29nSUNBZ2FHRnpSWFpsYm5STWFYTjBaVzVsY2loMGVYQmxMQ0JzYVhOMFpXNWxjaWtnZXdvZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYkdsemRHVnVaWEp6SUQwOVBTQjFibVJsWm1sdVpXUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdOdmJuTjBJR3hwYzNSbGJtVnljeUE5SUhSb2FYTXVYMnhwYzNSbGJtVnljenNLQ2lBZ0lDQWdJR2xtSUNoc2FYTjBaVzVsY25OYmRIbHdaVjBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJzYVhOMFpXNWxjbk5iZEhsd1pWMHVhVzVqYkhWa1pYTW9iR2x6ZEdWdVpYSXBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTJobFkyc2dhV1lnWVc1NUlHVjJaVzUwSUd4cGMzUmxibVZ5SUc5bUlIUm9aU0JuYVhabGJpQjBlWEJsSUdseklHRmtaR1ZrQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdhR0Z6UVc1NVJYWmxiblJNYVhOMFpXNWxjaWgwZVhCbEtTQjdDaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOXNhWE4wWlc1bGNuTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ2JHbHpkR1Z1WlhKeklEMGdkR2hwY3k1ZmJHbHpkR1Z1WlhKek93b2dJQ0FnSUNCeVpYUjFjbTRnYkdsemRHVnVaWEp6VzNSNWNHVmRJQ0U5UFNCMWJtUmxabWx1WldRN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRkpsYlc5MlpTQmhiaUJsZG1WdWRDQnNhWE4wWlc1bGNnb2dJQ0FnSUNvZ1FISmxkSFZ5YmlCVWFHVWdjMlZzWmlCdlltcGxZM1FzSUdadmNpQmphR0ZwYm1GaWFXeHBkSGt1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWgwZVhCbExDQnNhWE4wWlc1bGNpa2dld29nSUNBZ0lDQnBaaUFvZEdocGN5NWZiR2x6ZEdWdVpYSnpJRDA5UFNCMWJtUmxabWx1WldRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ2JHbHpkR1Z1WlhKeklEMGdkR2hwY3k1ZmJHbHpkR1Z1WlhKek93b0tJQ0FnSUNBZ2FXWWdLR3hwYzNSbGJtVnljMXQwZVhCbFhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnYkdsemRHVnVaWEp6VzNSNWNHVmRMbWx1WkdWNFQyWW9iR2x6ZEdWdVpYSXBPd29LSUNBZ0lDQWdhV1lnS0dsdVpHVjRJQ0U5UFNBdE1Ta2dld29nSUNBZ0lDQWdJR3hwYzNSbGJtVnljMXQwZVhCbFhTNXpjR3hwWTJVb2FXNWtaWGdzSURFcE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUlcxcGRDQmhiaUJsZG1WdWRDNEtJQ0FnSUNBcUlFQnlaWFIxY200Z1ZHaGxJSE5sYkdZZ2IySnFaV04wTENCbWIzSWdZMmhoYVc1aFltbHNhWFI1TGdvZ0lDQWdJQ292Q2dvS0lDQWdJR1JwYzNCaGRHTm9SWFpsYm5Rb1pYWmxiblFwSUhzS0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJ4cGMzUmxibVZ5Y3lBOVBUMGdkVzVrWldacGJtVmtLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdOdmJuTjBJR3hwYzNSbGJtVnljeUE5SUhSb2FYTXVYMnhwYzNSbGJtVnljenNLSUNBZ0lDQWdZMjl1YzNRZ2JHbHpkR1Z1WlhKQmNuSmhlU0E5SUd4cGMzUmxibVZ5YzF0bGRtVnVkQzUwZVhCbFhUc0tDaUFnSUNBZ0lHbG1JQ2hzYVhOMFpXNWxja0Z5Y21GNUlDRTlQU0IxYm1SbFptbHVaV1FwSUhzS0lDQWdJQ0FnSUNCbGRtVnVkQzUwWVhKblpYUWdQU0IwYUdsek93b0tJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2JDQTlJR3hwYzNSbGJtVnlRWEp5WVhrdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0JzYVhOMFpXNWxja0Z5Y21GNVcybGRMbU5oYkd3b2RHaHBjeXdnWlhabGJuUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDZ29nSUgwS0NpQWdMeW9xQ2lBZ0lDb2dRU0JSZFdGMFpYSnVhVzl1SUdSbGMyTnlhV0psY3lCaElISnZkR0YwYVc5dUlHbHVJRE5FSUhOd1lXTmxMaUJVYUdVZ1VYVmhkR1Z5Ym1sdmJpQnBjeUJ0WVhSb1pXMWhkR2xqWVd4c2VTQmtaV1pwYm1Wa0lHRnpJRkVnUFNCNEtta2dLeUI1S21vZ0t5QjZLbXNnS3lCM0xDQjNhR1Z5WlNBb2FTeHFMR3NwSUdGeVpTQnBiV0ZuYVc1aGNua2dZbUZ6YVhNZ2RtVmpkRzl5Y3k0Z0tIZ3NlU3g2S1NCallXNGdZbVVnYzJWbGJpQmhjeUJoSUhabFkzUnZjaUJ5Wld4aGRHVmtJSFJ2SUhSb1pTQmhlR2x6SUc5bUlISnZkR0YwYVc5dUxDQjNhR2xzWlNCMGFHVWdjbVZoYkNCdGRXeDBhWEJzYVdWeUxDQjNMQ0JwY3lCeVpXeGhkR1ZrSUhSdklIUm9aU0JoYlc5MWJuUWdiMllnY205MFlYUnBiMjR1Q2lBZ0lDb2dRSEJoY21GdElIZ2dUWFZzZEdsd2JHbGxjaUJ2WmlCMGFHVWdhVzFoWjJsdVlYSjVJR0poYzJseklIWmxZM1J2Y2lCcExnb2dJQ0FxSUVCd1lYSmhiU0I1SUUxMWJIUnBjR3hwWlhJZ2IyWWdkR2hsSUdsdFlXZHBibUZ5ZVNCaVlYTnBjeUIyWldOMGIzSWdhaTRLSUNBZ0tpQkFjR0Z5WVcwZ2VpQk5kV3gwYVhCc2FXVnlJRzltSUhSb1pTQnBiV0ZuYVc1aGNua2dZbUZ6YVhNZ2RtVmpkRzl5SUdzdUNpQWdJQ29nUUhCaGNtRnRJSGNnVFhWc2RHbHdiR2xsY2lCdlppQjBhR1VnY21WaGJDQndZWEowTGdvZ0lDQXFJRUJ6WldVZ2FIUjBjRG92TDJWdUxuZHBhMmx3WldScFlTNXZjbWN2ZDJscmFTOVJkV0YwWlhKdWFXOXVDaUFnSUNvdkNnb2dJR05zWVhOeklGRjFZWFJsY201cGIyNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9lQ3dnZVN3Z2Vpd2dkeWtnZXdvZ0lDQWdJQ0JwWmlBb2VDQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnZUNBOUlEQTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2g1SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjVJRDBnTURzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tIb2dQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhvZ1BTQXdPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvZHlBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdkeUE5SURFN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVlQ0E5SUhnN0NpQWdJQ0FnSUhSb2FYTXVlU0E5SUhrN0NpQWdJQ0FnSUhSb2FYTXVlaUE5SUhvN0NpQWdJQ0FnSUhSb2FYTXVkeUE5SUhjN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5sZENCMGFHVWdkbUZzZFdVZ2IyWWdkR2hsSUhGMVlYUmxjbTVwYjI0dUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzJWMEtIZ3NJSGtzSUhvc0lIY3BJSHNLSUNBZ0lDQWdkR2hwY3k1NElEMGdlRHNLSUNBZ0lDQWdkR2hwY3k1NUlEMGdlVHNLSUNBZ0lDQWdkR2hwY3k1NklEMGdlanNLSUNBZ0lDQWdkR2hwY3k1M0lEMGdkenNLSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZiblpsY25RZ2RHOGdZU0J5WldGa1lXSnNaU0JtYjNKdFlYUUtJQ0FnSUNBcUlFQnlaWFIxY200Z0luZ3NlU3g2TEhjaUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnZEc5VGRISnBibWNvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUJnSkh0MGFHbHpMbmg5TENSN2RHaHBjeTU1ZlN3a2UzUm9hWE11ZW4wc0pIdDBhR2x6TG5kOVlEc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTI5dWRtVnlkQ0IwYnlCaGJpQkJjbkpoZVFvZ0lDQWdJQ29nUUhKbGRIVnliaUJiZUN3Z2VTd2dlaXdnZDEwS0lDQWdJQ0FxTHdvS0NpQWdJQ0IwYjBGeWNtRjVLQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdXM1JvYVhNdWVDd2dkR2hwY3k1NUxDQjBhR2x6TG5vc0lIUm9hWE11ZDEwN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5sZENCMGFHVWdjWFZoZEdWeWJtbHZiaUJqYjIxd2IyNWxiblJ6SUdkcGRtVnVJR0Z1SUdGNGFYTWdZVzVrSUdGdUlHRnVaMnhsSUdsdUlISmhaR2xoYm5NdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzJWMFJuSnZiVUY0YVhOQmJtZHNaU2gyWldOMGIzSXNJR0Z1WjJ4bEtTQjdDaUFnSUNBZ0lHTnZibk4wSUhNZ1BTQk5ZWFJvTG5OcGJpaGhibWRzWlNBcUlEQXVOU2s3Q2lBZ0lDQWdJSFJvYVhNdWVDQTlJSFpsWTNSdmNpNTRJQ29nY3pzS0lDQWdJQ0FnZEdocGN5NTVJRDBnZG1WamRHOXlMbmtnS2lCek93b2dJQ0FnSUNCMGFHbHpMbm9nUFNCMlpXTjBiM0l1ZWlBcUlITTdDaUFnSUNBZ0lIUm9hWE11ZHlBOUlFMWhkR2d1WTI5ektHRnVaMnhsSUNvZ01DNDFLVHNLSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZiblpsY25SeklIUm9aU0J4ZFdGMFpYSnVhVzl1SUhSdklGc2dZWGhwY3l3Z1lXNW5iR1VnWFNCeVpYQnlaWE5sYm5SaGRHbHZiaTRLSUNBZ0lDQXFJRUJ3WVhKaGJTQjBZWEpuWlhSQmVHbHpJRUVnZG1WamRHOXlJRzlpYW1WamRDQjBieUJ5WlhWelpTQm1iM0lnYzNSdmNtbHVaeUIwYUdVZ1lYaHBjeTRLSUNBZ0lDQXFJRUJ5WlhSMWNtNGdRVzRnWVhKeVlYa3NJR1pwY25OMElHVnNaVzFsYm5RZ2FYTWdkR2hsSUdGNGFYTWdZVzVrSUhSb1pTQnpaV052Ym1RZ2FYTWdkR2hsSUdGdVoyeGxJR2x1SUhKaFpHbGhibk11Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdkRzlCZUdselFXNW5iR1VvZEdGeVoyVjBRWGhwY3lrZ2V3b2dJQ0FnSUNCcFppQW9kR0Z5WjJWMFFYaHBjeUE5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwUVhocGN5QTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJvYVhNdWJtOXliV0ZzYVhwbEtDazdJQzh2SUdsbUlIYytNU0JoWTI5eklHRnVaQ0J6Y1hKMElIZHBiR3dnY0hKdlpIVmpaU0JsY25KdmNuTXNJSFJvYVhNZ1kyRnVkQ0JvWVhCd1pXNGdhV1lnY1hWaGRHVnlibWx2YmlCcGN5QnViM0p0WVd4cGMyVmtDZ29nSUNBZ0lDQmpiMjV6ZENCaGJtZHNaU0E5SURJZ0tpQk5ZWFJvTG1GamIzTW9kR2hwY3k1M0tUc0tJQ0FnSUNBZ1kyOXVjM1FnY3lBOUlFMWhkR2d1YzNGeWRDZ3hJQzBnZEdocGN5NTNJQ29nZEdocGN5NTNLVHNnTHk4Z1lYTnpkVzFwYm1jZ2NYVmhkR1Z5Ym1sdmJpQnViM0p0WVd4cGMyVmtJSFJvWlc0Z2R5QnBjeUJzWlhOeklIUm9ZVzRnTVN3Z2MyOGdkR1Z5YlNCaGJIZGhlWE1nY0c5emFYUnBkbVV1Q2dvZ0lDQWdJQ0JwWmlBb2N5QThJREF1TURBeEtTQjdDaUFnSUNBZ0lDQWdMeThnZEdWemRDQjBieUJoZG05cFpDQmthWFpwWkdVZ1lua2dlbVZ5Ynl3Z2N5QnBjeUJoYkhkaGVYTWdjRzl6YVhScGRtVWdaSFZsSUhSdklITnhjblFLSUNBZ0lDQWdJQ0F2THlCcFppQnpJR05zYjNObElIUnZJSHBsY204Z2RHaGxiaUJrYVhKbFkzUnBiMjRnYjJZZ1lYaHBjeUJ1YjNRZ2FXMXdiM0owWVc1MENpQWdJQ0FnSUNBZ2RHRnlaMlYwUVhocGN5NTRJRDBnZEdocGN5NTRPeUF2THlCcFppQnBkQ0JwY3lCcGJYQnZjblJoYm5RZ2RHaGhkQ0JoZUdseklHbHpJRzV2Y20xaGJHbHpaV1FnZEdobGJpQnlaWEJzWVdObElIZHBkR2dnZUQweE95QjVQWG85TURzS0NpQWdJQ0FnSUNBZ2RHRnlaMlYwUVhocGN5NTVJRDBnZEdocGN5NTVPd29nSUNBZ0lDQWdJSFJoY21kbGRFRjRhWE11ZWlBOUlIUm9hWE11ZWpzS0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0IwWVhKblpYUkJlR2x6TG5nZ1BTQjBhR2x6TG5nZ0x5QnpPeUF2THlCdWIzSnRZV3hwYzJVZ1lYaHBjd29LSUNBZ0lDQWdJQ0IwWVhKblpYUkJlR2x6TG5rZ1BTQjBhR2x6TG5rZ0x5QnpPd29nSUNBZ0lDQWdJSFJoY21kbGRFRjRhWE11ZWlBOUlIUm9hWE11ZWlBdklITTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCYmRHRnlaMlYwUVhocGN5d2dZVzVuYkdWZE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUWlhRZ2RHaGxJSEYxWVhSbGNtNXBiMjRnZG1Gc2RXVWdaMmwyWlc0Z2RIZHZJSFpsWTNSdmNuTXVJRlJvWlNCeVpYTjFiSFJwYm1jZ2NtOTBZWFJwYjI0Z2QybHNiQ0JpWlNCMGFHVWdibVZsWkdWa0lISnZkR0YwYVc5dUlIUnZJSEp2ZEdGMFpTQjFJSFJ2SUhZdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzJWMFJuSnZiVlpsWTNSdmNuTW9kU3dnZGlrZ2V3b2dJQ0FnSUNCcFppQW9kUzVwYzBGdWRHbHdZWEpoYkd4bGJGUnZLSFlwS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnZERFZ1BTQnpablpmZERFN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnZERJZ1BTQnpablpmZERJN0NpQWdJQ0FnSUNBZ2RTNTBZVzVuWlc1MGN5aDBNU3dnZERJcE93b2dJQ0FnSUNBZ0lIUm9hWE11YzJWMFJuSnZiVUY0YVhOQmJtZHNaU2gwTVN3Z1RXRjBhQzVRU1NrN0NpQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZU0E5SUhVdVkzSnZjM01vZGlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTU0SUQwZ1lTNTRPd29nSUNBZ0lDQWdJSFJvYVhNdWVTQTlJR0V1ZVRzS0lDQWdJQ0FnSUNCMGFHbHpMbm9nUFNCaExubzdDaUFnSUNBZ0lDQWdkR2hwY3k1M0lEMGdUV0YwYUM1emNYSjBLSFV1YkdWdVozUm9LQ2tnS2lvZ01pQXFJSFl1YkdWdVozUm9LQ2tnS2lvZ01pa2dLeUIxTG1SdmRDaDJLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1RYVnNkR2x3YkhrZ2RHaGxJSEYxWVhSbGNtNXBiMjRnZDJsMGFDQmhiaUJ2ZEdobGNpQnhkV0YwWlhKdWFXOXVMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHMTFiSFFvY1hWaGRDd2dkR0Z5WjJWMEtTQjdDaUFnSUNBZ0lHbG1JQ2gwWVhKblpYUWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhSaGNtZGxkQ0E5SUc1bGR5QlJkV0YwWlhKdWFXOXVLQ2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHRjRJRDBnZEdocGN5NTRPd29nSUNBZ0lDQmpiMjV6ZENCaGVTQTlJSFJvYVhNdWVUc0tJQ0FnSUNBZ1kyOXVjM1FnWVhvZ1BTQjBhR2x6TG5vN0NpQWdJQ0FnSUdOdmJuTjBJR0YzSUQwZ2RHaHBjeTUzT3dvZ0lDQWdJQ0JqYjI1emRDQmllQ0E5SUhGMVlYUXVlRHNLSUNBZ0lDQWdZMjl1YzNRZ1lua2dQU0J4ZFdGMExuazdDaUFnSUNBZ0lHTnZibk4wSUdKNklEMGdjWFZoZEM1Nk93b2dJQ0FnSUNCamIyNXpkQ0JpZHlBOUlIRjFZWFF1ZHpzS0lDQWdJQ0FnZEdGeVoyVjBMbmdnUFNCaGVDQXFJR0ozSUNzZ1lYY2dLaUJpZUNBcklHRjVJQ29nWW5vZ0xTQmhlaUFxSUdKNU93b2dJQ0FnSUNCMFlYSm5aWFF1ZVNBOUlHRjVJQ29nWW5jZ0t5QmhkeUFxSUdKNUlDc2dZWG9nS2lCaWVDQXRJR0Y0SUNvZ1lubzdDaUFnSUNBZ0lIUmhjbWRsZEM1NklEMGdZWG9nS2lCaWR5QXJJR0YzSUNvZ1lub2dLeUJoZUNBcUlHSjVJQzBnWVhrZ0tpQmllRHNLSUNBZ0lDQWdkR0Z5WjJWMExuY2dQU0JoZHlBcUlHSjNJQzBnWVhnZ0tpQmllQ0F0SUdGNUlDb2dZbmtnTFNCaGVpQXFJR0o2T3dvZ0lDQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJIWlhRZ2RHaGxJR2x1ZG1WeWMyVWdjWFZoZEdWeWJtbHZiaUJ5YjNSaGRHbHZiaTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnBiblpsY25ObEtIUmhjbWRsZENrZ2V3b2dJQ0FnSUNCcFppQW9kR0Z5WjJWMElEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0J1WlhjZ1VYVmhkR1Z5Ym1sdmJpZ3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCNElEMGdkR2hwY3k1NE93b2dJQ0FnSUNCamIyNXpkQ0I1SUQwZ2RHaHBjeTU1T3dvZ0lDQWdJQ0JqYjI1emRDQjZJRDBnZEdocGN5NTZPd29nSUNBZ0lDQmpiMjV6ZENCM0lEMGdkR2hwY3k1M093b2dJQ0FnSUNCMGFHbHpMbU52Ym1wMVoyRjBaU2gwWVhKblpYUXBPd29nSUNBZ0lDQmpiMjV6ZENCcGJtOXliVElnUFNBeElDOGdLSGdnS2lCNElDc2dlU0FxSUhrZ0t5QjZJQ29nZWlBcklIY2dLaUIzS1RzS0lDQWdJQ0FnZEdGeVoyVjBMbmdnS2owZ2FXNXZjbTB5T3dvZ0lDQWdJQ0IwWVhKblpYUXVlU0FxUFNCcGJtOXliVEk3Q2lBZ0lDQWdJSFJoY21kbGRDNTZJQ285SUdsdWIzSnRNanNLSUNBZ0lDQWdkR0Z5WjJWMExuY2dLajBnYVc1dmNtMHlPd29nSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnZEdobElIRjFZWFJsY201cGIyNGdZMjl1YW5WbllYUmxDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyOXVhblZuWVhSbEtIUmhjbWRsZENrZ2V3b2dJQ0FnSUNCcFppQW9kR0Z5WjJWMElEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0J1WlhjZ1VYVmhkR1Z5Ym1sdmJpZ3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBZWEpuWlhRdWVDQTlJQzEwYUdsekxuZzdDaUFnSUNBZ0lIUmhjbWRsZEM1NUlEMGdMWFJvYVhNdWVUc0tJQ0FnSUNBZ2RHRnlaMlYwTG5vZ1BTQXRkR2hwY3k1Nk93b2dJQ0FnSUNCMFlYSm5aWFF1ZHlBOUlIUm9hWE11ZHpzS0lDQWdJQ0FnY21WMGRYSnVJSFJoY21kbGREc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVG05eWJXRnNhWHBsSUhSb1pTQnhkV0YwWlhKdWFXOXVMaUJPYjNSbElIUm9ZWFFnZEdocGN5QmphR0Z1WjJWeklIUm9aU0IyWVd4MVpYTWdiMllnZEdobElIRjFZWFJsY201cGIyNHVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2JtOXliV0ZzYVhwbEtDa2dld29nSUNBZ0lDQnNaWFFnYkNBOUlFMWhkR2d1YzNGeWRDaDBhR2x6TG5nZ0tpQjBhR2x6TG5nZ0t5QjBhR2x6TG5rZ0tpQjBhR2x6TG5rZ0t5QjBhR2x6TG5vZ0tpQjBhR2x6TG5vZ0t5QjBhR2x6TG5jZ0tpQjBhR2x6TG5jcE93b0tJQ0FnSUNBZ2FXWWdLR3dnUFQwOUlEQXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuZ2dQU0F3T3dvZ0lDQWdJQ0FnSUhSb2FYTXVlU0E5SURBN0NpQWdJQ0FnSUNBZ2RHaHBjeTU2SUQwZ01Ec0tJQ0FnSUNBZ0lDQjBhR2x6TG5jZ1BTQXdPd29nSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lHd2dQU0F4SUM4Z2JEc0tJQ0FnSUNBZ0lDQjBhR2x6TG5nZ0tqMGdiRHNLSUNBZ0lDQWdJQ0IwYUdsekxua2dLajBnYkRzS0lDQWdJQ0FnSUNCMGFHbHpMbm9nS2owZ2JEc0tJQ0FnSUNBZ0lDQjBhR2x6TG5jZ0tqMGdiRHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFRndjSEp2ZUdsdFlYUnBiMjRnYjJZZ2NYVmhkR1Z5Ym1sdmJpQnViM0p0WVd4cGVtRjBhVzl1TGlCWGIzSnJjeUJpWlhOMElIZG9aVzRnY1hWaGRDQnBjeUJoYkhKbFlXUjVJR0ZzYlc5emRDMXViM0p0WVd4cGVtVmtMZ29nSUNBZ0lDb2dRR0YxZEdodmNpQjFibkJvWVhObFpDd2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1Z1Y0doaGMyVmtDaUFnSUNBZ0tpOEtDZ29nSUNBZ2JtOXliV0ZzYVhwbFJtRnpkQ2dwSUhzS0lDQWdJQ0FnWTI5dWMzUWdaaUE5SUNnekxqQWdMU0FvZEdocGN5NTRJQ29nZEdocGN5NTRJQ3NnZEdocGN5NTVJQ29nZEdocGN5NTVJQ3NnZEdocGN5NTZJQ29nZEdocGN5NTZJQ3NnZEdocGN5NTNJQ29nZEdocGN5NTNLU2tnTHlBeUxqQTdDZ29nSUNBZ0lDQnBaaUFvWmlBOVBUMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SURBN0NpQWdJQ0FnSUNBZ2RHaHBjeTU1SUQwZ01Ec0tJQ0FnSUNBZ0lDQjBhR2x6TG5vZ1BTQXdPd29nSUNBZ0lDQWdJSFJvYVhNdWR5QTlJREE3Q2lBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1NElDbzlJR1k3Q2lBZ0lDQWdJQ0FnZEdocGN5NTVJQ285SUdZN0NpQWdJQ0FnSUNBZ2RHaHBjeTU2SUNvOUlHWTdDaUFnSUNBZ0lDQWdkR2hwY3k1M0lDbzlJR1k3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQk5kV3gwYVhCc2VTQjBhR1VnY1hWaGRHVnlibWx2YmlCaWVTQmhJSFpsWTNSdmNnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhadGRXeDBLSFlzSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCNElEMGdkaTU0T3dvZ0lDQWdJQ0JqYjI1emRDQjVJRDBnZGk1NU93b2dJQ0FnSUNCamIyNXpkQ0I2SUQwZ2RpNTZPd29nSUNBZ0lDQmpiMjV6ZENCeGVDQTlJSFJvYVhNdWVEc0tJQ0FnSUNBZ1kyOXVjM1FnY1hrZ1BTQjBhR2x6TG5rN0NpQWdJQ0FnSUdOdmJuTjBJSEY2SUQwZ2RHaHBjeTU2T3dvZ0lDQWdJQ0JqYjI1emRDQnhkeUE5SUhSb2FYTXVkenNnTHk4Z2NTcDJDZ29nSUNBZ0lDQmpiMjV6ZENCcGVDQTlJSEYzSUNvZ2VDQXJJSEY1SUNvZ2VpQXRJSEY2SUNvZ2VUc0tJQ0FnSUNBZ1kyOXVjM1FnYVhrZ1BTQnhkeUFxSUhrZ0t5QnhlaUFxSUhnZ0xTQnhlQ0FxSUhvN0NpQWdJQ0FnSUdOdmJuTjBJR2w2SUQwZ2NYY2dLaUI2SUNzZ2NYZ2dLaUI1SUMwZ2NYa2dLaUI0T3dvZ0lDQWdJQ0JqYjI1emRDQnBkeUE5SUMxeGVDQXFJSGdnTFNCeGVTQXFJSGtnTFNCeGVpQXFJSG83Q2lBZ0lDQWdJSFJoY21kbGRDNTRJRDBnYVhnZ0tpQnhkeUFySUdsM0lDb2dMWEY0SUNzZ2FYa2dLaUF0Y1hvZ0xTQnBlaUFxSUMxeGVUc0tJQ0FnSUNBZ2RHRnlaMlYwTG5rZ1BTQnBlU0FxSUhGM0lDc2dhWGNnS2lBdGNYa2dLeUJwZWlBcUlDMXhlQ0F0SUdsNElDb2dMWEY2T3dvZ0lDQWdJQ0IwWVhKblpYUXVlaUE5SUdsNklDb2djWGNnS3lCcGR5QXFJQzF4ZWlBcklHbDRJQ29nTFhGNUlDMGdhWGtnS2lBdGNYZzdDaUFnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFE3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZjR2xsY3lCMllXeDFaU0J2WmlCemIzVnlZMlVnZEc4Z2RHaHBjeUJ4ZFdGMFpYSnVhVzl1TGdvZ0lDQWdJQ29nUUhKbGRIVnliaUIwYUdsekNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWTI5d2VTaHhkV0YwS1NCN0NpQWdJQ0FnSUhSb2FYTXVlQ0E5SUhGMVlYUXVlRHNLSUNBZ0lDQWdkR2hwY3k1NUlEMGdjWFZoZEM1NU93b2dJQ0FnSUNCMGFHbHpMbm9nUFNCeGRXRjBMbm83Q2lBZ0lDQWdJSFJvYVhNdWR5QTlJSEYxWVhRdWR6c0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVOdmJuWmxjblFnZEdobElIRjFZWFJsY201cGIyNGdkRzhnWlhWc1pYSWdZVzVuYkdVZ2NtVndjbVZ6Wlc1MFlYUnBiMjR1SUU5eVpHVnlPaUJaV2xnc0lHRnpJSFJvYVhNZ2NHRm5aU0JrWlhOamNtbGlaWE02SUdoMGRIQnpPaTh2ZDNkM0xtVjFZMnhwWkdWaGJuTndZV05sTG1OdmJTOXRZWFJvY3k5emRHRnVaR0Z5WkhNdmFXNWtaWGd1YUhSdENpQWdJQ0FnS2lCQWNHRnlZVzBnYjNKa1pYSWdWR2h5WldVdFkyaGhjbUZqZEdWeUlITjBjbWx1Wnl3Z1pHVm1ZWFZzZEhNZ2RHOGdJbGxhV0NJS0lDQWdJQ0FxTHdvS0NpQWdJQ0IwYjBWMWJHVnlLSFJoY21kbGRDd2diM0prWlhJcElIc0tJQ0FnSUNBZ2FXWWdLRzl5WkdWeUlEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0J2Y21SbGNpQTlJQ2RaV2xnbk93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCc1pYUWdhR1ZoWkdsdVp6c0tJQ0FnSUNBZ2JHVjBJR0YwZEdsMGRXUmxPd29nSUNBZ0lDQnNaWFFnWW1GdWF6c0tJQ0FnSUNBZ1kyOXVjM1FnZUNBOUlIUm9hWE11ZURzS0lDQWdJQ0FnWTI5dWMzUWdlU0E5SUhSb2FYTXVlVHNLSUNBZ0lDQWdZMjl1YzNRZ2VpQTlJSFJvYVhNdWVqc0tJQ0FnSUNBZ1kyOXVjM1FnZHlBOUlIUm9hWE11ZHpzS0NpQWdJQ0FnSUhOM2FYUmphQ0FvYjNKa1pYSXBJSHNLSUNBZ0lDQWdJQ0JqWVhObElDZFpXbGduT2dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWemRDQTlJSGdnS2lCNUlDc2dlaUFxSUhjN0Nnb2dJQ0FnSUNBZ0lDQWdhV1lnS0hSbGMzUWdQaUF3TGpRNU9Ta2dld29nSUNBZ0lDQWdJQ0FnSUNBdkx5QnphVzVuZFd4aGNtbDBlU0JoZENCdWIzSjBhQ0J3YjJ4bENpQWdJQ0FnSUNBZ0lDQWdJR2hsWVdScGJtY2dQU0F5SUNvZ1RXRjBhQzVoZEdGdU1paDRMQ0IzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdZWFIwYVhSMVpHVWdQU0JOWVhSb0xsQkpJQzhnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdZbUZ1YXlBOUlEQTdDaUFnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJsYzNRZ1BDQXRNQzQwT1RrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MybHVaM1ZzWVhKcGRIa2dZWFFnYzI5MWRHZ2djRzlzWlFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV0ZrYVc1bklEMGdMVElnS2lCTllYUm9MbUYwWVc0eUtIZ3NJSGNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmhkSFJwZEhWa1pTQTlJQzFOWVhSb0xsQkpJQzhnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdZbUZ1YXlBOUlEQTdDaUFnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ2FXWWdLR2hsWVdScGJtY2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnpjWGdnUFNCNElDb2dlRHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNGNUlEMGdlU0FxSUhrN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElITnhlaUE5SUhvZ0tpQjZPd29nSUNBZ0lDQWdJQ0FnSUNCb1pXRmthVzVuSUQwZ1RXRjBhQzVoZEdGdU1pZ3lJQ29nZVNBcUlIY2dMU0F5SUNvZ2VDQXFJSG9zSURFZ0xTQXlJQ29nYzNGNUlDMGdNaUFxSUhOeGVpazdJQzh2SUVobFlXUnBibWNLQ2lBZ0lDQWdJQ0FnSUNBZ0lHRjBkR2wwZFdSbElEMGdUV0YwYUM1aGMybHVLRElnS2lCMFpYTjBLVHNnTHk4Z1lYUjBhWFIxWkdVS0NpQWdJQ0FnSUNBZ0lDQWdJR0poYm1zZ1BTQk5ZWFJvTG1GMFlXNHlLRElnS2lCNElDb2dkeUF0SURJZ0tpQjVJQ29nZWl3Z01TQXRJRElnS2lCemNYZ2dMU0F5SUNvZ2MzRjZLVHNnTHk4Z1ltRnVhd29nSUNBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvS0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCRmRXeGxjaUJ2Y21SbGNpQWtlMjl5WkdWeWZTQnViM1FnYzNWd2NHOXlkR1ZrSUhsbGRDNWdLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkR0Z5WjJWMExua2dQU0JvWldGa2FXNW5Pd29nSUNBZ0lDQjBZWEpuWlhRdWVpQTlJR0YwZEdsMGRXUmxPd29nSUNBZ0lDQjBZWEpuWlhRdWVDQTlJR0poYm1zN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5sZENCMGFHVWdjWFZoZEdWeWJtbHZiaUJqYjIxd2IyNWxiblJ6SUdkcGRtVnVJRVYxYkdWeUlHRnVaMnhsSUhKbGNISmxjMlZ1ZEdGMGFXOXVMZ29nSUNBZ0lDb0tJQ0FnSUNBcUlFQndZWEpoYlNCdmNtUmxjaUJVYUdVZ2IzSmtaWElnZEc4Z1lYQndiSGtnWVc1bmJHVnpPaUFuV0ZsYUp5QnZjaUFuV1ZoYUp5QnZjaUJoYm5rZ2IzUm9aWElnWTI5dFltbHVZWFJwYjI0dUNpQWdJQ0FnS2dvZ0lDQWdJQ29nVTJWbElIdEFiR2x1YXlCb2RIUndjem92TDNkM2R5NXRZWFJvZDI5eWEzTXVZMjl0TDIxaGRHeGhZbU5sYm5SeVlXd3ZabWxzWldWNFkyaGhibWRsTHpJd05qazJMV1oxYm1OMGFXOXVMWFJ2TFdOdmJuWmxjblF0WW1WMGQyVmxiaTFrWTIwdFpYVnNaWEl0WVc1bmJHVnpMWEYxWVhSbGNtNXBiMjV6TFdGdVpDMWxkV3hsY2kxMlpXTjBiM0p6SUUxaGRHaFhiM0pyYzMwZ2NtVm1aWEpsYm1ObENpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzJWMFJuSnZiVVYxYkdWeUtIZ3NJSGtzSUhvc0lHOXlaR1Z5S1NCN0NpQWdJQ0FnSUdsbUlDaHZjbVJsY2lBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiM0prWlhJZ1BTQW5XRmxhSnpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWTI5dWMzUWdZekVnUFNCTllYUm9MbU52Y3loNElDOGdNaWs3Q2lBZ0lDQWdJR052Ym5OMElHTXlJRDBnVFdGMGFDNWpiM01vZVNBdklESXBPd29nSUNBZ0lDQmpiMjV6ZENCak15QTlJRTFoZEdndVkyOXpLSG9nTHlBeUtUc0tJQ0FnSUNBZ1kyOXVjM1FnY3pFZ1BTQk5ZWFJvTG5OcGJpaDRJQzhnTWlrN0NpQWdJQ0FnSUdOdmJuTjBJSE15SUQwZ1RXRjBhQzV6YVc0b2VTQXZJRElwT3dvZ0lDQWdJQ0JqYjI1emRDQnpNeUE5SUUxaGRHZ3VjMmx1S0hvZ0x5QXlLVHNLQ2lBZ0lDQWdJR2xtSUNodmNtUmxjaUE5UFQwZ0oxaFpXaWNwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbmdnUFNCek1TQXFJR015SUNvZ1l6TWdLeUJqTVNBcUlITXlJQ29nY3pNN0NpQWdJQ0FnSUNBZ2RHaHBjeTU1SUQwZ1l6RWdLaUJ6TWlBcUlHTXpJQzBnY3pFZ0tpQmpNaUFxSUhNek93b2dJQ0FnSUNBZ0lIUm9hWE11ZWlBOUlHTXhJQ29nWXpJZ0tpQnpNeUFySUhNeElDb2djeklnS2lCak16c0tJQ0FnSUNBZ0lDQjBhR2x6TG5jZ1BTQmpNU0FxSUdNeUlDb2dZek1nTFNCek1TQXFJSE15SUNvZ2N6TTdDaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9iM0prWlhJZ1BUMDlJQ2RaV0ZvbktTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1NElEMGdjekVnS2lCak1pQXFJR016SUNzZ1l6RWdLaUJ6TWlBcUlITXpPd29nSUNBZ0lDQWdJSFJvYVhNdWVTQTlJR014SUNvZ2N6SWdLaUJqTXlBdElITXhJQ29nWXpJZ0tpQnpNenNLSUNBZ0lDQWdJQ0IwYUdsekxub2dQU0JqTVNBcUlHTXlJQ29nY3pNZ0xTQnpNU0FxSUhNeUlDb2dZek03Q2lBZ0lDQWdJQ0FnZEdocGN5NTNJRDBnWXpFZ0tpQmpNaUFxSUdNeklDc2djekVnS2lCek1pQXFJSE16T3dvZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c5eVpHVnlJRDA5UFNBbldsaFpKeWtnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhNeElDb2dZeklnS2lCak15QXRJR014SUNvZ2N6SWdLaUJ6TXpzS0lDQWdJQ0FnSUNCMGFHbHpMbmtnUFNCak1TQXFJSE15SUNvZ1l6TWdLeUJ6TVNBcUlHTXlJQ29nY3pNN0NpQWdJQ0FnSUNBZ2RHaHBjeTU2SUQwZ1l6RWdLaUJqTWlBcUlITXpJQ3NnY3pFZ0tpQnpNaUFxSUdNek93b2dJQ0FnSUNBZ0lIUm9hWE11ZHlBOUlHTXhJQ29nWXpJZ0tpQmpNeUF0SUhNeElDb2djeklnS2lCek16c0tJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHZjbVJsY2lBOVBUMGdKMXBaV0NjcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5nZ1BTQnpNU0FxSUdNeUlDb2dZek1nTFNCak1TQXFJSE15SUNvZ2N6TTdDaUFnSUNBZ0lDQWdkR2hwY3k1NUlEMGdZekVnS2lCek1pQXFJR016SUNzZ2N6RWdLaUJqTWlBcUlITXpPd29nSUNBZ0lDQWdJSFJvYVhNdWVpQTlJR014SUNvZ1l6SWdLaUJ6TXlBdElITXhJQ29nY3pJZ0tpQmpNenNLSUNBZ0lDQWdJQ0IwYUdsekxuY2dQU0JqTVNBcUlHTXlJQ29nWXpNZ0t5QnpNU0FxSUhNeUlDb2djek03Q2lBZ0lDQWdJSDBnWld4elpTQnBaaUFvYjNKa1pYSWdQVDA5SUNkWldsZ25LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTRJRDBnY3pFZ0tpQmpNaUFxSUdNeklDc2dZekVnS2lCek1pQXFJSE16T3dvZ0lDQWdJQ0FnSUhSb2FYTXVlU0E5SUdNeElDb2djeklnS2lCak15QXJJSE14SUNvZ1l6SWdLaUJ6TXpzS0lDQWdJQ0FnSUNCMGFHbHpMbm9nUFNCak1TQXFJR015SUNvZ2N6TWdMU0J6TVNBcUlITXlJQ29nWXpNN0NpQWdJQ0FnSUNBZ2RHaHBjeTUzSUQwZ1l6RWdLaUJqTWlBcUlHTXpJQzBnY3pFZ0tpQnpNaUFxSUhNek93b2dJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHOXlaR1Z5SUQwOVBTQW5XRnBaSnlrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlITXhJQ29nWXpJZ0tpQmpNeUF0SUdNeElDb2djeklnS2lCek16c0tJQ0FnSUNBZ0lDQjBhR2x6TG5rZ1BTQmpNU0FxSUhNeUlDb2dZek1nTFNCek1TQXFJR015SUNvZ2N6TTdDaUFnSUNBZ0lDQWdkR2hwY3k1NklEMGdZekVnS2lCak1pQXFJSE16SUNzZ2N6RWdLaUJ6TWlBcUlHTXpPd29nSUNBZ0lDQWdJSFJvYVhNdWR5QTlJR014SUNvZ1l6SWdLaUJqTXlBcklITXhJQ29nY3pJZ0tpQnpNenNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDZ29nSUNBZ1kyeHZibVVvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VYVmhkR1Z5Ym1sdmJpaDBhR2x6TG5nc0lIUm9hWE11ZVN3Z2RHaHBjeTU2TENCMGFHbHpMbmNwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlFaWEptYjNKdGN5QmhJSE53YUdWeWFXTmhiQ0JzYVc1bFlYSWdhVzUwWlhKd2IyeGhkR2x2YmlCaVpYUjNaV1Z1SUhSM2J5QnhkV0YwQ2lBZ0lDQWdLZ29nSUNBZ0lDb2dRSEJoY21GdElIUnZVWFZoZENCelpXTnZibVFnYjNCbGNtRnVaQW9nSUNBZ0lDb2dRSEJoY21GdElIUWdhVzUwWlhKd2IyeGhkR2x2YmlCaGJXOTFiblFnWW1WMGQyVmxiaUIwYUdVZ2MyVnNaaUJ4ZFdGMFpYSnVhVzl1SUdGdVpDQjBiMUYxWVhRS0lDQWdJQ0FxSUVCd1lYSmhiU0IwWVhKblpYUWdRU0J4ZFdGMFpYSnVhVzl1SUhSdklITjBiM0psSUhSb1pTQnlaWE4xYkhRZ2FXNHVJRWxtSUc1dmRDQndjbTkyYVdSbFpDd2dZU0J1WlhjZ2IyNWxJSGRwYkd3Z1ltVWdZM0psWVhSbFpDNEtJQ0FnSUNBcUlFQnlaWFIxY201eklIdFJkV0YwWlhKdWFXOXVmU0JVYUdVZ0luUmhjbWRsZENJZ2IySnFaV04wQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdjMnhsY25Bb2RHOVJkV0YwTENCMExDQjBZWEpuWlhRcElIc0tJQ0FnSUNBZ2FXWWdLSFJoY21kbGRDQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnZEdGeVoyVjBJRDBnYm1WM0lGRjFZWFJsY201cGIyNG9LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ1lYZ2dQU0IwYUdsekxuZzdDaUFnSUNBZ0lHTnZibk4wSUdGNUlEMGdkR2hwY3k1NU93b2dJQ0FnSUNCamIyNXpkQ0JoZWlBOUlIUm9hWE11ZWpzS0lDQWdJQ0FnWTI5dWMzUWdZWGNnUFNCMGFHbHpMbmM3Q2lBZ0lDQWdJR3hsZENCaWVDQTlJSFJ2VVhWaGRDNTRPd29nSUNBZ0lDQnNaWFFnWW5rZ1BTQjBiMUYxWVhRdWVUc0tJQ0FnSUNBZ2JHVjBJR0o2SUQwZ2RHOVJkV0YwTG5vN0NpQWdJQ0FnSUd4bGRDQmlkeUE5SUhSdlVYVmhkQzUzT3dvZ0lDQWdJQ0JzWlhRZ2IyMWxaMkU3Q2lBZ0lDQWdJR3hsZENCamIzTnZiVHNLSUNBZ0lDQWdiR1YwSUhOcGJtOXRPd29nSUNBZ0lDQnNaWFFnYzJOaGJHVXdPd29nSUNBZ0lDQnNaWFFnYzJOaGJHVXhPeUF2THlCallXeGpJR052YzJsdVpRb0tJQ0FnSUNBZ1kyOXpiMjBnUFNCaGVDQXFJR0o0SUNzZ1lYa2dLaUJpZVNBcklHRjZJQ29nWW5vZ0t5QmhkeUFxSUdKM095QXZMeUJoWkdwMWMzUWdjMmxuYm5NZ0tHbG1JRzVsWTJWemMyRnllU2tLQ2lBZ0lDQWdJR2xtSUNoamIzTnZiU0E4SURBdU1Da2dld29nSUNBZ0lDQWdJR052YzI5dElEMGdMV052YzI5dE93b2dJQ0FnSUNBZ0lHSjRJRDBnTFdKNE93b2dJQ0FnSUNBZ0lHSjVJRDBnTFdKNU93b2dJQ0FnSUNBZ0lHSjZJRDBnTFdKNk93b2dJQ0FnSUNBZ0lHSjNJRDBnTFdKM093b2dJQ0FnSUNCOUlDOHZJR05oYkdOMWJHRjBaU0JqYjJWbVptbGphV1Z1ZEhNS0Nnb2dJQ0FnSUNCcFppQW9NUzR3SUMwZ1kyOXpiMjBnUGlBd0xqQXdNREF3TVNrZ2V3b2dJQ0FnSUNBZ0lDOHZJSE4wWVc1a1lYSmtJR05oYzJVZ0tITnNaWEp3S1FvZ0lDQWdJQ0FnSUc5dFpXZGhJRDBnVFdGMGFDNWhZMjl6S0dOdmMyOXRLVHNLSUNBZ0lDQWdJQ0J6YVc1dmJTQTlJRTFoZEdndWMybHVLRzl0WldkaEtUc0tJQ0FnSUNBZ0lDQnpZMkZzWlRBZ1BTQk5ZWFJvTG5OcGJpZ29NUzR3SUMwZ2RDa2dLaUJ2YldWbllTa2dMeUJ6YVc1dmJUc0tJQ0FnSUNBZ0lDQnpZMkZzWlRFZ1BTQk5ZWFJvTG5OcGJpaDBJQ29nYjIxbFoyRXBJQzhnYzJsdWIyMDdDaUFnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0x5OGdJbVp5YjIwaUlHRnVaQ0FpZEc4aUlIRjFZWFJsY201cGIyNXpJR0Z5WlNCMlpYSjVJR05zYjNObENpQWdJQ0FnSUNBZ0x5OGdJQzR1TGlCemJ5QjNaU0JqWVc0Z1pHOGdZU0JzYVc1bFlYSWdhVzUwWlhKd2IyeGhkR2x2YmdvZ0lDQWdJQ0FnSUhOallXeGxNQ0E5SURFdU1DQXRJSFE3Q2lBZ0lDQWdJQ0FnYzJOaGJHVXhJRDBnZERzS0lDQWdJQ0FnZlNBdkx5QmpZV3hqZFd4aGRHVWdabWx1WVd3Z2RtRnNkV1Z6Q2dvS0lDQWdJQ0FnZEdGeVoyVjBMbmdnUFNCelkyRnNaVEFnS2lCaGVDQXJJSE5qWVd4bE1TQXFJR0o0T3dvZ0lDQWdJQ0IwWVhKblpYUXVlU0E5SUhOallXeGxNQ0FxSUdGNUlDc2djMk5oYkdVeElDb2dZbms3Q2lBZ0lDQWdJSFJoY21kbGRDNTZJRDBnYzJOaGJHVXdJQ29nWVhvZ0t5QnpZMkZzWlRFZ0tpQmllanNLSUNBZ0lDQWdkR0Z5WjJWMExuY2dQU0J6WTJGc1pUQWdLaUJoZHlBcklITmpZV3hsTVNBcUlHSjNPd29nSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlNiM1JoZEdVZ1lXNGdZV0p6YjJ4MWRHVWdiM0pwWlc1MFlYUnBiMjRnY1hWaGRHVnlibWx2YmlCbmFYWmxiaUJoYmlCaGJtZDFiR0Z5SUhabGJHOWphWFI1SUdGdVpDQmhJSFJwYldVZ2MzUmxjQzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnBiblJsWjNKaGRHVW9ZVzVuZFd4aGNsWmxiRzlqYVhSNUxDQmtkQ3dnWVc1bmRXeGhja1poWTNSdmNpd2dkR0Z5WjJWMEtTQjdDaUFnSUNBZ0lHbG1JQ2gwWVhKblpYUWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhSaGNtZGxkQ0E5SUc1bGR5QlJkV0YwWlhKdWFXOXVLQ2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHRjRJRDBnWVc1bmRXeGhjbFpsYkc5amFYUjVMbmdnS2lCaGJtZDFiR0Z5Um1GamRHOXlMbmdzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRjVJRDBnWVc1bmRXeGhjbFpsYkc5amFYUjVMbmtnS2lCaGJtZDFiR0Z5Um1GamRHOXlMbmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRjZJRDBnWVc1bmRXeGhjbFpsYkc5amFYUjVMbm9nS2lCaGJtZDFiR0Z5Um1GamRHOXlMbm9zQ2lBZ0lDQWdJQ0FnSUNBZ0lHSjRJRDBnZEdocGN5NTRMQW9nSUNBZ0lDQWdJQ0FnSUNCaWVTQTlJSFJvYVhNdWVTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW5vZ1BTQjBhR2x6TG5vc0NpQWdJQ0FnSUNBZ0lDQWdJR0ozSUQwZ2RHaHBjeTUzT3dvZ0lDQWdJQ0JqYjI1emRDQm9ZV3htWDJSMElEMGdaSFFnS2lBd0xqVTdDaUFnSUNBZ0lIUmhjbWRsZEM1NElDczlJR2hoYkdaZlpIUWdLaUFvWVhnZ0tpQmlkeUFySUdGNUlDb2dZbm9nTFNCaGVpQXFJR0o1S1RzS0lDQWdJQ0FnZEdGeVoyVjBMbmtnS3owZ2FHRnNabDlrZENBcUlDaGhlU0FxSUdKM0lDc2dZWG9nS2lCaWVDQXRJR0Y0SUNvZ1lub3BPd29nSUNBZ0lDQjBZWEpuWlhRdWVpQXJQU0JvWVd4bVgyUjBJQ29nS0dGNklDb2dZbmNnS3lCaGVDQXFJR0o1SUMwZ1lYa2dLaUJpZUNrN0NpQWdJQ0FnSUhSaGNtZGxkQzUzSUNzOUlHaGhiR1pmWkhRZ0tpQW9MV0Y0SUNvZ1luZ2dMU0JoZVNBcUlHSjVJQzBnWVhvZ0tpQmllaWs3Q2lBZ0lDQWdJSEpsZEhWeWJpQjBZWEpuWlhRN0NpQWdJQ0I5Q2dvZ0lIMEtJQ0JqYjI1emRDQnpablpmZERFZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSE5tZGw5ME1pQTlJRzVsZHlCV1pXTXpLQ2s3Q2dvZ0lDOHFLZ29nSUNBcUlGUm9aU0JoZG1GcGJHRmliR1VnYzJoaGNHVWdkSGx3WlhNdUNpQWdJQ292Q2lBZ1kyOXVjM1FnVTBoQlVFVmZWRmxRUlZNZ1BTQjdDaUFnSUNBdktpb2dVMUJJUlZKRklDb3ZDaUFnSUNCVFVFaEZVa1U2SURFc0Nnb2dJQ0FnTHlvcUlGQk1RVTVGSUNvdkNpQWdJQ0JRVEVGT1JUb2dNaXdLQ2lBZ0lDQXZLaW9nUWs5WUlDb3ZDaUFnSUNCQ1QxZzZJRFFzQ2dvZ0lDQWdMeW9xSUVOUFRWQlBWVTVFSUNvdkNpQWdJQ0JEVDAxUVQxVk9SRG9nT0N3S0NpQWdJQ0F2S2lvZ1EwOU9Wa1ZZVUU5TVdVaEZSRkpQVGlBcUx3b2dJQ0FnUTA5T1ZrVllVRTlNV1VoRlJGSlBUam9nTVRZc0Nnb2dJQ0FnTHlvcUlFaEZTVWRJVkVaSlJVeEVJQ292Q2lBZ0lDQklSVWxIU0ZSR1NVVk1SRG9nTXpJc0Nnb2dJQ0FnTHlvcUlGQkJVbFJKUTB4RklDb3ZDaUFnSUNCUVFWSlVTVU5NUlRvZ05qUXNDZ29nSUNBZ0x5b3FJRU5aVEVsT1JFVlNJQ292Q2lBZ0lDQkRXVXhKVGtSRlVqb2dNVEk0TEFvS0lDQWdJQzhxS2lCVVVrbE5SVk5JSUNvdkNpQWdJQ0JVVWtsTlJWTklPaUF5TlRZS0lDQjlPd29nSUM4cUtnb2dJQ0FxSUZOb1lYQmxWSGx3WlFvZ0lDQXFMd29LSUNBdktpb0tJQ0FnS2lCQ1lYTmxJR05zWVhOeklHWnZjaUJ6YUdGd1pYTUtJQ0FnS2k4S0lDQmpiR0Z6Y3lCVGFHRndaU0I3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWxrWlc1MGFXWnBaWElnYjJZZ2RHaGxJRk5vWVhCbExnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVWFHVWdkSGx3WlNCdlppQjBhR2x6SUhOb1lYQmxMaUJOZFhOMElHSmxJSE5sZENCMGJ5QmhiaUJwYm5RZ1BpQXdJR0o1SUhOMVltTnNZWE56WlhNdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSb1pTQnNiMk5oYkNCaWIzVnVaR2x1WnlCemNHaGxjbVVnY21Ga2FYVnpJRzltSUhSb2FYTWdjMmhoY0dVdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZkb1pYUm9aWElnZEc4Z2NISnZaSFZqWlNCamIyNTBZV04wSUdadmNtTmxjeUIzYUdWdUlHbHVJR052Ym5SaFkzUWdkMmwwYUNCdmRHaGxjaUJpYjJScFpYTXVJRTV2ZEdVZ2RHaGhkQ0JqYjI1MFlXTjBjeUIzYVd4c0lHSmxJR2RsYm1WeVlYUmxaQ3dnWW5WMElIUm9aWGtnZDJsc2JDQmlaU0JrYVhOaFlteGxaQzRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJSFJ5ZFdVS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUUdSbFptRjFiSFFnTVFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F0TVFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJQY0hScGIyNWhiQ0J0WVhSbGNtbGhiQ0J2WmlCMGFHVWdjMmhoY0dVZ2RHaGhkQ0J5WldkMWJHRjBaWE1nWTI5dWRHRmpkQ0J3Y205d1pYSjBhV1Z6TGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJVYUdVZ1ltOWtlU0IwYnlCM2FHbGphQ0IwYUdVZ2MyaGhjR1VnYVhNZ1lXUmtaV1FnZEc4dUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVGc2JDQjBhR1VnVTJoaGNHVWdkSGx3WlhNdUNpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk1wSUhzS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0I3ZlRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NXBaQ0E5SUZOb1lYQmxMbWxrUTI5MWJuUmxjaXNyT3dvZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNCdmNIUnBiMjV6TG5SNWNHVWdmSHdnTURzS0lDQWdJQ0FnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeUE5SURBN0NpQWdJQ0FnSUhSb2FYTXVZMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVWdQU0J2Y0hScGIyNXpMbU52Ykd4cGMybHZibEpsYzNCdmJuTmxJRDhnYjNCMGFXOXVjeTVqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaU0E2SUhSeWRXVTdDaUFnSUNBZ0lIUm9hWE11WTI5c2JHbHphVzl1Um1sc2RHVnlSM0p2ZFhBZ1BTQnZjSFJwYjI1ekxtTnZiR3hwYzJsdmJrWnBiSFJsY2tkeWIzVndJQ0U5UFNCMWJtUmxabWx1WldRZ1B5QnZjSFJwYjI1ekxtTnZiR3hwYzJsdmJrWnBiSFJsY2tkeWIzVndJRG9nTVRzS0lDQWdJQ0FnZEdocGN5NWpiMnhzYVhOcGIyNUdhV3gwWlhKTllYTnJJRDBnYjNCMGFXOXVjeTVqYjJ4c2FYTnBiMjVHYVd4MFpYSk5ZWE5ySUNFOVBTQjFibVJsWm1sdVpXUWdQeUJ2Y0hScGIyNXpMbU52Ykd4cGMybHZia1pwYkhSbGNrMWhjMnNnT2lBdE1Uc0tJQ0FnSUNBZ2RHaHBjeTV0WVhSbGNtbGhiQ0E5SUc5d2RHbHZibk11YldGMFpYSnBZV3dnUHlCdmNIUnBiMjV6TG0xaGRHVnlhV0ZzSURvZ2JuVnNiRHNLSUNBZ0lDQWdkR2hwY3k1aWIyUjVJRDBnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTI5dGNIVjBaWE1nZEdobElHSnZkVzVrYVc1bklITndhR1Z5WlNCeVlXUnBkWE11Q2lBZ0lDQWdLaUJVYUdVZ2NtVnpkV3gwSUdseklITjBiM0psWkNCcGJpQjBhR1VnY0hKdmNHVnlkSGtnWUM1aWIzVnVaR2x1WjFOd2FHVnlaVkpoWkdsMWMyQUtJQ0FnSUNBcUx3b0tDaUFnSUNCMWNHUmhkR1ZDYjNWdVpHbHVaMU53YUdWeVpWSmhaR2wxY3lncElIc0tJQ0FnSUNBZ2RHaHliM2NnWUdOdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpWSmhaR2wxY3lncElHNXZkQ0JwYlhCc1pXMWxiblJsWkNCbWIzSWdjMmhoY0dVZ2RIbHdaU0FrZTNSb2FYTXVkSGx3WlgxZ093b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJIWlhRZ2RHaGxJSFp2YkhWdFpTQnZaaUIwYUdseklITm9ZWEJsQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdkbTlzZFcxbEtDa2dld29nSUNBZ0lDQjBhSEp2ZHlCZ2RtOXNkVzFsS0NrZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrSUdadmNpQnphR0Z3WlNCMGVYQmxJQ1I3ZEdocGN5NTBlWEJsZldBN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRU5oYkdOMWJHRjBaWE1nZEdobElHbHVaWEowYVdFZ2FXNGdkR2hsSUd4dlkyRnNJR1p5WVcxbElHWnZjaUIwYUdseklITm9ZWEJsTGdvZ0lDQWdJQ29nUUhObFpTQm9kSFJ3T2k4dlpXNHVkMmxyYVhCbFpHbGhMbTl5Wnk5M2FXdHBMMHhwYzNSZmIyWmZiVzl0Wlc1MGMxOXZabDlwYm1WeWRHbGhDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyRnNZM1ZzWVhSbFRHOWpZV3hKYm1WeWRHbGhLRzFoYzNNc0lIUmhjbWRsZENrZ2V3b2dJQ0FnSUNCMGFISnZkeUJnWTJGc1kzVnNZWFJsVEc5allXeEpibVZ5ZEdsaEtDa2dibTkwSUdsdGNHeGxiV1Z1ZEdWa0lHWnZjaUJ6YUdGd1pTQjBlWEJsSUNSN2RHaHBjeTUwZVhCbGZXQTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVCMGIyUnZJSFZ6WlNCaFluTjBjbUZqZENCbWIzSWdkR2hsYzJVZ2EybHVaQ0J2WmlCdFpYUm9iMlJ6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZMkZzWTNWc1lYUmxWMjl5YkdSQlFVSkNLSEJ2Y3l3Z2NYVmhkQ3dnYldsdUxDQnRZWGdwSUhzS0lDQWdJQ0FnZEdoeWIzY2dZR05oYkdOMWJHRjBaVmR2Y214a1FVRkNRaWdwSUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0JtYjNJZ2MyaGhjR1VnZEhsd1pTQWtlM1JvYVhNdWRIbHdaWDFnT3dvZ0lDQWdmUW9LSUNCOUNpQWdVMmhoY0dVdWFXUkRiM1Z1ZEdWeUlEMGdNRHNLSUNCVGFHRndaUzUwZVhCbGN5QTlJRk5JUVZCRlgxUlpVRVZUT3dvS0lDQXZLaW9LSUNBZ0tpQlVjbUZ1YzJadmNtMWhkR2x2YmlCMWRHbHNhWFJwWlhNdUNpQWdJQ292Q2lBZ1kyeGhjM01nVkhKaGJuTm1iM0p0SUhzS0lDQWdJQzhxS2dvZ0lDQWdJQ29nY0c5emFYUnBiMjRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2djWFZoZEdWeWJtbHZiZ29nSUNBZ0lDb3ZDaUFnSUNCamIyNXpkSEoxWTNSdmNpaHZjSFJwYjI1ektTQjdDaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UzMDdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIUm9hWE11Y0c5emFYUnBiMjRnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCMGFHbHpMbkYxWVhSbGNtNXBiMjRnUFNCdVpYY2dVWFZoZEdWeWJtbHZiaWdwT3dvS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWNHOXphWFJwYjI0cElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1TG1OdmNIa29iM0IwYVc5dWN5NXdiM05wZEdsdmJpazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbkYxWVhSbGNtNXBiMjRwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVhSbGNtNXBiMjR1WTI5d2VTaHZjSFJwYjI1ekxuRjFZWFJsY201cGIyNHBPd29nSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQmhJR2RzYjJKaGJDQndiMmx1ZENCcGJpQnNiMk5oYkNCMGNtRnVjMlp2Y20wZ1kyOXZjbVJwYm1GMFpYTXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2NHOXBiblJVYjB4dlkyRnNLSGR2Y214a1VHOXBiblFzSUhKbGMzVnNkQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdWSEpoYm5ObWIzSnRMbkJ2YVc1MFZHOU1iMk5oYkVaeVlXMWxLSFJvYVhNdWNHOXphWFJwYjI0c0lIUm9hWE11Y1hWaGRHVnlibWx2Yml3Z2QyOXliR1JRYjJsdWRDd2djbVZ6ZFd4MEtUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUjJWMElHRWdiRzlqWVd3Z2NHOXBiblFnYVc0Z1oyeHZZbUZzSUhSeVlXNXpabTl5YlNCamIyOXlaR2x1WVhSbGN5NEtJQ0FnSUNBcUx3b0tDaUFnSUNCd2IybHVkRlJ2VjI5eWJHUW9iRzlqWVd4UWIybHVkQ3dnY21WemRXeDBLU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQlVjbUZ1YzJadmNtMHVjRzlwYm5SVWIxZHZjbXhrUm5KaGJXVW9kR2hwY3k1d2IzTnBkR2x2Yml3Z2RHaHBjeTV4ZFdGMFpYSnVhVzl1TENCc2IyTmhiRkJ2YVc1MExDQnlaWE4xYkhRcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUIyWldOMGIzSlViMWR2Y214a1JuSmhiV1VLSUNBZ0lDQXFMd29LQ2lBZ0lDQjJaV04wYjNKVWIxZHZjbXhrUm5KaGJXVW9iRzlqWVd4V1pXTjBiM0lzSUhKbGMzVnNkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWRtMTFiSFFvYkc5allXeFdaV04wYjNJc0lISmxjM1ZzZENrN0NpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUhCdmFXNTBWRzlNYjJOaGJFWnlZVzFsQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdjM1JoZEdsaklIQnZhVzUwVkc5TWIyTmhiRVp5WVcxbEtIQnZjMmwwYVc5dUxDQnhkV0YwWlhKdWFXOXVMQ0IzYjNKc1pGQnZhVzUwTENCeVpYTjFiSFFwSUhzS0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkMjl5YkdSUWIybHVkQzUyYzNWaUtIQnZjMmwwYVc5dUxDQnlaWE4xYkhRcE93b2dJQ0FnSUNCeGRXRjBaWEp1YVc5dUxtTnZibXAxWjJGMFpTaDBiWEJSZFdGMEpERXBPd29nSUNBZ0lDQjBiWEJSZFdGMEpERXVkbTExYkhRb2NtVnpkV3gwTENCeVpYTjFiSFFwT3dvZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJ3YjJsdWRGUnZWMjl5YkdSR2NtRnRaUW9nSUNBZ0lDb3ZDZ29LSUNBZ0lITjBZWFJwWXlCd2IybHVkRlJ2VjI5eWJHUkdjbUZ0WlNod2IzTnBkR2x2Yml3Z2NYVmhkR1Z5Ym1sdmJpd2diRzlqWVd4UWIybHVkQ3dnY21WemRXeDBLU0I3Q2lBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxjM1ZzZENBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIRjFZWFJsY201cGIyNHVkbTExYkhRb2JHOWpZV3hRYjJsdWRDd2djbVZ6ZFd4MEtUc0tJQ0FnSUNBZ2NtVnpkV3gwTG5aaFpHUW9jRzl6YVhScGIyNHNJSEpsYzNWc2RDazdDaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlIWmxZM1J2Y2xSdlYyOXliR1JHY21GdFpRb2dJQ0FnSUNvdkNnb0tJQ0FnSUhOMFlYUnBZeUIyWldOMGIzSlViMWR2Y214a1JuSmhiV1VvY1hWaGRHVnlibWx2Yml3Z2JHOWpZV3hXWldOMGIzSXNJSEpsYzNWc2RDa2dld29nSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCeGRXRjBaWEp1YVc5dUxuWnRkV3gwS0d4dlkyRnNWbVZqZEc5eUxDQnlaWE4xYkhRcE93b2dJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCMlpXTjBiM0pVYjB4dlkyRnNSbkpoYldVS0lDQWdJQ0FxTHdvS0NpQWdJQ0J6ZEdGMGFXTWdkbVZqZEc5eVZHOU1iMk5oYkVaeVlXMWxLSEJ2YzJsMGFXOXVMQ0J4ZFdGMFpYSnVhVzl1TENCM2IzSnNaRlpsWTNSdmNpd2djbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhGMVlYUmxjbTVwYjI0dWR5QXFQU0F0TVRzS0lDQWdJQ0FnY1hWaGRHVnlibWx2Ymk1MmJYVnNkQ2gzYjNKc1pGWmxZM1J2Y2l3Z2NtVnpkV3gwS1RzS0lDQWdJQ0FnY1hWaGRHVnlibWx2Ymk1M0lDbzlJQzB4T3dvZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME93b2dJQ0FnZlFvS0lDQjlDaUFnWTI5dWMzUWdkRzF3VVhWaGRDUXhJRDBnYm1WM0lGRjFZWFJsY201cGIyNG9LVHNLQ2lBZ0x5b3FDaUFnSUNvZ1FTQnpaWFFnYjJZZ2NHOXNlV2R2Ym5NZ1pHVnpZM0pwWW1sdVp5QmhJR052Ym5abGVDQnphR0Z3WlM0S0lDQWdLZ29nSUNBcUlGUm9aU0J6YUdGd1pTQk5WVk5VSUdKbElHTnZiblpsZUNCbWIzSWdkR2hsSUdOdlpHVWdkRzhnZDI5eWF5QndjbTl3WlhKc2VTNGdUbThnY0c5c2VXZHZibk1nYldGNUlHSmxJR052Y0d4aGJtRnlJQ2hqYjI1MFlXbHVaV1FLSUNBZ0tpQnBiaUIwYUdVZ2MyRnRaU0F6UkNCd2JHRnVaU2tzSUdsdWMzUmxZV1FnZEdobGMyVWdjMmh2ZFd4a0lHSmxJRzFsY21kbFpDQnBiblJ2SUc5dVpTQndiMng1WjI5dUxnb2dJQ0FxQ2lBZ0lDb2dRR0YxZEdodmNpQnhhV0Z2SUM4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzRnBZVzhnS0c5eWFXZHBibUZzSUdGMWRHaHZjaXdnYzJWbElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXhhV0Z2TDNSb2NtVmxMbXB6TDJOdmJXMXBkQzg0TlRBeU5tWXdZemMyT1dVME1EQXdNVFE0WVRZM1pEUTFZVGxsT1dJNVl6VXhNRGc0TXpabUtRb2dJQ0FxSUVCaGRYUm9iM0lnYzJOb2RHVndjR1VnTHlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmMyTm9kR1Z3Y0dVS0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dmQzZDNMbUZzZEdSbGRtSnNiMmRoWkdGNUxtTnZiUzh5TURFeEx6QTFMekV6TDJOdmJuUmhZM1F0WjJWdVpYSmhkR2x2YmkxaVpYUjNaV1Z1TFROa0xXTnZiblpsZUMxdFpYTm9aWE12Q2lBZ0lDb0tJQ0FnS2lCQWRHOWtieUJOYjNabElIUm9aU0JqYkdsd2NHbHVaeUJtZFc1amRHbHZibk1nZEc4Z1EyOXVkR0ZqZEVkbGJtVnlZWFJ2Y2o4S0lDQWdLaUJBZEc5a2J5QkJkWFJ2YldGMGFXTmhiR3g1SUcxbGNtZGxJR052Y0d4aGJtRnlJSEJ2YkhsbmIyNXpJR2x1SUdOdmJuTjBjblZqZEc5eUxnb2dJQ0FxSUVCbGVHRnRjR3hsQ2lBZ0lDb2dJQ0FnSUdOdmJuTjBJR052Ym5abGVGTm9ZWEJsSUQwZ2JtVjNJRU5CVGs1UFRpNURiMjUyWlhoUWIyeDVhR1ZrY205dUtIc2dkbVZ5ZEdsalpYTXNJR1poWTJWeklIMHBDaUFnSUNvZ0lDQWdJR052Ym5OMElHTnZiblpsZUVKdlpIa2dQU0J1WlhjZ1EwRk9UazlPTGtKdlpIa29leUJ0WVhOek9pQXhMQ0J6YUdGd1pUb2dZMjl1ZG1WNFUyaGhjR1VnZlNrS0lDQWdLaUFnSUNBZ2QyOXliR1F1WVdSa1FtOWtlU2hqYjI1MlpYaENiMlI1S1FvZ0lDQXFMd29nSUdOc1lYTnpJRU52Ym5abGVGQnZiSGxvWldSeWIyNGdaWGgwWlc1a2N5QlRhR0Z3WlNCN0NpQWdJQ0F2S2lvZ2RtVnlkR2xqWlhNZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFRnljbUY1SUc5bUlHbHVkR1ZuWlhJZ1lYSnlZWGx6TENCcGJtUnBZMkYwYVc1bklIZG9hV05vSUhabGNuUnBZMlZ6SUdWaFkyZ2dabUZqWlNCamIyNXphWE4wY3lCdlpnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUlHWmhZMlZPYjNKdFlXeHpJQ292Q2dvZ0lDQWdMeW9xSUhkdmNteGtWbVZ5ZEdsalpYTWdLaThLQ2lBZ0lDQXZLaW9nZDI5eWJHUldaWEowYVdObGMwNWxaV1J6VlhCa1lYUmxJQ292Q2dvZ0lDQWdMeW9xSUhkdmNteGtSbUZqWlU1dmNtMWhiSE1nS2k4S0NpQWdJQ0F2S2lvZ2QyOXliR1JHWVdObFRtOXliV0ZzYzA1bFpXUnpWWEJrWVhSbElDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkpaaUJuYVhabGJpd2dkR2hsYzJVZ2JHOWpZV3hzZVNCa1pXWnBibVZrTENCdWIzSnRZV3hwZW1Wa0lHRjRaWE1nWVhKbElIUm9aU0J2Ym14NUlHOXVaWE1nWW1WcGJtY2dZMmhsWTJ0bFpDQjNhR1Z1SUdSdmFXNW5JSE5sY0dGeVlYUnBibWNnWVhocGN5QmphR1ZqYXk0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2lCMWJtbHhkV1ZGWkdkbGN5QXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRSEJoY21GdElIWmxjblJwWTJWeklFRnVJR0Z5Y21GNUlHOW1JRlpsWXpNbmN3b2dJQ0FnSUNvZ1FIQmhjbUZ0SUdaaFkyVnpJRUZ5Y21GNUlHOW1JR2x1ZEdWblpYSWdZWEp5WVhsekxDQmtaWE5qY21saWFXNW5JSGRvYVdOb0lIWmxjblJwWTJWeklIUm9ZWFFnYVhNZ2FXNWpiSFZrWldRZ2FXNGdaV0ZqYUNCbVlXTmxMZ29nSUNBZ0lDb3ZDaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdjbTl3Y3lrZ2V3b2dJQ0FnSUNCcFppQW9jSEp2Y0hNZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJSEJ5YjNCeklEMGdlMzA3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElIc0tJQ0FnSUNBZ0lDQjJaWEowYVdObGN5QTlJRnRkTEFvZ0lDQWdJQ0FnSUdaaFkyVnpJRDBnVzEwc0NpQWdJQ0FnSUNBZ2JtOXliV0ZzY3lBOUlGdGRMQW9nSUNBZ0lDQWdJR0Y0WlhNc0NpQWdJQ0FnSUNBZ1ltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTUtJQ0FnSUNBZ2ZTQTlJSEJ5YjNCek93b2dJQ0FnSUNCemRYQmxjaWg3Q2lBZ0lDQWdJQ0FnZEhsd1pUb2dVMmhoY0dVdWRIbHdaWE11UTA5T1ZrVllVRTlNV1VoRlJGSlBUZ29nSUNBZ0lDQjlLVHNLSUNBZ0lDQWdkR2hwY3k1MlpYSjBhV05sY3lBOUlIWmxjblJwWTJWek93b2dJQ0FnSUNCMGFHbHpMbVpoWTJWeklEMGdabUZqWlhNN0NpQWdJQ0FnSUhSb2FYTXVabUZqWlU1dmNtMWhiSE1nUFNCdWIzSnRZV3h6T3dvS0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1GalpVNXZjbTFoYkhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiMjF3ZFhSbFRtOXliV0ZzY3lncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCcFppQW9JV0p2ZFc1a2FXNW5VM0JvWlhKbFVtRmthWFZ6S1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkNiM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeWdwT3dvZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTWdQU0JpYjNWdVpHbHVaMU53YUdWeVpWSmhaR2wxY3pzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkZabGNuUnBZMlZ6SUQwZ1cxMDdJQzh2SUZkdmNteGtJSFJ5WVc1elptOXliV1ZrSUhabGNuTnBiMjRnYjJZZ0xuWmxjblJwWTJWekNnb2dJQ0FnSUNCMGFHbHpMbmR2Y214a1ZtVnlkR2xqWlhOT1pXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN0NpQWdJQ0FnSUhSb2FYTXVkMjl5YkdSR1lXTmxUbTl5YldGc2N5QTlJRnRkT3lBdkx5QlhiM0pzWkNCMGNtRnVjMlp2Y20xbFpDQjJaWEp6YVc5dUlHOW1JQzVtWVdObFRtOXliV0ZzY3dvS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkVaaFkyVk9iM0p0WVd4elRtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNCMGFHbHpMblZ1YVhGMVpVRjRaWE1nUFNCaGVHVnpJRDhnWVhobGN5NXpiR2xqWlNncElEb2diblZzYkRzS0lDQWdJQ0FnZEdocGN5NTFibWx4ZFdWRlpHZGxjeUE5SUZ0ZE93b2dJQ0FnSUNCMGFHbHpMbU52YlhCMWRHVkZaR2RsY3lncE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJEYjIxd2RYUmxjeUIxYm1seGRXVkZaR2RsY3dvZ0lDQWdJQ292Q2dvS0lDQWdJR052YlhCMWRHVkZaR2RsY3lncElIc0tJQ0FnSUNBZ1kyOXVjM1FnWm1GalpYTWdQU0IwYUdsekxtWmhZMlZ6T3dvZ0lDQWdJQ0JqYjI1emRDQjJaWEowYVdObGN5QTlJSFJvYVhNdWRtVnlkR2xqWlhNN0NpQWdJQ0FnSUdOdmJuTjBJR1ZrWjJWeklEMGdkR2hwY3k1MWJtbHhkV1ZGWkdkbGN6c0tJQ0FnSUNBZ1pXUm5aWE11YkdWdVozUm9JRDBnTURzS0lDQWdJQ0FnWTI5dWMzUWdaV1JuWlNBOUlHNWxkeUJXWldNektDazdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQWhQVDBnWm1GalpYTXViR1Z1WjNSb095QnBLeXNwSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0JtWVdObElEMGdabUZqWlhOYmFWMDdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2JuVnRWbVZ5ZEdsalpYTWdQU0JtWVdObExteGxibWQwYURzS0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ0lUMDlJRzUxYlZabGNuUnBZMlZ6T3lCcUt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3NnUFNBb2FpQXJJREVwSUNVZ2JuVnRWbVZ5ZEdsalpYTTdDaUFnSUNBZ0lDQWdJQ0IyWlhKMGFXTmxjMXRtWVdObFcycGRYUzUyYzNWaUtIWmxjblJwWTJWelcyWmhZMlZiYTExZExDQmxaR2RsS1RzS0lDQWdJQ0FnSUNBZ0lHVmtaMlV1Ym05eWJXRnNhWHBsS0NrN0NpQWdJQ0FnSUNBZ0lDQnNaWFFnWm05MWJtUWdQU0JtWVd4elpUc0tDaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0J3SUQwZ01Ec2djQ0FoUFQwZ1pXUm5aWE11YkdWdVozUm9PeUJ3S3lzcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVmtaMlZ6VzNCZExtRnNiVzl6ZEVWeGRXRnNjeWhsWkdkbEtTQjhmQ0JsWkdkbGMxdHdYUzVoYkcxdmMzUkZjWFZoYkhNb1pXUm5aU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpDQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXWnZkVzVrS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZrWjJWekxuQjFjMmdvWldSblpTNWpiRzl1WlNncEtUc0tJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EyOXRjSFYwWlNCMGFHVWdibTl5YldGc2N5QnZaaUIwYUdVZ1ptRmpaWE11Q2lBZ0lDQWdLaUJYYVd4c0lISmxkWE5sSUdWNGFYTjBhVzVuSUZabFl6TWdiMkpxWldOMGN5QnBiaUIwYUdVZ1lHWmhZMlZPYjNKdFlXeHpZQ0JoY25KaGVTQnBaaUIwYUdWNUlHVjRhWE4wTGdvZ0lDQWdJQ292Q2dvS0lDQWdJR052YlhCMWRHVk9iM0p0WVd4ektDa2dld29nSUNBZ0lDQjBhR2x6TG1aaFkyVk9iM0p0WVd4ekxteGxibWQwYUNBOUlIUm9hWE11Wm1GalpYTXViR1Z1WjNSb095QXZMeUJIWlc1bGNtRjBaU0J1YjNKdFlXeHpDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJvYVhNdVptRmpaWE11YkdWdVozUm9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5QnpieUJoYkd3Z2RtVnlkR2xqWlhNZ1pYaHBjM1J6SUdadmNpQjBhR2x6SUdaaFkyVUtJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnFJRDBnTURzZ2FpQThJSFJvYVhNdVptRmpaWE5iYVYwdWJHVnVaM1JvT3lCcUt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1MlpYSjBhV05sYzF0MGFHbHpMbVpoWTJWelcybGRXMnBkWFNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRlpsY25SbGVDQWtlM1JvYVhNdVptRmpaWE5iYVYxYmFsMTlJRzV2ZENCbWIzVnVaQ0ZnS1RzS0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR052Ym5OMElHNGdQU0IwYUdsekxtWmhZMlZPYjNKdFlXeHpXMmxkSUh4OElHNWxkeUJXWldNektDazdDaUFnSUNBZ0lDQWdkR2hwY3k1blpYUkdZV05sVG05eWJXRnNLR2tzSUc0cE93b2dJQ0FnSUNBZ0lHNHVibVZuWVhSbEtHNHBPd29nSUNBZ0lDQWdJSFJvYVhNdVptRmpaVTV2Y20xaGJITmJhVjBnUFNCdU93b2dJQ0FnSUNBZ0lHTnZibk4wSUhabGNuUmxlQ0E5SUhSb2FYTXVkbVZ5ZEdsalpYTmJkR2hwY3k1bVlXTmxjMXRwWFZzd1hWMDdDZ29nSUNBZ0lDQWdJR2xtSUNodUxtUnZkQ2gyWlhKMFpYZ3BJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2loZ0xtWmhZMlZPYjNKdFlXeHpXeVI3YVgxZElEMGdWbVZqTXlna2UyNHVkRzlUZEhKcGJtY29LWDBwSUd4dmIydHpJR3hwYTJVZ2FYUWdjRzlwYm5SeklHbHVkRzhnZEdobElITm9ZWEJsUHlCVWFHVWdkbVZ5ZEdsalpYTWdabTlzYkc5M0xpQk5ZV3RsSUhOMWNtVWdkR2hsZVNCaGNtVWdiM0prWlhKbFpDQkRRMWNnWVhKdmRXNWtJSFJvWlNCdWIzSnRZV3dzSUhWemFXNW5JSFJvWlNCeWFXZG9kQ0JvWVc1a0lISjFiR1V1WUNrN0Nnb2dJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhaUE5SURBN0lHb2dQQ0IwYUdsekxtWmhZMlZ6VzJsZExteGxibWQwYURzZ2Fpc3JLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhnTG5abGNuUnBZMlZ6V3lSN2RHaHBjeTVtWVdObGMxdHBYVnRxWFgxZElEMGdWbVZqTXlna2UzUm9hWE11ZG1WeWRHbGpaWE5iZEdocGN5NW1ZV05sYzF0cFhWdHFYVjB1ZEc5VGRISnBibWNvS1gwcFlDazdDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZiWEIxZEdVZ2RHaGxJRzV2Y20xaGJDQnZaaUJoSUdaaFkyVWdabkp2YlNCcGRITWdkbVZ5ZEdsalpYTUtJQ0FnSUNBcUx3b0tDaUFnSUNCblpYUkdZV05sVG05eWJXRnNLR2tzSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQm1JRDBnZEdocGN5NW1ZV05sYzF0cFhUc0tJQ0FnSUNBZ1kyOXVjM1FnZG1FZ1BTQjBhR2x6TG5abGNuUnBZMlZ6VzJaYk1GMWRPd29nSUNBZ0lDQmpiMjV6ZENCMllpQTlJSFJvYVhNdWRtVnlkR2xqWlhOYlpsc3hYVjA3Q2lBZ0lDQWdJR052Ym5OMElIWmpJRDBnZEdocGN5NTJaWEowYVdObGMxdG1XekpkWFRzS0lDQWdJQ0FnUTI5dWRtVjRVRzlzZVdobFpISnZiaTVqYjIxd2RYUmxUbTl5YldGc0tIWmhMQ0IyWWl3Z2RtTXNJSFJoY21kbGRDazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQm1ZV05sSUc1dmNtMWhiQ0JuYVhabGJpQXpJSFpsY25ScFkyVnpDaUFnSUNBZ0tpOEtDZ29nSUNBZ2MzUmhkR2xqSUdOdmJYQjFkR1ZPYjNKdFlXd29kbUVzSUhaaUxDQjJZeXdnZEdGeVoyVjBLU0I3Q2lBZ0lDQWdJR052Ym5OMElHTmlJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdZV0lnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCMllpNTJjM1ZpS0haaExDQmhZaWs3Q2lBZ0lDQWdJSFpqTG5aemRXSW9kbUlzSUdOaUtUc0tJQ0FnSUNBZ1kySXVZM0p2YzNNb1lXSXNJSFJoY21kbGRDazdDZ29nSUNBZ0lDQnBaaUFvSVhSaGNtZGxkQzVwYzFwbGNtOG9LU2tnZXdvZ0lDQWdJQ0FnSUhSaGNtZGxkQzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXbHVSR2x6ZENCRGJHRnRjQ0JrYVhOMFlXNWpaUW9nSUNBZ0lDb2dRSEJoY21GdElISmxjM1ZzZENCVWFHVWdZVzRnWVhKeVlYa2diMllnWTI5dWRHRmpkQ0J3YjJsdWRDQnZZbXBsWTNSekxDQnpaV1VnWTJ4cGNFWmhZMlZCWjJGcGJuTjBTSFZzYkFvZ0lDQWdJQ292Q2dvS0lDQWdJR05zYVhCQloyRnBibk4wU0hWc2JDaHdiM05CTENCeGRXRjBRU3dnYUhWc2JFSXNJSEJ2YzBJc0lIRjFZWFJDTENCelpYQmhjbUYwYVc1blRtOXliV0ZzTENCdGFXNUVhWE4wTENCdFlYaEVhWE4wTENCeVpYTjFiSFFwSUhzS0lDQWdJQ0FnWTI5dWMzUWdWMjl5YkdST2IzSnRZV3dnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCc1pYUWdZMnh2YzJWemRFWmhZMlZDSUQwZ0xURTdDaUFnSUNBZ0lHeGxkQ0JrYldGNElEMGdMVTUxYldKbGNpNU5RVmhmVmtGTVZVVTdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQm1ZV05sSUQwZ01Ec2dabUZqWlNBOElHaDFiR3hDTG1aaFkyVnpMbXhsYm1kMGFEc2dabUZqWlNzcktTQjdDaUFnSUNBZ0lDQWdWMjl5YkdST2IzSnRZV3d1WTI5d2VTaG9kV3hzUWk1bVlXTmxUbTl5YldGc2MxdG1ZV05sWFNrN0NpQWdJQ0FnSUNBZ2NYVmhkRUl1ZG0xMWJIUW9WMjl5YkdST2IzSnRZV3dzSUZkdmNteGtUbTl5YldGc0tUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCa0lEMGdWMjl5YkdST2IzSnRZV3d1Wkc5MEtITmxjR0Z5WVhScGJtZE9iM0p0WVd3cE93b0tJQ0FnSUNBZ0lDQnBaaUFvWkNBK0lHUnRZWGdwSUhzS0lDQWdJQ0FnSUNBZ0lHUnRZWGdnUFNCa093b2dJQ0FnSUNBZ0lDQWdZMnh2YzJWemRFWmhZMlZDSUQwZ1ptRmpaVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElIZHZjbXhrVm1WeWRITkNNU0E5SUZ0ZE93b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQm9kV3hzUWk1bVlXTmxjMXRqYkc5elpYTjBSbUZqWlVKZExteGxibWQwYURzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZaUE5SUdoMWJHeENMblpsY25ScFkyVnpXMmgxYkd4Q0xtWmhZMlZ6VzJOc2IzTmxjM1JHWVdObFFsMWJhVjFkT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSGR2Y214a1lpQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJQ0FnZDI5eWJHUmlMbU52Y0hrb1lpazdDaUFnSUNBZ0lDQWdjWFZoZEVJdWRtMTFiSFFvZDI5eWJHUmlMQ0IzYjNKc1pHSXBPd29nSUNBZ0lDQWdJSEJ2YzBJdWRtRmtaQ2gzYjNKc1pHSXNJSGR2Y214a1lpazdDaUFnSUNBZ0lDQWdkMjl5YkdSV1pYSjBjMEl4TG5CMWMyZ29kMjl5YkdSaUtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLR05zYjNObGMzUkdZV05sUWlBK1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiR2x3Um1GalpVRm5ZV2x1YzNSSWRXeHNLSE5sY0dGeVlYUnBibWRPYjNKdFlXd3NJSEJ2YzBFc0lIRjFZWFJCTENCM2IzSnNaRlpsY25SelFqRXNJRzFwYmtScGMzUXNJRzFoZUVScGMzUXNJSEpsYzNWc2RDazdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUm1sdVpDQjBhR1VnYzJWd1lYSmhkR2x1WnlCaGVHbHpJR0psZEhkbFpXNGdkR2hwY3lCb2RXeHNJR0Z1WkNCaGJtOTBhR1Z5Q2lBZ0lDQWdLaUJBY0dGeVlXMGdkR0Z5WjJWMElGUm9aU0IwWVhKblpYUWdkbVZqZEc5eUlIUnZJSE5oZG1VZ2RHaGxJR0Y0YVhNZ2FXNEtJQ0FnSUNBcUlFQnlaWFIxY200Z1VtVjBkWEp1Y3lCbVlXeHpaU0JwWmlCaElITmxjR0Z5WVhScGIyNGdhWE1nWm05MWJtUXNJR1ZzYzJVZ2RISjFaUW9nSUNBZ0lDb3ZDZ29LSUNBZ0lHWnBibVJUWlhCaGNtRjBhVzVuUVhocGN5aG9kV3hzUWl3Z2NHOXpRU3dnY1hWaGRFRXNJSEJ2YzBJc0lIRjFZWFJDTENCMFlYSm5aWFFzSUdaaFkyVk1hWE4wUVN3Z1ptRmpaVXhwYzNSQ0tTQjdDaUFnSUNBZ0lHTnZibk4wSUdaaFkyVkJUbTl5YldGc1YxTXpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdWMjl5YkdSdWIzSnRZV3d4SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ1kyOXVjM1FnWkdWc2RHRkRJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdkMjl5YkdSRlpHZGxNQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUdOdmJuTjBJSGR2Y214a1JXUm5aVEVnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCamIyNXpkQ0JEY205emN5QTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJR3hsZENCa2JXbHVJRDBnVG5WdFltVnlMazFCV0Y5V1FVeFZSVHNLSUNBZ0lDQWdZMjl1YzNRZ2FIVnNiRUVnUFNCMGFHbHpPd29LSUNBZ0lDQWdhV1lnS0NGb2RXeHNRUzUxYm1seGRXVkJlR1Z6S1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYm5WdFJtRmpaWE5CSUQwZ1ptRmpaVXhwYzNSQklEOGdabUZqWlV4cGMzUkJMbXhsYm1kMGFDQTZJR2gxYkd4QkxtWmhZMlZ6TG14bGJtZDBhRHNnTHk4Z1ZHVnpkQ0JtWVdObElHNXZjbTFoYkhNZ1puSnZiU0JvZFd4c1FRb0tJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzUxYlVaaFkyVnpRVHNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQm1hU0E5SUdaaFkyVk1hWE4wUVNBL0lHWmhZMlZNYVhOMFFWdHBYU0E2SUdrN0lDOHZJRWRsZENCM2IzSnNaQ0JtWVdObElHNXZjbTFoYkFvS0lDQWdJQ0FnSUNBZ0lHWmhZMlZCVG05eWJXRnNWMU16TG1OdmNIa29hSFZzYkVFdVptRmpaVTV2Y20xaGJITmJabWxkS1RzS0lDQWdJQ0FnSUNBZ0lIRjFZWFJCTG5adGRXeDBLR1poWTJWQlRtOXliV0ZzVjFNekxDQm1ZV05sUVU1dmNtMWhiRmRUTXlrN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa0lEMGdhSFZzYkVFdWRHVnpkRk5sY0VGNGFYTW9abUZqWlVGT2IzSnRZV3hYVXpNc0lHaDFiR3hDTENCd2IzTkJMQ0J4ZFdGMFFTd2djRzl6UWl3Z2NYVmhkRUlwT3dvS0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrSUQwOVBTQm1ZV3h6WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN0NpQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tHUWdQQ0JrYldsdUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSdGFXNGdQU0JrT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRdVkyOXdlU2htWVdObFFVNXZjbTFoYkZkVE15azdDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQzh2SUZSbGMzUWdkVzVwY1hWbElHRjRaWE1LSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0FoUFQwZ2FIVnNiRUV1ZFc1cGNYVmxRWGhsY3k1c1pXNW5kR2c3SUdrckt5a2dld29nSUNBZ0lDQWdJQ0FnTHk4Z1IyVjBJSGR2Y214a0lHRjRhWE1LSUNBZ0lDQWdJQ0FnSUhGMVlYUkJMblp0ZFd4MEtHaDFiR3hCTG5WdWFYRjFaVUY0WlhOYmFWMHNJR1poWTJWQlRtOXliV0ZzVjFNektUc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUWdQU0JvZFd4c1FTNTBaWE4wVTJWd1FYaHBjeWhtWVdObFFVNXZjbTFoYkZkVE15d2dhSFZzYkVJc0lIQnZjMEVzSUhGMVlYUkJMQ0J3YjNOQ0xDQnhkV0YwUWlrN0Nnb2dJQ0FnSUNBZ0lDQWdhV1lnS0dRZ1BUMDlJR1poYkhObEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUc0tJQ0FnSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9aQ0E4SUdSdGFXNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHMXBiaUE5SUdRN0NpQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNWpiM0I1S0daaFkyVkJUbTl5YldGc1YxTXpLVHNLSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDZ2hhSFZzYkVJdWRXNXBjWFZsUVhobGN5a2dld29nSUNBZ0lDQWdJQzh2SUZSbGMzUWdabUZqWlNCdWIzSnRZV3h6SUdaeWIyMGdhSFZzYkVJS0lDQWdJQ0FnSUNCamIyNXpkQ0J1ZFcxR1lXTmxjMElnUFNCbVlXTmxUR2x6ZEVJZ1B5Qm1ZV05sVEdsemRFSXViR1Z1WjNSb0lEb2dhSFZzYkVJdVptRmpaWE11YkdWdVozUm9Pd29LSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc1MWJVWmhZMlZ6UWpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JtYVNBOUlHWmhZMlZNYVhOMFFpQS9JR1poWTJWTWFYTjBRbHRwWFNBNklHazdDaUFnSUNBZ0lDQWdJQ0JYYjNKc1pHNXZjbTFoYkRFdVkyOXdlU2hvZFd4c1FpNW1ZV05sVG05eWJXRnNjMXRtYVYwcE93b2dJQ0FnSUNBZ0lDQWdjWFZoZEVJdWRtMTFiSFFvVjI5eWJHUnViM0p0WVd3eExDQlhiM0pzWkc1dmNtMWhiREVwT3dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkNBOUlHaDFiR3hCTG5SbGMzUlRaWEJCZUdsektGZHZjbXhrYm05eWJXRnNNU3dnYUhWc2JFSXNJSEJ2YzBFc0lIRjFZWFJCTENCd2IzTkNMQ0J4ZFdGMFFpazdDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tHUWdQVDA5SUdaaGJITmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ0lDQnBaaUFvWkNBOElHUnRhVzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdaRzFwYmlBOUlHUTdDaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkQzVqYjNCNUtGZHZjbXhrYm05eWJXRnNNU2s3Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUM4dklGUmxjM1FnZFc1cGNYVmxJR0Y0WlhNZ2FXNGdRZ29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJQ0U5UFNCb2RXeHNRaTUxYm1seGRXVkJlR1Z6TG14bGJtZDBhRHNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0J4ZFdGMFFpNTJiWFZzZENob2RXeHNRaTUxYm1seGRXVkJlR1Z6VzJsZExDQlhiM0pzWkc1dmNtMWhiREVwT3dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkNBOUlHaDFiR3hCTG5SbGMzUlRaWEJCZUdsektGZHZjbXhrYm05eWJXRnNNU3dnYUhWc2JFSXNJSEJ2YzBFc0lIRjFZWFJCTENCd2IzTkNMQ0J4ZFdGMFFpazdDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tHUWdQVDA5SUdaaGJITmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ0lDQnBaaUFvWkNBOElHUnRhVzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdaRzFwYmlBOUlHUTdDaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkQzVqYjNCNUtGZHZjbXhrYm05eWJXRnNNU2s3Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlDOHZJRlJsYzNRZ1pXUm5aWE1LQ2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JsTUNBOUlEQTdJR1V3SUNFOVBTQm9kV3hzUVM1MWJtbHhkV1ZGWkdkbGN5NXNaVzVuZEdnN0lHVXdLeXNwSUhzS0lDQWdJQ0FnSUNBdkx5QkhaWFFnZDI5eWJHUWdaV1JuWlFvZ0lDQWdJQ0FnSUhGMVlYUkJMblp0ZFd4MEtHaDFiR3hCTG5WdWFYRjFaVVZrWjJWelcyVXdYU3dnZDI5eWJHUkZaR2RsTUNrN0Nnb2dJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHVXhJRDBnTURzZ1pURWdJVDA5SUdoMWJHeENMblZ1YVhGMVpVVmtaMlZ6TG14bGJtZDBhRHNnWlRFckt5a2dld29nSUNBZ0lDQWdJQ0FnTHk4Z1IyVjBJSGR2Y214a0lHVmtaMlVnTWdvZ0lDQWdJQ0FnSUNBZ2NYVmhkRUl1ZG0xMWJIUW9hSFZzYkVJdWRXNXBjWFZsUldSblpYTmJaVEZkTENCM2IzSnNaRVZrWjJVeEtUc0tJQ0FnSUNBZ0lDQWdJSGR2Y214a1JXUm5aVEF1WTNKdmMzTW9kMjl5YkdSRlpHZGxNU3dnUTNKdmMzTXBPd29LSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hRM0p2YzNNdVlXeHRiM04wV21WeWJ5Z3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFTnliM056TG01dmNtMWhiR2w2WlNncE93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmthWE4wSUQwZ2FIVnNiRUV1ZEdWemRGTmxjRUY0YVhNb1EzSnZjM01zSUdoMWJHeENMQ0J3YjNOQkxDQnhkV0YwUVN3Z2NHOXpRaXdnY1hWaGRFSXBPd29LSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JwYzNRZ1BUMDlJR1poYkhObEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHbHpkQ0E4SUdSdGFXNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtiV2x1SUQwZ1pHbHpkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRdVkyOXdlU2hEY205emN5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIQnZjMEl1ZG5OMVlpaHdiM05CTENCa1pXeDBZVU1wT3dvS0lDQWdJQ0FnYVdZZ0tHUmxiSFJoUXk1a2IzUW9kR0Z5WjJWMEtTQStJREF1TUNrZ2V3b2dJQ0FnSUNBZ0lIUmhjbWRsZEM1dVpXZGhkR1VvZEdGeVoyVjBLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlGUmxjM1FnYzJWd1lYSmhkR2x1WnlCaGVHbHpJR0ZuWVdsdWMzUWdkSGR2SUdoMWJHeHpMaUJDYjNSb0lHaDFiR3h6SUdGeVpTQndjbTlxWldOMFpXUWdiMjUwYnlCMGFHVWdZWGhwY3lCaGJtUWdkR2hsSUc5MlpYSnNZWEFnYzJsNlpTQnBjeUJ5WlhSMWNtNWxaQ0JwWmlCMGFHVnlaU0JwY3lCdmJtVXVDaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUm9aU0J2ZG1WeWJHRndJR1JsY0hSb0xDQnZjaUJHUVV4VFJTQnBaaUJ1YnlCd1pXNWxkSEpoZEdsdmJpNEtJQ0FnSUNBcUx3b0tDaUFnSUNCMFpYTjBVMlZ3UVhocGN5aGhlR2x6TENCb2RXeHNRaXdnY0c5elFTd2djWFZoZEVFc0lIQnZjMElzSUhGMVlYUkNLU0I3Q2lBZ0lDQWdJR052Ym5OMElHaDFiR3hCSUQwZ2RHaHBjenNLSUNBZ0lDQWdRMjl1ZG1WNFVHOXNlV2hsWkhKdmJpNXdjbTlxWldOMEtHaDFiR3hCTENCaGVHbHpMQ0J3YjNOQkxDQnhkV0YwUVN3Z2JXRjRiV2x1UVNrN0NpQWdJQ0FnSUVOdmJuWmxlRkJ2Ykhsb1pXUnliMjR1Y0hKdmFtVmpkQ2hvZFd4c1Fpd2dZWGhwY3l3Z2NHOXpRaXdnY1hWaGRFSXNJRzFoZUcxcGJrSXBPd29nSUNBZ0lDQmpiMjV6ZENCdFlYaEJJRDBnYldGNGJXbHVRVnN3WFRzS0lDQWdJQ0FnWTI5dWMzUWdiV2x1UVNBOUlHMWhlRzFwYmtGYk1WMDdDaUFnSUNBZ0lHTnZibk4wSUcxaGVFSWdQU0J0WVhodGFXNUNXekJkT3dvZ0lDQWdJQ0JqYjI1emRDQnRhVzVDSUQwZ2JXRjRiV2x1UWxzeFhUc0tDaUFnSUNBZ0lHbG1JQ2h0WVhoQklEd2diV2x1UWlCOGZDQnRZWGhDSUR3Z2JXbHVRU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUc2dMeThnVTJWd1lYSmhkR1ZrQ2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHUXdJRDBnYldGNFFTQXRJRzFwYmtJN0NpQWdJQ0FnSUdOdmJuTjBJR1F4SUQwZ2JXRjRRaUF0SUcxcGJrRTdDaUFnSUNBZ0lHTnZibk4wSUdSbGNIUm9JRDBnWkRBZ1BDQmtNU0EvSUdRd0lEb2daREU3Q2lBZ0lDQWdJSEpsZEhWeWJpQmtaWEIwYURzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dZMkZzWTNWc1lYUmxURzlqWVd4SmJtVnlkR2xoQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdZMkZzWTNWc1lYUmxURzlqWVd4SmJtVnlkR2xoS0cxaGMzTXNJSFJoY21kbGRDa2dld29nSUNBZ0lDQXZMeUJCY0hCeWIzaHBiV0YwWlNCM2FYUm9JR0p2ZUNCcGJtVnlkR2xoQ2lBZ0lDQWdJQzh2SUVWNFlXTjBJR2x1WlhKMGFXRWdZMkZzWTNWc1lYUnBiMjRnYVhNZ2IzWmxjbXRwYkd3c0lHSjFkQ0J6WldVZ2FIUjBjRG92TDJkbGIyMWxkSEpwWTNSdmIyeHpMbU52YlM5RWIyTjFiV1Z1ZEdGMGFXOXVMMUJ2Ykhsb1pXUnlZV3hOWVhOelVISnZjR1Z5ZEdsbGN5NXdaR1lnWm05eUlIUm9aU0JqYjNKeVpXTjBJSGRoZVNCMGJ5QmtieUJwZEFvZ0lDQWdJQ0JqYjI1emRDQmhZV0ppYldGNElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdZMjl1YzNRZ1lXRmlZbTFwYmlBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lIUm9hWE11WTI5dGNIVjBaVXh2WTJGc1FVRkNRaWhoWVdKaWJXbHVMQ0JoWVdKaWJXRjRLVHNLSUNBZ0lDQWdZMjl1YzNRZ2VDQTlJR0ZoWW1KdFlYZ3VlQ0F0SUdGaFltSnRhVzR1ZURzS0lDQWdJQ0FnWTI5dWMzUWdlU0E5SUdGaFltSnRZWGd1ZVNBdElHRmhZbUp0YVc0dWVUc0tJQ0FnSUNBZ1kyOXVjM1FnZWlBOUlHRmhZbUp0WVhndWVpQXRJR0ZoWW1KdGFXNHVlanNLSUNBZ0lDQWdkR0Z5WjJWMExuZ2dQU0F4TGpBZ0x5QXhNaTR3SUNvZ2JXRnpjeUFxSUNneUlDb2dlU0FxSURJZ0tpQjVJQ3NnTWlBcUlIb2dLaUF5SUNvZ2VpazdDaUFnSUNBZ0lIUmhjbWRsZEM1NUlEMGdNUzR3SUM4Z01USXVNQ0FxSUcxaGMzTWdLaUFvTWlBcUlIZ2dLaUF5SUNvZ2VDQXJJRElnS2lCNklDb2dNaUFxSUhvcE93b2dJQ0FnSUNCMFlYSm5aWFF1ZWlBOUlERXVNQ0F2SURFeUxqQWdLaUJ0WVhOeklDb2dLRElnS2lCNUlDb2dNaUFxSUhrZ0t5QXlJQ29nZUNBcUlESWdLaUI0S1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRSEJoY21GdElHWmhZMlZmYVNCSmJtUmxlQ0J2WmlCMGFHVWdabUZqWlFvZ0lDQWdJQ292Q2dvS0lDQWdJR2RsZEZCc1lXNWxRMjl1YzNSaGJuUlBaa1poWTJVb1ptRmpaVjlwS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR1lnUFNCMGFHbHpMbVpoWTJWelcyWmhZMlZmYVYwN0NpQWdJQ0FnSUdOdmJuTjBJRzRnUFNCMGFHbHpMbVpoWTJWT2IzSnRZV3h6VzJaaFkyVmZhVjA3Q2lBZ0lDQWdJR052Ym5OMElIWWdQU0IwYUdsekxuWmxjblJwWTJWelcyWmJNRjFkT3dvZ0lDQWdJQ0JqYjI1emRDQmpJRDBnTFc0dVpHOTBLSFlwT3dvZ0lDQWdJQ0J5WlhSMWNtNGdZenNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EyeHBjQ0JoSUdaaFkyVWdZV2RoYVc1emRDQmhJR2gxYkd3dUNpQWdJQ0FnS2lCQWNHRnlZVzBnZDI5eWJHUldaWEowYzBJeElFRnVJR0Z5Y21GNUlHOW1JRlpsWXpNZ2QybDBhQ0IyWlhKMGFXTmxjeUJwYmlCMGFHVWdkMjl5YkdRZ1puSmhiV1V1Q2lBZ0lDQWdLaUJBY0dGeVlXMGdiV2x1UkdsemRDQkVhWE4wWVc1alpTQmpiR0Z0Y0dsdVp3b2dJQ0FnSUNvZ1FIQmhjbUZ0SUVGeWNtRjVJSEpsYzNWc2RDQkJjbkpoZVNCMGJ5QnpkRzl5WlNCeVpYTjFiSFJwYm1jZ1kyOXVkR0ZqZENCd2IybHVkSE1nYVc0dUlGZHBiR3dnWW1VZ2IySnFaV04wY3lCM2FYUm9JSEJ5YjNCbGNuUnBaWE02SUhCdmFXNTBMQ0JrWlhCMGFDd2dibTl5YldGc0xpQlVhR1Z6WlNCaGNtVWdjbVZ3Y21WelpXNTBaV1FnYVc0Z2QyOXliR1FnWTI5dmNtUnBibUYwWlhNdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWTJ4cGNFWmhZMlZCWjJGcGJuTjBTSFZzYkNoelpYQmhjbUYwYVc1blRtOXliV0ZzTENCd2IzTkJMQ0J4ZFdGMFFTd2dkMjl5YkdSV1pYSjBjMEl4TENCdGFXNUVhWE4wTENCdFlYaEVhWE4wTENCeVpYTjFiSFFwSUhzS0lDQWdJQ0FnWTI5dWMzUWdabUZqWlVGT2IzSnRZV3hYVXlBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lHTnZibk4wSUdWa1oyVXdJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdWMjl5YkdSRlpHZGxNQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUdOdmJuTjBJSGR2Y214a1VHeGhibVZCYm05eWJXRnNNU0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUdOdmJuTjBJSEJzWVc1bFRtOXliV0ZzVjFNeElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdZMjl1YzNRZ2QyOXliR1JCTVNBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lHTnZibk4wSUd4dlkyRnNVR3hoYm1WT2IzSnRZV3dnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCamIyNXpkQ0J3YkdGdVpVNXZjbTFoYkZkVElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdZMjl1YzNRZ2FIVnNiRUVnUFNCMGFHbHpPd29nSUNBZ0lDQmpiMjV6ZENCM2IzSnNaRlpsY25SelFqSWdQU0JiWFRzS0lDQWdJQ0FnWTI5dWMzUWdjRlowZUVsdUlEMGdkMjl5YkdSV1pYSjBjMEl4T3dvZ0lDQWdJQ0JqYjI1emRDQndWblI0VDNWMElEMGdkMjl5YkdSV1pYSjBjMEl5T3dvZ0lDQWdJQ0JzWlhRZ1kyeHZjMlZ6ZEVaaFkyVkJJRDBnTFRFN0NpQWdJQ0FnSUd4bGRDQmtiV2x1SUQwZ1RuVnRZbVZ5TGsxQldGOVdRVXhWUlRzZ0x5OGdSbWx1WkNCMGFHVWdabUZqWlNCM2FYUm9JRzV2Y20xaGJDQmpiRzl6WlhOMElIUnZJSFJvWlNCelpYQmhjbUYwYVc1bklHRjRhWE1LQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR1poWTJVZ1BTQXdPeUJtWVdObElEd2dhSFZzYkVFdVptRmpaWE11YkdWdVozUm9PeUJtWVdObEt5c3BJSHNLSUNBZ0lDQWdJQ0JtWVdObFFVNXZjbTFoYkZkVExtTnZjSGtvYUhWc2JFRXVabUZqWlU1dmNtMWhiSE5iWm1GalpWMHBPd29nSUNBZ0lDQWdJSEYxWVhSQkxuWnRkV3gwS0daaFkyVkJUbTl5YldGc1YxTXNJR1poWTJWQlRtOXliV0ZzVjFNcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdRZ1BTQm1ZV05sUVU1dmNtMWhiRmRUTG1SdmRDaHpaWEJoY21GMGFXNW5UbTl5YldGc0tUc0tDaUFnSUNBZ0lDQWdhV1lnS0dRZ1BDQmtiV2x1S1NCN0NpQWdJQ0FnSUNBZ0lDQmtiV2x1SUQwZ1pEc0tJQ0FnSUNBZ0lDQWdJR05zYjNObGMzUkdZV05sUVNBOUlHWmhZMlU3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb1kyeHZjMlZ6ZEVaaFkyVkJJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnZlNBdkx5QkhaWFFnZEdobElHWmhZMlVnWVc1a0lHTnZibk4wY25WamRDQmpiMjV1WldOMFpXUWdabUZqWlhNS0Nnb2dJQ0FnSUNCamIyNXpkQ0J3YjJ4NVFTQTlJR2gxYkd4QkxtWmhZMlZ6VzJOc2IzTmxjM1JHWVdObFFWMDdDaUFnSUNBZ0lIQnZiSGxCTG1OdmJtNWxZM1JsWkVaaFkyVnpJRDBnVzEwN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHaDFiR3hCTG1aaFkyVnpMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ1BDQm9kV3hzUVM1bVlXTmxjMXRwWFM1c1pXNW5kR2c3SUdvckt5a2dld29nSUNBZ0lDQWdJQ0FnYVdZZ0tBb2dJQ0FnSUNBZ0lDQWdMeW9nVTJoaGNtbHVaeUJoSUhabGNuUmxlQ292Q2lBZ0lDQWdJQ0FnSUNCd2IyeDVRUzVwYm1SbGVFOW1LR2gxYkd4QkxtWmhZMlZ6VzJsZFcycGRLU0FoUFQwZ0xURWdKaVlLSUNBZ0lDQWdJQ0FnSUM4cUlFNXZkQ0IwYUdVZ2IyNWxJSGRsSUdGeVpTQnNiMjlyYVc1bklHWnZjaUJqYjI1dVpXTjBhVzl1Y3lCbWNtOXRJQ292Q2lBZ0lDQWdJQ0FnSUNCcElDRTlQU0JqYkc5elpYTjBSbUZqWlVFZ0ppWUtJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRDQmhiSEpsWVdSNUlHRmtaR1ZrSUNvdkNpQWdJQ0FnSUNBZ0lDQndiMng1UVM1amIyNXVaV04wWldSR1lXTmxjeTVwYm1SbGVFOW1LR2twSUQwOVBTQXRNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQndiMng1UVM1amIyNXVaV04wWldSR1lXTmxjeTV3ZFhOb0tHa3BPd29nSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlNBdkx5QkRiR2x3SUhSb1pTQndiMng1WjI5dUlIUnZJSFJvWlNCaVlXTnJJRzltSUhSb1pTQndiR0Z1WlhNZ2IyWWdZV3hzSUdaaFkyVnpJRzltSUdoMWJHd2dRU3dLSUNBZ0lDQWdMeThnZEdoaGRDQmhjbVVnWVdScVlXTmxiblFnZEc4Z2RHaGxJSGRwZEc1bGMzTWdabUZqWlFvS0NpQWdJQ0FnSUdOdmJuTjBJRzUxYlZabGNuUnBZMlZ6UVNBOUlIQnZiSGxCTG14bGJtZDBhRHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYm5WdFZtVnlkR2xqWlhOQk95QnBLeXNwSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0JoSUQwZ2FIVnNiRUV1ZG1WeWRHbGpaWE5iY0c5c2VVRmJhVjFkT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJR0lnUFNCb2RXeHNRUzUyWlhKMGFXTmxjMXR3YjJ4NVFWc29hU0FySURFcElDVWdiblZ0Vm1WeWRHbGpaWE5CWFYwN0NpQWdJQ0FnSUNBZ1lTNTJjM1ZpS0dJc0lHVmtaMlV3S1RzS0lDQWdJQ0FnSUNCWGIzSnNaRVZrWjJVd0xtTnZjSGtvWldSblpUQXBPd29nSUNBZ0lDQWdJSEYxWVhSQkxuWnRkV3gwS0ZkdmNteGtSV1JuWlRBc0lGZHZjbXhrUldSblpUQXBPd29nSUNBZ0lDQWdJSEJ2YzBFdWRtRmtaQ2hYYjNKc1pFVmtaMlV3TENCWGIzSnNaRVZrWjJVd0tUc0tJQ0FnSUNBZ0lDQjNiM0pzWkZCc1lXNWxRVzV2Y20xaGJERXVZMjl3ZVNoMGFHbHpMbVpoWTJWT2IzSnRZV3h6VzJOc2IzTmxjM1JHWVdObFFWMHBPd29nSUNBZ0lDQWdJSEYxWVhSQkxuWnRkV3gwS0hkdmNteGtVR3hoYm1WQmJtOXliV0ZzTVN3Z2QyOXliR1JRYkdGdVpVRnViM0p0WVd3eEtUc0tJQ0FnSUNBZ0lDQndiM05CTG5aaFpHUW9kMjl5YkdSUWJHRnVaVUZ1YjNKdFlXd3hMQ0IzYjNKc1pGQnNZVzVsUVc1dmNtMWhiREVwT3dvZ0lDQWdJQ0FnSUZkdmNteGtSV1JuWlRBdVkzSnZjM01vZDI5eWJHUlFiR0Z1WlVGdWIzSnRZV3d4TENCd2JHRnVaVTV2Y20xaGJGZFRNU2s3Q2lBZ0lDQWdJQ0FnY0d4aGJtVk9iM0p0WVd4WFV6RXVibVZuWVhSbEtIQnNZVzVsVG05eWJXRnNWMU14S1RzS0lDQWdJQ0FnSUNCM2IzSnNaRUV4TG1OdmNIa29ZU2s3Q2lBZ0lDQWdJQ0FnY1hWaGRFRXVkbTExYkhRb2QyOXliR1JCTVN3Z2QyOXliR1JCTVNrN0NpQWdJQ0FnSUNBZ2NHOXpRUzUyWVdSa0tIZHZjbXhrUVRFc0lIZHZjbXhrUVRFcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUc5MGFHVnlSbUZqWlNBOUlIQnZiSGxCTG1OdmJtNWxZM1JsWkVaaFkyVnpXMmxkT3dvZ0lDQWdJQ0FnSUd4dlkyRnNVR3hoYm1WT2IzSnRZV3d1WTI5d2VTaDBhR2x6TG1aaFkyVk9iM0p0WVd4elcyOTBhR1Z5Um1GalpWMHBPd29nSUNBZ0lDQWdJR052Ym5OMElHeHZZMkZzVUd4aGJtVkZjU0E5SUhSb2FYTXVaMlYwVUd4aGJtVkRiMjV6ZEdGdWRFOW1SbUZqWlNodmRHaGxja1poWTJVcE93b2dJQ0FnSUNBZ0lIQnNZVzVsVG05eWJXRnNWMU11WTI5d2VTaHNiMk5oYkZCc1lXNWxUbTl5YldGc0tUc0tJQ0FnSUNBZ0lDQnhkV0YwUVM1MmJYVnNkQ2h3YkdGdVpVNXZjbTFoYkZkVExDQndiR0Z1WlU1dmNtMWhiRmRUS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J3YkdGdVpVVnhWMU1nUFNCc2IyTmhiRkJzWVc1bFJYRWdMU0J3YkdGdVpVNXZjbTFoYkZkVExtUnZkQ2h3YjNOQktUc2dMeThnUTJ4cGNDQm1ZV05sSUdGbllXbHVjM1FnYjNWeUlHTnZibk4wY25WamRHVmtJSEJzWVc1bENnb2dJQ0FnSUNBZ0lIUm9hWE11WTJ4cGNFWmhZMlZCWjJGcGJuTjBVR3hoYm1Vb2NGWjBlRWx1TENCd1ZuUjRUM1YwTENCd2JHRnVaVTV2Y20xaGJGZFRMQ0J3YkdGdVpVVnhWMU1wT3lBdkx5QlVhSEp2ZHlCaGQyRjVJR0ZzYkNCamJHbHdjR1ZrSUhCdmFXNTBjeXdnWW5WMElITmhkbVVnZEdobElISmxiV0ZwYm1sdVp5QjFiblJwYkNCdVpYaDBJR05zYVhBS0NpQWdJQ0FnSUNBZ2QyaHBiR1VnS0hCV2RIaEpiaTVzWlc1bmRHZ3BJSHNLSUNBZ0lDQWdJQ0FnSUhCV2RIaEpiaTV6YUdsbWRDZ3BPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnZDJocGJHVWdLSEJXZEhoUGRYUXViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdJQ0J3Vm5SNFNXNHVjSFZ6YUNod1ZuUjRUM1YwTG5Ob2FXWjBLQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlNBdkx5QnZibXg1SUd0bFpYQWdZMjl1ZEdGamRDQndiMmx1ZEhNZ2RHaGhkQ0JoY21VZ1ltVm9hVzVrSUhSb1pTQjNhWFJ1WlhOeklHWmhZMlVLQ2dvZ0lDQWdJQ0JzYjJOaGJGQnNZVzVsVG05eWJXRnNMbU52Y0hrb2RHaHBjeTVtWVdObFRtOXliV0ZzYzF0amJHOXpaWE4wUm1GalpVRmRLVHNLSUNBZ0lDQWdZMjl1YzNRZ2JHOWpZV3hRYkdGdVpVVnhJRDBnZEdocGN5NW5aWFJRYkdGdVpVTnZibk4wWVc1MFQyWkdZV05sS0dOc2IzTmxjM1JHWVdObFFTazdDaUFnSUNBZ0lIQnNZVzVsVG05eWJXRnNWMU11WTI5d2VTaHNiMk5oYkZCc1lXNWxUbTl5YldGc0tUc0tJQ0FnSUNBZ2NYVmhkRUV1ZG0xMWJIUW9jR3hoYm1WT2IzSnRZV3hYVXl3Z2NHeGhibVZPYjNKdFlXeFhVeWs3Q2lBZ0lDQWdJR052Ym5OMElIQnNZVzVsUlhGWFV5QTlJR3h2WTJGc1VHeGhibVZGY1NBdElIQnNZVzVsVG05eWJXRnNWMU11Wkc5MEtIQnZjMEVwT3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCd1ZuUjRTVzR1YkdWdVozUm9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQnNaWFFnWkdWd2RHZ2dQU0J3YkdGdVpVNXZjbTFoYkZkVExtUnZkQ2h3Vm5SNFNXNWJhVjBwSUNzZ2NHeGhibVZGY1ZkVE95QXZMeUEvUHo4S0NpQWdJQ0FnSUNBZ2FXWWdLR1JsY0hSb0lEdzlJRzFwYmtScGMzUXBJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktHQmpiR0Z0Y0dWa09pQmtaWEIwYUQwa2UyUmxjSFJvZlNCMGJ5QnRhVzVFYVhOMFBTUjdiV2x1UkdsemRIMWdLVHNLSUNBZ0lDQWdJQ0FnSUdSbGNIUm9JRDBnYldsdVJHbHpkRHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaGtaWEIwYUNBOFBTQnRZWGhFYVhOMEtTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQndiMmx1ZENBOUlIQldkSGhKYmx0cFhUc0tDaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHVndkR2dnUEQwZ01XVXROaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd0lEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZhVzUwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJEb2djR3hoYm1WT2IzSnRZV3hYVXl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFBb2dJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWNIVnphQ2h3S1RzS0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTJ4cGNDQmhJR1poWTJVZ2FXNGdZU0JvZFd4c0lHRm5ZV2x1YzNRZ2RHaGxJR0poWTJzZ2IyWWdZU0J3YkdGdVpTNEtJQ0FnSUNBcUlFQndZWEpoYlNCd2JHRnVaVU52Ym5OMFlXNTBJRlJvWlNCamIyNXpkR0Z1ZENCcGJpQjBhR1VnYldGMGFHVnRZWFJwWTJGc0lIQnNZVzVsSUdWeGRXRjBhVzl1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZMnhwY0VaaFkyVkJaMkZwYm5OMFVHeGhibVVvYVc1V1pYSjBhV05sY3l3Z2IzVjBWbVZ5ZEdsalpYTXNJSEJzWVc1bFRtOXliV0ZzTENCd2JHRnVaVU52Ym5OMFlXNTBLU0I3Q2lBZ0lDQWdJR3hsZENCdVgyUnZkRjltYVhKemREc0tJQ0FnSUNBZ2JHVjBJRzVmWkc5MFgyeGhjM1E3Q2lBZ0lDQWdJR052Ym5OMElHNTFiVlpsY25SeklEMGdhVzVXWlhKMGFXTmxjeTVzWlc1bmRHZzdDZ29nSUNBZ0lDQnBaaUFvYm5WdFZtVnlkSE1nUENBeUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOTFkRlpsY25ScFkyVnpPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnNaWFFnWm1seWMzUldaWEowWlhnZ1BTQnBibFpsY25ScFkyVnpXMmx1Vm1WeWRHbGpaWE11YkdWdVozUm9JQzBnTVYwN0NpQWdJQ0FnSUd4bGRDQnNZWE4wVm1WeWRHVjRJRDBnYVc1V1pYSjBhV05sYzFzd1hUc0tJQ0FnSUNBZ2JsOWtiM1JmWm1seWMzUWdQU0J3YkdGdVpVNXZjbTFoYkM1a2IzUW9abWx5YzNSV1pYSjBaWGdwSUNzZ2NHeGhibVZEYjI1emRHRnVkRHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJSFpwSUQwZ01Ec2dkbWtnUENCdWRXMVdaWEowY3pzZ2Rta3JLeWtnZXdvZ0lDQWdJQ0FnSUd4aGMzUldaWEowWlhnZ1BTQnBibFpsY25ScFkyVnpXM1pwWFRzS0lDQWdJQ0FnSUNCdVgyUnZkRjlzWVhOMElEMGdjR3hoYm1WT2IzSnRZV3d1Wkc5MEtHeGhjM1JXWlhKMFpYZ3BJQ3NnY0d4aGJtVkRiMjV6ZEdGdWREc0tDaUFnSUNBZ0lDQWdhV1lnS0c1ZlpHOTBYMlpwY25OMElEd2dNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVmWkc5MFgyeGhjM1FnUENBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTjBZWEowSUR3Z01Dd2daVzVrSUR3Z01Dd2djMjhnYjNWMGNIVjBJR3hoYzNSV1pYSjBaWGdLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM2RpQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkM1l1WTI5d2VTaHNZWE4wVm1WeWRHVjRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBWbVZ5ZEdsalpYTXVjSFZ6YUNodVpYZDJLVHNLSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk4wWVhKMElEd2dNQ3dnWlc1a0lENDlJREFzSUhOdklHOTFkSEIxZENCcGJuUmxjbk5sWTNScGIyNEtJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdibVYzZGlBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lDQWdJQ0FnSUdacGNuTjBWbVZ5ZEdWNExteGxjbkFvYkdGemRGWmxjblJsZUN3Z2JsOWtiM1JmWm1seWMzUWdMeUFvYmw5a2IzUmZabWx5YzNRZ0xTQnVYMlJ2ZEY5c1lYTjBLU3dnYm1WM2RpazdDaUFnSUNBZ0lDQWdJQ0FnSUc5MWRGWmxjblJwWTJWekxuQjFjMmdvYm1WM2RpazdDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUdsbUlDaHVYMlJ2ZEY5c1lYTjBJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0F2THlCVGRHRnlkQ0ErUFNBd0xDQmxibVFnUENBd0lITnZJRzkxZEhCMWRDQnBiblJsY25ObFkzUnBiMjRnWVc1a0lHVnVaQW9nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1WlhkMklEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptbHljM1JXWlhKMFpYZ3ViR1Z5Y0Noc1lYTjBWbVZ5ZEdWNExDQnVYMlJ2ZEY5bWFYSnpkQ0F2SUNodVgyUnZkRjltYVhKemRDQXRJRzVmWkc5MFgyeGhjM1FwTENCdVpYZDJLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBWbVZ5ZEdsalpYTXVjSFZ6YUNodVpYZDJLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBWbVZ5ZEdsalpYTXVjSFZ6YUNoc1lYTjBWbVZ5ZEdWNEtUc0tJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdacGNuTjBWbVZ5ZEdWNElEMGdiR0Z6ZEZabGNuUmxlRHNLSUNBZ0lDQWdJQ0J1WDJSdmRGOW1hWEp6ZENBOUlHNWZaRzkwWDJ4aGMzUTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lISmxkSFZ5YmlCdmRYUldaWEowYVdObGN6c0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVlhCa1lYUmxjeUJnTG5kdmNteGtWbVZ5ZEdsalpYTmdJR0Z1WkNCelpYUnpJR0F1ZDI5eWJHUldaWEowYVdObGMwNWxaV1J6VlhCa1lYUmxZQ0IwYnlCbVlXeHpaUzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQmpiMjF3ZFhSbFYyOXliR1JXWlhKMGFXTmxjeWh3YjNOcGRHbHZiaXdnY1hWaGRDa2dld29nSUNBZ0lDQjNhR2xzWlNBb2RHaHBjeTUzYjNKc1pGWmxjblJwWTJWekxteGxibWQwYUNBOElIUm9hWE11ZG1WeWRHbGpaWE11YkdWdVozUm9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTNiM0pzWkZabGNuUnBZMlZ6TG5CMWMyZ29ibVYzSUZabFl6TW9LU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElIWmxjblJ6SUQwZ2RHaHBjeTUyWlhKMGFXTmxjenNLSUNBZ0lDQWdZMjl1YzNRZ2QyOXliR1JXWlhKMGN5QTlJSFJvYVhNdWQyOXliR1JXWlhKMGFXTmxjenNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJQ0U5UFNCMGFHbHpMblpsY25ScFkyVnpMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ2NYVmhkQzUyYlhWc2RDaDJaWEowYzF0cFhTd2dkMjl5YkdSV1pYSjBjMXRwWFNrN0NpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0dWRtRmtaQ2gzYjNKc1pGWmxjblJ6VzJsZExDQjNiM0pzWkZabGNuUnpXMmxkS1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkZabGNuUnBZMlZ6VG1WbFpITlZjR1JoZEdVZ1BTQm1ZV3h6WlRzS0lDQWdJSDBLQ2lBZ0lDQmpiMjF3ZFhSbFRHOWpZV3hCUVVKQ0tHRmhZbUp0YVc0c0lHRmhZbUp0WVhncElIc0tJQ0FnSUNBZ1kyOXVjM1FnZG1WeWRHbGpaWE1nUFNCMGFHbHpMblpsY25ScFkyVnpPd29nSUNBZ0lDQmhZV0ppYldsdUxuTmxkQ2hPZFcxaVpYSXVUVUZZWDFaQlRGVkZMQ0JPZFcxaVpYSXVUVUZZWDFaQlRGVkZMQ0JPZFcxaVpYSXVUVUZZWDFaQlRGVkZLVHNLSUNBZ0lDQWdZV0ZpWW0xaGVDNXpaWFFvTFU1MWJXSmxjaTVOUVZoZlZrRk1WVVVzSUMxT2RXMWlaWEl1VFVGWVgxWkJURlZGTENBdFRuVnRZbVZ5TGsxQldGOVdRVXhWUlNrN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIUm9hWE11ZG1WeWRHbGpaWE11YkdWdVozUm9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCMklEMGdkbVZ5ZEdsalpYTmJhVjA3Q2dvZ0lDQWdJQ0FnSUdsbUlDaDJMbmdnUENCaFlXSmliV2x1TG5ncElIc0tJQ0FnSUNBZ0lDQWdJR0ZoWW1KdGFXNHVlQ0E5SUhZdWVEc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFl1ZUNBK0lHRmhZbUp0WVhndWVDa2dld29nSUNBZ0lDQWdJQ0FnWVdGaVltMWhlQzU0SUQwZ2RpNTRPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnYVdZZ0tIWXVlU0E4SUdGaFltSnRhVzR1ZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdZV0ZpWW0xcGJpNTVJRDBnZGk1NU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kaTU1SUQ0Z1lXRmlZbTFoZUM1NUtTQjdDaUFnSUNBZ0lDQWdJQ0JoWVdKaWJXRjRMbmtnUFNCMkxuazdDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0JwWmlBb2RpNTZJRHdnWVdGaVltMXBiaTU2S1NCN0NpQWdJQ0FnSUNBZ0lDQmhZV0ppYldsdUxub2dQU0IyTG5vN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDJMbm9nUGlCaFlXSmliV0Y0TG5vcElIc0tJQ0FnSUNBZ0lDQWdJR0ZoWW1KdFlYZ3VlaUE5SUhZdWVqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVlhCa1lYUmxjeUJnZDI5eWJHUldaWEowYVdObGMyQWdZVzVrSUhObGRITWdZSGR2Y214a1ZtVnlkR2xqWlhOT1pXVmtjMVZ3WkdGMFpXQWdkRzhnWm1Gc2MyVXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyOXRjSFYwWlZkdmNteGtSbUZqWlU1dmNtMWhiSE1vY1hWaGRDa2dld29nSUNBZ0lDQmpiMjV6ZENCT0lEMGdkR2hwY3k1bVlXTmxUbTl5YldGc2N5NXNaVzVuZEdnN0Nnb2dJQ0FnSUNCM2FHbHNaU0FvZEdocGN5NTNiM0pzWkVaaFkyVk9iM0p0WVd4ekxteGxibWQwYUNBOElFNHBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuZHZjbXhrUm1GalpVNXZjbTFoYkhNdWNIVnphQ2h1WlhjZ1ZtVmpNeWdwS1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc2N5QTlJSFJvYVhNdVptRmpaVTV2Y20xaGJITTdDaUFnSUNBZ0lHTnZibk4wSUhkdmNteGtUbTl5YldGc2N5QTlJSFJvYVhNdWQyOXliR1JHWVdObFRtOXliV0ZzY3pzS0NpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUNFOVBTQk9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQnhkV0YwTG5adGRXeDBLRzV2Y20xaGJITmJhVjBzSUhkdmNteGtUbTl5YldGc2MxdHBYU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJvYVhNdWQyOXliR1JHWVdObFRtOXliV0ZzYzA1bFpXUnpWWEJrWVhSbElEMGdabUZzYzJVN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSFZ3WkdGMFpVSnZkVzVrYVc1blUzQm9aWEpsVW1Ga2FYVnpDaUFnSUNBZ0tpOEtDZ29nSUNBZ2RYQmtZWFJsUW05MWJtUnBibWRUY0dobGNtVlNZV1JwZFhNb0tTQjdDaUFnSUNBZ0lDOHZJRUZ6YzNWdFpTQndiMmx1ZEhNZ1lYSmxJR1JwYzNSeWFXSjFkR1ZrSUhkcGRHZ2diRzlqWVd3Z0tEQXNNQ3d3S1NCaGN5QmpaVzUwWlhJS0lDQWdJQ0FnYkdWMElHMWhlRElnUFNBd093b2dJQ0FnSUNCamIyNXpkQ0IyWlhKMGN5QTlJSFJvYVhNdWRtVnlkR2xqWlhNN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdkbVZ5ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnViM0p0TWlBOUlIWmxjblJ6VzJsZExteGxibWQwYUZOeGRXRnlaV1FvS1RzS0NpQWdJQ0FnSUNBZ2FXWWdLRzV2Y20weUlENGdiV0Y0TWlrZ2V3b2dJQ0FnSUNBZ0lDQWdiV0Y0TWlBOUlHNXZjbTB5T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeUE5SUUxaGRHZ3VjM0Z5ZENodFlYZ3lLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1kyRnNZM1ZzWVhSbFYyOXliR1JCUVVKQ0NpQWdJQ0FnS2k4S0Nnb2dJQ0FnWTJGc1kzVnNZWFJsVjI5eWJHUkJRVUpDS0hCdmN5d2djWFZoZEN3Z2JXbHVMQ0J0WVhncElIc0tJQ0FnSUNBZ1kyOXVjM1FnZG1WeWRITWdQU0IwYUdsekxuWmxjblJwWTJWek93b2dJQ0FnSUNCc1pYUWdiV2x1ZURzS0lDQWdJQ0FnYkdWMElHMXBibms3Q2lBZ0lDQWdJR3hsZENCdGFXNTZPd29nSUNBZ0lDQnNaWFFnYldGNGVEc0tJQ0FnSUNBZ2JHVjBJRzFoZUhrN0NpQWdJQ0FnSUd4bGRDQnRZWGg2T3dvZ0lDQWdJQ0JzWlhRZ2RHVnRjRmR2Y214a1ZtVnlkR1Y0SUQwZ2JtVjNJRlpsWXpNb0tUc0tDaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkbVZ5ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0IwWlcxd1YyOXliR1JXWlhKMFpYZ3VZMjl3ZVNoMlpYSjBjMXRwWFNrN0NpQWdJQ0FnSUNBZ2NYVmhkQzUyYlhWc2RDaDBaVzF3VjI5eWJHUldaWEowWlhnc0lIUmxiWEJYYjNKc1pGWmxjblJsZUNrN0NpQWdJQ0FnSUNBZ2NHOXpMblpoWkdRb2RHVnRjRmR2Y214a1ZtVnlkR1Y0TENCMFpXMXdWMjl5YkdSV1pYSjBaWGdwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSFlnUFNCMFpXMXdWMjl5YkdSV1pYSjBaWGc3Q2dvZ0lDQWdJQ0FnSUdsbUlDaHRhVzU0SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZGk1NElEd2diV2x1ZUNrZ2V3b2dJQ0FnSUNBZ0lDQWdiV2x1ZUNBOUlIWXVlRHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHRZWGg0SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZGk1NElENGdiV0Y0ZUNrZ2V3b2dJQ0FnSUNBZ0lDQWdiV0Y0ZUNBOUlIWXVlRHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHRhVzU1SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZGk1NUlEd2diV2x1ZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdiV2x1ZVNBOUlIWXVlVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHRZWGg1SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZGk1NUlENGdiV0Y0ZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdiV0Y0ZVNBOUlIWXVlVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHRhVzU2SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZGk1NklEd2diV2x1ZWlrZ2V3b2dJQ0FnSUNBZ0lDQWdiV2x1ZWlBOUlIWXVlanNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaHRZWGg2SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZGk1NklENGdiV0Y0ZWlrZ2V3b2dJQ0FnSUNBZ0lDQWdiV0Y0ZWlBOUlIWXVlanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJRzFwYmk1elpYUW9iV2x1ZUN3Z2JXbHVlU3dnYldsdWVpazdDaUFnSUNBZ0lHMWhlQzV6WlhRb2JXRjRlQ3dnYldGNGVTd2diV0Y0ZWlrN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWRsZENCaGNIQnliM2hwYldGMFpTQmpiMjUyWlhnZ2RtOXNkVzFsQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdkbTlzZFcxbEtDa2dld29nSUNBZ0lDQnlaWFIxY200Z05DNHdJQ29nVFdGMGFDNVFTU0FxSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21WU1lXUnBkWE1nTHlBekxqQTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQmhiaUJoZG1WeVlXZGxJRzltSUdGc2JDQjBhR1VnZG1WeWRHbGpaWE1nY0c5emFYUnBiMjV6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdaMlYwUVhabGNtRm5aVkJ2YVc1MFRHOWpZV3dvZEdGeVoyVjBLU0I3Q2lBZ0lDQWdJR2xtSUNoMFlYSm5aWFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lIUmhjbWRsZENBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUhabGNuUnpJRDBnZEdocGN5NTJaWEowYVdObGN6c0tDaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkbVZ5ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0IwWVhKblpYUXVkbUZrWkNoMlpYSjBjMXRwWFN3Z2RHRnlaMlYwS1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdGeVoyVjBMbk5qWVd4bEtERWdMeUIyWlhKMGN5NXNaVzVuZEdnc0lIUmhjbWRsZENrN0NpQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSeVlXNXpabTl5YlNCaGJHd2diRzlqWVd3Z2NHOXBiblJ6TGlCWGFXeHNJR05vWVc1blpTQjBhR1VnTG5abGNuUnBZMlZ6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdkSEpoYm5ObWIzSnRRV3hzVUc5cGJuUnpLRzltWm5ObGRDd2djWFZoZENrZ2V3b2dJQ0FnSUNCamIyNXpkQ0J1SUQwZ2RHaHBjeTUyWlhKMGFXTmxjeTVzWlc1bmRHZzdDaUFnSUNBZ0lHTnZibk4wSUhabGNuUnpJRDBnZEdocGN5NTJaWEowYVdObGN6c2dMeThnUVhCd2JIa2djbTkwWVhScGIyNEtDaUFnSUNBZ0lHbG1JQ2h4ZFdGMEtTQjdDaUFnSUNBZ0lDQWdMeThnVW05MFlYUmxJSFpsY25ScFkyVnpDaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J1T3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFlnUFNCMlpYSjBjMXRwWFRzS0lDQWdJQ0FnSUNBZ0lIRjFZWFF1ZG0xMWJIUW9kaXdnZGlrN0NpQWdJQ0FnSUNBZ2ZTQXZMeUJTYjNSaGRHVWdabUZqWlNCdWIzSnRZV3h6Q2dvS0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIUm9hWE11Wm1GalpVNXZjbTFoYkhNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFlnUFNCMGFHbHpMbVpoWTJWT2IzSnRZV3h6VzJsZE93b2dJQ0FnSUNBZ0lDQWdjWFZoZEM1MmJYVnNkQ2gyTENCMktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdMeW9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJTYjNSaGRHVWdaV1JuWlhNS0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2s5TURzZ2FUeDBhR2x6TG5WdWFYRjFaVVZrWjJWekxteGxibWQwYURzZ2FTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkaUE5SUhSb2FYTXVkVzVwY1hWbFJXUm5aWE5iYVYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIRjFZWFF1ZG0xMWJIUW9kaXgyS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S2k4S0NpQWdJQ0FnSUgwZ0x5OGdRWEJ3YkhrZ2IyWm1jMlYwQ2dvS0lDQWdJQ0FnYVdZZ0tHOW1abk5sZENrZ2V3b2dJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dianNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjJJRDBnZG1WeWRITmJhVjA3Q2lBZ0lDQWdJQ0FnSUNCMkxuWmhaR1FvYjJabWMyVjBMQ0IyS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMmhsWTJ0eklIZG9aWFJvWlhJZ2NDQnBjeUJwYm5OcFpHVWdkR2hsSUhCdmJIbG9aV1J5WVM0Z1RYVnpkQ0JpWlNCcGJpQnNiMk5oYkNCamIyOXlaSE11Q2lBZ0lDQWdLaUJVYUdVZ2NHOXBiblFnYkdsbGN5QnZkWFJ6YVdSbElHOW1JSFJvWlNCamIyNTJaWGdnYUhWc2JDQnZaaUIwYUdVZ2IzUm9aWElnY0c5cGJuUnpJR2xtSUdGdVpDQnZibXg1SUdsbUlIUm9aU0JrYVhKbFkzUnBiMjRLSUNBZ0lDQXFJRzltSUdGc2JDQjBhR1VnZG1WamRHOXljeUJtY205dElHbDBJSFJ2SUhSb2IzTmxJRzkwYUdWeUlIQnZhVzUwY3lCaGNtVWdiMjRnYkdWemN5QjBhR0Z1SUc5dVpTQm9ZV3htSUc5bUlHRWdjM0JvWlhKbElHRnliM1Z1WkNCcGRDNEtJQ0FnSUNBcUlFQndZWEpoYlNCd0lFRWdjRzlwYm5RZ1oybDJaVzRnYVc0Z2JHOWpZV3dnWTI5dmNtUnBibUYwWlhNS0lDQWdJQ0FxTHdvS0NpQWdJQ0J3YjJsdWRFbHpTVzV6YVdSbEtIQXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ2RtVnlkSE1nUFNCMGFHbHpMblpsY25ScFkyVnpPd29nSUNBZ0lDQmpiMjV6ZENCbVlXTmxjeUE5SUhSb2FYTXVabUZqWlhNN0NpQWdJQ0FnSUdOdmJuTjBJRzV2Y20xaGJITWdQU0IwYUdsekxtWmhZMlZPYjNKdFlXeHpPd29nSUNBZ0lDQmpiMjV6ZENCd2IzTnBkR2wyWlZKbGMzVnNkQ0E5SUc1MWJHdzdDaUFnSUNBZ0lHTnZibk4wSUhCdmFXNTBTVzV6YVdSbElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdkR2hwY3k1blpYUkJkbVZ5WVdkbFVHOXBiblJNYjJOaGJDaHdiMmx1ZEVsdWMybGtaU2s3Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhSb2FYTXVabUZqWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRzV2Y20xaGJITmJhVjA3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdkaUE5SUhabGNuUnpXMlpoWTJWelcybGRXekJkWFRzZ0x5OGdWMlVnYjI1c2VTQnVaV1ZrSUc5dVpTQndiMmx1ZENCcGJpQjBhR1VnWm1GalpRb2dJQ0FnSUNBZ0lDOHZJRlJvYVhNZ1pHOTBJSEJ5YjJSMVkzUWdaR1YwWlhKdGFXNWxjeUIzYUdsamFDQnphV1JsSUc5bUlIUm9aU0JsWkdkbElIUm9aU0J3YjJsdWRDQnBjd29LSUNBZ0lDQWdJQ0JqYjI1emRDQjJWRzlRSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ0lDQndMblp6ZFdJb2Rpd2dkbFJ2VUNrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnY2pFZ1BTQnVMbVJ2ZENoMlZHOVFLVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjJWRzlRYjJsdWRFbHVjMmxrWlNBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lDQWdjRzlwYm5SSmJuTnBaR1V1ZG5OMVlpaDJMQ0IyVkc5UWIybHVkRWx1YzJsa1pTazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NqSWdQU0J1TG1SdmRDaDJWRzlRYjJsdWRFbHVjMmxrWlNrN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2h5TVNBOElEQWdKaVlnY2pJZ1BpQXdJSHg4SUhJeElENGdNQ0FtSmlCeU1pQThJREFwSUhzS0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNnTHk4Z1JXNWpiM1Z1ZEdWeVpXUWdjMjl0WlNCdmRHaGxjaUJ6YVdkdUxpQkZlR2wwTGdvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlNBdkx5QkpaaUIzWlNCbmIzUWdhR1Z5WlN3Z1lXeHNJR1J2ZENCd2NtOWtkV04wY3lCM1pYSmxJRzltSUhSb1pTQnpZVzFsSUhOcFoyNHVDZ29LSUNBZ0lDQWdjbVYwZFhKdUlIQnZjMmwwYVhabFVtVnpkV3gwSUQ4Z01TQTZJQzB4T3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnYldGNElHRnVaQ0J0YVc0Z1pHOTBJSEJ5YjJSMVkzUWdiMllnWVNCamIyNTJaWGdnYUhWc2JDQmhkQ0J3YjNOcGRHbHZiaUFvY0c5ekxIRjFZWFFwSUhCeWIycGxZM1JsWkNCdmJuUnZJR0Z1SUdGNGFYTXVDaUFnSUNBZ0tpQlNaWE4xYkhSeklHRnlaU0J6WVhabFpDQnBiaUIwYUdVZ1lYSnlZWGtnYldGNGJXbHVMZ29nSUNBZ0lDb2dRSEJoY21GdElISmxjM1ZzZENCeVpYTjFiSFJiTUYwZ1lXNWtJSEpsYzNWc2RGc3hYU0IzYVd4c0lHSmxJSE5sZENCMGJ5QnRZWGhwYlhWdElHRnVaQ0J0YVc1cGJYVnRMQ0J5WlhOd1pXTjBhWFpsYkhrdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzNSaGRHbGpJSEJ5YjJwbFkzUW9jMmhoY0dVc0lHRjRhWE1zSUhCdmN5d2djWFZoZEN3Z2NtVnpkV3gwS1NCN0NpQWdJQ0FnSUdOdmJuTjBJRzRnUFNCemFHRndaUzUyWlhKMGFXTmxjeTVzWlc1bmRHZzdDaUFnSUNBZ0lHTnZibk4wSUd4dlkyRnNRWGhwY3lBOUlIQnliMnBsWTNSZmJHOWpZV3hCZUdsek93b2dJQ0FnSUNCc1pYUWdiV0Y0SUQwZ01Ec0tJQ0FnSUNBZ2JHVjBJRzFwYmlBOUlEQTdDaUFnSUNBZ0lHTnZibk4wSUd4dlkyRnNUM0pwWjJsdUlEMGdjSEp2YW1WamRGOXNiMk5oYkU5eWFXZHBianNLSUNBZ0lDQWdZMjl1YzNRZ2RuTWdQU0J6YUdGd1pTNTJaWEowYVdObGN6c0tJQ0FnSUNBZ2JHOWpZV3hQY21sbmFXNHVjMlYwV21WeWJ5Z3BPeUF2THlCVWNtRnVjMlp2Y20wZ2RHaGxJR0Y0YVhNZ2RHOGdiRzlqWVd3S0NpQWdJQ0FnSUZSeVlXNXpabTl5YlM1MlpXTjBiM0pVYjB4dlkyRnNSbkpoYldVb2NHOXpMQ0J4ZFdGMExDQmhlR2x6TENCc2IyTmhiRUY0YVhNcE93b2dJQ0FnSUNCVWNtRnVjMlp2Y20wdWNHOXBiblJVYjB4dlkyRnNSbkpoYldVb2NHOXpMQ0J4ZFdGMExDQnNiMk5oYkU5eWFXZHBiaXdnYkc5allXeFBjbWxuYVc0cE93b2dJQ0FnSUNCamIyNXpkQ0JoWkdRZ1BTQnNiMk5oYkU5eWFXZHBiaTVrYjNRb2JHOWpZV3hCZUdsektUc0tJQ0FnSUNBZ2JXbHVJRDBnYldGNElEMGdkbk5iTUYwdVpHOTBLR3h2WTJGc1FYaHBjeWs3Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Uc2dhU0E4SUc0N0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkNBOUlIWnpXMmxkTG1SdmRDaHNiMk5oYkVGNGFYTXBPd29LSUNBZ0lDQWdJQ0JwWmlBb2RtRnNJRDRnYldGNEtTQjdDaUFnSUNBZ0lDQWdJQ0J0WVhnZ1BTQjJZV3c3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCcFppQW9kbUZzSUR3Z2JXbHVLU0I3Q2lBZ0lDQWdJQ0FnSUNCdGFXNGdQU0IyWVd3N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNnb2dJQ0FnSUNCdGFXNGdMVDBnWVdSa093b2dJQ0FnSUNCdFlYZ2dMVDBnWVdSa093b0tJQ0FnSUNBZ2FXWWdLRzFwYmlBK0lHMWhlQ2tnZXdvZ0lDQWdJQ0FnSUM4dklFbHVZMjl1YzJsemRHVnVkQ0F0SUhOM1lYQUtJQ0FnSUNBZ0lDQmpiMjV6ZENCMFpXMXdJRDBnYldsdU93b2dJQ0FnSUNBZ0lHMXBiaUE5SUcxaGVEc0tJQ0FnSUNBZ0lDQnRZWGdnUFNCMFpXMXdPd29nSUNBZ0lDQjlJQzh2SUU5MWRIQjFkQW9LQ2lBZ0lDQWdJSEpsYzNWc2RGc3dYU0E5SUcxaGVEc0tJQ0FnSUNBZ2NtVnpkV3gwV3pGZElEMGdiV2x1T3dvZ0lDQWdmUW9LSUNCOUNpQWdZMjl1YzNRZ2JXRjRiV2x1UVNBOUlGdGRPd29nSUdOdmJuTjBJRzFoZUcxcGJrSWdQU0JiWFRzS0lDQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSEJ5YjJwbFkzUmZiRzlqWVd4QmVHbHpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCd2NtOXFaV04wWDJ4dlkyRnNUM0pwWjJsdUlEMGdibVYzSUZabFl6TW9LVHNLQ2lBZ0x5b3FDaUFnSUNvZ1FTQXpaQ0JpYjNnZ2MyaGhjR1V1Q2lBZ0lDb2dRR1Y0WVcxd2JHVUtJQ0FnS2lBZ0lDQWdZMjl1YzNRZ2MybDZaU0E5SURFS0lDQWdLaUFnSUNBZ1kyOXVjM1FnYUdGc1prVjRkR1Z1ZEhNZ1BTQnVaWGNnUTBGT1RrOU9MbFpsWXpNb2MybDZaU3dnYzJsNlpTd2djMmw2WlNrS0lDQWdLaUFnSUNBZ1kyOXVjM1FnWW05NFUyaGhjR1VnUFNCdVpYY2dRMEZPVGs5T0xrSnZlQ2hvWVd4bVJYaDBaVzUwY3lrS0lDQWdLaUFnSUNBZ1kyOXVjM1FnWW05NFFtOWtlU0E5SUc1bGR5QkRRVTVPVDA0dVFtOWtlU2g3SUcxaGMzTTZJREVzSUhOb1lYQmxPaUJpYjNoVGFHRndaU0I5S1FvZ0lDQXFJQ0FnSUNCM2IzSnNaQzVoWkdSQ2IyUjVLR0p2ZUVKdlpIa3BDaUFnSUNvdkNpQWdZMnhoYzNNZ1FtOTRJR1Y0ZEdWdVpITWdVMmhoY0dVZ2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVWFHVWdhR0ZzWmlCbGVIUmxiblJ6SUc5bUlIUm9aU0JpYjNndUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZWelpXUWdZbmtnZEdobElHTnZiblJoWTNRZ1oyVnVaWEpoZEc5eUlIUnZJRzFoYTJVZ1kyOXVkR0ZqZEhNZ2QybDBhQ0J2ZEdobGNpQmpiMjUyWlhnZ2NHOXNlV2hsWkhKaElHWnZjaUJsZUdGdGNHeGxMZ29nSUNBZ0lDb3ZDaUFnSUNCamIyNXpkSEoxWTNSdmNpaG9ZV3htUlhoMFpXNTBjeWtnZXdvZ0lDQWdJQ0J6ZFhCbGNpaDdDaUFnSUNBZ0lDQWdkSGx3WlRvZ1UyaGhjR1V1ZEhsd1pYTXVRazlZQ2lBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0IwYUdsekxtaGhiR1pGZUhSbGJuUnpJRDBnYUdGc1prVjRkR1Z1ZEhNN0NpQWdJQ0FnSUhSb2FYTXVZMjl1ZG1WNFVHOXNlV2hsWkhKdmJsSmxjSEpsYzJWdWRHRjBhVzl1SUQwZ2JuVnNiRHNLSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZEYjI1MlpYaFFiMng1YUdWa2NtOXVVbVZ3Y21WelpXNTBZWFJwYjI0b0tUc0tJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkNiM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeWdwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlZjR1JoZEdWeklIUm9aU0JzYjJOaGJDQmpiMjUyWlhnZ2NHOXNlV2hsWkhKdmJpQnlaWEJ5WlhObGJuUmhkR2x2YmlCMWMyVmtJR1p2Y2lCemIyMWxJR052Ykd4cGMybHZibk11Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdkWEJrWVhSbFEyOXVkbVY0VUc5c2VXaGxaSEp2YmxKbGNISmxjMlZ1ZEdGMGFXOXVLQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQnplQ0E5SUhSb2FYTXVhR0ZzWmtWNGRHVnVkSE11ZURzS0lDQWdJQ0FnWTI5dWMzUWdjM2tnUFNCMGFHbHpMbWhoYkdaRmVIUmxiblJ6TG5rN0NpQWdJQ0FnSUdOdmJuTjBJSE42SUQwZ2RHaHBjeTVvWVd4bVJYaDBaVzUwY3k1Nk93b2dJQ0FnSUNCamIyNXpkQ0JXSUQwZ1ZtVmpNenNLSUNBZ0lDQWdZMjl1YzNRZ2RtVnlkR2xqWlhNZ1BTQmJibVYzSUZZb0xYTjRMQ0F0YzNrc0lDMXplaWtzSUc1bGR5QldLSE40TENBdGMza3NJQzF6ZWlrc0lHNWxkeUJXS0hONExDQnplU3dnTFhONktTd2dibVYzSUZZb0xYTjRMQ0J6ZVN3Z0xYTjZLU3dnYm1WM0lGWW9MWE40TENBdGMza3NJSE42S1N3Z2JtVjNJRllvYzNnc0lDMXplU3dnYzNvcExDQnVaWGNnVmloemVDd2djM2tzSUhONktTd2dibVYzSUZZb0xYTjRMQ0J6ZVN3Z2Mzb3BYVHNLSUNBZ0lDQWdZMjl1YzNRZ1ptRmpaWE1nUFNCYld6TXNJRElzSURFc0lEQmRMQ0F2THlBdGVnb2dJQ0FnSUNCYk5Dd2dOU3dnTml3Z04xMHNJQzh2SUN0NkNpQWdJQ0FnSUZzMUxDQTBMQ0F3TENBeFhTd2dMeThnTFhrS0lDQWdJQ0FnV3pJc0lETXNJRGNzSURaZExDQXZMeUFyZVFvZ0lDQWdJQ0JiTUN3Z05Dd2dOeXdnTTEwc0lDOHZJQzE0Q2lBZ0lDQWdJRnN4TENBeUxDQTJMQ0ExWFNBdkx5QXJlQW9nSUNBZ0lDQmRPd29nSUNBZ0lDQmpiMjV6ZENCaGVHVnpJRDBnVzI1bGR5QldLREFzSURBc0lERXBMQ0J1WlhjZ1ZpZ3dMQ0F4TENBd0tTd2dibVYzSUZZb01Td2dNQ3dnTUNsZE93b2dJQ0FnSUNCamIyNXpkQ0JvSUQwZ2JtVjNJRU52Ym5abGVGQnZiSGxvWldSeWIyNG9ld29nSUNBZ0lDQWdJSFpsY25ScFkyVnpMQW9nSUNBZ0lDQWdJR1poWTJWekxBb2dJQ0FnSUNBZ0lHRjRaWE1LSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJSFJvYVhNdVkyOXVkbVY0VUc5c2VXaGxaSEp2YmxKbGNISmxjMlZ1ZEdGMGFXOXVJRDBnYURzS0lDQWdJQ0FnYUM1dFlYUmxjbWxoYkNBOUlIUm9hWE11YldGMFpYSnBZV3c3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTmhiR04xYkdGMFpTQjBhR1VnYVc1bGNuUnBZU0J2WmlCMGFHVWdZbTk0TGdvZ0lDQWdJQ292Q2dvS0lDQWdJR05oYkdOMWJHRjBaVXh2WTJGc1NXNWxjblJwWVNodFlYTnpMQ0IwWVhKblpYUXBJSHNLSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1FtOTRMbU5oYkdOMWJHRjBaVWx1WlhKMGFXRW9kR2hwY3k1b1lXeG1SWGgwWlc1MGN5d2diV0Z6Y3l3Z2RHRnlaMlYwS1RzS0lDQWdJQ0FnY21WMGRYSnVJSFJoY21kbGREc0tJQ0FnSUgwS0NpQWdJQ0J6ZEdGMGFXTWdZMkZzWTNWc1lYUmxTVzVsY25ScFlTaG9ZV3htUlhoMFpXNTBjeXdnYldGemN5d2dkR0Z5WjJWMEtTQjdDaUFnSUNBZ0lHTnZibk4wSUdVZ1BTQm9ZV3htUlhoMFpXNTBjenNLSUNBZ0lDQWdkR0Z5WjJWMExuZ2dQU0F4TGpBZ0x5QXhNaTR3SUNvZ2JXRnpjeUFxSUNneUlDb2daUzU1SUNvZ01pQXFJR1V1ZVNBcklESWdLaUJsTG5vZ0tpQXlJQ29nWlM1NktUc0tJQ0FnSUNBZ2RHRnlaMlYwTG5rZ1BTQXhMakFnTHlBeE1pNHdJQ29nYldGemN5QXFJQ2d5SUNvZ1pTNTRJQ29nTWlBcUlHVXVlQ0FySURJZ0tpQmxMbm9nS2lBeUlDb2daUzU2S1RzS0lDQWdJQ0FnZEdGeVoyVjBMbm9nUFNBeExqQWdMeUF4TWk0d0lDb2diV0Z6Y3lBcUlDZ3lJQ29nWlM1NUlDb2dNaUFxSUdVdWVTQXJJRElnS2lCbExuZ2dLaUF5SUNvZ1pTNTRLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1IyVjBJSFJvWlNCaWIzZ2dOaUJ6YVdSbElHNXZjbTFoYkhNS0lDQWdJQ0FxSUVCd1lYSmhiU0J6YVhoVVlYSm5aWFJXWldOMGIzSnpJRUZ1SUdGeWNtRjVJRzltSURZZ2RtVmpkRzl5Y3l3Z2RHOGdjM1J2Y21VZ2RHaGxJSEpsYzNWc2RHbHVaeUJ6YVdSbElHNXZjbTFoYkhNZ2FXNHVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NYVmhkQ0JQY21sbGJuUmhkR2x2YmlCMGJ5QmhjSEJzZVNCMGJ5QjBhR1VnYm05eWJXRnNJSFpsWTNSdmNuTXVJRWxtSUc1dmRDQndjbTkyYVdSbFpDd2dkR2hsSUhabFkzUnZjbk1nZDJsc2JDQmlaU0JwYmlCeVpYTndaV04wSUhSdklIUm9aU0JzYjJOaGJDQm1jbUZ0WlM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSVGFXUmxUbTl5YldGc2N5aHphWGhVWVhKblpYUldaV04wYjNKekxDQnhkV0YwS1NCN0NpQWdJQ0FnSUdOdmJuTjBJSE5wWkdWeklEMGdjMmw0VkdGeVoyVjBWbVZqZEc5eWN6c0tJQ0FnSUNBZ1kyOXVjM1FnWlhnZ1BTQjBhR2x6TG1oaGJHWkZlSFJsYm5Sek93b2dJQ0FnSUNCemFXUmxjMXN3WFM1elpYUW9aWGd1ZUN3Z01Dd2dNQ2s3Q2lBZ0lDQWdJSE5wWkdWeld6RmRMbk5sZENnd0xDQmxlQzU1TENBd0tUc0tJQ0FnSUNBZ2MybGtaWE5iTWwwdWMyVjBLREFzSURBc0lHVjRMbm9wT3dvZ0lDQWdJQ0J6YVdSbGMxc3pYUzV6WlhRb0xXVjRMbmdzSURBc0lEQXBPd29nSUNBZ0lDQnphV1JsYzFzMFhTNXpaWFFvTUN3Z0xXVjRMbmtzSURBcE93b2dJQ0FnSUNCemFXUmxjMXMxWFM1elpYUW9NQ3dnTUN3Z0xXVjRMbm9wT3dvS0lDQWdJQ0FnYVdZZ0tIRjFZWFFnSVQwOUlIVnVaR1ZtYVc1bFpDa2dld29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJQ0U5UFNCemFXUmxjeTVzWlc1bmRHZzdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lDQWdjWFZoZEM1MmJYVnNkQ2h6YVdSbGMxdHBYU3dnYzJsa1pYTmJhVjBwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WMGRYSnVJSE5wWkdWek93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCMmIyeDFiV1VnYjJZZ2RHaGxJR0p2ZUM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0IyYjJ4MWJXVW9LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQTRMakFnS2lCMGFHbHpMbWhoYkdaRmVIUmxiblJ6TG5nZ0tpQjBhR2x6TG1oaGJHWkZlSFJsYm5Sekxua2dLaUIwYUdsekxtaGhiR1pGZUhSbGJuUnpMbm83Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlIVndaR0YwWlVKdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWekNpQWdJQ0FnS2k4S0Nnb2dJQ0FnZFhCa1lYUmxRbTkxYm1ScGJtZFRjR2hsY21WU1lXUnBkWE1vS1NCN0NpQWdJQ0FnSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21WU1lXUnBkWE1nUFNCMGFHbHpMbWhoYkdaRmVIUmxiblJ6TG14bGJtZDBhQ2dwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQm1iM0pGWVdOb1YyOXliR1JEYjNKdVpYSUtJQ0FnSUNBcUx3b0tDaUFnSUNCbWIzSkZZV05vVjI5eWJHUkRiM0p1WlhJb2NHOXpMQ0J4ZFdGMExDQmpZV3hzWW1GamF5a2dld29nSUNBZ0lDQmpiMjV6ZENCbElEMGdkR2hwY3k1b1lXeG1SWGgwWlc1MGN6c0tJQ0FnSUNBZ1kyOXVjM1FnWTI5eWJtVnljeUE5SUZ0YlpTNTRMQ0JsTG5rc0lHVXVlbDBzSUZzdFpTNTRMQ0JsTG5rc0lHVXVlbDBzSUZzdFpTNTRMQ0F0WlM1NUxDQmxMbnBkTENCYkxXVXVlQ3dnTFdVdWVTd2dMV1V1ZWwwc0lGdGxMbmdzSUMxbExua3NJQzFsTG5wZExDQmJaUzU0TENCbExua3NJQzFsTG5wZExDQmJMV1V1ZUN3Z1pTNTVMQ0F0WlM1NlhTd2dXMlV1ZUN3Z0xXVXVlU3dnWlM1NlhWMDdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR052Y201bGNuTXViR1Z1WjNSb095QnBLeXNwSUhzS0lDQWdJQ0FnSUNCM2IzSnNaRU52Y201bGNsUmxiWEJRYjNNdWMyVjBLR052Y201bGNuTmJhVjFiTUYwc0lHTnZjbTVsY25OYmFWMWJNVjBzSUdOdmNtNWxjbk5iYVYxYk1sMHBPd29nSUNBZ0lDQWdJSEYxWVhRdWRtMTFiSFFvZDI5eWJHUkRiM0p1WlhKVVpXMXdVRzl6TENCM2IzSnNaRU52Y201bGNsUmxiWEJRYjNNcE93b2dJQ0FnSUNBZ0lIQnZjeTUyWVdSa0tIZHZjbXhrUTI5eWJtVnlWR1Z0Y0ZCdmN5d2dkMjl5YkdSRGIzSnVaWEpVWlcxd1VHOXpLVHNLSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWgzYjNKc1pFTnZjbTVsY2xSbGJYQlFiM011ZUN3Z2QyOXliR1JEYjNKdVpYSlVaVzF3VUc5ekxua3NJSGR2Y214a1EyOXlibVZ5VkdWdGNGQnZjeTU2S1RzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQmpZV3hqZFd4aGRHVlhiM0pzWkVGQlFrSUtJQ0FnSUNBcUx3b0tDaUFnSUNCallXeGpkV3hoZEdWWGIzSnNaRUZCUWtJb2NHOXpMQ0J4ZFdGMExDQnRhVzRzSUcxaGVDa2dld29nSUNBZ0lDQmpiMjV6ZENCbElEMGdkR2hwY3k1b1lXeG1SWGgwWlc1MGN6c0tJQ0FnSUNBZ2QyOXliR1JEYjNKdVpYSnpWR1Z0Y0Zzd1hTNXpaWFFvWlM1NExDQmxMbmtzSUdVdWVpazdDaUFnSUNBZ0lIZHZjbXhrUTI5eWJtVnljMVJsYlhCYk1WMHVjMlYwS0MxbExuZ3NJR1V1ZVN3Z1pTNTZLVHNLSUNBZ0lDQWdkMjl5YkdSRGIzSnVaWEp6VkdWdGNGc3lYUzV6WlhRb0xXVXVlQ3dnTFdVdWVTd2daUzU2S1RzS0lDQWdJQ0FnZDI5eWJHUkRiM0p1WlhKelZHVnRjRnN6WFM1elpYUW9MV1V1ZUN3Z0xXVXVlU3dnTFdVdWVpazdDaUFnSUNBZ0lIZHZjbXhrUTI5eWJtVnljMVJsYlhCYk5GMHVjMlYwS0dVdWVDd2dMV1V1ZVN3Z0xXVXVlaWs3Q2lBZ0lDQWdJSGR2Y214a1EyOXlibVZ5YzFSbGJYQmJOVjB1YzJWMEtHVXVlQ3dnWlM1NUxDQXRaUzU2S1RzS0lDQWdJQ0FnZDI5eWJHUkRiM0p1WlhKelZHVnRjRnMyWFM1elpYUW9MV1V1ZUN3Z1pTNTVMQ0F0WlM1NktUc0tJQ0FnSUNBZ2QyOXliR1JEYjNKdVpYSnpWR1Z0Y0ZzM1hTNXpaWFFvWlM1NExDQXRaUzU1TENCbExub3BPd29nSUNBZ0lDQmpiMjV6ZENCM1l5QTlJSGR2Y214a1EyOXlibVZ5YzFSbGJYQmJNRjA3Q2lBZ0lDQWdJSEYxWVhRdWRtMTFiSFFvZDJNc0lIZGpLVHNLSUNBZ0lDQWdjRzl6TG5aaFpHUW9kMk1zSUhkaktUc0tJQ0FnSUNBZ2JXRjRMbU52Y0hrb2QyTXBPd29nSUNBZ0lDQnRhVzR1WTI5d2VTaDNZeWs3Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Uc2dhU0E4SURnN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSGRqSUQwZ2QyOXliR1JEYjNKdVpYSnpWR1Z0Y0Z0cFhUc0tJQ0FnSUNBZ0lDQnhkV0YwTG5adGRXeDBLSGRqTENCM1l5azdDaUFnSUNBZ0lDQWdjRzl6TG5aaFpHUW9kMk1zSUhkaktUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCNElEMGdkMk11ZURzS0lDQWdJQ0FnSUNCamIyNXpkQ0I1SUQwZ2QyTXVlVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjZJRDBnZDJNdWVqc0tDaUFnSUNBZ0lDQWdhV1lnS0hnZ1BpQnRZWGd1ZUNrZ2V3b2dJQ0FnSUNBZ0lDQWdiV0Y0TG5nZ1BTQjRPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnYVdZZ0tIa2dQaUJ0WVhndWVTa2dld29nSUNBZ0lDQWdJQ0FnYldGNExua2dQU0I1T3dvZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ2FXWWdLSG9nUGlCdFlYZ3VlaWtnZXdvZ0lDQWdJQ0FnSUNBZ2JXRjRMbm9nUFNCNk93b2dJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdhV1lnS0hnZ1BDQnRhVzR1ZUNrZ2V3b2dJQ0FnSUNBZ0lDQWdiV2x1TG5nZ1BTQjRPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnYVdZZ0tIa2dQQ0J0YVc0dWVTa2dld29nSUNBZ0lDQWdJQ0FnYldsdUxua2dQU0I1T3dvZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ2FXWWdLSG9nUENCdGFXNHVlaWtnZXdvZ0lDQWdJQ0FnSUNBZ2JXbHVMbm9nUFNCNk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZTQXZMeUJIWlhRZ1pXRmphQ0JoZUdseklHMWhlQW9nSUNBZ0lDQXZMeUJ0YVc0dWMyVjBLRWx1Wm1sdWFYUjVMRWx1Wm1sdWFYUjVMRWx1Wm1sdWFYUjVLVHNLSUNBZ0lDQWdMeThnYldGNExuTmxkQ2d0U1c1bWFXNXBkSGtzTFVsdVptbHVhWFI1TEMxSmJtWnBibWwwZVNrN0NpQWdJQ0FnSUM4dklIUm9hWE11Wm05eVJXRmphRmR2Y214a1EyOXlibVZ5S0hCdmN5eHhkV0YwTEdaMWJtTjBhVzl1S0hnc2VTeDZLWHNLSUNBZ0lDQWdMeThnSUNBZ0lHbG1LSGdnUGlCdFlYZ3VlQ2w3Q2lBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0FnYldGNExuZ2dQU0I0T3dvZ0lDQWdJQ0F2THlBZ0lDQWdmUW9nSUNBZ0lDQXZMeUFnSUNBZ2FXWW9lU0ErSUcxaGVDNTVLWHNLSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0J0WVhndWVTQTlJSGs3Q2lBZ0lDQWdJQzh2SUNBZ0lDQjlDaUFnSUNBZ0lDOHZJQ0FnSUNCcFppaDZJRDRnYldGNExub3Bld29nSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJRzFoZUM1NklEMGdlanNLSUNBZ0lDQWdMeThnSUNBZ0lIMEtJQ0FnSUNBZ0x5OGdJQ0FnSUdsbUtIZ2dQQ0J0YVc0dWVDbDdDaUFnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdiV2x1TG5nZ1BTQjRPd29nSUNBZ0lDQXZMeUFnSUNBZ2ZRb2dJQ0FnSUNBdkx5QWdJQ0FnYVdZb2VTQThJRzFwYmk1NUtYc0tJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQnRhVzR1ZVNBOUlIazdDaUFnSUNBZ0lDOHZJQ0FnSUNCOUNpQWdJQ0FnSUM4dklDQWdJQ0JwWmloNklEd2diV2x1TG5vcGV3b2dJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lHMXBiaTU2SUQwZ2Vqc0tJQ0FnSUNBZ0x5OGdJQ0FnSUgwS0lDQWdJQ0FnTHk4Z2ZTazdDZ29nSUNBZ2ZRb0tJQ0I5Q2lBZ1kyOXVjM1FnZDI5eWJHUkRiM0p1WlhKVVpXMXdVRzl6SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQjNiM0pzWkVOdmNtNWxjbk5VWlcxd0lEMGdXMjVsZHlCV1pXTXpLQ2tzSUc1bGR5QldaV016S0Nrc0lHNWxkeUJXWldNektDa3NJRzVsZHlCV1pXTXpLQ2tzSUc1bGR5QldaV016S0Nrc0lHNWxkeUJXWldNektDa3NJRzVsZHlCV1pXTXpLQ2tzSUc1bGR5QldaV016S0NsZE93b0tJQ0F2S2lvS0lDQWdLaUJDVDBSWlgxUlpVRVZUQ2lBZ0lDb3ZDaUFnWTI5dWMzUWdRazlFV1Y5VVdWQkZVeUE5SUhzS0lDQWdJQzhxS2lCRVdVNUJUVWxESUNvdkNpQWdJQ0JFV1U1QlRVbERPaUF4TEFvS0lDQWdJQzhxS2lCVFZFRlVTVU1nS2k4S0lDQWdJRk5VUVZSSlF6b2dNaXdLQ2lBZ0lDQXZLaW9nUzBsT1JVMUJWRWxESUNvdkNpQWdJQ0JMU1U1RlRVRlVTVU02SURRS0lDQjlPd29nSUM4cUtnb2dJQ0FxSUVKdlpIbFVlWEJsQ2lBZ0lDb3ZDZ29nSUM4cUtnb2dJQ0FxSUVKUFJGbGZVMHhGUlZCZlUxUkJWRVZUQ2lBZ0lDb3ZDaUFnWTI5dWMzUWdRazlFV1Y5VFRFVkZVRjlUVkVGVVJWTWdQU0I3Q2lBZ0lDQXZLaW9nUVZkQlMwVWdLaThLSUNBZ0lFRlhRVXRGT2lBd0xBb0tJQ0FnSUM4cUtpQlRURVZGVUZrZ0tpOEtJQ0FnSUZOTVJVVlFXVG9nTVN3S0NpQWdJQ0F2S2lvZ1UweEZSVkJKVGtjZ0tpOEtJQ0FnSUZOTVJVVlFTVTVIT2lBeUNpQWdmVHNLSUNBdktpb0tJQ0FnS2lCQ2IyUjVVMnhsWlhCVGRHRjBaUW9nSUNBcUx3b0tJQ0F2S2lvS0lDQWdLaUJDWVhObElHTnNZWE56SUdadmNpQmhiR3dnWW05a2VTQjBlWEJsY3k0S0lDQWdLaUJBWlhoaGJYQnNaUW9nSUNBcUlDQWdJQ0JqYjI1emRDQnphR0Z3WlNBOUlHNWxkeUJEUVU1T1QwNHVVM0JvWlhKbEtERXBDaUFnSUNvZ0lDQWdJR052Ym5OMElHSnZaSGtnUFNCdVpYY2dRMEZPVGs5T0xrSnZaSGtvZXdvZ0lDQXFJQ0FnSUNBZ0lHMWhjM002SURFc0NpQWdJQ29nSUNBZ0lDQWdjMmhoY0dVc0NpQWdJQ29nSUNBZ0lIMHBDaUFnSUNvZ0lDQWdJSGR2Y214a0xtRmtaRUp2Wkhrb1ltOWtlU2tLSUNBZ0tpOEtJQ0JqYkdGemN5QkNiMlI1SUdWNGRHVnVaSE1nUlhabGJuUlVZWEpuWlhRZ2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRWFYTndZWFJqYUdWa0lHRm1kR1Z5SUhSM2J5QmliMlJwWlhNZ1kyOXNiR2xrWlM0Z1ZHaHBjeUJsZG1WdWRDQnBjeUJrYVhOd1lYUmphR1ZrSUc5dUlHVmhZMmdLSUNBZ0lDQXFJRzltSUhSb1pTQjBkMjhnWW05a2FXVnpJR2x1ZG05c2RtVmtJR2x1SUhSb1pTQmpiMnhzYVhOcGIyNHVDaUFnSUNBZ0tpQkFaWFpsYm5RZ1kyOXNiR2xrWlFvZ0lDQWdJQ29nUUhCaGNtRnRJR0p2WkhrZ1ZHaGxJR0p2WkhrZ2RHaGhkQ0IzWVhNZ2FXNTJiMngyWldRZ2FXNGdkR2hsSUdOdmJHeHBjMmx2Ymk0S0lDQWdJQ0FxSUVCd1lYSmhiU0JqYjI1MFlXTjBJRlJvWlNCa1pYUmhhV3h6SUc5bUlIUm9aU0JqYjJ4c2FYTnBiMjR1Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRUVnWkhsdVlXMXBZeUJpYjJSNUlHbHpJR1oxYkd4NUlITnBiWFZzWVhSbFpDNGdRMkZ1SUdKbElHMXZkbVZrSUcxaGJuVmhiR3g1SUdKNUlIUm9aU0IxYzJWeUxDQmlkWFFnYm05eWJXRnNiSGtnZEdobGVTQnRiM1psSUdGalkyOXlaR2x1WnlCMGJ5Qm1iM0pqWlhNdUlFRWdaSGx1WVcxcFl5QmliMlI1SUdOaGJpQmpiMnhzYVdSbElIZHBkR2dnWVd4c0lHSnZaSGtnZEhsd1pYTXVJRUVnWkhsdVlXMXBZeUJpYjJSNUlHRnNkMkY1Y3lCb1lYTWdabWx1YVhSbExDQnViMjR0ZW1WeWJ5QnRZWE56TGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJCSUhOMFlYUnBZeUJpYjJSNUlHUnZaWE1nYm05MElHMXZkbVVnWkhWeWFXNW5JSE5wYlhWc1lYUnBiMjRnWVc1a0lHSmxhR0YyWlhNZ1lYTWdhV1lnYVhRZ2FHRnpJR2x1Wm1sdWFYUmxJRzFoYzNNdUlGTjBZWFJwWXlCaWIyUnBaWE1nWTJGdUlHSmxJRzF2ZG1Wa0lHMWhiblZoYkd4NUlHSjVJSE5sZEhScGJtY2dkR2hsSUhCdmMybDBhVzl1SUc5bUlIUm9aU0JpYjJSNUxpQlVhR1VnZG1Wc2IyTnBkSGtnYjJZZ1lTQnpkR0YwYVdNZ1ltOWtlU0JwY3lCaGJIZGhlWE1nZW1WeWJ5NGdVM1JoZEdsaklHSnZaR2xsY3lCa2J5QnViM1FnWTI5c2JHbGtaU0IzYVhSb0lHOTBhR1Z5SUhOMFlYUnBZeUJ2Y2lCcmFXNWxiV0YwYVdNZ1ltOWthV1Z6TGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJCSUd0cGJtVnRZWFJwWXlCaWIyUjVJRzF2ZG1WeklIVnVaR1Z5SUhOcGJYVnNZWFJwYjI0Z1lXTmpiM0prYVc1bklIUnZJR2wwY3lCMlpXeHZZMmwwZVM0Z1ZHaGxlU0JrYnlCdWIzUWdjbVZ6Y0c5dVpDQjBieUJtYjNKalpYTXVJRlJvWlhrZ1kyRnVJR0psSUcxdmRtVmtJRzFoYm5WaGJHeDVMQ0JpZFhRZ2JtOXliV0ZzYkhrZ1lTQnJhVzVsYldGMGFXTWdZbTlrZVNCcGN5QnRiM1psWkNCaWVTQnpaWFIwYVc1bklHbDBjeUIyWld4dlkybDBlUzRnUVNCcmFXNWxiV0YwYVdNZ1ltOWtlU0JpWldoaGRtVnpJR0Z6SUdsbUlHbDBJR2hoY3lCcGJtWnBibWwwWlNCdFlYTnpMaUJMYVc1bGJXRjBhV01nWW05a2FXVnpJR1J2SUc1dmRDQmpiMnhzYVdSbElIZHBkR2dnYjNSb1pYSWdjM1JoZEdsaklHOXlJR3RwYm1WdFlYUnBZeUJpYjJScFpYTXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFRlhRVXRGQ2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5NUlVWUVdRb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFRFVkZVRWxPUndvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJFYVhOd1lYUmphR1ZrSUdGbWRHVnlJR0VnYzJ4bFpYQnBibWNnWW05a2VTQm9ZWE1nZDI5clpXNGdkWEF1Q2lBZ0lDQWdLaUJBWlhabGJuUWdkMkZyWlhWd0NpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVScGMzQmhkR05vWldRZ1lXWjBaWElnWVNCaWIyUjVJR2hoY3lCbmIyNWxJR2x1SUhSdklIUm9aU0J6YkdWbGNIa2djM1JoZEdVdUNpQWdJQ0FnS2lCQVpYWmxiblFnYzJ4bFpYQjVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFUnBjM0JoZEdOb1pXUWdZV1owWlhJZ1lTQmliMlI1SUdoaGN5Qm1ZV3hzWlc0Z1lYTnNaV1Z3TGdvZ0lDQWdJQ29nUUdWMlpXNTBJSE5zWldWd0NpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk1wSUhzS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0I3ZlRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYzNWd1pYSW9LVHNLSUNBZ0lDQWdkR2hwY3k1cFpDQTlJRUp2WkhrdWFXUkRiM1Z1ZEdWeUt5czdDaUFnSUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0F0TVRzS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkNBOUlHNTFiR3c3Q2lBZ0lDQWdJSFJvYVhNdWRteGhiV0prWVNBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lIUm9hWE11WTI5c2JHbHphVzl1Um1sc2RHVnlSM0p2ZFhBZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1amIyeHNhWE5wYjI1R2FXeDBaWEpIY205MWNDQTlQVDBnSjI1MWJXSmxjaWNnUHlCdmNIUnBiMjV6TG1OdmJHeHBjMmx2YmtacGJIUmxja2R5YjNWd0lEb2dNVHNLSUNBZ0lDQWdkR2hwY3k1amIyeHNhWE5wYjI1R2FXeDBaWEpOWVhOcklEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdVkyOXNiR2x6YVc5dVJtbHNkR1Z5VFdGemF5QTlQVDBnSjI1MWJXSmxjaWNnUHlCdmNIUnBiMjV6TG1OdmJHeHBjMmx2YmtacGJIUmxjazFoYzJzZ09pQXRNVHNLSUNBZ0lDQWdkR2hwY3k1amIyeHNhWE5wYjI1U1pYTndiMjV6WlNBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1OdmJHeHBjMmx2YmxKbGMzQnZibk5sSUQwOVBTQW5ZbTl2YkdWaGJpY2dQeUJ2Y0hScGIyNXpMbU52Ykd4cGMybHZibEpsYzNCdmJuTmxJRG9nZEhKMVpUc0tJQ0FnSUNBZ2RHaHBjeTV3YjNOcGRHbHZiaUE5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUhSb2FYTXVjSEpsZG1sdmRYTlFiM05wZEdsdmJpQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJSFJvYVhNdWFXNTBaWEp3YjJ4aGRHVmtVRzl6YVhScGIyNGdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0IwYUdsekxtbHVhWFJRYjNOcGRHbHZiaUE5SUc1bGR5QldaV016S0NrN0Nnb2dJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXdiM05wZEdsdmJpa2dld29nSUNBZ0lDQWdJSFJvYVhNdWNHOXphWFJwYjI0dVkyOXdlU2h2Y0hScGIyNXpMbkJ2YzJsMGFXOXVLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWFpwYjNWelVHOXphWFJwYjI0dVkyOXdlU2h2Y0hScGIyNXpMbkJ2YzJsMGFXOXVLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHVkR1Z5Y0c5c1lYUmxaRkJ2YzJsMGFXOXVMbU52Y0hrb2IzQjBhVzl1Y3k1d2IzTnBkR2x2YmlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMFVHOXphWFJwYjI0dVkyOXdlU2h2Y0hScGIyNXpMbkJ2YzJsMGFXOXVLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkR2hwY3k1MlpXeHZZMmwwZVNBOUlHNWxkeUJXWldNektDazdDZ29nSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTUyWld4dlkybDBlU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkbVZzYjJOcGRIa3VZMjl3ZVNodmNIUnBiMjV6TG5abGJHOWphWFI1S1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NXBibWwwVm1Wc2IyTnBkSGtnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCMGFHbHpMbVp2Y21ObElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdZMjl1YzNRZ2JXRnpjeUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbTFoYzNNZ1BUMDlJQ2R1ZFcxaVpYSW5JRDhnYjNCMGFXOXVjeTV0WVhOeklEb2dNRHNLSUNBZ0lDQWdkR2hwY3k1dFlYTnpJRDBnYldGemN6c0tJQ0FnSUNBZ2RHaHBjeTVwYm5aTllYTnpJRDBnYldGemN5QStJREFnUHlBeExqQWdMeUJ0WVhOeklEb2dNRHNLSUNBZ0lDQWdkR2hwY3k1dFlYUmxjbWxoYkNBOUlHOXdkR2x2Ym5NdWJXRjBaWEpwWVd3Z2ZId2diblZzYkRzS0lDQWdJQ0FnZEdocGN5NXNhVzVsWVhKRVlXMXdhVzVuSUQwZ2RIbHdaVzltSUc5d2RHbHZibk11YkdsdVpXRnlSR0Z0Y0dsdVp5QTlQVDBnSjI1MWJXSmxjaWNnUHlCdmNIUnBiMjV6TG14cGJtVmhja1JoYlhCcGJtY2dPaUF3TGpBeE93b2dJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQnRZWE56SUR3OUlEQXVNQ0EvSUVKdlpIa3VVMVJCVkVsRElEb2dRbTlrZVM1RVdVNUJUVWxET3dvS0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6TG5SNWNHVWdQVDA5SUhSNWNHVnZaaUJDYjJSNUxsTlVRVlJKUXlrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJRzl3ZEdsdmJuTXVkSGx3WlRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NWhiR3h2ZDFOc1pXVndJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVZV3hzYjNkVGJHVmxjQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2Y0hScGIyNXpMbUZzYkc5M1UyeGxaWEFnT2lCMGNuVmxPd29nSUNBZ0lDQjBhR2x6TG5Oc1pXVndVM1JoZEdVZ1BTQkNiMlI1TGtGWFFVdEZPd29nSUNBZ0lDQjBhR2x6TG5Oc1pXVndVM0JsWldSTWFXMXBkQ0E5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbk5zWldWd1UzQmxaV1JNYVcxcGRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QnZjSFJwYjI1ekxuTnNaV1Z3VTNCbFpXUk1hVzFwZENBNklEQXVNVHNLSUNBZ0lDQWdkR2hwY3k1emJHVmxjRlJwYldWTWFXMXBkQ0E5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbk5zWldWd1ZHbHRaVXhwYldsMElDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOXdkR2x2Ym5NdWMyeGxaWEJVYVcxbFRHbHRhWFFnT2lBeE93b2dJQ0FnSUNCMGFHbHpMblJwYldWTVlYTjBVMnhsWlhCNUlEMGdNRHNLSUNBZ0lDQWdkR2hwY3k1M1lXdGxWWEJCWm5SbGNrNWhjbkp2ZDNCb1lYTmxJRDBnWm1Gc2MyVTdDaUFnSUNBZ0lIUm9hWE11ZEc5eWNYVmxJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnZEdocGN5NXhkV0YwWlhKdWFXOXVJRDBnYm1WM0lGRjFZWFJsY201cGIyNG9LVHNLSUNBZ0lDQWdkR2hwY3k1cGJtbDBVWFZoZEdWeWJtbHZiaUE5SUc1bGR5QlJkV0YwWlhKdWFXOXVLQ2s3Q2lBZ0lDQWdJSFJvYVhNdWNISmxkbWx2ZFhOUmRXRjBaWEp1YVc5dUlEMGdibVYzSUZGMVlYUmxjbTVwYjI0b0tUc0tJQ0FnSUNBZ2RHaHBjeTVwYm5SbGNuQnZiR0YwWldSUmRXRjBaWEp1YVc5dUlEMGdibVYzSUZGMVlYUmxjbTVwYjI0b0tUc0tDaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbkYxWVhSbGNtNXBiMjRwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVhSbGNtNXBiMjR1WTI5d2VTaHZjSFJwYjI1ekxuRjFZWFJsY201cGIyNHBPd29nSUNBZ0lDQWdJSFJvYVhNdWFXNXBkRkYxWVhSbGNtNXBiMjR1WTI5d2VTaHZjSFJwYjI1ekxuRjFZWFJsY201cGIyNHBPd29nSUNBZ0lDQWdJSFJvYVhNdWNISmxkbWx2ZFhOUmRXRjBaWEp1YVc5dUxtTnZjSGtvYjNCMGFXOXVjeTV4ZFdGMFpYSnVhVzl1S1RzS0lDQWdJQ0FnSUNCMGFHbHpMbWx1ZEdWeWNHOXNZWFJsWkZGMVlYUmxjbTVwYjI0dVkyOXdlU2h2Y0hScGIyNXpMbkYxWVhSbGNtNXBiMjRwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxtRnVaM1ZzWVhKV1pXeHZZMmwwZVNBOUlHNWxkeUJXWldNektDazdDZ29nSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVoYm1kMWJHRnlWbVZzYjJOcGRIa3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtRnVaM1ZzWVhKV1pXeHZZMmwwZVM1amIzQjVLRzl3ZEdsdmJuTXVZVzVuZFd4aGNsWmxiRzlqYVhSNUtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2RHaHBjeTVwYm1sMFFXNW5kV3hoY2xabGJHOWphWFI1SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2RHaHBjeTV6YUdGd1pYTWdQU0JiWFRzS0lDQWdJQ0FnZEdocGN5NXphR0Z3WlU5bVpuTmxkSE1nUFNCYlhUc0tJQ0FnSUNBZ2RHaHBjeTV6YUdGd1pVOXlhV1Z1ZEdGMGFXOXVjeUE5SUZ0ZE93b2dJQ0FnSUNCMGFHbHpMbWx1WlhKMGFXRWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0IwYUdsekxtbHVka2x1WlhKMGFXRWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0IwYUdsekxtbHVka2x1WlhKMGFXRlhiM0pzWkNBOUlHNWxkeUJOWVhRektDazdDaUFnSUNBZ0lIUm9hWE11YVc1MlRXRnpjMU52YkhabElEMGdNRHNLSUNBZ0lDQWdkR2hwY3k1cGJuWkpibVZ5ZEdsaFUyOXNkbVVnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCMGFHbHpMbWx1ZGtsdVpYSjBhV0ZYYjNKc1pGTnZiSFpsSUQwZ2JtVjNJRTFoZERNb0tUc0tJQ0FnSUNBZ2RHaHBjeTVtYVhobFpGSnZkR0YwYVc5dUlEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdVptbDRaV1JTYjNSaGRHbHZiaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2Y0hScGIyNXpMbVpwZUdWa1VtOTBZWFJwYjI0Z09pQm1ZV3h6WlRzS0lDQWdJQ0FnZEdocGN5NWhibWQxYkdGeVJHRnRjR2x1WnlBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1GdVozVnNZWEpFWVcxd2FXNW5JQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzl3ZEdsdmJuTXVZVzVuZFd4aGNrUmhiWEJwYm1jZ09pQXdMakF4T3dvZ0lDQWdJQ0IwYUdsekxteHBibVZoY2taaFkzUnZjaUE5SUc1bGR5QldaV016S0RFc0lERXNJREVwT3dvS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWJHbHVaV0Z5Um1GamRHOXlLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXNhVzVsWVhKR1lXTjBiM0l1WTI5d2VTaHZjSFJwYjI1ekxteHBibVZoY2taaFkzUnZjaWs3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJvYVhNdVlXNW5kV3hoY2taaFkzUnZjaUE5SUc1bGR5QldaV016S0RFc0lERXNJREVwT3dvS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVlXNW5kV3hoY2taaFkzUnZjaWtnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZVzVuZFd4aGNrWmhZM1J2Y2k1amIzQjVLRzl3ZEdsdmJuTXVZVzVuZFd4aGNrWmhZM1J2Y2lrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVZV0ZpWWlBOUlHNWxkeUJCUVVKQ0tDazdDaUFnSUNBZ0lIUm9hWE11WVdGaVlrNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUc0tJQ0FnSUNBZ2RHaHBjeTVpYjNWdVpHbHVaMUpoWkdsMWN5QTlJREE3Q2lBZ0lDQWdJSFJvYVhNdWQyeGhiV0prWVNBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lIUm9hWE11YVhOVWNtbG5aMlZ5SUQwZ1FtOXZiR1ZoYmlodmNIUnBiMjV6TG1selZISnBaMmRsY2lrN0Nnb2dJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXphR0Z3WlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WVdSa1UyaGhjR1VvYjNCMGFXOXVjeTV6YUdGd1pTazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIUm9hWE11ZFhCa1lYUmxUV0Z6YzFCeWIzQmxjblJwWlhNb0tUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVjJGclpTQjBhR1VnWW05a2VTQjFjQzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQjNZV3RsVlhBb0tTQjdDaUFnSUNBZ0lHTnZibk4wSUhCeVpYWlRkR0YwWlNBOUlIUm9hWE11YzJ4bFpYQlRkR0YwWlRzS0lDQWdJQ0FnZEdocGN5NXpiR1ZsY0ZOMFlYUmxJRDBnUW05a2VTNUJWMEZMUlRzS0lDQWdJQ0FnZEdocGN5NTNZV3RsVlhCQlpuUmxjazVoY25KdmQzQm9ZWE5sSUQwZ1ptRnNjMlU3Q2dvZ0lDQWdJQ0JwWmlBb2NISmxkbE4wWVhSbElEMDlQU0JDYjJSNUxsTk1SVVZRU1U1SEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTndZWFJqYUVWMlpXNTBLRUp2WkhrdWQyRnJaWFZ3UlhabGJuUXBPd29nSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVadmNtTmxJR0p2WkhrZ2MyeGxaWEFLSUNBZ0lDQXFMd29LQ2lBZ0lDQnpiR1ZsY0NncElIc0tJQ0FnSUNBZ2RHaHBjeTV6YkdWbGNGTjBZWFJsSUQwZ1FtOWtlUzVUVEVWRlVFbE9SenNLSUNBZ0lDQWdkR2hwY3k1MlpXeHZZMmwwZVM1elpYUW9NQ3dnTUN3Z01DazdDaUFnSUNBZ0lIUm9hWE11WVc1bmRXeGhjbFpsYkc5amFYUjVMbk5sZENnd0xDQXdMQ0F3S1RzS0lDQWdJQ0FnZEdocGN5NTNZV3RsVlhCQlpuUmxjazVoY25KdmQzQm9ZWE5sSUQwZ1ptRnNjMlU3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTmhiR3hsWkNCbGRtVnllU0IwYVcxbGMzUmxjQ0IwYnlCMWNHUmhkR1VnYVc1MFpYSnVZV3dnYzJ4bFpYQWdkR2x0WlhJZ1lXNWtJR05vWVc1blpTQnpiR1ZsY0NCemRHRjBaU0JwWmlCdVpXVmtaV1F1Q2lBZ0lDQWdLaUJBY0dGeVlXMGdkR2x0WlNCVWFHVWdkMjl5YkdRZ2RHbHRaU0JwYmlCelpXTnZibVJ6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdjMnhsWlhCVWFXTnJLSFJwYldVcElIc0tJQ0FnSUNBZ2FXWWdLSFJvYVhNdVlXeHNiM2RUYkdWbGNDa2dld29nSUNBZ0lDQWdJR052Ym5OMElITnNaV1Z3VTNSaGRHVWdQU0IwYUdsekxuTnNaV1Z3VTNSaGRHVTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzQmxaV1JUY1hWaGNtVmtJRDBnZEdocGN5NTJaV3h2WTJsMGVTNXNaVzVuZEdoVGNYVmhjbVZrS0NrZ0t5QjBhR2x6TG1GdVozVnNZWEpXWld4dlkybDBlUzVzWlc1bmRHaFRjWFZoY21Wa0tDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzQmxaV1JNYVcxcGRGTnhkV0Z5WldRZ1BTQjBhR2x6TG5Oc1pXVndVM0JsWldSTWFXMXBkQ0FxS2lBeU93b0tJQ0FnSUNBZ0lDQnBaaUFvYzJ4bFpYQlRkR0YwWlNBOVBUMGdRbTlrZVM1QlYwRkxSU0FtSmlCemNHVmxaRk54ZFdGeVpXUWdQQ0J6Y0dWbFpFeHBiV2wwVTNGMVlYSmxaQ2tnZXdvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6YkdWbGNGTjBZWFJsSUQwZ1FtOWtlUzVUVEVWRlVGazdJQzh2SUZOc1pXVndlUW9LSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlV4aGMzUlRiR1ZsY0hrZ1BTQjBhVzFsT3dvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd1lYUmphRVYyWlc1MEtFSnZaSGt1YzJ4bFpYQjVSWFpsYm5RcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jMnhsWlhCVGRHRjBaU0E5UFQwZ1FtOWtlUzVUVEVWRlVGa2dKaVlnYzNCbFpXUlRjWFZoY21Wa0lENGdjM0JsWldSTWFXMXBkRk54ZFdGeVpXUXBJSHNLSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkMkZyWlZWd0tDazdJQzh2SUZkaGEyVWdkWEFLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOc1pXVndVM1JoZEdVZ1BUMDlJRUp2WkhrdVUweEZSVkJaSUNZbUlIUnBiV1VnTFNCMGFHbHpMblJwYldWTVlYTjBVMnhsWlhCNUlENGdkR2hwY3k1emJHVmxjRlJwYldWTWFXMXBkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6YkdWbGNDZ3BPeUF2THlCVGJHVmxjR2x1WndvS0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdsemNHRjBZMmhGZG1WdWRDaENiMlI1TG5Oc1pXVndSWFpsYm5RcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJKWmlCMGFHVWdZbTlrZVNCcGN5QnpiR1ZsY0dsdVp5d2dhWFFnYzJodmRXeGtJR0psSUdsdGJXOTJZV0pzWlNBdklHaGhkbVVnYVc1bWFXNXBkR1VnYldGemN5QmtkWEpwYm1jZ2MyOXNkbVV1SUZkbElITnZiSFpsSUdsMElHSjVJR2hoZG1sdVp5QmhJSE5sY0dGeVlYUmxJQ0p6YjJ4MlpTQnRZWE56SWk0S0lDQWdJQ0FxTHdvS0NpQWdJQ0IxY0dSaGRHVlRiMngyWlUxaGMzTlFjbTl3WlhKMGFXVnpLQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6YkdWbGNGTjBZWFJsSUQwOVBTQkNiMlI1TGxOTVJVVlFTVTVISUh4OElIUm9hWE11ZEhsd1pTQTlQVDBnUW05a2VTNUxTVTVGVFVGVVNVTXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHVkazFoYzNOVGIyeDJaU0E5SURBN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYm5aSmJtVnlkR2xoVTI5c2RtVXVjMlYwV21WeWJ5Z3BPd29nSUNBZ0lDQWdJSFJvYVhNdWFXNTJTVzVsY25ScFlWZHZjbXhrVTI5c2RtVXVjMlYwV21WeWJ5Z3BPd29nSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1MlRXRnpjMU52YkhabElEMGdkR2hwY3k1cGJuWk5ZWE56T3dvZ0lDQWdJQ0FnSUhSb2FYTXVhVzUyU1c1bGNuUnBZVk52YkhabExtTnZjSGtvZEdocGN5NXBiblpKYm1WeWRHbGhLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHVka2x1WlhKMGFXRlhiM0pzWkZOdmJIWmxMbU52Y0hrb2RHaHBjeTVwYm5aSmJtVnlkR2xoVjI5eWJHUXBPd29nSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVOdmJuWmxjblFnWVNCM2IzSnNaQ0J3YjJsdWRDQjBieUJzYjJOaGJDQmliMlI1SUdaeVlXMWxMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lIQnZhVzUwVkc5TWIyTmhiRVp5WVcxbEtIZHZjbXhrVUc5cGJuUXNJSEpsYzNWc2RDa2dld29nSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCM2IzSnNaRkJ2YVc1MExuWnpkV0lvZEdocGN5NXdiM05wZEdsdmJpd2djbVZ6ZFd4MEtUc0tJQ0FnSUNBZ2RHaHBjeTV4ZFdGMFpYSnVhVzl1TG1OdmJtcDFaMkYwWlNncExuWnRkV3gwS0hKbGMzVnNkQ3dnY21WemRXeDBLVHNLSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZERzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMjl1ZG1WeWRDQmhJSGR2Y214a0lIWmxZM1J2Y2lCMGJ5QnNiMk5oYkNCaWIyUjVJR1p5WVcxbExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhabFkzUnZjbFJ2VEc5allXeEdjbUZ0WlNoM2IzSnNaRlpsWTNSdmNpd2djbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVjWFZoZEdWeWJtbHZiaTVqYjI1cWRXZGhkR1VvS1M1MmJYVnNkQ2gzYjNKc1pGWmxZM1J2Y2l3Z2NtVnpkV3gwS1RzS0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTI5dWRtVnlkQ0JoSUd4dlkyRnNJR0p2WkhrZ2NHOXBiblFnZEc4Z2QyOXliR1FnWm5KaGJXVXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2NHOXBiblJVYjFkdmNteGtSbkpoYldVb2JHOWpZV3hRYjJsdWRDd2djbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVjWFZoZEdWeWJtbHZiaTUyYlhWc2RDaHNiMk5oYkZCdmFXNTBMQ0J5WlhOMWJIUXBPd29nSUNBZ0lDQnlaWE4xYkhRdWRtRmtaQ2gwYUdsekxuQnZjMmwwYVc5dUxDQnlaWE4xYkhRcE93b2dJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRGIyNTJaWEowSUdFZ2JHOWpZV3dnWW05a2VTQndiMmx1ZENCMGJ5QjNiM0pzWkNCbWNtRnRaUzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQjJaV04wYjNKVWIxZHZjbXhrUm5KaGJXVW9iRzlqWVd4V1pXTjBiM0lzSUhKbGMzVnNkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWRtMTFiSFFvYkc5allXeFdaV04wYjNJc0lISmxjM1ZzZENrN0NpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVGa1pDQmhJSE5vWVhCbElIUnZJSFJvWlNCaWIyUjVJSGRwZEdnZ1lTQnNiMk5oYkNCdlptWnpaWFFnWVc1a0lHOXlhV1Z1ZEdGMGFXOXVMZ29nSUNBZ0lDb2dRSEpsZEhWeWJpQlVhR1VnWW05a2VTQnZZbXBsWTNRc0lHWnZjaUJqYUdGcGJtRmlhV3hwZEhrdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWVdSa1UyaGhjR1VvYzJoaGNHVXNJRjl2Wm1aelpYUXNJRjl2Y21sbGJuUmhkR2x2YmlrZ2V3b2dJQ0FnSUNCamIyNXpkQ0J2Wm1aelpYUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0JqYjI1emRDQnZjbWxsYm5SaGRHbHZiaUE5SUc1bGR5QlJkV0YwWlhKdWFXOXVLQ2s3Q2dvZ0lDQWdJQ0JwWmlBb1gyOW1abk5sZENrZ2V3b2dJQ0FnSUNBZ0lHOW1abk5sZEM1amIzQjVLRjl2Wm1aelpYUXBPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvWDI5eWFXVnVkR0YwYVc5dUtTQjdDaUFnSUNBZ0lDQWdiM0pwWlc1MFlYUnBiMjR1WTI5d2VTaGZiM0pwWlc1MFlYUnBiMjRwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxuTm9ZWEJsY3k1d2RYTm9LSE5vWVhCbEtUc0tJQ0FnSUNBZ2RHaHBjeTV6YUdGd1pVOW1abk5sZEhNdWNIVnphQ2h2Wm1aelpYUXBPd29nSUNBZ0lDQjBhR2x6TG5Ob1lYQmxUM0pwWlc1MFlYUnBiMjV6TG5CMWMyZ29iM0pwWlc1MFlYUnBiMjRwT3dvZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlUxaGMzTlFjbTl3WlhKMGFXVnpLQ2s3Q2lBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsUW05MWJtUnBibWRTWVdScGRYTW9LVHNLSUNBZ0lDQWdkR2hwY3k1aFlXSmlUbVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPd29nSUNBZ0lDQnphR0Z3WlM1aWIyUjVJRDBnZEdocGN6c0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZKbGJXOTJaU0JoSUhOb1lYQmxJR1p5YjIwZ2RHaGxJR0p2WkhrdUNpQWdJQ0FnS2lCQWNtVjBkWEp1SUZSb1pTQmliMlI1SUc5aWFtVmpkQ3dnWm05eUlHTm9ZV2x1WVdKcGJHbDBlUzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnlaVzF2ZG1WVGFHRndaU2h6YUdGd1pTa2dld29nSUNBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUhSb2FYTXVjMmhoY0dWekxtbHVaR1Y0VDJZb2MyaGhjR1VwT3dvS0lDQWdJQ0FnYVdZZ0tHbHVaR1Y0SUQwOVBTQXRNU2tnZXdvZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25VMmhoY0dVZ1pHOWxjeUJ1YjNRZ1ltVnNiMjVuSUhSdklIUm9aU0JpYjJSNUp5azdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJvYVhNdWMyaGhjR1Z6TG5Od2JHbGpaU2hwYm1SbGVDd2dNU2s3Q2lBZ0lDQWdJSFJvYVhNdWMyaGhjR1ZQWm1aelpYUnpMbk53YkdsalpTaHBibVJsZUN3Z01TazdDaUFnSUNBZ0lIUm9hWE11YzJoaGNHVlBjbWxsYm5SaGRHbHZibk11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHNLSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZOWVhOelVISnZjR1Z5ZEdsbGN5Z3BPd29nSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVUp2ZFc1a2FXNW5VbUZrYVhWektDazdDaUFnSUNBZ0lIUm9hWE11WVdGaVlrNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUc0tJQ0FnSUNBZ2MyaGhjR1V1WW05a2VTQTlJRzUxYkd3N0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJWY0dSaGRHVWdkR2hsSUdKdmRXNWthVzVuSUhKaFpHbDFjeUJ2WmlCMGFHVWdZbTlrZVM0Z1UyaHZkV3hrSUdKbElHUnZibVVnYVdZZ1lXNTVJRzltSUhSb1pTQnphR0Z3WlhNZ1lYSmxJR05vWVc1blpXUXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2RYQmtZWFJsUW05MWJtUnBibWRTWVdScGRYTW9LU0I3Q2lBZ0lDQWdJR052Ym5OMElITm9ZWEJsY3lBOUlIUm9hWE11YzJoaGNHVnpPd29nSUNBZ0lDQmpiMjV6ZENCemFHRndaVTltWm5ObGRITWdQU0IwYUdsekxuTm9ZWEJsVDJabWMyVjBjenNLSUNBZ0lDQWdZMjl1YzNRZ1RpQTlJSE5vWVhCbGN5NXNaVzVuZEdnN0NpQWdJQ0FnSUd4bGRDQnlZV1JwZFhNZ1BTQXdPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dJVDA5SUU0N0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSE5vWVhCbElEMGdjMmhoY0dWelcybGRPd29nSUNBZ0lDQWdJSE5vWVhCbExuVndaR0YwWlVKdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWektDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyWm1jMlYwSUQwZ2MyaGhjR1ZQWm1aelpYUnpXMmxkTG14bGJtZDBhQ2dwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSElnUFNCemFHRndaUzVpYjNWdVpHbHVaMU53YUdWeVpWSmhaR2wxY3pzS0NpQWdJQ0FnSUNBZ2FXWWdLRzltWm5ObGRDQXJJSElnUGlCeVlXUnBkWE1wSUhzS0lDQWdJQ0FnSUNBZ0lISmhaR2wxY3lBOUlHOW1abk5sZENBcklISTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG1KdmRXNWthVzVuVW1Ga2FYVnpJRDBnY21Ga2FYVnpPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVmNHUmhkR1Z6SUhSb1pTQXVZV0ZpWWdvZ0lDQWdJQ292Q2dvS0lDQWdJSFZ3WkdGMFpVRkJRa0lvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJSE5vWVhCbGN5QTlJSFJvYVhNdWMyaGhjR1Z6T3dvZ0lDQWdJQ0JqYjI1emRDQnphR0Z3WlU5bVpuTmxkSE1nUFNCMGFHbHpMbk5vWVhCbFQyWm1jMlYwY3pzS0lDQWdJQ0FnWTI5dWMzUWdjMmhoY0dWUGNtbGxiblJoZEdsdmJuTWdQU0IwYUdsekxuTm9ZWEJsVDNKcFpXNTBZWFJwYjI1ek93b2dJQ0FnSUNCamIyNXpkQ0JPSUQwZ2MyaGhjR1Z6TG14bGJtZDBhRHNLSUNBZ0lDQWdZMjl1YzNRZ2IyWm1jMlYwSUQwZ2RHMXdWbVZqT3dvZ0lDQWdJQ0JqYjI1emRDQnZjbWxsYm5SaGRHbHZiaUE5SUhSdGNGRjFZWFE3Q2lBZ0lDQWdJR052Ym5OMElHSnZaSGxSZFdGMElEMGdkR2hwY3k1eGRXRjBaWEp1YVc5dU93b2dJQ0FnSUNCamIyNXpkQ0JoWVdKaUlEMGdkR2hwY3k1aFlXSmlPd29nSUNBZ0lDQmpiMjV6ZENCemFHRndaVUZCUWtJZ1BTQjFjR1JoZEdWQlFVSkNYM05vWVhCbFFVRkNRanNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJQ0U5UFNCT095QnBLeXNwSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0J6YUdGd1pTQTlJSE5vWVhCbGMxdHBYVHNnTHk4Z1IyVjBJSE5vWVhCbElIZHZjbXhrSUhCdmMybDBhVzl1Q2dvZ0lDQWdJQ0FnSUdKdlpIbFJkV0YwTG5adGRXeDBLSE5vWVhCbFQyWm1jMlYwYzF0cFhTd2diMlptYzJWMEtUc0tJQ0FnSUNBZ0lDQnZabVp6WlhRdWRtRmtaQ2gwYUdsekxuQnZjMmwwYVc5dUxDQnZabVp6WlhRcE95QXZMeUJIWlhRZ2MyaGhjR1VnZDI5eWJHUWdjWFZoZEdWeWJtbHZiZ29LSUNBZ0lDQWdJQ0JpYjJSNVVYVmhkQzV0ZFd4MEtITm9ZWEJsVDNKcFpXNTBZWFJwYjI1elcybGRMQ0J2Y21sbGJuUmhkR2x2YmlrN0lDOHZJRWRsZENCemFHRndaU0JCUVVKQ0Nnb2dJQ0FnSUNBZ0lITm9ZWEJsTG1OaGJHTjFiR0YwWlZkdmNteGtRVUZDUWlodlptWnpaWFFzSUc5eWFXVnVkR0YwYVc5dUxDQnphR0Z3WlVGQlFrSXViRzkzWlhKQ2IzVnVaQ3dnYzJoaGNHVkJRVUpDTG5Wd2NHVnlRbTkxYm1RcE93b0tJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ1lXRmlZaTVqYjNCNUtITm9ZWEJsUVVGQ1FpazdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJR0ZoWW1JdVpYaDBaVzVrS0hOb1lYQmxRVUZDUWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGFHbHpMbUZoWW1KT1pXVmtjMVZ3WkdGMFpTQTlJR1poYkhObE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJWY0dSaGRHVWdZQzVwYm1WeWRHbGhWMjl5YkdSZ0lHRnVaQ0JnTG1sdWRrbHVaWEowYVdGWGIzSnNaR0FLSUNBZ0lDQXFMd29LQ2lBZ0lDQjFjR1JoZEdWSmJtVnlkR2xoVjI5eWJHUW9abTl5WTJVcElIc0tJQ0FnSUNBZ1kyOXVjM1FnU1NBOUlIUm9hWE11YVc1MlNXNWxjblJwWVRzS0NpQWdJQ0FnSUdsbUlDaEpMbmdnUFQwOUlFa3VlU0FtSmlCSkxua2dQVDA5SUVrdWVpQW1KaUFoWm05eVkyVXBJRHNnWld4elpTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2JURWdQU0IxYVhkZmJURTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2JUSWdQU0IxYVhkZmJUSTdDaUFnSUNBZ0lDQWdiVEV1YzJWMFVtOTBZWFJwYjI1R2NtOXRVWFZoZEdWeWJtbHZiaWgwYUdsekxuRjFZWFJsY201cGIyNHBPd29nSUNBZ0lDQWdJRzB4TG5SeVlXNXpjRzl6WlNodE1pazdDaUFnSUNBZ0lDQWdiVEV1YzJOaGJHVW9TU3dnYlRFcE93b2dJQ0FnSUNBZ0lHMHhMbTF0ZFd4MEtHMHlMQ0IwYUdsekxtbHVka2x1WlhKMGFXRlhiM0pzWkNrN0NpQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRWEJ3YkhrZ1ptOXlZMlVnZEc4Z1lTQndiMmx1ZENCdlppQjBhR1VnWW05a2VTNGdWR2hwY3lCamIzVnNaQ0JtYjNJZ1pYaGhiWEJzWlNCaVpTQmhJSEJ2YVc1MElHOXVJSFJvWlNCQ2IyUjVJSE4xY21aaFkyVXVDaUFnSUNBZ0tpQkJjSEJzZVdsdVp5Qm1iM0pqWlNCMGFHbHpJSGRoZVNCM2FXeHNJR0ZrWkNCMGJ5QkNiMlI1TG1admNtTmxJR0Z1WkNCQ2IyUjVMblJ2Y25GMVpTNEtJQ0FnSUNBcUlFQndZWEpoYlNCbWIzSmpaU0JVYUdVZ1lXMXZkVzUwSUc5bUlHWnZjbU5sSUhSdklHRmtaQzRLSUNBZ0lDQXFJRUJ3WVhKaGJTQnlaV3hoZEdsMlpWQnZhVzUwSUVFZ2NHOXBiblFnY21Wc1lYUnBkbVVnZEc4Z2RHaGxJR05sYm5SbGNpQnZaaUJ0WVhOeklIUnZJR0Z3Y0d4NUlIUm9aU0JtYjNKalpTQnZiaTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQmhjSEJzZVVadmNtTmxLR1p2Y21ObExDQnlaV3hoZEdsMlpWQnZhVzUwS1NCN0NpQWdJQ0FnSUdsbUlDaHlaV3hoZEdsMlpWQnZhVzUwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnlaV3hoZEdsMlpWQnZhVzUwSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0x5OGdUbVZsWkdWa1B3b2dJQ0FnSUNCcFppQW9kR2hwY3k1MGVYQmxJQ0U5UFNCQ2IyUjVMa1JaVGtGTlNVTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2gwYUdsekxuTnNaV1Z3VTNSaGRHVWdQVDA5SUVKdlpIa3VVMHhGUlZCSlRrY3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuZGhhMlZWY0NncE93b2dJQ0FnSUNCOUlDOHZJRU52YlhCMWRHVWdjSEp2WkhWalpXUWdjbTkwWVhScGIyNWhiQ0JtYjNKalpRb0tDaUFnSUNBZ0lHTnZibk4wSUhKdmRFWnZjbU5sSUQwZ1FtOWtlVjloY0hCc2VVWnZjbU5sWDNKdmRFWnZjbU5sT3dvZ0lDQWdJQ0J5Wld4aGRHbDJaVkJ2YVc1MExtTnliM056S0dadmNtTmxMQ0J5YjNSR2IzSmpaU2s3SUM4dklFRmtaQ0JzYVc1bFlYSWdabTl5WTJVS0NpQWdJQ0FnSUhSb2FYTXVabTl5WTJVdWRtRmtaQ2htYjNKalpTd2dkR2hwY3k1bWIzSmpaU2s3SUM4dklFRmtaQ0J5YjNSaGRHbHZibUZzSUdadmNtTmxDZ29nSUNBZ0lDQjBhR2x6TG5SdmNuRjFaUzUyWVdSa0tISnZkRVp2Y21ObExDQjBhR2x6TG5SdmNuRjFaU2s3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFRndjR3g1SUdadmNtTmxJSFJ2SUdFZ2JHOWpZV3dnY0c5cGJuUWdhVzRnZEdobElHSnZaSGt1Q2lBZ0lDQWdLaUJBY0dGeVlXMGdabTl5WTJVZ1ZHaGxJR1p2Y21ObElIWmxZM1J2Y2lCMGJ5QmhjSEJzZVN3Z1pHVm1hVzVsWkNCc2IyTmhiR3g1SUdsdUlIUm9aU0JpYjJSNUlHWnlZVzFsTGdvZ0lDQWdJQ29nUUhCaGNtRnRJR3h2WTJGc1VHOXBiblFnUVNCc2IyTmhiQ0J3YjJsdWRDQnBiaUIwYUdVZ1ltOWtlU0IwYnlCaGNIQnNlU0IwYUdVZ1ptOXlZMlVnYjI0dUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWVhCd2JIbE1iMk5oYkVadmNtTmxLR3h2WTJGc1JtOXlZMlVzSUd4dlkyRnNVRzlwYm5RcElIc0tJQ0FnSUNBZ2FXWWdLR3h2WTJGc1VHOXBiblFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lHeHZZMkZzVUc5cGJuUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwZVhCbElDRTlQU0JDYjJSNUxrUlpUa0ZOU1VNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdOdmJuTjBJSGR2Y214a1JtOXlZMlVnUFNCQ2IyUjVYMkZ3Y0d4NVRHOWpZV3hHYjNKalpWOTNiM0pzWkVadmNtTmxPd29nSUNBZ0lDQmpiMjV6ZENCeVpXeGhkR2wyWlZCdmFXNTBWMjl5YkdRZ1BTQkNiMlI1WDJGd2NHeDVURzlqWVd4R2IzSmpaVjl5Wld4aGRHbDJaVkJ2YVc1MFYyOXliR1E3SUM4dklGUnlZVzV6Wm05eWJTQjBhR1VnWm05eVkyVWdkbVZqZEc5eUlIUnZJSGR2Y214a0lITndZV05sQ2dvZ0lDQWdJQ0IwYUdsekxuWmxZM1J2Y2xSdlYyOXliR1JHY21GdFpTaHNiMk5oYkVadmNtTmxMQ0IzYjNKc1pFWnZjbU5sS1RzS0lDQWdJQ0FnZEdocGN5NTJaV04wYjNKVWIxZHZjbXhrUm5KaGJXVW9iRzlqWVd4UWIybHVkQ3dnY21Wc1lYUnBkbVZRYjJsdWRGZHZjbXhrS1RzS0lDQWdJQ0FnZEdocGN5NWhjSEJzZVVadmNtTmxLSGR2Y214a1JtOXlZMlVzSUhKbGJHRjBhWFpsVUc5cGJuUlhiM0pzWkNrN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRUZ3Y0d4NUlIUnZjbkYxWlNCMGJ5QjBhR1VnWW05a2VTNEtJQ0FnSUNBcUlFQndZWEpoYlNCMGIzSnhkV1VnVkdobElHRnRiM1Z1ZENCdlppQjBiM0p4ZFdVZ2RHOGdZV1JrTGdvZ0lDQWdJQ292Q2dvS0lDQWdJR0Z3Y0d4NVZHOXljWFZsS0hSdmNuRjFaU2tnZXdvZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwZVhCbElDRTlQU0JDYjJSNUxrUlpUa0ZOU1VNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG5Oc1pXVndVM1JoZEdVZ1BUMDlJRUp2WkhrdVUweEZSVkJKVGtjcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5kaGEyVlZjQ2dwT3dvZ0lDQWdJQ0I5SUM4dklFRmtaQ0J5YjNSaGRHbHZibUZzSUdadmNtTmxDZ29LSUNBZ0lDQWdkR2hwY3k1MGIzSnhkV1V1ZG1Ga1pDaDBiM0p4ZFdVc0lIUm9hWE11ZEc5eWNYVmxLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1FYQndiSGtnYVcxd2RXeHpaU0IwYnlCaElIQnZhVzUwSUc5bUlIUm9aU0JpYjJSNUxpQlVhR2x6SUdOdmRXeGtJR1p2Y2lCbGVHRnRjR3hsSUdKbElHRWdjRzlwYm5RZ2IyNGdkR2hsSUVKdlpIa2djM1Z5Wm1GalpTNEtJQ0FnSUNBcUlFRnVJR2x0Y0hWc2MyVWdhWE1nWVNCbWIzSmpaU0JoWkdSbFpDQjBieUJoSUdKdlpIa2daSFZ5YVc1bklHRWdjMmh2Y25RZ2NHVnlhVzlrSUc5bUlIUnBiV1VnS0dsdGNIVnNjMlVnUFNCbWIzSmpaU0FxSUhScGJXVXBMZ29nSUNBZ0lDb2dTVzF3ZFd4elpYTWdkMmxzYkNCaVpTQmhaR1JsWkNCMGJ5QkNiMlI1TG5abGJHOWphWFI1SUdGdVpDQkNiMlI1TG1GdVozVnNZWEpXWld4dlkybDBlUzRLSUNBZ0lDQXFJRUJ3WVhKaGJTQnBiWEIxYkhObElGUm9aU0JoYlc5MWJuUWdiMllnYVcxd2RXeHpaU0IwYnlCaFpHUXVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NtVnNZWFJwZG1WUWIybHVkQ0JCSUhCdmFXNTBJSEpsYkdGMGFYWmxJSFJ2SUhSb1pTQmpaVzUwWlhJZ2IyWWdiV0Z6Y3lCMGJ5QmhjSEJzZVNCMGFHVWdabTl5WTJVZ2IyNHVDaUFnSUNBZ0tpOEtDZ29nSUNBZ1lYQndiSGxKYlhCMWJITmxLR2x0Y0hWc2MyVXNJSEpsYkdGMGFYWmxVRzlwYm5RcElIc0tJQ0FnSUNBZ2FXWWdLSEpsYkdGMGFYWmxVRzlwYm5RZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJSEpsYkdGMGFYWmxVRzlwYm5RZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvZEdocGN5NTBlWEJsSUNFOVBTQkNiMlI1TGtSWlRrRk5TVU1wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNoMGFHbHpMbk5zWldWd1UzUmhkR1VnUFQwOUlFSnZaSGt1VTB4RlJWQkpUa2NwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbmRoYTJWVmNDZ3BPd29nSUNBZ0lDQjlJQzh2SUVOdmJYQjFkR1VnY0c5cGJuUWdjRzl6YVhScGIyNGdjbVZzWVhScGRtVWdkRzhnZEdobElHSnZaSGtnWTJWdWRHVnlDZ29LSUNBZ0lDQWdZMjl1YzNRZ2NpQTlJSEpsYkdGMGFYWmxVRzlwYm5RN0lDOHZJRU52YlhCMWRHVWdjSEp2WkhWalpXUWdZMlZ1ZEhKaGJDQnBiWEIxYkhObElIWmxiRzlqYVhSNUNnb2dJQ0FnSUNCamIyNXpkQ0IyWld4dklEMGdRbTlrZVY5aGNIQnNlVWx0Y0hWc2MyVmZkbVZzYnpzS0lDQWdJQ0FnZG1Wc2J5NWpiM0I1S0dsdGNIVnNjMlVwT3dvZ0lDQWdJQ0IyWld4dkxuTmpZV3hsS0hSb2FYTXVhVzUyVFdGemN5d2dkbVZzYnlrN0lDOHZJRUZrWkNCc2FXNWxZWElnYVcxd2RXeHpaUW9LSUNBZ0lDQWdkR2hwY3k1MlpXeHZZMmwwZVM1MllXUmtLSFpsYkc4c0lIUm9hWE11ZG1Wc2IyTnBkSGtwT3lBdkx5QkRiMjF3ZFhSbElIQnliMlIxWTJWa0lISnZkR0YwYVc5dVlXd2dhVzF3ZFd4elpTQjJaV3h2WTJsMGVRb0tJQ0FnSUNBZ1kyOXVjM1FnY205MFZtVnNieUE5SUVKdlpIbGZZWEJ3YkhsSmJYQjFiSE5sWDNKdmRGWmxiRzg3Q2lBZ0lDQWdJSEl1WTNKdmMzTW9hVzF3ZFd4elpTd2djbTkwVm1Wc2J5azdDaUFnSUNBZ0lDOHFDaUFnSUNBZ0lDQnliM1JXWld4dkxuZ2dLajBnZEdocGN5NXBiblpKYm1WeWRHbGhMbmc3Q2lBZ0lDQWdJQ0J5YjNSV1pXeHZMbmtnS2owZ2RHaHBjeTVwYm5aSmJtVnlkR2xoTG5rN0NpQWdJQ0FnSUNCeWIzUldaV3h2TG5vZ0tqMGdkR2hwY3k1cGJuWkpibVZ5ZEdsaExubzdDaUFnSUNBZ0lDQXFMd29LSUNBZ0lDQWdkR2hwY3k1cGJuWkpibVZ5ZEdsaFYyOXliR1F1ZG0xMWJIUW9jbTkwVm1Wc2J5d2djbTkwVm1Wc2J5azdJQzh2SUVGa1pDQnliM1JoZEdsdmJtRnNJRWx0Y0hWc2MyVUtDaUFnSUNBZ0lIUm9hWE11WVc1bmRXeGhjbFpsYkc5amFYUjVMblpoWkdRb2NtOTBWbVZzYnl3Z2RHaHBjeTVoYm1kMWJHRnlWbVZzYjJOcGRIa3BPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQmNIQnNlU0JzYjJOaGJHeDVMV1JsWm1sdVpXUWdhVzF3ZFd4elpTQjBieUJoSUd4dlkyRnNJSEJ2YVc1MElHbHVJSFJvWlNCaWIyUjVMZ29nSUNBZ0lDb2dRSEJoY21GdElHWnZjbU5sSUZSb1pTQm1iM0pqWlNCMlpXTjBiM0lnZEc4Z1lYQndiSGtzSUdSbFptbHVaV1FnYkc5allXeHNlU0JwYmlCMGFHVWdZbTlrZVNCbWNtRnRaUzRLSUNBZ0lDQXFJRUJ3WVhKaGJTQnNiMk5oYkZCdmFXNTBJRUVnYkc5allXd2djRzlwYm5RZ2FXNGdkR2hsSUdKdlpIa2dkRzhnWVhCd2JIa2dkR2hsSUdadmNtTmxJRzl1TGdvZ0lDQWdJQ292Q2dvS0lDQWdJR0Z3Y0d4NVRHOWpZV3hKYlhCMWJITmxLR3h2WTJGc1NXMXdkV3h6WlN3Z2JHOWpZV3hRYjJsdWRDa2dld29nSUNBZ0lDQnBaaUFvYkc5allXeFFiMmx1ZENBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiRzlqWVd4UWIybHVkQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG5SNWNHVWdJVDA5SUVKdlpIa3VSRmxPUVUxSlF5a2dld29nSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1kyOXVjM1FnZDI5eWJHUkpiWEIxYkhObElEMGdRbTlrZVY5aGNIQnNlVXh2WTJGc1NXMXdkV3h6WlY5M2IzSnNaRWx0Y0hWc2MyVTdDaUFnSUNBZ0lHTnZibk4wSUhKbGJHRjBhWFpsVUc5cGJuUlhiM0pzWkNBOUlFSnZaSGxmWVhCd2JIbE1iMk5oYkVsdGNIVnNjMlZmY21Wc1lYUnBkbVZRYjJsdWREc2dMeThnVkhKaGJuTm1iM0p0SUhSb1pTQm1iM0pqWlNCMlpXTjBiM0lnZEc4Z2QyOXliR1FnYzNCaFkyVUtDaUFnSUNBZ0lIUm9hWE11ZG1WamRHOXlWRzlYYjNKc1pFWnlZVzFsS0d4dlkyRnNTVzF3ZFd4elpTd2dkMjl5YkdSSmJYQjFiSE5sS1RzS0lDQWdJQ0FnZEdocGN5NTJaV04wYjNKVWIxZHZjbXhrUm5KaGJXVW9iRzlqWVd4UWIybHVkQ3dnY21Wc1lYUnBkbVZRYjJsdWRGZHZjbXhrS1RzS0lDQWdJQ0FnZEdocGN5NWhjSEJzZVVsdGNIVnNjMlVvZDI5eWJHUkpiWEIxYkhObExDQnlaV3hoZEdsMlpWQnZhVzUwVjI5eWJHUXBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVGFHOTFiR1FnWW1VZ1kyRnNiR1ZrSUhkb1pXNWxkbVZ5SUhsdmRTQmphR0Z1WjJVZ2RHaGxJR0p2WkhrZ2MyaGhjR1VnYjNJZ2JXRnpjeTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQjFjR1JoZEdWTllYTnpVSEp2Y0dWeWRHbGxjeWdwSUhzS0lDQWdJQ0FnWTI5dWMzUWdhR0ZzWmtWNGRHVnVkSE1nUFNCQ2IyUjVYM1Z3WkdGMFpVMWhjM05RY205d1pYSjBhV1Z6WDJoaGJHWkZlSFJsYm5Sek93b2dJQ0FnSUNCMGFHbHpMbWx1ZGsxaGMzTWdQU0IwYUdsekxtMWhjM01nUGlBd0lEOGdNUzR3SUM4Z2RHaHBjeTV0WVhOeklEb2dNRHNLSUNBZ0lDQWdZMjl1YzNRZ1NTQTlJSFJvYVhNdWFXNWxjblJwWVRzS0lDQWdJQ0FnWTI5dWMzUWdabWw0WldRZ1BTQjBhR2x6TG1acGVHVmtVbTkwWVhScGIyNDdJQzh2SUVGd2NISnZlR2x0WVhSbElIZHBkR2dnUVVGQ1FpQmliM2dLQ2lBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsUVVGQ1FpZ3BPd29nSUNBZ0lDQm9ZV3htUlhoMFpXNTBjeTV6WlhRb0tIUm9hWE11WVdGaVlpNTFjSEJsY2tKdmRXNWtMbmdnTFNCMGFHbHpMbUZoWW1JdWJHOTNaWEpDYjNWdVpDNTRLU0F2SURJc0lDaDBhR2x6TG1GaFltSXVkWEJ3WlhKQ2IzVnVaQzU1SUMwZ2RHaHBjeTVoWVdKaUxteHZkMlZ5UW05MWJtUXVlU2tnTHlBeUxDQW9kR2hwY3k1aFlXSmlMblZ3Y0dWeVFtOTFibVF1ZWlBdElIUm9hWE11WVdGaVlpNXNiM2RsY2tKdmRXNWtMbm9wSUM4Z01pazdDaUFnSUNBZ0lFSnZlQzVqWVd4amRXeGhkR1ZKYm1WeWRHbGhLR2hoYkdaRmVIUmxiblJ6TENCMGFHbHpMbTFoYzNNc0lFa3BPd29nSUNBZ0lDQjBhR2x6TG1sdWRrbHVaWEowYVdFdWMyVjBLRWt1ZUNBK0lEQWdKaVlnSVdacGVHVmtJRDhnTVM0d0lDOGdTUzU0SURvZ01Dd2dTUzU1SUQ0Z01DQW1KaUFoWm1sNFpXUWdQeUF4TGpBZ0x5QkpMbmtnT2lBd0xDQkpMbm9nUGlBd0lDWW1JQ0ZtYVhobFpDQS9JREV1TUNBdklFa3VlaUE2SURBcE93b2dJQ0FnSUNCMGFHbHpMblZ3WkdGMFpVbHVaWEowYVdGWGIzSnNaQ2gwY25WbEtUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUjJWMElIZHZjbXhrSUhabGJHOWphWFI1SUc5bUlHRWdjRzlwYm5RZ2FXNGdkR2hsSUdKdlpIa3VDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2QyOXliR1JRYjJsdWRBb2dJQ0FnSUNvZ1FIQmhjbUZ0SUhKbGMzVnNkQW9nSUNBZ0lDb2dRSEpsZEhWeWJpQlVhR1VnY21WemRXeDBJSFpsWTNSdmNpNEtJQ0FnSUNBcUx3b0tDaUFnSUNCblpYUldaV3h2WTJsMGVVRjBWMjl5YkdSUWIybHVkQ2gzYjNKc1pGQnZhVzUwTENCeVpYTjFiSFFwSUhzS0lDQWdJQ0FnWTI5dWMzUWdjaUE5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUhkdmNteGtVRzlwYm5RdWRuTjFZaWgwYUdsekxuQnZjMmwwYVc5dUxDQnlLVHNLSUNBZ0lDQWdkR2hwY3k1aGJtZDFiR0Z5Vm1Wc2IyTnBkSGt1WTNKdmMzTW9jaXdnY21WemRXeDBLVHNLSUNBZ0lDQWdkR2hwY3k1MlpXeHZZMmwwZVM1MllXUmtLSEpsYzNWc2RDd2djbVZ6ZFd4MEtUc0tJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1RXOTJaU0IwYUdVZ1ltOWtlU0JtYjNKM1lYSmtJR2x1SUhScGJXVXVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pIUWdWR2x0WlNCemRHVndDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NYVmhkRTV2Y20xaGJHbDZaU0JUWlhRZ2RHOGdkSEoxWlNCMGJ5QnViM0p0WVd4cGVtVWdkR2hsSUdKdlpIa2djWFZoZEdWeWJtbHZiZ29nSUNBZ0lDb2dRSEJoY21GdElIRjFZWFJPYjNKdFlXeHBlbVZHWVhOMElFbG1JSFJvWlNCeGRXRjBaWEp1YVc5dUlITm9iM1ZzWkNCaVpTQnViM0p0WVd4cGVtVmtJSFZ6YVc1bklDSm1ZWE4wSWlCeGRXRjBaWEp1YVc5dUlHNXZjbTFoYkdsNllYUnBiMjRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnBiblJsWjNKaGRHVW9aSFFzSUhGMVlYUk9iM0p0WVd4cGVtVXNJSEYxWVhST2IzSnRZV3hwZW1WR1lYTjBLU0I3Q2lBZ0lDQWdJQzh2SUZOaGRtVWdjSEpsZG1sdmRYTWdjRzl6YVhScGIyNEtJQ0FnSUNBZ2RHaHBjeTV3Y21WMmFXOTFjMUJ2YzJsMGFXOXVMbU52Y0hrb2RHaHBjeTV3YjNOcGRHbHZiaWs3Q2lBZ0lDQWdJSFJvYVhNdWNISmxkbWx2ZFhOUmRXRjBaWEp1YVc5dUxtTnZjSGtvZEdocGN5NXhkV0YwWlhKdWFXOXVLVHNLQ2lBZ0lDQWdJR2xtSUNnaEtIUm9hWE11ZEhsd1pTQTlQVDBnUW05a2VTNUVXVTVCVFVsRElIeDhJSFJvYVhNdWRIbHdaU0E5UFQwZ1FtOWtlUzVMU1U1RlRVRlVTVU1wSUh4OElIUm9hWE11YzJ4bFpYQlRkR0YwWlNBOVBUMGdRbTlrZVM1VFRFVkZVRWxPUnlrZ2V3b2dJQ0FnSUNBZ0lDOHZJRTl1YkhrZ1ptOXlJR1I1Ym1GdGFXTUtJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdOdmJuTjBJSFpsYkc4Z1BTQjBhR2x6TG5abGJHOWphWFI1T3dvZ0lDQWdJQ0JqYjI1emRDQmhibWQxYkdGeVZtVnNieUE5SUhSb2FYTXVZVzVuZFd4aGNsWmxiRzlqYVhSNU93b2dJQ0FnSUNCamIyNXpkQ0J3YjNNZ1BTQjBhR2x6TG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0JqYjI1emRDQm1iM0pqWlNBOUlIUm9hWE11Wm05eVkyVTdDaUFnSUNBZ0lHTnZibk4wSUhSdmNuRjFaU0E5SUhSb2FYTXVkRzl5Y1hWbE93b2dJQ0FnSUNCamIyNXpkQ0J4ZFdGMElEMGdkR2hwY3k1eGRXRjBaWEp1YVc5dU93b2dJQ0FnSUNCamIyNXpkQ0JwYm5aTllYTnpJRDBnZEdocGN5NXBiblpOWVhOek93b2dJQ0FnSUNCamIyNXpkQ0JwYm5aSmJtVnlkR2xoSUQwZ2RHaHBjeTVwYm5aSmJtVnlkR2xoVjI5eWJHUTdDaUFnSUNBZ0lHTnZibk4wSUd4cGJtVmhja1poWTNSdmNpQTlJSFJvYVhNdWJHbHVaV0Z5Um1GamRHOXlPd29nSUNBZ0lDQmpiMjV6ZENCcFRXUjBJRDBnYVc1MlRXRnpjeUFxSUdSME93b2dJQ0FnSUNCMlpXeHZMbmdnS3owZ1ptOXlZMlV1ZUNBcUlHbE5aSFFnS2lCc2FXNWxZWEpHWVdOMGIzSXVlRHNLSUNBZ0lDQWdkbVZzYnk1NUlDczlJR1p2Y21ObExua2dLaUJwVFdSMElDb2diR2x1WldGeVJtRmpkRzl5TG5rN0NpQWdJQ0FnSUhabGJHOHVlaUFyUFNCbWIzSmpaUzU2SUNvZ2FVMWtkQ0FxSUd4cGJtVmhja1poWTNSdmNpNTZPd29nSUNBZ0lDQmpiMjV6ZENCbElEMGdhVzUyU1c1bGNuUnBZUzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdZMjl1YzNRZ1lXNW5kV3hoY2taaFkzUnZjaUE5SUhSb2FYTXVZVzVuZFd4aGNrWmhZM1J2Y2pzS0lDQWdJQ0FnWTI5dWMzUWdkSGdnUFNCMGIzSnhkV1V1ZUNBcUlHRnVaM1ZzWVhKR1lXTjBiM0l1ZURzS0lDQWdJQ0FnWTI5dWMzUWdkSGtnUFNCMGIzSnhkV1V1ZVNBcUlHRnVaM1ZzWVhKR1lXTjBiM0l1ZVRzS0lDQWdJQ0FnWTI5dWMzUWdkSG9nUFNCMGIzSnhkV1V1ZWlBcUlHRnVaM1ZzWVhKR1lXTjBiM0l1ZWpzS0lDQWdJQ0FnWVc1bmRXeGhjbFpsYkc4dWVDQXJQU0JrZENBcUlDaGxXekJkSUNvZ2RIZ2dLeUJsV3pGZElDb2dkSGtnS3lCbFd6SmRJQ29nZEhvcE93b2dJQ0FnSUNCaGJtZDFiR0Z5Vm1Wc2J5NTVJQ3M5SUdSMElDb2dLR1ZiTTEwZ0tpQjBlQ0FySUdWYk5GMGdLaUIwZVNBcklHVmJOVjBnS2lCMGVpazdDaUFnSUNBZ0lHRnVaM1ZzWVhKV1pXeHZMbm9nS3owZ1pIUWdLaUFvWlZzMlhTQXFJSFI0SUNzZ1pWczNYU0FxSUhSNUlDc2daVnM0WFNBcUlIUjZLVHNnTHk4Z1ZYTmxJRzVsZHlCMlpXeHZZMmwwZVNBZ0xTQnNaV0Z3SUdaeWIyY0tDaUFnSUNBZ0lIQnZjeTU0SUNzOUlIWmxiRzh1ZUNBcUlHUjBPd29nSUNBZ0lDQndiM011ZVNBclBTQjJaV3h2TG5rZ0tpQmtkRHNLSUNBZ0lDQWdjRzl6TG5vZ0t6MGdkbVZzYnk1NklDb2daSFE3Q2lBZ0lDQWdJSEYxWVhRdWFXNTBaV2R5WVhSbEtIUm9hWE11WVc1bmRXeGhjbFpsYkc5amFYUjVMQ0JrZEN3Z2RHaHBjeTVoYm1kMWJHRnlSbUZqZEc5eUxDQnhkV0YwS1RzS0NpQWdJQ0FnSUdsbUlDaHhkV0YwVG05eWJXRnNhWHBsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSEYxWVhST2IzSnRZV3hwZW1WR1lYTjBLU0I3Q2lBZ0lDQWdJQ0FnSUNCeGRXRjBMbTV2Y20xaGJHbDZaVVpoYzNRb0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdjWFZoZEM1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIUm9hWE11WVdGaVlrNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUc2dMeThnVlhCa1lYUmxJSGR2Y214a0lHbHVaWEowYVdFS0NpQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFNXNWxjblJwWVZkdmNteGtLQ2s3Q2lBZ0lDQjlDZ29nSUgwS0lDQkNiMlI1TG1sa1EyOTFiblJsY2lBOUlEQTdDaUFnUW05a2VTNURUMHhNU1VSRlgwVldSVTVVWDA1QlRVVWdQU0FuWTI5c2JHbGtaU2M3Q2lBZ1FtOWtlUzVFV1U1QlRVbERJRDBnUWs5RVdWOVVXVkJGVXk1RVdVNUJUVWxET3dvZ0lFSnZaSGt1VTFSQlZFbERJRDBnUWs5RVdWOVVXVkJGVXk1VFZFRlVTVU03Q2lBZ1FtOWtlUzVMU1U1RlRVRlVTVU1nUFNCQ1QwUlpYMVJaVUVWVExrdEpUa1ZOUVZSSlF6c0tJQ0JDYjJSNUxrRlhRVXRGSUQwZ1FrOUVXVjlUVEVWRlVGOVRWRUZVUlZNdVFWZEJTMFU3Q2lBZ1FtOWtlUzVUVEVWRlVGa2dQU0JDVDBSWlgxTk1SVVZRWDFOVVFWUkZVeTVUVEVWRlVGazdDaUFnUW05a2VTNVRURVZGVUVsT1J5QTlJRUpQUkZsZlUweEZSVkJmVTFSQlZFVlRMbE5NUlVWUVNVNUhPd29nSUVKdlpIa3VkMkZyWlhWd1JYWmxiblFnUFNCN0NpQWdJQ0IwZVhCbE9pQW5kMkZyWlhWd0p3b2dJSDA3Q2lBZ1FtOWtlUzV6YkdWbGNIbEZkbVZ1ZENBOUlIc0tJQ0FnSUhSNWNHVTZJQ2R6YkdWbGNIa25DaUFnZlRzS0lDQkNiMlI1TG5Oc1pXVndSWFpsYm5RZ1BTQjdDaUFnSUNCMGVYQmxPaUFuYzJ4bFpYQW5DaUFnZlRzS0lDQmpiMjV6ZENCMGJYQldaV01nUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElIUnRjRkYxWVhRZ1BTQnVaWGNnVVhWaGRHVnlibWx2YmlncE93b2dJR052Ym5OMElIVndaR0YwWlVGQlFrSmZjMmhoY0dWQlFVSkNJRDBnYm1WM0lFRkJRa0lvS1RzS0lDQmpiMjV6ZENCMWFYZGZiVEVnUFNCdVpYY2dUV0YwTXlncE93b2dJR052Ym5OMElIVnBkMTl0TWlBOUlHNWxkeUJOWVhRektDazdDaUFnYm1WM0lFMWhkRE1vS1RzS0lDQmpiMjV6ZENCQ2IyUjVYMkZ3Y0d4NVJtOXlZMlZmY205MFJtOXlZMlVnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElFSnZaSGxmWVhCd2JIbE1iMk5oYkVadmNtTmxYM2R2Y214a1JtOXlZMlVnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElFSnZaSGxmWVhCd2JIbE1iMk5oYkVadmNtTmxYM0psYkdGMGFYWmxVRzlwYm5SWGIzSnNaQ0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ1FtOWtlVjloY0hCc2VVbHRjSFZzYzJWZmRtVnNieUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ1FtOWtlVjloY0hCc2VVbHRjSFZzYzJWZmNtOTBWbVZzYnlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdRbTlrZVY5aGNIQnNlVXh2WTJGc1NXMXdkV3h6WlY5M2IzSnNaRWx0Y0hWc2MyVWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUVKdlpIbGZZWEJ3YkhsTWIyTmhiRWx0Y0hWc2MyVmZjbVZzWVhScGRtVlFiMmx1ZENBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdRbTlrZVY5MWNHUmhkR1ZOWVhOelVISnZjR1Z5ZEdsbGMxOW9ZV3htUlhoMFpXNTBjeUE5SUc1bGR5QldaV016S0NrN0Nnb2dJQzhxS2dvZ0lDQXFJRUpoYzJVZ1kyeGhjM01nWm05eUlHSnliMkZrY0doaGMyVWdhVzF3YkdWdFpXNTBZWFJwYjI1ekNpQWdJQ29nUUdGMWRHaHZjaUJ6WTJoMFpYQndaUW9nSUNBcUx3b2dJR05zWVhOeklFSnliMkZrY0doaGMyVWdld29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlVhR1VnZDI5eWJHUWdkRzhnYzJWaGNtTm9JR1p2Y2lCamIyeHNhWE5wYjI1eklHbHVMZ29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkpaaUJ6WlhRZ2RHOGdkSEoxWlN3Z2RHaGxJR0p5YjJGa2NHaGhjMlVnZFhObGN5QmliM1Z1WkdsdVp5QmliM2hsY3lCbWIzSWdhVzUwWlhKelpXTjBhVzl1SUhSbGMzUnpMQ0JsYkhObElHbDBJSFZ6WlhNZ1ltOTFibVJwYm1jZ2MzQm9aWEpsY3k0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTJWMElIUnZJSFJ5ZFdVZ2FXWWdkR2hsSUc5aWFtVmpkSE1nYVc0Z2RHaGxJSGR2Y214a0lHMXZkbVZrTGdvZ0lDQWdJQ292Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUhzS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkNBOUlHNTFiR3c3Q2lBZ0lDQWdJSFJvYVhNdWRYTmxRbTkxYm1ScGJtZENiM2hsY3lBOUlHWmhiSE5sT3dvZ0lDQWdJQ0IwYUdsekxtUnBjblI1SUQwZ2RISjFaVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1IyVjBJSFJvWlNCamIyeHNhWE5wYjI0Z2NHRnBjbk1nWm5KdmJTQjBhR1VnZDI5eWJHUUtJQ0FnSUNBcUlFQndZWEpoYlNCM2IzSnNaQ0JVYUdVZ2QyOXliR1FnZEc4Z2MyVmhjbU5vSUdsdUNpQWdJQ0FnS2lCQWNHRnlZVzBnY0RFZ1JXMXdkSGtnWVhKeVlYa2dkRzhnWW1VZ1ptbHNiR1ZrSUhkcGRHZ2dZbTlrZVNCdlltcGxZM1J6Q2lBZ0lDQWdLaUJBY0dGeVlXMGdjRElnUlcxd2RIa2dZWEp5WVhrZ2RHOGdZbVVnWm1sc2JHVmtJSGRwZEdnZ1ltOWtlU0J2WW1wbFkzUnpDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyOXNiR2x6YVc5dVVHRnBjbk1vZDI5eWJHUXNJSEF4TENCd01pa2dld29nSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyTnZiR3hwYzJsdmJsQmhhWEp6SUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0JtYjNJZ2RHaHBjeUJDY205aFpGQm9ZWE5sSUdOc1lYTnpJU2NwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRhR1ZqYXlCcFppQmhJR0p2WkhrZ2NHRnBjaUJ1WldWa2N5QjBieUJpWlNCcGJuUmxjbk5sWTNScGIyNGdkR1Z6ZEdWa0lHRjBJR0ZzYkM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0J1WldWa1FuSnZZV1J3YUdGelpVTnZiR3hwYzJsdmJpaGliMlI1UVN3Z1ltOWtlVUlwSUhzS0lDQWdJQ0FnTHk4Z1EyaGxZMnNnWTI5c2JHbHphVzl1SUdacGJIUmxjaUJ0WVhOcmN3b2dJQ0FnSUNCcFppQW9LR0p2WkhsQkxtTnZiR3hwYzJsdmJrWnBiSFJsY2tkeWIzVndJQ1lnWW05a2VVSXVZMjlzYkdsemFXOXVSbWxzZEdWeVRXRnpheWtnUFQwOUlEQWdmSHdnS0dKdlpIbENMbU52Ykd4cGMybHZia1pwYkhSbGNrZHliM1Z3SUNZZ1ltOWtlVUV1WTI5c2JHbHphVzl1Um1sc2RHVnlUV0Z6YXlrZ1BUMDlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdDaUFnSUNBZ0lIMGdMeThnUTJobFkyc2dkSGx3WlhNS0Nnb2dJQ0FnSUNCcFppQW9LQ2hpYjJSNVFTNTBlWEJsSUNZZ1FtOWtlUzVUVkVGVVNVTXBJQ0U5UFNBd0lIeDhJR0p2WkhsQkxuTnNaV1Z3VTNSaGRHVWdQVDA5SUVKdlpIa3VVMHhGUlZCSlRrY3BJQ1ltSUNnb1ltOWtlVUl1ZEhsd1pTQW1JRUp2WkhrdVUxUkJWRWxES1NBaFBUMGdNQ0I4ZkNCaWIyUjVRaTV6YkdWbGNGTjBZWFJsSUQwOVBTQkNiMlI1TGxOTVJVVlFTVTVIS1NrZ2V3b2dJQ0FnSUNBZ0lDOHZJRUp2ZEdnZ1ltOWthV1Z6SUdGeVpTQnpkR0YwYVdNZ2IzSWdjMnhsWlhCcGJtY3VJRk5yYVhBdUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnlaWFIxY200Z2RISjFaVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EyaGxZMnNnYVdZZ2RHaGxJR0p2ZFc1a2FXNW5JSFp2YkhWdFpYTWdiMllnZEhkdklHSnZaR2xsY3lCcGJuUmxjbk5sWTNRdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYVc1MFpYSnpaV04wYVc5dVZHVnpkQ2hpYjJSNVFTd2dZbTlrZVVJc0lIQmhhWEp6TVN3Z2NHRnBjbk15S1NCN0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG5WelpVSnZkVzVrYVc1blFtOTRaWE1wSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJ2UW05MWJtUnBibWRDYjNoQ2NtOWhaSEJvWVhObEtHSnZaSGxCTENCaWIyUjVRaXdnY0dGcGNuTXhMQ0J3WVdseWN6SXBPd29nSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Wkc5Q2IzVnVaR2x1WjFOd2FHVnlaVUp5YjJGa2NHaGhjMlVvWW05a2VVRXNJR0p2WkhsQ0xDQndZV2x5Y3pFc0lIQmhhWEp6TWlrN0NpQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMmhsWTJzZ2FXWWdkR2hsSUdKdmRXNWthVzVuSUhOd2FHVnlaWE1nYjJZZ2RIZHZJR0p2WkdsbGN5QmhjbVVnYVc1MFpYSnpaV04wYVc1bkxnb2dJQ0FnSUNvZ1FIQmhjbUZ0SUhCaGFYSnpNU0JpYjJSNVFTQnBjeUJoY0hCbGJtUmxaQ0IwYnlCMGFHbHpJR0Z5Y21GNUlHbG1JR2x1ZEdWeWMyVmpkR2x2YmdvZ0lDQWdJQ29nUUhCaGNtRnRJSEJoYVhKek1pQmliMlI1UWlCcGN5QmhjSEJsYm1SbFpDQjBieUIwYUdseklHRnljbUY1SUdsbUlHbHVkR1Z5YzJWamRHbHZiZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHUnZRbTkxYm1ScGJtZFRjR2hsY21WQ2NtOWhaSEJvWVhObEtHSnZaSGxCTENCaWIyUjVRaXdnY0dGcGNuTXhMQ0J3WVdseWN6SXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ2NpQTlJRUp5YjJGa2NHaGhjMlZmWTI5c2JHbHphVzl1VUdGcGNuTmZjanNLSUNBZ0lDQWdZbTlrZVVJdWNHOXphWFJwYjI0dWRuTjFZaWhpYjJSNVFTNXdiM05wZEdsdmJpd2djaWs3Q2lBZ0lDQWdJR052Ym5OMElHSnZkVzVrYVc1blVtRmthWFZ6VTNWdE1pQTlJQ2hpYjJSNVFTNWliM1Z1WkdsdVoxSmhaR2wxY3lBcklHSnZaSGxDTG1KdmRXNWthVzVuVW1Ga2FYVnpLU0FxS2lBeU93b2dJQ0FnSUNCamIyNXpkQ0J1YjNKdE1pQTlJSEl1YkdWdVozUm9VM0YxWVhKbFpDZ3BPd29LSUNBZ0lDQWdhV1lnS0c1dmNtMHlJRHdnWW05MWJtUnBibWRTWVdScGRYTlRkVzB5S1NCN0NpQWdJQ0FnSUNBZ2NHRnBjbk14TG5CMWMyZ29ZbTlrZVVFcE93b2dJQ0FnSUNBZ0lIQmhhWEp6TWk1d2RYTm9LR0p2WkhsQ0tUc0tJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJEYUdWamF5QnBaaUIwYUdVZ1ltOTFibVJwYm1jZ1ltOTRaWE1nYjJZZ2RIZHZJR0p2WkdsbGN5QmhjbVVnYVc1MFpYSnpaV04wYVc1bkxnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdSdlFtOTFibVJwYm1kQ2IzaENjbTloWkhCb1lYTmxLR0p2WkhsQkxDQmliMlI1UWl3Z2NHRnBjbk14TENCd1lXbHljeklwSUhzS0lDQWdJQ0FnYVdZZ0tHSnZaSGxCTG1GaFltSk9aV1ZrYzFWd1pHRjBaU2tnZXdvZ0lDQWdJQ0FnSUdKdlpIbEJMblZ3WkdGMFpVRkJRa0lvS1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tHSnZaSGxDTG1GaFltSk9aV1ZrYzFWd1pHRjBaU2tnZXdvZ0lDQWdJQ0FnSUdKdlpIbENMblZ3WkdGMFpVRkJRa0lvS1RzS0lDQWdJQ0FnZlNBdkx5QkRhR1ZqYXlCQlFVSkNJQzhnUVVGQ1Fnb0tDaUFnSUNBZ0lHbG1JQ2hpYjJSNVFTNWhZV0ppTG05MlpYSnNZWEJ6S0dKdlpIbENMbUZoWW1JcEtTQjdDaUFnSUNBZ0lDQWdjR0ZwY25NeExuQjFjMmdvWW05a2VVRXBPd29nSUNBZ0lDQWdJSEJoYVhKek1pNXdkWE5vS0dKdlpIbENLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCU1pXMXZkbVZ6SUdSMWNHeHBZMkYwWlNCd1lXbHljeUJtY205dElIUm9aU0J3WVdseUlHRnljbUY1Y3k0S0lDQWdJQ0FxTHdvS0NpQWdJQ0J0WVd0bFVHRnBjbk5WYm1seGRXVW9jR0ZwY25NeExDQndZV2x5Y3pJcElIc0tJQ0FnSUNBZ1kyOXVjM1FnZENBOUlFSnliMkZrY0doaGMyVmZiV0ZyWlZCaGFYSnpWVzVwY1hWbFgzUmxiWEE3Q2lBZ0lDQWdJR052Ym5OMElIQXhJRDBnUW5KdllXUndhR0Z6WlY5dFlXdGxVR0ZwY25OVmJtbHhkV1ZmY0RFN0NpQWdJQ0FnSUdOdmJuTjBJSEF5SUQwZ1FuSnZZV1J3YUdGelpWOXRZV3RsVUdGcGNuTlZibWx4ZFdWZmNESTdDaUFnSUNBZ0lHTnZibk4wSUU0Z1BTQndZV2x5Y3pFdWJHVnVaM1JvT3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnSVQwOUlFNDdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lIQXhXMmxkSUQwZ2NHRnBjbk14VzJsZE93b2dJQ0FnSUNBZ0lIQXlXMmxkSUQwZ2NHRnBjbk15VzJsZE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCd1lXbHljekV1YkdWdVozUm9JRDBnTURzS0lDQWdJQ0FnY0dGcGNuTXlMbXhsYm1kMGFDQTlJREE3Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0FoUFQwZ1Rqc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYVdReElEMGdjREZiYVYwdWFXUTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXUXlJRDBnY0RKYmFWMHVhV1E3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1SUQwZ2FXUXhJRHdnYVdReUlEOGdZQ1I3YVdReGZTd2tlMmxrTW4xZ0lEb2dZQ1I3YVdReWZTd2tlMmxrTVgxZ093b2dJQ0FnSUNBZ0lIUmJhMlY1WFNBOUlHazdDaUFnSUNBZ0lDQWdkQzVyWlhsekxuQjFjMmdvYTJWNUtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ0lUMDlJSFF1YTJWNWN5NXNaVzVuZEdnN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVNBOUlIUXVhMlY1Y3k1d2IzQW9LVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQndZV2x5U1c1a1pYZ2dQU0IwVzJ0bGVWMDdDaUFnSUNBZ0lDQWdjR0ZwY25NeExuQjFjMmdvY0RGYmNHRnBja2x1WkdWNFhTazdDaUFnSUNBZ0lDQWdjR0ZwY25NeUxuQjFjMmdvY0RKYmNHRnBja2x1WkdWNFhTazdDaUFnSUNBZ0lDQWdaR1ZzWlhSbElIUmJhMlY1WFRzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlVieUJpWlNCcGJYQnNaVzFsYm5SbFpDQmllU0J6ZFdKallYTnpaWE1LSUNBZ0lDQXFMd29LQ2lBZ0lDQnpaWFJYYjNKc1pDaDNiM0pzWkNrZ2UzMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EyaGxZMnNnYVdZZ2RHaGxJR0p2ZFc1a2FXNW5JSE53YUdWeVpYTWdiMllnZEhkdklHSnZaR2xsY3lCdmRtVnliR0Z3TGdvZ0lDQWdJQ292Q2dvS0lDQWdJSE4wWVhScFl5QmliM1Z1WkdsdVoxTndhR1Z5WlVOb1pXTnJLR0p2WkhsQkxDQmliMlI1UWlrZ2V3b2dJQ0FnSUNCamIyNXpkQ0JrYVhOMElEMGdibVYzSUZabFl6TW9LVHNnTHk4Z1luTmpYMlJwYzNRN0Nnb2dJQ0FnSUNCaWIyUjVRUzV3YjNOcGRHbHZiaTUyYzNWaUtHSnZaSGxDTG5CdmMybDBhVzl1TENCa2FYTjBLVHNLSUNBZ0lDQWdZMjl1YzNRZ2MyRWdQU0JpYjJSNVFTNXphR0Z3WlhOYk1GMDdDaUFnSUNBZ0lHTnZibk4wSUhOaUlEMGdZbTlrZVVJdWMyaGhjR1Z6V3pCZE93b2dJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXdiM2NvYzJFdVltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTWdLeUJ6WWk1aWIzVnVaR2x1WjFOd2FHVnlaVkpoWkdsMWN5d2dNaWtnUGlCa2FYTjBMbXhsYm1kMGFGTnhkV0Z5WldRb0tUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVW1WMGRYSnVjeUJoYkd3Z2RHaGxJR0p2WkdsbGN5QjNhWFJvYVc0Z2RHaGxJRUZCUWtJdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWVdGaVlsRjFaWEo1S0hkdmNteGtMQ0JoWVdKaUxDQnlaWE4xYkhRcElIc0tJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2N1WVdGaVlsRjFaWEo1SUdseklHNXZkQ0JwYlhCc1pXMWxiblJsWkNCcGJpQjBhR2x6SUVKeWIyRmtjR2hoYzJVZ2MzVmlZMnhoYzNNdUp5azdDaUFnSUNBZ0lISmxkSFZ5YmlCYlhUc0tJQ0FnSUgwS0NpQWdmU0F2THlCVVpXMXdJRzlpYW1WamRITUtDaUFnWTI5dWMzUWdRbkp2WVdSd2FHRnpaVjlqYjJ4c2FYTnBiMjVRWVdseWMxOXlJRDBnYm1WM0lGWmxZek1vS1RzS0lDQnVaWGNnVm1Wak15Z3BPd29nSUc1bGR5QlJkV0YwWlhKdWFXOXVLQ2s3Q2lBZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQkNjbTloWkhCb1lYTmxYMjFoYTJWUVlXbHljMVZ1YVhGMVpWOTBaVzF3SUQwZ2V3b2dJQ0FnYTJWNWN6b2dXMTBLSUNCOU93b2dJR052Ym5OMElFSnliMkZrY0doaGMyVmZiV0ZyWlZCaGFYSnpWVzVwY1hWbFgzQXhJRDBnVzEwN0NpQWdZMjl1YzNRZ1FuSnZZV1J3YUdGelpWOXRZV3RsVUdGcGNuTlZibWx4ZFdWZmNESWdQU0JiWFRzS0lDQnVaWGNnVm1Wak15Z3BPd29nSUc1bGR5QldaV016S0NrN0NpQWdibVYzSUZabFl6TW9LVHNLQ2lBZ0x5b3FDaUFnSUNvZ1RtRnBkbVVnWW5KdllXUndhR0Z6WlNCcGJYQnNaVzFsYm5SaGRHbHZiaXdnZFhObFpDQnBiaUJzWVdOcklHOW1JR0psZEhSbGNpQnZibVZ6TGdvZ0lDQXFDaUFnSUNvZ1ZHaGxJRzVoYVhabElHSnliMkZrY0doaGMyVWdiRzl2YTNNZ1lYUWdZV3hzSUhCdmMzTnBZbXhsSUhCaGFYSnpJSGRwZEdodmRYUWdjbVZ6ZEhKcFkzUnBiMjRzSUhSb1pYSmxabTl5WlNCcGRDQm9ZWE1nWTI5dGNHeGxlR2wwZVNCT1hqSWdYeWgzYUdsamFDQnBjeUJpWVdRcFh3b2dJQ0FxTHdvZ0lHTnNZWE56SUU1aGFYWmxRbkp2WVdSd2FHRnpaU0JsZUhSbGJtUnpJRUp5YjJGa2NHaGhjMlVnZXdvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJBZEc5a2J5QlNaVzF2ZG1VZ2RYTmxiR1Z6Y3lCamIyNXpkSEoxWTNSdmNnb2dJQ0FnSUNvdkNpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIc0tJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dSMlYwSUdGc2JDQjBhR1VnWTI5c2JHbHphVzl1SUhCaGFYSnpJR2x1SUhSb1pTQndhSGx6YVdOeklIZHZjbXhrQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdZMjlzYkdsemFXOXVVR0ZwY25Nb2QyOXliR1FzSUhCaGFYSnpNU3dnY0dGcGNuTXlLU0I3Q2lBZ0lDQWdJR052Ym5OMElHSnZaR2xsY3lBOUlIZHZjbXhrTG1KdlpHbGxjenNLSUNBZ0lDQWdZMjl1YzNRZ2JpQTlJR0p2WkdsbGN5NXNaVzVuZEdnN0NpQWdJQ0FnSUd4bGRDQmlhVHNLSUNBZ0lDQWdiR1YwSUdKcU95QXZMeUJPWVdsMlpTQk9YaklnWm5SM0lRb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ0lUMDlJRzQ3SUdrckt5a2dld29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJQ0U5UFNCcE95QnFLeXNwSUhzS0lDQWdJQ0FnSUNBZ0lHSnBJRDBnWW05a2FXVnpXMmxkT3dvZ0lDQWdJQ0FnSUNBZ1ltb2dQU0JpYjJScFpYTmJhbDA3Q2dvZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtNWxaV1JDY205aFpIQm9ZWE5sUTI5c2JHbHphVzl1S0dKcExDQmlhaWtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm5SbGNuTmxZM1JwYjI1VVpYTjBLR0pwTENCaWFpd2djR0ZwY25NeExDQndZV2x5Y3pJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTWlhSMWNtNXpJR0ZzYkNCMGFHVWdZbTlrYVdWeklIZHBkR2hwYmlCaGJpQkJRVUpDTGdvZ0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNWc2RDQkJiaUJoY25KaGVTQjBieUJ6ZEc5eVpTQnlaWE4xYkhScGJtY2dZbTlrYVdWeklHbHVMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHRmhZbUpSZFdWeWVTaDNiM0pzWkN3Z1lXRmlZaXdnY21WemRXeDBLU0I3Q2lBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxjM1ZzZENBOUlGdGRPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSGR2Y214a0xtSnZaR2xsY3k1c1pXNW5kR2c3SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElHSWdQU0IzYjNKc1pDNWliMlJwWlhOYmFWMDdDZ29nSUNBZ0lDQWdJR2xtSUNoaUxtRmhZbUpPWldWa2MxVndaR0YwWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdZaTUxY0dSaGRHVkJRVUpDS0NrN0NpQWdJQ0FnSUNBZ2ZTQXZMeUJWWjJ4NUlHaGhZMnNnZFc1MGFXd2dRbTlrZVNCblpYUnpJR0ZoWW1JS0Nnb2dJQ0FnSUNBZ0lHbG1JQ2hpTG1GaFltSXViM1psY214aGNITW9ZV0ZpWWlrcElIc0tJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXdkWE5vS0dJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHNLSUNBZ0lIMEtDaUFnZlFvS0lDQXZLaW9LSUNBZ0tpQlRkRzl5WVdkbElHWnZjaUJTWVhrZ1kyRnpkR2x1WnlCa1lYUmhDaUFnSUNvdkNpQWdZMnhoYzNNZ1VtRjVZMkZ6ZEZKbGMzVnNkQ0I3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSEpoZVVaeWIyMVhiM0pzWkFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJ5WVhsVWIxZHZjbXhrQ2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJR2hwZEU1dmNtMWhiRmR2Y214a0NpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUdocGRGQnZhVzUwVjI5eWJHUUtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ2FHRnpTR2wwQ2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSE5vWVhCbENpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUdKdlpIa0tJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZHaGxJR2x1WkdWNElHOW1JSFJvWlNCb2FYUWdkSEpwWVc1bmJHVXNJR2xtSUhSb1pTQm9hWFFnYzJoaGNHVWdkMkZ6SUdFZ2RISnBiV1Z6YUFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJFYVhOMFlXNWpaU0IwYnlCMGFHVWdhR2wwTGlCWGFXeHNJR0psSUhObGRDQjBieUF0TVNCcFppQjBhR1Z5WlNCM1lYTWdibThnYUdsMENpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVsbUlIUm9aU0J5WVhrZ2MyaHZkV3hrSUhOMGIzQWdkSEpoZG1WeWMybHVaeUIwYUdVZ1ltOWthV1Z6Q2lBZ0lDQWdLaThLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZXdvZ0lDQWdJQ0IwYUdsekxuSmhlVVp5YjIxWGIzSnNaQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUhSb2FYTXVjbUY1Vkc5WGIzSnNaQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUhSb2FYTXVhR2wwVG05eWJXRnNWMjl5YkdRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjBhR2x6TG1ocGRGQnZhVzUwVjI5eWJHUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0IwYUdsekxtaGhjMGhwZENBOUlHWmhiSE5sT3dvZ0lDQWdJQ0IwYUdsekxuTm9ZWEJsSUQwZ2JuVnNiRHNLSUNBZ0lDQWdkR2hwY3k1aWIyUjVJRDBnYm5Wc2JEc0tJQ0FnSUNBZ2RHaHBjeTVvYVhSR1lXTmxTVzVrWlhnZ1BTQXRNVHNLSUNBZ0lDQWdkR2hwY3k1a2FYTjBZVzVqWlNBOUlDMHhPd29nSUNBZ0lDQjBhR2x6TG5Ob2IzVnNaRk4wYjNBZ1BTQm1ZV3h6WlRzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVbVZ6WlhRZ1lXeHNJSEpsYzNWc2RDQmtZWFJoTGdvZ0lDQWdJQ292Q2dvS0lDQWdJSEpsYzJWMEtDa2dld29nSUNBZ0lDQjBhR2x6TG5KaGVVWnliMjFYYjNKc1pDNXpaWFJhWlhKdktDazdDaUFnSUNBZ0lIUm9hWE11Y21GNVZHOVhiM0pzWkM1elpYUmFaWEp2S0NrN0NpQWdJQ0FnSUhSb2FYTXVhR2wwVG05eWJXRnNWMjl5YkdRdWMyVjBXbVZ5YnlncE93b2dJQ0FnSUNCMGFHbHpMbWhwZEZCdmFXNTBWMjl5YkdRdWMyVjBXbVZ5YnlncE93b2dJQ0FnSUNCMGFHbHpMbWhoYzBocGRDQTlJR1poYkhObE93b2dJQ0FnSUNCMGFHbHpMbk5vWVhCbElEMGdiblZzYkRzS0lDQWdJQ0FnZEdocGN5NWliMlI1SUQwZ2JuVnNiRHNLSUNBZ0lDQWdkR2hwY3k1b2FYUkdZV05sU1c1a1pYZ2dQU0F0TVRzS0lDQWdJQ0FnZEdocGN5NWthWE4wWVc1alpTQTlJQzB4T3dvZ0lDQWdJQ0IwYUdsekxuTm9iM1ZzWkZOMGIzQWdQU0JtWVd4elpUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nWVdKdmNuUUtJQ0FnSUNBcUx3b0tDaUFnSUNCaFltOXlkQ2dwSUhzS0lDQWdJQ0FnZEdocGN5NXphRzkxYkdSVGRHOXdJRDBnZEhKMVpUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTJWMElISmxjM1ZzZENCa1lYUmhMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lITmxkQ2h5WVhsR2NtOXRWMjl5YkdRc0lISmhlVlJ2VjI5eWJHUXNJR2hwZEU1dmNtMWhiRmR2Y214a0xDQm9hWFJRYjJsdWRGZHZjbXhrTENCemFHRndaU3dnWW05a2VTd2daR2x6ZEdGdVkyVXBJSHNLSUNBZ0lDQWdkR2hwY3k1eVlYbEdjbTl0VjI5eWJHUXVZMjl3ZVNoeVlYbEdjbTl0VjI5eWJHUXBPd29nSUNBZ0lDQjBhR2x6TG5KaGVWUnZWMjl5YkdRdVkyOXdlU2h5WVhsVWIxZHZjbXhrS1RzS0lDQWdJQ0FnZEdocGN5NW9hWFJPYjNKdFlXeFhiM0pzWkM1amIzQjVLR2hwZEU1dmNtMWhiRmR2Y214a0tUc0tJQ0FnSUNBZ2RHaHBjeTVvYVhSUWIybHVkRmR2Y214a0xtTnZjSGtvYUdsMFVHOXBiblJYYjNKc1pDazdDaUFnSUNBZ0lIUm9hWE11YzJoaGNHVWdQU0J6YUdGd1pUc0tJQ0FnSUNBZ2RHaHBjeTVpYjJSNUlEMGdZbTlrZVRzS0lDQWdJQ0FnZEdocGN5NWthWE4wWVc1alpTQTlJR1JwYzNSaGJtTmxPd29nSUNBZ2ZRb0tJQ0I5Q2dvZ0lHeGxkQ0JmVTJoaGNHVWtkSGx3WlhNa1UxQklSVkpGTENCZlUyaGhjR1VrZEhsd1pYTWtVRXhCVGtVc0lGOVRhR0Z3WlNSMGVYQmxjeVJDVDFnc0lGOVRhR0Z3WlNSMGVYQmxjeVJEV1V4SlRrUkZVaXdnWDFOb1lYQmxKSFI1Y0dWekpFTlBUbFpGV0ZCUExDQmZVMmhoY0dVa2RIbHdaWE1rU0VWSlIwaFVSa2tzSUY5VGFHRndaU1IwZVhCbGN5UlVVa2xOUlZOSU93b0tJQ0F2S2lvS0lDQWdLaUJTUVZsZlRVOUVSVk1LSUNBZ0tpOEtJQ0JqYjI1emRDQlNRVmxmVFU5RVJWTWdQU0I3Q2lBZ0lDQXZLaW9nUTB4UFUwVlRWQ0FxTHdvZ0lDQWdRMHhQVTBWVFZEb2dNU3dLQ2lBZ0lDQXZLaW9nUVU1WklDb3ZDaUFnSUNCQlRsazZJRElzQ2dvZ0lDQWdMeW9xSUVGTVRDQXFMd29nSUNBZ1FVeE1PaUEwQ2lBZ2ZUc0tJQ0F2S2lvS0lDQWdLaUJTWVhsTmIyUmxDaUFnSUNvdkNnb2dJRjlUYUdGd1pTUjBlWEJsY3lSVFVFaEZVa1VnUFNCVGFHRndaUzUwZVhCbGN5NVRVRWhGVWtVN0NpQWdYMU5vWVhCbEpIUjVjR1Z6SkZCTVFVNUZJRDBnVTJoaGNHVXVkSGx3WlhNdVVFeEJUa1U3Q2lBZ1gxTm9ZWEJsSkhSNWNHVnpKRUpQV0NBOUlGTm9ZWEJsTG5SNWNHVnpMa0pQV0RzS0lDQmZVMmhoY0dVa2RIbHdaWE1rUTFsTVNVNUVSVklnUFNCVGFHRndaUzUwZVhCbGN5NURXVXhKVGtSRlVqc0tJQ0JmVTJoaGNHVWtkSGx3WlhNa1EwOU9Wa1ZZVUU4Z1BTQlRhR0Z3WlM1MGVYQmxjeTVEVDA1V1JWaFFUMHhaU0VWRVVrOU9Pd29nSUY5VGFHRndaU1IwZVhCbGN5UklSVWxIU0ZSR1NTQTlJRk5vWVhCbExuUjVjR1Z6TGtoRlNVZElWRVpKUlV4RU93b2dJRjlUYUdGd1pTUjBlWEJsY3lSVVVrbE5SVk5JSUQwZ1UyaGhjR1V1ZEhsd1pYTXVWRkpKVFVWVFNEc0tDaUFnTHlvcUNpQWdJQ29nUVNCc2FXNWxJR2x1SURORUlITndZV05sSUhSb1lYUWdhVzUwWlhKelpXTjBjeUJpYjJScFpYTWdZVzVrSUhKbGRIVnliaUJ3YjJsdWRITXVDaUFnSUNvdkNpQWdZMnhoYzNNZ1VtRjVJSHNLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dabkp2YlFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUIwYndvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJrYVhKbFkzUnBiMjRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWR2hsSUhCeVpXTnBjMmx2YmlCdlppQjBhR1VnY21GNUxpQlZjMlZrSUhkb1pXNGdZMmhsWTJ0cGJtY2djR0Z5WVd4c1pXeHBkSGtnWlhSakxnb2dJQ0FnSUNvZ1FHUmxabUYxYkhRZ01DNHdNREF4Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5sZENCMGJ5QmdabUZzYzJWZ0lHbG1JSGx2ZFNCa2IyNG5kQ0IzWVc1MElIUm9aU0JTWVhrZ2RHOGdkR0ZyWlNCZ1kyOXNiR2x6YVc5dVVtVnpjRzl1YzJWZ0lHWnNZV2R6SUdsdWRHOGdZV05qYjNWdWRDQnZiaUJpYjJScFpYTWdZVzVrSUhOb1lYQmxjeTRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJSFJ5ZFdVS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nU1dZZ2MyVjBJSFJ2SUdCMGNuVmxZQ3dnZEdobElISmhlU0J6YTJsd2N5QmhibmtnYUdsMGN5QjNhWFJvSUc1dmNtMWhiQzVrYjNRb2NtRjVSR2x5WldOMGFXOXVLU0E4SURBdUNpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaUW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQmpiMnhzYVhOcGIyNUdhV3gwWlhKTllYTnJDaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXRNUW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQmpiMnhzYVhOcGIyNUdhV3gwWlhKSGNtOTFjQW9nSUNBZ0lDb2dRR1JsWm1GMWJIUWdMVEVLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWR2hsSUdsdWRHVnljMlZqZEdsdmJpQnRiMlJsTGlCVGFHOTFiR1FnWW1VZ1VtRjVMa0ZPV1N3Z1VtRjVMa0ZNVENCdmNpQlNZWGt1UTB4UFUwVlRWQzRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJRkpCV1M1QlRsa0tJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EzVnljbVZ1ZENCeVpYTjFiSFFnYjJKcVpXTjBMZ29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlhhV3hzSUdKbElITmxkQ0IwYnlCZ2RISjFaV0FnWkhWeWFXNW5JR2x1ZEdWeWMyVmpkRmR2Y214a0tDa2dhV1lnZEdobElISmhlU0JvYVhRZ1lXNTVkR2hwYm1jdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZWelpYSXRjSEp2ZG1sa1pXUWdjbVZ6ZFd4MElHTmhiR3hpWVdOckxpQlhhV3hzSUdKbElIVnpaV1FnYVdZZ2JXOWtaU0JwY3lCU1lYa3VRVXhNTGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJEVEU5VFJWTlVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFRk9XUW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkJURXdLSUNBZ0lDQXFMd29nSUNBZ1oyVjBJRnRmVTJoaGNHVWtkSGx3WlhNa1UxQklSVkpGWFNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1ZEdWeWMyVmpkRk53YUdWeVpUc0tJQ0FnSUgwS0NpQWdJQ0JuWlhRZ1cxOVRhR0Z3WlNSMGVYQmxjeVJRVEVGT1JWMG9LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJuUmxjbk5sWTNSUWJHRnVaVHNLSUNBZ0lIMEtDaUFnSUNCblpYUWdXMTlUYUdGd1pTUjBlWEJsY3lSQ1QxaGRLQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXNTBaWEp6WldOMFFtOTRPd29nSUNBZ2ZRb0tJQ0FnSUdkbGRDQmJYMU5vWVhCbEpIUjVjR1Z6SkVOWlRFbE9SRVZTWFNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1ZEdWeWMyVmpkRU52Ym5abGVEc0tJQ0FnSUgwS0NpQWdJQ0JuWlhRZ1cxOVRhR0Z3WlNSMGVYQmxjeVJEVDA1V1JWaFFUMTBvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBiblJsY25ObFkzUkRiMjUyWlhnN0NpQWdJQ0I5Q2dvZ0lDQWdaMlYwSUZ0ZlUyaGhjR1VrZEhsd1pYTWtTRVZKUjBoVVJrbGRLQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXNTBaWEp6WldOMFNHVnBaMmgwWm1sbGJHUTdDaUFnSUNCOUNnb2dJQ0FnWjJWMElGdGZVMmhoY0dVa2RIbHdaWE1rVkZKSlRVVlRTRjBvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBiblJsY25ObFkzUlVjbWx0WlhOb093b2dJQ0FnZlFvS0lDQWdJR052Ym5OMGNuVmpkRzl5S0daeWIyMHNJSFJ2S1NCN0NpQWdJQ0FnSUdsbUlDaG1jbTl0SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQm1jbTl0SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLSFJ2SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBieUE5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVabkp2YlNBOUlHWnliMjB1WTJ4dmJtVW9LVHNLSUNBZ0lDQWdkR2hwY3k1MGJ5QTlJSFJ2TG1Oc2IyNWxLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVpHbHlaV04wYVc5dUlEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdkR2hwY3k1d2NtVmphWE5wYjI0Z1BTQXdMakF3TURFN0NpQWdJQ0FnSUhSb2FYTXVZMmhsWTJ0RGIyeHNhWE5wYjI1U1pYTndiMjV6WlNBOUlIUnlkV1U3Q2lBZ0lDQWdJSFJvYVhNdWMydHBjRUpoWTJ0bVlXTmxjeUE5SUdaaGJITmxPd29nSUNBZ0lDQjBhR2x6TG1OdmJHeHBjMmx2YmtacGJIUmxjazFoYzJzZ1BTQXRNVHNLSUNBZ0lDQWdkR2hwY3k1amIyeHNhWE5wYjI1R2FXeDBaWEpIY205MWNDQTlJQzB4T3dvZ0lDQWdJQ0IwYUdsekxtMXZaR1VnUFNCU1lYa3VRVTVaT3dvZ0lDQWdJQ0IwYUdsekxuSmxjM1ZzZENBOUlHNWxkeUJTWVhsallYTjBVbVZ6ZFd4MEtDazdDaUFnSUNBZ0lIUm9hWE11YUdGelNHbDBJRDBnWm1Gc2MyVTdDZ29nSUNBZ0lDQjBhR2x6TG1OaGJHeGlZV05ySUQwZ2NtVnpkV3gwSUQwK0lIdDlPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRWJ5QnBkR1Z5YzJWamRHbHZiaUJoWjJGcGJuTjBJR0ZzYkNCaWIyUnBaWE1nYVc0Z2RHaGxJR2RwZG1WdUlGZHZjbXhrTGdvZ0lDQWdJQ29nUUhKbGRIVnliaUJVY25WbElHbG1JSFJvWlNCeVlYa2dhR2wwSUdGdWVYUm9hVzVuTENCdmRHaGxjbmRwYzJVZ1ptRnNjMlV1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdhVzUwWlhKelpXTjBWMjl5YkdRb2QyOXliR1FzSUc5d2RHbHZibk1wSUhzS0lDQWdJQ0FnZEdocGN5NXRiMlJsSUQwZ2IzQjBhVzl1Y3k1dGIyUmxJSHg4SUZKaGVTNUJUbGs3Q2lBZ0lDQWdJSFJvYVhNdWNtVnpkV3gwSUQwZ2IzQjBhVzl1Y3k1eVpYTjFiSFFnZkh3Z2JtVjNJRkpoZVdOaGMzUlNaWE4xYkhRb0tUc0tJQ0FnSUNBZ2RHaHBjeTV6YTJsd1FtRmphMlpoWTJWeklEMGdJU0Z2Y0hScGIyNXpMbk5yYVhCQ1lXTnJabUZqWlhNN0NpQWdJQ0FnSUhSb2FYTXVZMjlzYkdsemFXOXVSbWxzZEdWeVRXRnpheUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbU52Ykd4cGMybHZia1pwYkhSbGNrMWhjMnNnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnYjNCMGFXOXVjeTVqYjJ4c2FYTnBiMjVHYVd4MFpYSk5ZWE5ySURvZ0xURTdDaUFnSUNBZ0lIUm9hWE11WTI5c2JHbHphVzl1Um1sc2RHVnlSM0p2ZFhBZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1amIyeHNhWE5wYjI1R2FXeDBaWEpIY205MWNDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QnZjSFJwYjI1ekxtTnZiR3hwYzJsdmJrWnBiSFJsY2tkeWIzVndJRG9nTFRFN0NpQWdJQ0FnSUhSb2FYTXVZMmhsWTJ0RGIyeHNhWE5wYjI1U1pYTndiMjV6WlNBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1Ob1pXTnJRMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdiM0IwYVc5dWN5NWphR1ZqYTBOdmJHeHBjMmx2YmxKbGMzQnZibk5sSURvZ2RISjFaVHNLQ2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG1aeWIyMHBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtWnliMjB1WTI5d2VTaHZjSFJwYjI1ekxtWnliMjBwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1MGJ5a2dld29nSUNBZ0lDQWdJSFJvYVhNdWRHOHVZMjl3ZVNodmNIUnBiMjV6TG5SdktUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2RHaHBjeTVqWVd4c1ltRmpheUE5SUc5d2RHbHZibk11WTJGc2JHSmhZMnNnZkh3Z0tDZ3BJRDArSUh0OUtUc0tDaUFnSUNBZ0lIUm9hWE11YUdGelNHbDBJRDBnWm1Gc2MyVTdDaUFnSUNBZ0lIUm9hWE11Y21WemRXeDBMbkpsYzJWMEtDazdDaUFnSUNBZ0lIUm9hWE11ZFhCa1lYUmxSR2x5WldOMGFXOXVLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVoyVjBRVUZDUWloMGJYQkJRVUpDSkRFcE93b2dJQ0FnSUNCMGJYQkJjbkpoZVM1c1pXNW5kR2dnUFNBd093b2dJQ0FnSUNCM2IzSnNaQzVpY205aFpIQm9ZWE5sTG1GaFltSlJkV1Z5ZVNoM2IzSnNaQ3dnZEcxd1FVRkNRaVF4TENCMGJYQkJjbkpoZVNrN0NpQWdJQ0FnSUhSb2FYTXVhVzUwWlhKelpXTjBRbTlrYVdWektIUnRjRUZ5Y21GNUtUc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhR0Z6U0dsME93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUYUc5dmRDQmhJSEpoZVNCaGRDQmhJR0p2Wkhrc0lHZGxkQ0JpWVdOcklHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0JvYVhRdUNpQWdJQ0FnS2lCQVpHVndjbVZqWVhSbFpDQkFjR0Z5WVcwZ2NtVnpkV3gwSUhObGRDQjBhR1VnY21WemRXeDBJSEJ5YjNCbGNuUjVJRzltSUhSb1pTQlNZWGtnYVc1emRHVmhaQzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnBiblJsY25ObFkzUkNiMlI1S0dKdlpIa3NJSEpsYzNWc2RDa2dld29nSUNBZ0lDQnBaaUFvY21WemRXeDBLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaWE4xYkhRZ1BTQnlaWE4xYkhRN0NpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkVhWEpsWTNScGIyNG9LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ1kyaGxZMnREYjJ4c2FYTnBiMjVTWlhOd2IyNXpaU0E5SUhSb2FYTXVZMmhsWTJ0RGIyeHNhWE5wYjI1U1pYTndiMjV6WlRzS0NpQWdJQ0FnSUdsbUlDaGphR1ZqYTBOdmJHeHBjMmx2YmxKbGMzQnZibk5sSUNZbUlDRmliMlI1TG1OdmJHeHBjMmx2YmxKbGMzQnZibk5sS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb0tIUm9hWE11WTI5c2JHbHphVzl1Um1sc2RHVnlSM0p2ZFhBZ0ppQmliMlI1TG1OdmJHeHBjMmx2YmtacGJIUmxjazFoYzJzcElEMDlQU0F3SUh4OElDaGliMlI1TG1OdmJHeHBjMmx2YmtacGJIUmxja2R5YjNWd0lDWWdkR2hwY3k1amIyeHNhWE5wYjI1R2FXeDBaWEpOWVhOcktTQTlQVDBnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWTI5dWMzUWdlR2tnUFNCcGJuUmxjbk5sWTNSQ2IyUjVYM2hwT3dvZ0lDQWdJQ0JqYjI1emRDQnhhU0E5SUdsdWRHVnljMlZqZEVKdlpIbGZjV2s3Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2dUaUE5SUdKdlpIa3VjMmhoY0dWekxteGxibWQwYURzZ2FTQThJRTQ3SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElITm9ZWEJsSUQwZ1ltOWtlUzV6YUdGd1pYTmJhVjA3Q2dvZ0lDQWdJQ0FnSUdsbUlDaGphR1ZqYTBOdmJHeHBjMmx2YmxKbGMzQnZibk5sSUNZbUlDRnphR0Z3WlM1amIyeHNhWE5wYjI1U1pYTndiMjV6WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdJQzh2SUZOcmFYQUtJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR0p2WkhrdWNYVmhkR1Z5Ym1sdmJpNXRkV3gwS0dKdlpIa3VjMmhoY0dWUGNtbGxiblJoZEdsdmJuTmJhVjBzSUhGcEtUc0tJQ0FnSUNBZ0lDQmliMlI1TG5GMVlYUmxjbTVwYjI0dWRtMTFiSFFvWW05a2VTNXphR0Z3WlU5bVpuTmxkSE5iYVYwc0lIaHBLVHNLSUNBZ0lDQWdJQ0I0YVM1MllXUmtLR0p2WkhrdWNHOXphWFJwYjI0c0lIaHBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHVkR1Z5YzJWamRGTm9ZWEJsS0hOb1lYQmxMQ0J4YVN3Z2VHa3NJR0p2WkhrcE93b0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXlaWE4xYkhRdWMyaHZkV3hrVTNSdmNDa2dld29nSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZOb2IyOTBJR0VnY21GNUlHRjBJR0Z1SUdGeWNtRjVJR0p2WkdsbGN5d2daMlYwSUdKaFkyc2dhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdkR2hsSUdocGRDNEtJQ0FnSUNBcUlFQndZWEpoYlNCaWIyUnBaWE1nUVc0Z1lYSnlZWGtnYjJZZ1FtOWtlU0J2WW1wbFkzUnpMZ29nSUNBZ0lDb2dRR1JsY0hKbFkyRjBaV1FnUUhCaGNtRnRJSEpsYzNWc2RDQnpaWFFnZEdobElISmxjM1ZzZENCd2NtOXdaWEowZVNCdlppQjBhR1VnVW1GNUlHbHVjM1JsWVdRdUNpQWdJQ0FnS2dvZ0lDQWdJQ292Q2dvS0lDQWdJR2x1ZEdWeWMyVmpkRUp2WkdsbGN5aGliMlJwWlhNc0lISmxjM1ZzZENrZ2V3b2dJQ0FnSUNCcFppQW9jbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTjFiSFFnUFNCeVpYTjFiSFE3Q2lBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWRWFYSmxZM1JwYjI0b0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQmliMlJwWlhNdWJHVnVaM1JvT3lBaGRHaHBjeTV5WlhOMWJIUXVjMmh2ZFd4a1UzUnZjQ0FtSmlCcElEd2diRHNnYVNzcktTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1cGJuUmxjbk5sWTNSQ2IyUjVLR0p2WkdsbGMxdHBYU2s3Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdaR2x5WldOMGFXOXVJSFpsWTNSdmNpNEtJQ0FnSUNBcUx3b0tDaUFnSUNCMWNHUmhkR1ZFYVhKbFkzUnBiMjRvS1NCN0NpQWdJQ0FnSUhSb2FYTXVkRzh1ZG5OMVlpaDBhR2x6TG1aeWIyMHNJSFJvYVhNdVpHbHlaV04wYVc5dUtUc0tJQ0FnSUNBZ2RHaHBjeTVrYVhKbFkzUnBiMjR1Ym05eWJXRnNhWHBsS0NrN0NpQWdJQ0I5Q2dvZ0lDQWdhVzUwWlhKelpXTjBVMmhoY0dVb2MyaGhjR1VzSUhGMVlYUXNJSEJ2YzJsMGFXOXVMQ0JpYjJSNUtTQjdDaUFnSUNBZ0lHTnZibk4wSUdaeWIyMGdQU0IwYUdsekxtWnliMjA3SUM4dklFTm9aV05yYVc1bklHSnZkVzVrYVc1blUzQm9aWEpsQ2dvZ0lDQWdJQ0JqYjI1emRDQmthWE4wWVc1alpTQTlJR1JwYzNSaGJtTmxSbkp2YlVsdWRHVnljMlZqZEdsdmJpaG1jbTl0TENCMGFHbHpMbVJwY21WamRHbHZiaXdnY0c5emFYUnBiMjRwT3dvS0lDQWdJQ0FnYVdZZ0tHUnBjM1JoYm1ObElENGdjMmhoY0dVdVltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUdsdWRHVnljMlZqZEUxbGRHaHZaQ0E5SUhSb2FYTmJjMmhoY0dVdWRIbHdaVjA3Q2dvZ0lDQWdJQ0JwWmlBb2FXNTBaWEp6WldOMFRXVjBhRzlrS1NCN0NpQWdJQ0FnSUNBZ2FXNTBaWEp6WldOMFRXVjBhRzlrTG1OaGJHd29kR2hwY3l3Z2MyaGhjR1VzSUhGMVlYUXNJSEJ2YzJsMGFXOXVMQ0JpYjJSNUxDQnphR0Z3WlNrN0NpQWdJQ0FnSUgwS0lDQWdJSDBLQ2lBZ0lDQmZhVzUwWlhKelpXTjBRbTk0S0dKdmVDd2djWFZoZEN3Z2NHOXphWFJwYjI0c0lHSnZaSGtzSUhKbGNHOXlkR1ZrVTJoaGNHVXBJSHNLSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJsdWRHVnljMlZqZEVOdmJuWmxlQ2hpYjNndVkyOXVkbVY0VUc5c2VXaGxaSEp2YmxKbGNISmxjMlZ1ZEdGMGFXOXVMQ0J4ZFdGMExDQndiM05wZEdsdmJpd2dZbTlrZVN3Z2NtVndiM0owWldSVGFHRndaU2s3Q2lBZ0lDQjlDZ29nSUNBZ1gybHVkR1Z5YzJWamRGQnNZVzVsS0hOb1lYQmxMQ0J4ZFdGMExDQndiM05wZEdsdmJpd2dZbTlrZVN3Z2NtVndiM0owWldSVGFHRndaU2tnZXdvZ0lDQWdJQ0JqYjI1emRDQm1jbTl0SUQwZ2RHaHBjeTVtY205dE93b2dJQ0FnSUNCamIyNXpkQ0IwYnlBOUlIUm9hWE11ZEc4N0NpQWdJQ0FnSUdOdmJuTjBJR1JwY21WamRHbHZiaUE5SUhSb2FYTXVaR2x5WldOMGFXOXVPeUF2THlCSFpYUWdjR3hoYm1VZ2JtOXliV0ZzQ2dvZ0lDQWdJQ0JqYjI1emRDQjNiM0pzWkU1dmNtMWhiQ0E5SUc1bGR5QldaV016S0RBc0lEQXNJREVwT3dvZ0lDQWdJQ0J4ZFdGMExuWnRkV3gwS0hkdmNteGtUbTl5YldGc0xDQjNiM0pzWkU1dmNtMWhiQ2s3Q2lBZ0lDQWdJR052Ym5OMElHeGxiaUE5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUdaeWIyMHVkbk4xWWlod2IzTnBkR2x2Yml3Z2JHVnVLVHNLSUNBZ0lDQWdZMjl1YzNRZ2NHeGhibVZVYjBaeWIyMGdQU0JzWlc0dVpHOTBLSGR2Y214a1RtOXliV0ZzS1RzS0lDQWdJQ0FnZEc4dWRuTjFZaWh3YjNOcGRHbHZiaXdnYkdWdUtUc0tJQ0FnSUNBZ1kyOXVjM1FnY0d4aGJtVlViMVJ2SUQwZ2JHVnVMbVJ2ZENoM2IzSnNaRTV2Y20xaGJDazdDZ29nSUNBZ0lDQnBaaUFvY0d4aGJtVlViMFp5YjIwZ0tpQndiR0Z1WlZSdlZHOGdQaUF3S1NCN0NpQWdJQ0FnSUNBZ0x5OGdJbVp5YjIwaUlHRnVaQ0FpZEc4aUlHRnlaU0J2YmlCMGFHVWdjMkZ0WlNCemFXUmxJRzltSUhSb1pTQndiR0Z1WlM0dUxpQmlZV2xzSUc5MWRBb2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tHWnliMjB1WkdsemRHRnVZMlZVYnloMGJ5a2dQQ0J3YkdGdVpWUnZSbkp2YlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWTI5dWMzUWdibDlrYjNSZlpHbHlJRDBnZDI5eWJHUk9iM0p0WVd3dVpHOTBLR1JwY21WamRHbHZiaWs3Q2dvZ0lDQWdJQ0JwWmlBb1RXRjBhQzVoWW5Nb2JsOWtiM1JmWkdseUtTQThJSFJvYVhNdWNISmxZMmx6YVc5dUtTQjdDaUFnSUNBZ0lDQWdMeThnVG04Z2FXNTBaWEp6WldOMGFXOXVDaUFnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCamIyNXpkQ0J3YkdGdVpWQnZhVzUwVkc5R2NtOXRJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdaR2x5WDNOallXeGxaRjkzYVhSb1gzUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0JqYjI1emRDQm9hWFJRYjJsdWRGZHZjbXhrSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ1puSnZiUzUyYzNWaUtIQnZjMmwwYVc5dUxDQndiR0Z1WlZCdmFXNTBWRzlHY205dEtUc0tJQ0FnSUNBZ1kyOXVjM1FnZENBOUlDMTNiM0pzWkU1dmNtMWhiQzVrYjNRb2NHeGhibVZRYjJsdWRGUnZSbkp2YlNrZ0x5QnVYMlJ2ZEY5a2FYSTdDaUFnSUNBZ0lHUnBjbVZqZEdsdmJpNXpZMkZzWlNoMExDQmthWEpmYzJOaGJHVmtYM2RwZEdoZmRDazdDaUFnSUNBZ0lHWnliMjB1ZG1Ga1pDaGthWEpmYzJOaGJHVmtYM2RwZEdoZmRDd2dhR2wwVUc5cGJuUlhiM0pzWkNrN0NpQWdJQ0FnSUhSb2FYTXVjbVZ3YjNKMFNXNTBaWEp6WldOMGFXOXVLSGR2Y214a1RtOXliV0ZzTENCb2FYUlFiMmx1ZEZkdmNteGtMQ0J5WlhCdmNuUmxaRk5vWVhCbExDQmliMlI1TENBdE1TazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQjBhR1VnZDI5eWJHUWdRVUZDUWlCdlppQjBhR1VnY21GNUxnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRFRkJRa0lvWVdGaVlpa2dld29nSUNBZ0lDQmpiMjV6ZENCN0NpQWdJQ0FnSUNBZ2JHOTNaWEpDYjNWdVpDd0tJQ0FnSUNBZ0lDQjFjSEJsY2tKdmRXNWtDaUFnSUNBZ0lIMGdQU0JoWVdKaU93b2dJQ0FnSUNCamIyNXpkQ0IwYnlBOUlIUm9hWE11ZEc4N0NpQWdJQ0FnSUdOdmJuTjBJR1p5YjIwZ1BTQjBhR2x6TG1aeWIyMDdDaUFnSUNBZ0lHeHZkMlZ5UW05MWJtUXVlQ0E5SUUxaGRHZ3ViV2x1S0hSdkxuZ3NJR1p5YjIwdWVDazdDaUFnSUNBZ0lHeHZkMlZ5UW05MWJtUXVlU0E5SUUxaGRHZ3ViV2x1S0hSdkxua3NJR1p5YjIwdWVTazdDaUFnSUNBZ0lHeHZkMlZ5UW05MWJtUXVlaUE5SUUxaGRHZ3ViV2x1S0hSdkxub3NJR1p5YjIwdWVpazdDaUFnSUNBZ0lIVndjR1Z5UW05MWJtUXVlQ0E5SUUxaGRHZ3ViV0Y0S0hSdkxuZ3NJR1p5YjIwdWVDazdDaUFnSUNBZ0lIVndjR1Z5UW05MWJtUXVlU0E5SUUxaGRHZ3ViV0Y0S0hSdkxua3NJR1p5YjIwdWVTazdDaUFnSUNBZ0lIVndjR1Z5UW05MWJtUXVlaUE5SUUxaGRHZ3ViV0Y0S0hSdkxub3NJR1p5YjIwdWVpazdDaUFnSUNCOUNnb2dJQ0FnWDJsdWRHVnljMlZqZEVobGFXZG9kR1pwWld4a0tITm9ZWEJsTENCeGRXRjBMQ0J3YjNOcGRHbHZiaXdnWW05a2VTd2djbVZ3YjNKMFpXUlRhR0Z3WlNrZ2V3b2dJQ0FnSUNCemFHRndaUzVrWVhSaE93b2dJQ0FnSUNCemFHRndaUzVsYkdWdFpXNTBVMmw2WlRzZ0x5OGdRMjl1ZG1WeWRDQjBhR1VnY21GNUlIUnZJR3h2WTJGc0lHaGxhV2RvZEdacFpXeGtJR052YjNKa2FXNWhkR1Z6Q2dvZ0lDQWdJQ0JqYjI1emRDQnNiMk5oYkZKaGVTQTlJR2x1ZEdWeWMyVmpkRWhsYVdkb2RHWnBaV3hrWDJ4dlkyRnNVbUY1T3lBdkwyNWxkeUJTWVhrb2RHaHBjeTVtY205dExDQjBhR2x6TG5SdktUc0tDaUFnSUNBZ0lHeHZZMkZzVW1GNUxtWnliMjB1WTI5d2VTaDBhR2x6TG1aeWIyMHBPd29nSUNBZ0lDQnNiMk5oYkZKaGVTNTBieTVqYjNCNUtIUm9hWE11ZEc4cE93b2dJQ0FnSUNCVWNtRnVjMlp2Y20wdWNHOXBiblJVYjB4dlkyRnNSbkpoYldVb2NHOXphWFJwYjI0c0lIRjFZWFFzSUd4dlkyRnNVbUY1TG1aeWIyMHNJR3h2WTJGc1VtRjVMbVp5YjIwcE93b2dJQ0FnSUNCVWNtRnVjMlp2Y20wdWNHOXBiblJVYjB4dlkyRnNSbkpoYldVb2NHOXphWFJwYjI0c0lIRjFZWFFzSUd4dlkyRnNVbUY1TG5SdkxDQnNiMk5oYkZKaGVTNTBieWs3Q2lBZ0lDQWdJR3h2WTJGc1VtRjVMblZ3WkdGMFpVUnBjbVZqZEdsdmJpZ3BPeUF2THlCSFpYUWdkR2hsSUdsdVpHVjRJRzltSUhSb1pTQmtZWFJoSUhCdmFXNTBjeUIwYnlCMFpYTjBJR0ZuWVdsdWMzUUtDaUFnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnYVc1MFpYSnpaV04wU0dWcFoyaDBabWxsYkdSZmFXNWtaWGc3Q2lBZ0lDQWdJR3hsZENCcFRXbHVXRHNLSUNBZ0lDQWdiR1YwSUdsTmFXNVpPd29nSUNBZ0lDQnNaWFFnYVUxaGVGZzdDaUFnSUNBZ0lHeGxkQ0JwVFdGNFdUc2dMeThnVTJWMElIUnZJRzFoZUFvS0lDQWdJQ0FnYVUxcGJsZ2dQU0JwVFdsdVdTQTlJREE3Q2lBZ0lDQWdJR2xOWVhoWUlEMGdhVTFoZUZrZ1BTQnphR0Z3WlM1a1lYUmhMbXhsYm1kMGFDQXRJREU3Q2lBZ0lDQWdJR052Ym5OMElHRmhZbUlnUFNCdVpYY2dRVUZDUWlncE93b2dJQ0FnSUNCc2IyTmhiRkpoZVM1blpYUkJRVUpDS0dGaFltSXBPd29nSUNBZ0lDQnphR0Z3WlM1blpYUkpibVJsZUU5bVVHOXphWFJwYjI0b1lXRmlZaTVzYjNkbGNrSnZkVzVrTG5nc0lHRmhZbUl1Ykc5M1pYSkNiM1Z1WkM1NUxDQnBibVJsZUN3Z2RISjFaU2s3Q2lBZ0lDQWdJR2xOYVc1WUlEMGdUV0YwYUM1dFlYZ29hVTFwYmxnc0lHbHVaR1Y0V3pCZEtUc0tJQ0FnSUNBZ2FVMXBibGtnUFNCTllYUm9MbTFoZUNocFRXbHVXU3dnYVc1a1pYaGJNVjBwT3dvZ0lDQWdJQ0J6YUdGd1pTNW5aWFJKYm1SbGVFOW1VRzl6YVhScGIyNG9ZV0ZpWWk1MWNIQmxja0p2ZFc1a0xuZ3NJR0ZoWW1JdWRYQndaWEpDYjNWdVpDNTVMQ0JwYm1SbGVDd2dkSEoxWlNrN0NpQWdJQ0FnSUdsTllYaFlJRDBnVFdGMGFDNXRhVzRvYVUxaGVGZ3NJR2x1WkdWNFd6QmRJQ3NnTVNrN0NpQWdJQ0FnSUdsTllYaFpJRDBnVFdGMGFDNXRhVzRvYVUxaGVGa3NJR2x1WkdWNFd6RmRJQ3NnTVNrN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdhVTFwYmxnN0lHa2dQQ0JwVFdGNFdEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJR2xOYVc1Wk95QnFJRHdnYVUxaGVGazdJR29yS3lrZ2V3b2dJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjbVZ6ZFd4MExuTm9iM1ZzWkZOMGIzQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJSE5vWVhCbExtZGxkRUZoWW1KQmRFbHVaR1Y0S0drc0lHb3NJR0ZoWW1JcE93b0tJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlXRmlZaTV2ZG1WeWJHRndjMUpoZVNoc2IyTmhiRkpoZVNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3Q2lBZ0lDQWdJQ0FnSUNCOUlDOHZJRXh2ZDJWeUlIUnlhV0Z1WjJ4bENnb0tJQ0FnSUNBZ0lDQWdJSE5vWVhCbExtZGxkRU52Ym5abGVGUnlhV0Z1WjJ4bFVHbHNiR0Z5S0drc0lHb3NJR1poYkhObEtUc0tJQ0FnSUNBZ0lDQWdJRlJ5WVc1elptOXliUzV3YjJsdWRGUnZWMjl5YkdSR2NtRnRaU2h3YjNOcGRHbHZiaXdnY1hWaGRDd2djMmhoY0dVdWNHbHNiR0Z5VDJabWMyVjBMQ0IzYjNKc1pGQnBiR3hoY2s5bVpuTmxkQ2s3Q2dvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYVc1MFpYSnpaV04wUTI5dWRtVjRLSE5vWVhCbExuQnBiR3hoY2tOdmJuWmxlQ3dnY1hWaGRDd2dkMjl5YkdSUWFXeHNZWEpQWm1aelpYUXNJR0p2Wkhrc0lISmxjRzl5ZEdWa1UyaGhjR1VzSUdsdWRHVnljMlZqZEVOdmJuWmxlRTl3ZEdsdmJuTXBPd29LSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbGMzVnNkQzV6YUc5MWJHUlRkRzl3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJSDBnTHk4Z1ZYQndaWElnZEhKcFlXNW5iR1VLQ2dvZ0lDQWdJQ0FnSUNBZ2MyaGhjR1V1WjJWMFEyOXVkbVY0VkhKcFlXNW5iR1ZRYVd4c1lYSW9hU3dnYWl3Z2RISjFaU2s3Q2lBZ0lDQWdJQ0FnSUNCVWNtRnVjMlp2Y20wdWNHOXBiblJVYjFkdmNteGtSbkpoYldVb2NHOXphWFJwYjI0c0lIRjFZWFFzSUhOb1lYQmxMbkJwYkd4aGNrOW1abk5sZEN3Z2QyOXliR1JRYVd4c1lYSlBabVp6WlhRcE93b0tJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgybHVkR1Z5YzJWamRFTnZiblpsZUNoemFHRndaUzV3YVd4c1lYSkRiMjUyWlhnc0lIRjFZWFFzSUhkdmNteGtVR2xzYkdGeVQyWm1jMlYwTENCaWIyUjVMQ0J5WlhCdmNuUmxaRk5vWVhCbExDQnBiblJsY25ObFkzUkRiMjUyWlhoUGNIUnBiMjV6S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0lDQWdJSDBLQ2lBZ0lDQmZhVzUwWlhKelpXTjBVM0JvWlhKbEtITndhR1Z5WlN3Z2NYVmhkQ3dnY0c5emFYUnBiMjRzSUdKdlpIa3NJSEpsY0c5eWRHVmtVMmhoY0dVcElIc0tJQ0FnSUNBZ1kyOXVjM1FnWm5KdmJTQTlJSFJvYVhNdVpuSnZiVHNLSUNBZ0lDQWdZMjl1YzNRZ2RHOGdQU0IwYUdsekxuUnZPd29nSUNBZ0lDQmpiMjV6ZENCeUlEMGdjM0JvWlhKbExuSmhaR2wxY3pzS0lDQWdJQ0FnWTI5dWMzUWdZU0E5SUNoMGJ5NTRJQzBnWm5KdmJTNTRLU0FxS2lBeUlDc2dLSFJ2TG5rZ0xTQm1jbTl0TG5rcElDb3FJRElnS3lBb2RHOHVlaUF0SUdaeWIyMHVlaWtnS2lvZ01qc0tJQ0FnSUNBZ1kyOXVjM1FnWWlBOUlESWdLaUFvS0hSdkxuZ2dMU0JtY205dExuZ3BJQ29nS0daeWIyMHVlQ0F0SUhCdmMybDBhVzl1TG5ncElDc2dLSFJ2TG5rZ0xTQm1jbTl0TG5rcElDb2dLR1p5YjIwdWVTQXRJSEJ2YzJsMGFXOXVMbmtwSUNzZ0tIUnZMbm9nTFNCbWNtOXRMbm9wSUNvZ0tHWnliMjB1ZWlBdElIQnZjMmwwYVc5dUxub3BLVHNLSUNBZ0lDQWdZMjl1YzNRZ1l5QTlJQ2htY205dExuZ2dMU0J3YjNOcGRHbHZiaTU0S1NBcUtpQXlJQ3NnS0daeWIyMHVlU0F0SUhCdmMybDBhVzl1TG5rcElDb3FJRElnS3lBb1puSnZiUzU2SUMwZ2NHOXphWFJwYjI0dWVpa2dLaW9nTWlBdElISWdLaW9nTWpzS0lDQWdJQ0FnWTI5dWMzUWdaR1ZzZEdFZ1BTQmlJQ29xSURJZ0xTQTBJQ29nWVNBcUlHTTdDaUFnSUNBZ0lHTnZibk4wSUdsdWRHVnljMlZqZEdsdmJsQnZhVzUwSUQwZ1VtRjVYMmx1ZEdWeWMyVmpkRk53YUdWeVpWOXBiblJsY25ObFkzUnBiMjVRYjJsdWREc0tJQ0FnSUNBZ1kyOXVjM1FnYm05eWJXRnNJRDBnVW1GNVgybHVkR1Z5YzJWamRGTndhR1Z5WlY5dWIzSnRZV3c3Q2dvZ0lDQWdJQ0JwWmlBb1pHVnNkR0VnUENBd0tTQjdDaUFnSUNBZ0lDQWdMeThnVG04Z2FXNTBaWEp6WldOMGFXOXVDaUFnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHUmxiSFJoSUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnTHk4Z2MybHVaMnhsSUdsdWRHVnljMlZqZEdsdmJpQndiMmx1ZEFvZ0lDQWdJQ0FnSUdaeWIyMHViR1Z5Y0NoMGJ5d2daR1ZzZEdFc0lHbHVkR1Z5YzJWamRHbHZibEJ2YVc1MEtUc0tJQ0FnSUNBZ0lDQnBiblJsY25ObFkzUnBiMjVRYjJsdWRDNTJjM1ZpS0hCdmMybDBhVzl1TENCdWIzSnRZV3dwT3dvZ0lDQWdJQ0FnSUc1dmNtMWhiQzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsY0c5eWRFbHVkR1Z5YzJWamRHbHZiaWh1YjNKdFlXd3NJR2x1ZEdWeWMyVmpkR2x2YmxCdmFXNTBMQ0J5WlhCdmNuUmxaRk5vWVhCbExDQmliMlI1TENBdE1TazdDaUFnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWkRFZ1BTQW9MV0lnTFNCTllYUm9Mbk54Y25Rb1pHVnNkR0VwS1NBdklDZ3lJQ29nWVNrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWkRJZ1BTQW9MV0lnS3lCTllYUm9Mbk54Y25Rb1pHVnNkR0VwS1NBdklDZ3lJQ29nWVNrN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2hrTVNBK1BTQXdJQ1ltSUdReElEdzlJREVwSUhzS0lDQWdJQ0FnSUNBZ0lHWnliMjB1YkdWeWNDaDBieXdnWkRFc0lHbHVkR1Z5YzJWamRHbHZibEJ2YVc1MEtUc0tJQ0FnSUNBZ0lDQWdJR2x1ZEdWeWMyVmpkR2x2YmxCdmFXNTBMblp6ZFdJb2NHOXphWFJwYjI0c0lHNXZjbTFoYkNrN0NpQWdJQ0FnSUNBZ0lDQnViM0p0WVd3dWJtOXliV0ZzYVhwbEtDazdDaUFnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjRzl5ZEVsdWRHVnljMlZqZEdsdmJpaHViM0p0WVd3c0lHbHVkR1Z5YzJWamRHbHZibEJ2YVc1MExDQnlaWEJ2Y25SbFpGTm9ZWEJsTENCaWIyUjVMQ0F0TVNrN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXlaWE4xYkhRdWMyaHZkV3hrVTNSdmNDa2dld29nSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnYVdZZ0tHUXlJRDQ5SURBZ0ppWWdaRElnUEQwZ01Ta2dld29nSUNBZ0lDQWdJQ0FnWm5KdmJTNXNaWEp3S0hSdkxDQmtNaXdnYVc1MFpYSnpaV04wYVc5dVVHOXBiblFwT3dvZ0lDQWdJQ0FnSUNBZ2FXNTBaWEp6WldOMGFXOXVVRzlwYm5RdWRuTjFZaWh3YjNOcGRHbHZiaXdnYm05eWJXRnNLVHNLSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiQzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21Wd2IzSjBTVzUwWlhKelpXTjBhVzl1S0c1dmNtMWhiQ3dnYVc1MFpYSnpaV04wYVc5dVVHOXBiblFzSUhKbGNHOXlkR1ZrVTJoaGNHVXNJR0p2Wkhrc0lDMHhLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtDaUFnSUNCZmFXNTBaWEp6WldOMFEyOXVkbVY0S0hOb1lYQmxMQ0J4ZFdGMExDQndiM05wZEdsdmJpd2dZbTlrZVN3Z2NtVndiM0owWldSVGFHRndaU3dnYjNCMGFXOXVjeWtnZXdvZ0lDQWdJQ0JqYjI1emRDQnViM0p0WVd3Z1BTQnBiblJsY25ObFkzUkRiMjUyWlhoZmJtOXliV0ZzT3dvZ0lDQWdJQ0JqYjI1emRDQjJaV04wYjNJZ1BTQnBiblJsY25ObFkzUkRiMjUyWlhoZmRtVmpkRzl5T3dvZ0lDQWdJQ0JqYjI1emRDQm1ZV05sVEdsemRDQTlJRzl3ZEdsdmJuTWdKaVlnYjNCMGFXOXVjeTVtWVdObFRHbHpkQ0I4ZkNCdWRXeHNPeUF2THlCRGFHVmphMmx1WnlCbVlXTmxjd29LSUNBZ0lDQWdZMjl1YzNRZ1ptRmpaWE1nUFNCemFHRndaUzVtWVdObGN6c0tJQ0FnSUNBZ1kyOXVjM1FnZG1WeWRHbGpaWE1nUFNCemFHRndaUzUyWlhKMGFXTmxjenNLSUNBZ0lDQWdZMjl1YzNRZ2JtOXliV0ZzY3lBOUlITm9ZWEJsTG1aaFkyVk9iM0p0WVd4ek93b2dJQ0FnSUNCamIyNXpkQ0JrYVhKbFkzUnBiMjRnUFNCMGFHbHpMbVJwY21WamRHbHZianNLSUNBZ0lDQWdZMjl1YzNRZ1puSnZiU0E5SUhSb2FYTXVabkp2YlRzS0lDQWdJQ0FnWTI5dWMzUWdkRzhnUFNCMGFHbHpMblJ2T3dvZ0lDQWdJQ0JqYjI1emRDQm1jbTl0Vkc5RWFYTjBZVzVqWlNBOUlHWnliMjB1WkdsemRHRnVZMlZVYnloMGJ5azdDaUFnSUNBZ0lHTnZibk4wSUU1bVlXTmxjeUE5SUdaaFkyVk1hWE4wSUQ4Z1ptRmpaVXhwYzNRdWJHVnVaM1JvSURvZ1ptRmpaWE11YkdWdVozUm9Pd29nSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCMGFHbHpMbkpsYzNWc2REc0tDaUFnSUNBZ0lHWnZjaUFvYkdWMElHb2dQU0F3T3lBaGNtVnpkV3gwTG5Ob2IzVnNaRk4wYjNBZ0ppWWdhaUE4SUU1bVlXTmxjenNnYWlzcktTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1pta2dQU0JtWVdObFRHbHpkQ0EvSUdaaFkyVk1hWE4wVzJwZElEb2dhanNLSUNBZ0lDQWdJQ0JqYjI1emRDQm1ZV05sSUQwZ1ptRmpaWE5iWm1sZE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdaaFkyVk9iM0p0WVd3Z1BTQnViM0p0WVd4elcyWnBYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnhJRDBnY1hWaGREc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCNElEMGdjRzl6YVhScGIyNDdJQzh2SUdSbGRHVnliV2x1WlNCcFppQnlZWGtnYVc1MFpYSnpaV04wY3lCMGFHVWdjR3hoYm1VZ2IyWWdkR2hsSUdaaFkyVUtJQ0FnSUNBZ0lDQXZMeUJ1YjNSbE9pQjBhR2x6SUhkdmNtdHpJSEpsWjJGeVpHeGxjM01nYjJZZ2RHaGxJR1JwY21WamRHbHZiaUJ2WmlCMGFHVWdabUZqWlNCdWIzSnRZV3dLSUNBZ0lDQWdJQ0F2THlCSFpYUWdjR3hoYm1VZ2NHOXBiblFnYVc0Z2QyOXliR1FnWTI5dmNtUnBibUYwWlhNdUxpNEtDaUFnSUNBZ0lDQWdkbVZqZEc5eUxtTnZjSGtvZG1WeWRHbGpaWE5iWm1GalpWc3dYVjBwT3dvZ0lDQWdJQ0FnSUhFdWRtMTFiSFFvZG1WamRHOXlMQ0IyWldOMGIzSXBPd29nSUNBZ0lDQWdJSFpsWTNSdmNpNTJZV1JrS0hnc0lIWmxZM1J2Y2lrN0lDOHZJQzR1TG1KMWRDQnRZV3RsSUdsMElISmxiR0YwYVhabElIUnZJSFJvWlNCeVlYa2dabkp2YlM0Z1YyVW5iR3dnWm1sNElIUm9hWE1nYkdGMFpYSXVDZ29nSUNBZ0lDQWdJSFpsWTNSdmNpNTJjM1ZpS0daeWIyMHNJSFpsWTNSdmNpazdJQzh2SUVkbGRDQndiR0Z1WlNCdWIzSnRZV3dLQ2lBZ0lDQWdJQ0FnY1M1MmJYVnNkQ2htWVdObFRtOXliV0ZzTENCdWIzSnRZV3dwT3lBdkx5QkpaaUIwYUdseklHUnZkQ0J3Y205a2RXTjBJR2x6SUc1bFoyRjBhWFpsTENCM1pTQm9ZWFpsSUhOdmJXVjBhR2x1WnlCcGJuUmxjbVZ6ZEdsdVp3b0tJQ0FnSUNBZ0lDQmpiMjV6ZENCa2IzUWdQU0JrYVhKbFkzUnBiMjR1Wkc5MEtHNXZjbTFoYkNrN0lDOHZJRUpoYVd3Z2IzVjBJR2xtSUhKaGVTQmhibVFnY0d4aGJtVWdZWEpsSUhCaGNtRnNiR1ZzQ2dvZ0lDQWdJQ0FnSUdsbUlDaE5ZWFJvTG1GaWN5aGtiM1FwSUR3Z2RHaHBjeTV3Y21WamFYTnBiMjRwSUhzS0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lIMGdMeThnWTJGc1l5QmthWE4wWVc1alpTQjBieUJ3YkdGdVpRb0tDaUFnSUNBZ0lDQWdZMjl1YzNRZ2MyTmhiR0Z5SUQwZ2JtOXliV0ZzTG1SdmRDaDJaV04wYjNJcElDOGdaRzkwT3lBdkx5QnBaaUJ1WldkaGRHbDJaU0JrYVhOMFlXNWpaU3dnZEdobGJpQndiR0Z1WlNCcGN5QmlaV2hwYm1RZ2NtRjVDZ29nSUNBZ0lDQWdJR2xtSUNoelkyRnNZWElnUENBd0tTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdJQ0I5SUM4dklHbG1JQ2hrYjNRZ1BDQXdLU0I3Q2lBZ0lDQWdJQ0FnTHk4Z1NXNTBaWEp6WldOMGFXOXVJSEJ2YVc1MElHbHpJR1p5YjIwZ0t5QmthWEpsWTNScGIyNGdLaUJ6WTJGc1lYSUtDZ29nSUNBZ0lDQWdJR1JwY21WamRHbHZiaTV6WTJGc1pTaHpZMkZzWVhJc0lHbHVkR1Z5YzJWamRGQnZhVzUwS1RzS0lDQWdJQ0FnSUNCcGJuUmxjbk5sWTNSUWIybHVkQzUyWVdSa0tHWnliMjBzSUdsdWRHVnljMlZqZEZCdmFXNTBLVHNnTHk4Z1lTQnBjeUIwYUdVZ2NHOXBiblFnZDJVZ1kyOXRjR0Z5WlNCd2IybHVkSE1nWWlCaGJtUWdZeUIzYVhSb0xnb0tJQ0FnSUNBZ0lDQmhMbU52Y0hrb2RtVnlkR2xqWlhOYlptRmpaVnN3WFYwcE93b2dJQ0FnSUNBZ0lIRXVkbTExYkhRb1lTd2dZU2s3Q2lBZ0lDQWdJQ0FnZUM1MllXUmtLR0VzSUdFcE93b0tJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTVRzZ0lYSmxjM1ZzZEM1emFHOTFiR1JUZEc5d0lDWW1JR2tnUENCbVlXTmxMbXhsYm1kMGFDQXRJREU3SUdrckt5a2dld29nSUNBZ0lDQWdJQ0FnTHk4Z1ZISmhibk5tYjNKdElETWdkbVZ5ZEdsalpYTWdkRzhnZDI5eWJHUWdZMjl2Y21SekNpQWdJQ0FnSUNBZ0lDQmlMbU52Y0hrb2RtVnlkR2xqWlhOYlptRmpaVnRwWFYwcE93b2dJQ0FnSUNBZ0lDQWdZeTVqYjNCNUtIWmxjblJwWTJWelcyWmhZMlZiYVNBcklERmRYU2s3Q2lBZ0lDQWdJQ0FnSUNCeExuWnRkV3gwS0dJc0lHSXBPd29nSUNBZ0lDQWdJQ0FnY1M1MmJYVnNkQ2hqTENCaktUc0tJQ0FnSUNBZ0lDQWdJSGd1ZG1Ga1pDaGlMQ0JpS1RzS0lDQWdJQ0FnSUNBZ0lIZ3VkbUZrWkNoakxDQmpLVHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1JwYzNSaGJtTmxJRDBnYVc1MFpYSnpaV04wVUc5cGJuUXVaR2x6ZEdGdVkyVlVieWhtY205dEtUc0tDaUFnSUNBZ0lDQWdJQ0JwWmlBb0lTaFNZWGt1Y0c5cGJuUkpibFJ5YVdGdVoyeGxLR2x1ZEdWeWMyVmpkRkJ2YVc1MExDQmhMQ0JpTENCaktTQjhmQ0JTWVhrdWNHOXBiblJKYmxSeWFXRnVaMnhsS0dsdWRHVnljMlZqZEZCdmFXNTBMQ0JpTENCaExDQmpLU2tnZkh3Z1pHbHpkR0Z1WTJVZ1BpQm1jbTl0Vkc5RWFYTjBZVzVqWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGNHOXlkRWx1ZEdWeWMyVmpkR2x2YmlodWIzSnRZV3dzSUdsdWRHVnljMlZqZEZCdmFXNTBMQ0J5WlhCdmNuUmxaRk5vWVhCbExDQmliMlI1TENCbWFTazdDaUFnSUNBZ0lDQWdmU0F2THlCOUNnb2dJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRUIwYjJSdklFOXdkR2x0YVhwbElHSjVJSFJ5WVc1elptOXliV2x1WnlCMGFHVWdkMjl5YkdRZ2RHOGdiRzlqWVd3Z2MzQmhZMlVnWm1seWMzUXVDaUFnSUNBZ0tpQkFkRzlrYnlCVmMyVWdUMk4wY21WbElHeHZiMnQxY0FvZ0lDQWdJQ292Q2dvS0lDQWdJRjlwYm5SbGNuTmxZM1JVY21sdFpYTm9LRzFsYzJnc0lIRjFZWFFzSUhCdmMybDBhVzl1TENCaWIyUjVMQ0J5WlhCdmNuUmxaRk5vWVhCbExDQnZjSFJwYjI1ektTQjdDaUFnSUNBZ0lHTnZibk4wSUc1dmNtMWhiQ0E5SUdsdWRHVnljMlZqZEZSeWFXMWxjMmhmYm05eWJXRnNPd29nSUNBZ0lDQmpiMjV6ZENCMGNtbGhibWRzWlhNZ1BTQnBiblJsY25ObFkzUlVjbWx0WlhOb1gzUnlhV0Z1WjJ4bGN6c0tJQ0FnSUNBZ1kyOXVjM1FnZEhKbFpWUnlZVzV6Wm05eWJTQTlJR2x1ZEdWeWMyVmpkRlJ5YVcxbGMyaGZkSEpsWlZSeVlXNXpabTl5YlRzS0lDQWdJQ0FnWTI5dWMzUWdkbVZqZEc5eUlEMGdhVzUwWlhKelpXTjBRMjl1ZG1WNFgzWmxZM1J2Y2pzS0lDQWdJQ0FnWTI5dWMzUWdiRzlqWVd4RWFYSmxZM1JwYjI0Z1BTQnBiblJsY25ObFkzUlVjbWx0WlhOb1gyeHZZMkZzUkdseVpXTjBhVzl1T3dvZ0lDQWdJQ0JqYjI1emRDQnNiMk5oYkVaeWIyMGdQU0JwYm5SbGNuTmxZM1JVY21sdFpYTm9YMnh2WTJGc1JuSnZiVHNLSUNBZ0lDQWdZMjl1YzNRZ2JHOWpZV3hVYnlBOUlHbHVkR1Z5YzJWamRGUnlhVzFsYzJoZmJHOWpZV3hVYnpzS0lDQWdJQ0FnWTI5dWMzUWdkMjl5YkdSSmJuUmxjbk5sWTNSUWIybHVkQ0E5SUdsdWRHVnljMlZqZEZSeWFXMWxjMmhmZDI5eWJHUkpiblJsY25ObFkzUlFiMmx1ZERzS0lDQWdJQ0FnWTI5dWMzUWdkMjl5YkdST2IzSnRZV3dnUFNCcGJuUmxjbk5sWTNSVWNtbHRaWE5vWDNkdmNteGtUbTl5YldGc095QXZMeUJEYUdWamEybHVaeUJtWVdObGN3b0tJQ0FnSUNBZ1kyOXVjM1FnYVc1a2FXTmxjeUE5SUcxbGMyZ3VhVzVrYVdObGN6c0tJQ0FnSUNBZ2JXVnphQzUyWlhKMGFXTmxjenNnTHk4Z1kyOXVjM1FnYm05eWJXRnNjeUE5SUcxbGMyZ3VabUZqWlU1dmNtMWhiSE1LQ2lBZ0lDQWdJR052Ym5OMElHWnliMjBnUFNCMGFHbHpMbVp5YjIwN0NpQWdJQ0FnSUdOdmJuTjBJSFJ2SUQwZ2RHaHBjeTUwYnpzS0lDQWdJQ0FnWTI5dWMzUWdaR2x5WldOMGFXOXVJRDBnZEdocGN5NWthWEpsWTNScGIyNDdDaUFnSUNBZ0lIUnlaV1ZVY21GdWMyWnZjbTB1Y0c5emFYUnBiMjR1WTI5d2VTaHdiM05wZEdsdmJpazdDaUFnSUNBZ0lIUnlaV1ZVY21GdWMyWnZjbTB1Y1hWaGRHVnlibWx2Ymk1amIzQjVLSEYxWVhRcE95QXZMeUJVY21GdWMyWnZjbTBnY21GNUlIUnZJR3h2WTJGc0lITndZV05sSVFvS0lDQWdJQ0FnVkhKaGJuTm1iM0p0TG5abFkzUnZjbFJ2VEc5allXeEdjbUZ0WlNod2IzTnBkR2x2Yml3Z2NYVmhkQ3dnWkdseVpXTjBhVzl1TENCc2IyTmhiRVJwY21WamRHbHZiaWs3Q2lBZ0lDQWdJRlJ5WVc1elptOXliUzV3YjJsdWRGUnZURzlqWVd4R2NtRnRaU2h3YjNOcGRHbHZiaXdnY1hWaGRDd2dabkp2YlN3Z2JHOWpZV3hHY205dEtUc0tJQ0FnSUNBZ1ZISmhibk5tYjNKdExuQnZhVzUwVkc5TWIyTmhiRVp5WVcxbEtIQnZjMmwwYVc5dUxDQnhkV0YwTENCMGJ5d2diRzlqWVd4VWJ5azdDaUFnSUNBZ0lHeHZZMkZzVkc4dWVDQXFQU0J0WlhOb0xuTmpZV3hsTG5nN0NpQWdJQ0FnSUd4dlkyRnNWRzh1ZVNBcVBTQnRaWE5vTG5OallXeGxMbms3Q2lBZ0lDQWdJR3h2WTJGc1ZHOHVlaUFxUFNCdFpYTm9Mbk5qWVd4bExubzdDaUFnSUNBZ0lHeHZZMkZzUm5KdmJTNTRJQ285SUcxbGMyZ3VjMk5oYkdVdWVEc0tJQ0FnSUNBZ2JHOWpZV3hHY205dExua2dLajBnYldWemFDNXpZMkZzWlM1NU93b2dJQ0FnSUNCc2IyTmhiRVp5YjIwdWVpQXFQU0J0WlhOb0xuTmpZV3hsTG5vN0NpQWdJQ0FnSUd4dlkyRnNWRzh1ZG5OMVlpaHNiMk5oYkVaeWIyMHNJR3h2WTJGc1JHbHlaV04wYVc5dUtUc0tJQ0FnSUNBZ2JHOWpZV3hFYVhKbFkzUnBiMjR1Ym05eWJXRnNhWHBsS0NrN0NpQWdJQ0FnSUdOdmJuTjBJR1p5YjIxVWIwUnBjM1JoYm1ObFUzRjFZWEpsWkNBOUlHeHZZMkZzUm5KdmJTNWthWE4wWVc1alpWTnhkV0Z5WldRb2JHOWpZV3hVYnlrN0NpQWdJQ0FnSUcxbGMyZ3VkSEpsWlM1eVlYbFJkV1Z5ZVNoMGFHbHpMQ0IwY21WbFZISmhibk5tYjNKdExDQjBjbWxoYm1kc1pYTXBPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lFNGdQU0IwY21saGJtZHNaWE11YkdWdVozUm9PeUFoZEdocGN5NXlaWE4xYkhRdWMyaHZkV3hrVTNSdmNDQW1KaUJwSUNFOVBTQk9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCMGNtbGhibWRzWlhOSmJtUmxlQ0E5SUhSeWFXRnVaMnhsYzF0cFhUc0tJQ0FnSUNBZ0lDQnRaWE5vTG1kbGRFNXZjbTFoYkNoMGNtbGhibWRzWlhOSmJtUmxlQ3dnYm05eWJXRnNLVHNnTHk4Z1pHVjBaWEp0YVc1bElHbG1JSEpoZVNCcGJuUmxjbk5sWTNSeklIUm9aU0J3YkdGdVpTQnZaaUIwYUdVZ1ptRmpaUW9nSUNBZ0lDQWdJQzh2SUc1dmRHVTZJSFJvYVhNZ2QyOXlhM01nY21WbllYSmtiR1Z6Y3lCdlppQjBhR1VnWkdseVpXTjBhVzl1SUc5bUlIUm9aU0JtWVdObElHNXZjbTFoYkFvZ0lDQWdJQ0FnSUM4dklFZGxkQ0J3YkdGdVpTQndiMmx1ZENCcGJpQjNiM0pzWkNCamIyOXlaR2x1WVhSbGN5NHVMZ29LSUNBZ0lDQWdJQ0J0WlhOb0xtZGxkRlpsY25SbGVDaHBibVJwWTJWelczUnlhV0Z1WjJ4bGMwbHVaR1Y0SUNvZ00xMHNJR0VwT3lBdkx5QXVMaTVpZFhRZ2JXRnJaU0JwZENCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnY21GNUlHWnliMjB1SUZkbEoyeHNJR1pwZUNCMGFHbHpJR3hoZEdWeUxnb0tJQ0FnSUNBZ0lDQmhMblp6ZFdJb2JHOWpZV3hHY205dExDQjJaV04wYjNJcE95QXZMeUJKWmlCMGFHbHpJR1J2ZENCd2NtOWtkV04wSUdseklHNWxaMkYwYVhabExDQjNaU0JvWVhabElITnZiV1YwYUdsdVp5QnBiblJsY21WemRHbHVad29LSUNBZ0lDQWdJQ0JqYjI1emRDQmtiM1FnUFNCc2IyTmhiRVJwY21WamRHbHZiaTVrYjNRb2JtOXliV0ZzS1RzZ0x5OGdRbUZwYkNCdmRYUWdhV1lnY21GNUlHRnVaQ0J3YkdGdVpTQmhjbVVnY0dGeVlXeHNaV3dLSUNBZ0lDQWdJQ0F2THlCcFppQW9UV0YwYUM1aFluTW9JR1J2ZENBcElEd2dkR2hwY3k1d2NtVmphWE5wYjI0cGV3b2dJQ0FnSUNBZ0lDOHZJQ0FnSUNCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBdkx5QjlDaUFnSUNBZ0lDQWdMeThnWTJGc1l5QmthWE4wWVc1alpTQjBieUJ3YkdGdVpRb0tJQ0FnSUNBZ0lDQmpiMjV6ZENCelkyRnNZWElnUFNCdWIzSnRZV3d1Wkc5MEtIWmxZM1J2Y2lrZ0x5QmtiM1E3SUM4dklHbG1JRzVsWjJGMGFYWmxJR1JwYzNSaGJtTmxMQ0IwYUdWdUlIQnNZVzVsSUdseklHSmxhR2x1WkNCeVlYa0tDaUFnSUNBZ0lDQWdhV1lnS0hOallXeGhjaUE4SURBcElIc0tJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJSDBnTHk4Z1NXNTBaWEp6WldOMGFXOXVJSEJ2YVc1MElHbHpJR1p5YjIwZ0t5QmthWEpsWTNScGIyNGdLaUJ6WTJGc1lYSUtDZ29nSUNBZ0lDQWdJR3h2WTJGc1JHbHlaV04wYVc5dUxuTmpZV3hsS0hOallXeGhjaXdnYVc1MFpYSnpaV04wVUc5cGJuUXBPd29nSUNBZ0lDQWdJR2x1ZEdWeWMyVmpkRkJ2YVc1MExuWmhaR1FvYkc5allXeEdjbTl0TENCcGJuUmxjbk5sWTNSUWIybHVkQ2s3SUM4dklFZGxkQ0IwY21saGJtZHNaU0IyWlhKMGFXTmxjd29LSUNBZ0lDQWdJQ0J0WlhOb0xtZGxkRlpsY25SbGVDaHBibVJwWTJWelczUnlhV0Z1WjJ4bGMwbHVaR1Y0SUNvZ015QXJJREZkTENCaUtUc0tJQ0FnSUNBZ0lDQnRaWE5vTG1kbGRGWmxjblJsZUNocGJtUnBZMlZ6VzNSeWFXRnVaMnhsYzBsdVpHVjRJQ29nTXlBcklESmRMQ0JqS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J6Y1hWaGNtVmtSR2x6ZEdGdVkyVWdQU0JwYm5SbGNuTmxZM1JRYjJsdWRDNWthWE4wWVc1alpWTnhkV0Z5WldRb2JHOWpZV3hHY205dEtUc0tDaUFnSUNBZ0lDQWdhV1lnS0NFb1VtRjVMbkJ2YVc1MFNXNVVjbWxoYm1kc1pTaHBiblJsY25ObFkzUlFiMmx1ZEN3Z1lpd2dZU3dnWXlrZ2ZId2dVbUY1TG5CdmFXNTBTVzVVY21saGJtZHNaU2hwYm5SbGNuTmxZM1JRYjJsdWRDd2dZU3dnWWl3Z1l5a3BJSHg4SUhOeGRXRnlaV1JFYVhOMFlXNWpaU0ErSUdaeWIyMVViMFJwYzNSaGJtTmxVM0YxWVhKbFpDa2dld29nSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3Q2lBZ0lDQWdJQ0FnZlNBdkx5QjBjbUZ1YzJadmNtMGdhVzUwWlhKelpXTjBjRzlwYm5RZ1lXNWtJRzV2Y20xaGJDQjBieUIzYjNKc1pBb0tDaUFnSUNBZ0lDQWdWSEpoYm5ObWIzSnRMblpsWTNSdmNsUnZWMjl5YkdSR2NtRnRaU2h4ZFdGMExDQnViM0p0WVd3c0lIZHZjbXhrVG05eWJXRnNLVHNLSUNBZ0lDQWdJQ0JVY21GdWMyWnZjbTB1Y0c5cGJuUlViMWR2Y214a1JuSmhiV1VvY0c5emFYUnBiMjRzSUhGMVlYUXNJR2x1ZEdWeWMyVmpkRkJ2YVc1MExDQjNiM0pzWkVsdWRHVnljMlZqZEZCdmFXNTBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmxjRzl5ZEVsdWRHVnljMlZqZEdsdmJpaDNiM0pzWkU1dmNtMWhiQ3dnZDI5eWJHUkpiblJsY25ObFkzUlFiMmx1ZEN3Z2NtVndiM0owWldSVGFHRndaU3dnWW05a2VTd2dkSEpwWVc1bmJHVnpTVzVrWlhncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGNtbGhibWRzWlhNdWJHVnVaM1JvSUQwZ01Ec0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUUhKbGRIVnliaUJVY25WbElHbG1JSFJvWlNCcGJuUmxjbk5sWTNScGIyNXpJSE5vYjNWc1pDQmpiMjUwYVc1MVpRb2dJQ0FnSUNvdkNnb0tJQ0FnSUhKbGNHOXlkRWx1ZEdWeWMyVmpkR2x2YmlodWIzSnRZV3dzSUdocGRGQnZhVzUwVjI5eWJHUXNJSE5vWVhCbExDQmliMlI1TENCb2FYUkdZV05sU1c1a1pYZ3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ1puSnZiU0E5SUhSb2FYTXVabkp2YlRzS0lDQWdJQ0FnWTI5dWMzUWdkRzhnUFNCMGFHbHpMblJ2T3dvZ0lDQWdJQ0JqYjI1emRDQmthWE4wWVc1alpTQTlJR1p5YjIwdVpHbHpkR0Z1WTJWVWJ5aG9hWFJRYjJsdWRGZHZjbXhrS1RzS0lDQWdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdkR2hwY3k1eVpYTjFiSFE3SUM4dklGTnJhWEFnWW1GamF5Qm1ZV05sY3o4S0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG5OcmFYQkNZV05yWm1GalpYTWdKaVlnYm05eWJXRnNMbVJ2ZENoMGFHbHpMbVJwY21WamRHbHZiaWtnUGlBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCeVpYTjFiSFF1YUdsMFJtRmpaVWx1WkdWNElEMGdkSGx3Wlc5bUlHaHBkRVpoWTJWSmJtUmxlQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJvYVhSR1lXTmxTVzVrWlhnZ09pQXRNVHNLQ2lBZ0lDQWdJSE4zYVhSamFDQW9kR2hwY3k1dGIyUmxLU0I3Q2lBZ0lDQWdJQ0FnWTJGelpTQlNZWGt1UVV4TU9nb2dJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lYTklhWFFnUFNCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnY21WemRXeDBMbk5sZENobWNtOXRMQ0IwYnl3Z2JtOXliV0ZzTENCb2FYUlFiMmx1ZEZkdmNteGtMQ0J6YUdGd1pTd2dZbTlrZVN3Z1pHbHpkR0Z1WTJVcE93b2dJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExtaGhjMGhwZENBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5oYkd4aVlXTnJLSEpsYzNWc2RDazdDaUFnSUNBZ0lDQWdJQ0JpY21WaGF6c0tDaUFnSUNBZ0lDQWdZMkZ6WlNCU1lYa3VRMHhQVTBWVFZEb0tJQ0FnSUNBZ0lDQWdJQzh2SUZOMGIzSmxJR2xtSUdOc2IzTmxjaUIwYUdGdUlHTjFjbkpsYm5RZ1kyeHZjMlZ6ZEFvZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JwYzNSaGJtTmxJRHdnY21WemRXeDBMbVJwYzNSaGJtTmxJSHg4SUNGeVpYTjFiSFF1YUdGelNHbDBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGelNHbDBJRDBnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbWhoYzBocGRDQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXpaWFFvWm5KdmJTd2dkRzhzSUc1dmNtMWhiQ3dnYUdsMFVHOXBiblJYYjNKc1pDd2djMmhoY0dVc0lHSnZaSGtzSUdScGMzUmhibU5sS1RzS0lDQWdJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdJQ0JpY21WaGF6c0tDaUFnSUNBZ0lDQWdZMkZ6WlNCU1lYa3VRVTVaT2dvZ0lDQWdJQ0FnSUNBZ0x5OGdVbVZ3YjNKMElHRnVaQ0J6ZEc5d0xnb2dJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lYTklhWFFnUFNCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnY21WemRXeDBMbWhoYzBocGRDQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWMyVjBLR1p5YjIwc0lIUnZMQ0J1YjNKdFlXd3NJR2hwZEZCdmFXNTBWMjl5YkdRc0lITm9ZWEJsTENCaWIyUjVMQ0JrYVhOMFlXNWpaU2s3Q2lBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1YzJodmRXeGtVM1J2Y0NBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQmN5QndaWElnSWtKaGNubGpaVzUwY21saklGUmxZMmh1YVhGMVpTSWdZWE1nYm1GdFpXUUtJQ0FnSUNBcUlIdEFiR2x1YXlCb2RIUndjem92TDNkM2R5NWliR0ZqYTNCaGQyNHVZMjl0TDNSbGVIUnpMM0J2YVc1MGFXNXdiMng1TDJSbFptRjFiSFF1YUhSdGJDQm9aWEpsZlNCaWRYUWdkMmwwYUc5MWRDQjBhR1VnWkdsMmFYTnBiMjRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnpkR0YwYVdNZ2NHOXBiblJKYmxSeWFXRnVaMnhsS0hBc0lHRXNJR0lzSUdNcElIc0tJQ0FnSUNBZ1l5NTJjM1ZpS0dFc0lIWXdLVHNLSUNBZ0lDQWdZaTUyYzNWaUtHRXNJSFl4S1RzS0lDQWdJQ0FnY0M1MmMzVmlLR0VzSUhZeUtUc0tJQ0FnSUNBZ1kyOXVjM1FnWkc5ME1EQWdQU0IyTUM1a2IzUW9kakFwT3dvZ0lDQWdJQ0JqYjI1emRDQmtiM1F3TVNBOUlIWXdMbVJ2ZENoMk1TazdDaUFnSUNBZ0lHTnZibk4wSUdSdmREQXlJRDBnZGpBdVpHOTBLSFl5S1RzS0lDQWdJQ0FnWTI5dWMzUWdaRzkwTVRFZ1BTQjJNUzVrYjNRb2RqRXBPd29nSUNBZ0lDQmpiMjV6ZENCa2IzUXhNaUE5SUhZeExtUnZkQ2gyTWlrN0NpQWdJQ0FnSUd4bGRDQjFPd29nSUNBZ0lDQnNaWFFnZGpzS0lDQWdJQ0FnY21WMGRYSnVJQ2gxSUQwZ1pHOTBNVEVnS2lCa2IzUXdNaUF0SUdSdmREQXhJQ29nWkc5ME1USXBJRDQ5SURBZ0ppWWdLSFlnUFNCa2IzUXdNQ0FxSUdSdmRERXlJQzBnWkc5ME1ERWdLaUJrYjNRd01pa2dQajBnTUNBbUppQjFJQ3NnZGlBOElHUnZkREF3SUNvZ1pHOTBNVEVnTFNCa2IzUXdNU0FxSUdSdmREQXhPd29nSUNBZ2ZRb0tJQ0I5Q2lBZ1VtRjVMa05NVDFORlUxUWdQU0JTUVZsZlRVOUVSVk11UTB4UFUwVlRWRHNLSUNCU1lYa3VRVTVaSUQwZ1VrRlpYMDFQUkVWVExrRk9XVHNLSUNCU1lYa3VRVXhNSUQwZ1VrRlpYMDFQUkVWVExrRk1URHNLSUNCamIyNXpkQ0IwYlhCQlFVSkNKREVnUFNCdVpYY2dRVUZDUWlncE93b2dJR052Ym5OMElIUnRjRUZ5Y21GNUlEMGdXMTA3Q2lBZ1kyOXVjM1FnZGpFZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSFl5SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQnBiblJsY25ObFkzUkNiMlI1WDNocElEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0JwYm5SbGNuTmxZM1JDYjJSNVgzRnBJRDBnYm1WM0lGRjFZWFJsY201cGIyNG9LVHNLSUNCamIyNXpkQ0JwYm5SbGNuTmxZM1JRYjJsdWRDQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWVNBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdZaUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ1l5QTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ2JtVjNJRlpsWXpNb0tUc0tJQ0J1WlhjZ1VtRjVZMkZ6ZEZKbGMzVnNkQ2dwT3dvZ0lHTnZibk4wSUdsdWRHVnljMlZqZEVOdmJuWmxlRTl3ZEdsdmJuTWdQU0I3Q2lBZ0lDQm1ZV05sVEdsemREb2dXekJkQ2lBZ2ZUc0tJQ0JqYjI1emRDQjNiM0pzWkZCcGJHeGhjazltWm5ObGRDQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnYVc1MFpYSnpaV04wU0dWcFoyaDBabWxsYkdSZmJHOWpZV3hTWVhrZ1BTQnVaWGNnVW1GNUtDazdDaUFnWTI5dWMzUWdhVzUwWlhKelpXTjBTR1ZwWjJoMFptbGxiR1JmYVc1a1pYZ2dQU0JiWFRzS0lDQmpiMjV6ZENCU1lYbGZhVzUwWlhKelpXTjBVM0JvWlhKbFgybHVkR1Z5YzJWamRHbHZibEJ2YVc1MElEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0JTWVhsZmFXNTBaWEp6WldOMFUzQm9aWEpsWDI1dmNtMWhiQ0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2FXNTBaWEp6WldOMFEyOXVkbVY0WDI1dmNtMWhiQ0E5SUc1bGR5QldaV016S0NrN0NpQWdibVYzSUZabFl6TW9LVHNLSUNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElHbHVkR1Z5YzJWamRFTnZiblpsZUY5MlpXTjBiM0lnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElHbHVkR1Z5YzJWamRGUnlhVzFsYzJoZmJtOXliV0ZzSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQnBiblJsY25ObFkzUlVjbWx0WlhOb1gyeHZZMkZzUkdseVpXTjBhVzl1SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQnBiblJsY25ObFkzUlVjbWx0WlhOb1gyeHZZMkZzUm5KdmJTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnYVc1MFpYSnpaV04wVkhKcGJXVnphRjlzYjJOaGJGUnZJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCcGJuUmxjbk5sWTNSVWNtbHRaWE5vWDNkdmNteGtUbTl5YldGc0lEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0JwYm5SbGNuTmxZM1JVY21sdFpYTm9YM2R2Y214a1NXNTBaWEp6WldOMFVHOXBiblFnUFNCdVpYY2dWbVZqTXlncE93b2dJRzVsZHlCQlFVSkNLQ2s3Q2lBZ1kyOXVjM1FnYVc1MFpYSnpaV04wVkhKcGJXVnphRjkwY21saGJtZHNaWE1nUFNCYlhUc0tJQ0JqYjI1emRDQnBiblJsY25ObFkzUlVjbWx0WlhOb1gzUnlaV1ZVY21GdWMyWnZjbTBnUFNCdVpYY2dWSEpoYm5ObWIzSnRLQ2s3Q2lBZ1kyOXVjM1FnZGpBZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJR2x1ZEdWeWMyVmpkQ0E5SUc1bGR5QldaV016S0NrN0Nnb2dJR1oxYm1OMGFXOXVJR1JwYzNSaGJtTmxSbkp2YlVsdWRHVnljMlZqZEdsdmJpaG1jbTl0TENCa2FYSmxZM1JwYjI0c0lIQnZjMmwwYVc5dUtTQjdDaUFnSUNBdkx5QjJNQ0JwY3lCMlpXTjBiM0lnWm5KdmJTQm1jbTl0SUhSdklIQnZjMmwwYVc5dUNpQWdJQ0J3YjNOcGRHbHZiaTUyYzNWaUtHWnliMjBzSUhZd0tUc0tJQ0FnSUdOdmJuTjBJR1J2ZENBOUlIWXdMbVJ2ZENoa2FYSmxZM1JwYjI0cE95QXZMeUJwYm5SbGNuTmxZM1FnUFNCa2FYSmxZM1JwYjI0cVpHOTBJQ3NnWm5KdmJRb0tJQ0FnSUdScGNtVmpkR2x2Ymk1elkyRnNaU2hrYjNRc0lHbHVkR1Z5YzJWamRDazdDaUFnSUNCcGJuUmxjbk5sWTNRdWRtRmtaQ2htY205dExDQnBiblJsY25ObFkzUXBPd29nSUNBZ1kyOXVjM1FnWkdsemRHRnVZMlVnUFNCd2IzTnBkR2x2Ymk1a2FYTjBZVzVqWlZSdktHbHVkR1Z5YzJWamRDazdDaUFnSUNCeVpYUjFjbTRnWkdsemRHRnVZMlU3Q2lBZ2ZRb0tJQ0F2S2lvS0lDQWdLaUJUZDJWbGNDQmhibVFnY0hKMWJtVWdZbkp2WVdSd2FHRnpaU0JoYkc5dVp5QnZibVVnWVhocGN5NEtJQ0FnS2k4S0lDQmpiR0Z6Y3lCVFFWQkNjbTloWkhCb1lYTmxJR1Y0ZEdWdVpITWdRbkp2WVdSd2FHRnpaU0I3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRXhwYzNRZ2IyWWdZbTlrYVdWeklHTjFjbkpsYm5Sc2VTQnBiaUIwYUdVZ1luSnZZV1J3YUdGelpTNEtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZHaGxJSGR2Y214a0lIUnZJSE5sWVhKamFDQnBiaTRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRWGhwY3lCMGJ5QnpiM0owSUhSb1pTQmliMlJwWlhNZ1lXeHZibWN1Q2lBZ0lDQWdLaUJUWlhRZ2RHOGdNQ0JtYjNJZ2VDQmhlR2x6TENCaGJtUWdNU0JtYjNJZ2VTQmhlR2x6TGdvZ0lDQWdJQ29nUm05eUlHSmxjM1FnY0dWeVptOXliV0Z1WTJVc0lIQnBZMnNnZEdobElHRjRhWE1nZDJobGNtVWdZbTlrYVdWeklHRnlaU0J0YjNOMElHUnBjM1J5YVdKMWRHVmtMZ29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRhR1ZqYXlCcFppQjBhR1VnWW05MWJtUnpJRzltSUhSM2J5QmliMlJwWlhNZ2IzWmxjbXhoY0N3Z1lXeHZibWNnZEdobElHZHBkbVZ1SUZOQlVDQmhlR2x6TGdvZ0lDQWdJQ292Q2lBZ0lDQnpkR0YwYVdNZ1kyaGxZMnRDYjNWdVpITW9ZbWtzSUdKcUxDQmhlR2x6U1c1a1pYZ3BJSHNLSUNBZ0lDQWdiR1YwSUdKcFVHOXpPd29nSUNBZ0lDQnNaWFFnWW1wUWIzTTdDZ29nSUNBZ0lDQnBaaUFvWVhocGMwbHVaR1Y0SUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnWW1sUWIzTWdQU0JpYVM1d2IzTnBkR2x2Ymk1NE93b2dJQ0FnSUNBZ0lHSnFVRzl6SUQwZ1ltb3VjRzl6YVhScGIyNHVlRHNLSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hoZUdselNXNWtaWGdnUFQwOUlERXBJSHNLSUNBZ0lDQWdJQ0JpYVZCdmN5QTlJR0pwTG5CdmMybDBhVzl1TG5rN0NpQWdJQ0FnSUNBZ1ltcFFiM01nUFNCaWFpNXdiM05wZEdsdmJpNTVPd29nSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR0Y0YVhOSmJtUmxlQ0E5UFQwZ01pa2dld29nSUNBZ0lDQWdJR0pwVUc5eklEMGdZbWt1Y0c5emFYUnBiMjR1ZWpzS0lDQWdJQ0FnSUNCaWFsQnZjeUE5SUdKcUxuQnZjMmwwYVc5dUxubzdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUhKcElEMGdZbWt1WW05MWJtUnBibWRTWVdScGRYTXNDaUFnSUNBZ0lDQWdJQ0FnSUhKcUlEMGdZbW91WW05MWJtUnBibWRTWVdScGRYTXNDaUFnSUNBZ0lDQWdJQ0FnSUdKdmRXNWtRVElnUFNCaWFWQnZjeUFySUhKcExBb2dJQ0FnSUNBZ0lDQWdJQ0JpYjNWdVpFSXhJRDBnWW1wUWIzTWdMU0J5YWpzS0lDQWdJQ0FnY21WMGRYSnVJR0p2ZFc1a1FqRWdQQ0JpYjNWdVpFRXlPd29nSUNBZ2ZTQXZMeUJPYjNSbE9pQjBhR1Z6WlNCaGNtVWdhV1JsYm5ScFkyRnNMQ0J6WVhabElHWnZjaUI0TDNrdmVpQnNiM2RsY21KdmRXNWtDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQnBibk5sY25ScGIyNVRiM0owV0FvZ0lDQWdJQ292Q2dvS0lDQWdJSE4wWVhScFl5QnBibk5sY25ScGIyNVRiM0owV0NoaEtTQjdDaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F4TENCc0lEMGdZUzVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0IySUQwZ1lWdHBYVHNLSUNBZ0lDQWdJQ0JzWlhRZ2Fqc0tDaUFnSUNBZ0lDQWdabTl5SUNocUlEMGdhU0F0SURFN0lHb2dQajBnTURzZ2FpMHRLU0I3Q2lBZ0lDQWdJQ0FnSUNCcFppQW9ZVnRxWFM1aFlXSmlMbXh2ZDJWeVFtOTFibVF1ZUNBOFBTQjJMbUZoWW1JdWJHOTNaWEpDYjNWdVpDNTRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJR0ZiYWlBcklERmRJRDBnWVZ0cVhUc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR0ZiYWlBcklERmRJRDBnZGpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WMGRYSnVJR0U3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlHbHVjMlZ5ZEdsdmJsTnZjblJaQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdjM1JoZEdsaklHbHVjMlZ5ZEdsdmJsTnZjblJaS0dFcElIc0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREVzSUd3Z1BTQmhMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSFlnUFNCaFcybGRPd29nSUNBZ0lDQWdJR3hsZENCcU93b0tJQ0FnSUNBZ0lDQm1iM0lnS0dvZ1BTQnBJQzBnTVRzZ2FpQStQU0F3T3lCcUxTMHBJSHNLSUNBZ0lDQWdJQ0FnSUdsbUlDaGhXMnBkTG1GaFltSXViRzkzWlhKQ2IzVnVaQzU1SUR3OUlIWXVZV0ZpWWk1c2IzZGxja0p2ZFc1a0xua3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdZVnRxSUNzZ01WMGdQU0JoVzJwZE93b2dJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdZVnRxSUNzZ01WMGdQU0IyT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J5WlhSMWNtNGdZVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ2FXNXpaWEowYVc5dVUyOXlkRm9LSUNBZ0lDQXFMd29LQ2lBZ0lDQnpkR0YwYVdNZ2FXNXpaWEowYVc5dVUyOXlkRm9vWVNrZ2V3b2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNU3dnYkNBOUlHRXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdkaUE5SUdGYmFWMDdDaUFnSUNBZ0lDQWdiR1YwSUdvN0Nnb2dJQ0FnSUNBZ0lHWnZjaUFvYWlBOUlHa2dMU0F4T3lCcUlENDlJREE3SUdvdExTa2dld29nSUNBZ0lDQWdJQ0FnYVdZZ0tHRmJhbDB1WVdGaVlpNXNiM2RsY2tKdmRXNWtMbm9nUEQwZ2RpNWhZV0ppTG14dmQyVnlRbTkxYm1RdWVpa2dld29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ0lDQmhXMm9nS3lBeFhTQTlJR0ZiYWwwN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQmhXMm9nS3lBeFhTQTlJSFk3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSEpsZEhWeWJpQmhPd29nSUNBZ2ZRb0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtIZHZjbXhrS1NCN0NpQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVlYaHBjMHhwYzNRZ1BTQmJYVHNLSUNBZ0lDQWdkR2hwY3k1M2IzSnNaQ0E5SUc1MWJHdzdDaUFnSUNBZ0lIUm9hWE11WVhocGMwbHVaR1Y0SUQwZ01Ec0tJQ0FnSUNBZ1kyOXVjM1FnWVhocGMweHBjM1FnUFNCMGFHbHpMbUY0YVhOTWFYTjBPd29LSUNBZ0lDQWdkR2hwY3k1ZllXUmtRbTlrZVVoaGJtUnNaWElnUFNCbGRtVnVkQ0E5UGlCN0NpQWdJQ0FnSUNBZ1lYaHBjMHhwYzNRdWNIVnphQ2hsZG1WdWRDNWliMlI1S1RzS0lDQWdJQ0FnZlRzS0NpQWdJQ0FnSUhSb2FYTXVYM0psYlc5MlpVSnZaSGxJWVc1a2JHVnlJRDBnWlhabGJuUWdQVDRnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJR2xrZUNBOUlHRjRhWE5NYVhOMExtbHVaR1Y0VDJZb1pYWmxiblF1WW05a2VTazdDZ29nSUNBZ0lDQWdJR2xtSUNocFpIZ2dJVDA5SUMweEtTQjdDaUFnSUNBZ0lDQWdJQ0JoZUdselRHbHpkQzV6Y0d4cFkyVW9hV1I0TENBeEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMDdDZ29nSUNBZ0lDQnBaaUFvZDI5eWJHUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRmR2Y214a0tIZHZjbXhrS1RzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRhR0Z1WjJVZ2RHaGxJSGR2Y214a0NpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzJWMFYyOXliR1FvZDI5eWJHUXBJSHNLSUNBZ0lDQWdMeThnUTJ4bFlYSWdkR2hsSUc5c1pDQmhlR2x6SUdGeWNtRjVDaUFnSUNBZ0lIUm9hWE11WVhocGMweHBjM1F1YkdWdVozUm9JRDBnTURzZ0x5OGdRV1JrSUdGc2JDQmliMlJwWlhNZ1puSnZiU0IwYUdVZ2JtVjNJSGR2Y214a0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIZHZjbXhrTG1KdlpHbGxjeTVzWlc1bmRHZzdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WVhocGMweHBjM1F1Y0hWemFDaDNiM0pzWkM1aWIyUnBaWE5iYVYwcE93b2dJQ0FnSUNCOUlDOHZJRkpsYlc5MlpTQnZiR1FnYUdGdVpHeGxjbk1zSUdsbUlHRnVlUW9LQ2lBZ0lDQWdJSGR2Y214a0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMkZrWkVKdlpIa25MQ0IwYUdsekxsOWhaR1JDYjJSNVNHRnVaR3hsY2lrN0NpQWdJQ0FnSUhkdmNteGtMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNKbGJXOTJaVUp2WkhrbkxDQjBhR2x6TGw5eVpXMXZkbVZDYjJSNVNHRnVaR3hsY2lrN0lDOHZJRUZrWkNCb1lXNWtiR1Z5Y3lCMGJ5QjFjR1JoZEdVZ2RHaGxJR3hwYzNRZ2IyWWdZbTlrYVdWekxnb0tJQ0FnSUNBZ2QyOXliR1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWVdSa1FtOWtlU2NzSUhSb2FYTXVYMkZrWkVKdlpIbElZVzVrYkdWeUtUc0tJQ0FnSUNBZ2QyOXliR1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY21WdGIzWmxRbTlrZVNjc0lIUm9hWE11WDNKbGJXOTJaVUp2WkhsSVlXNWtiR1Z5S1RzS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkNBOUlIZHZjbXhrT3dvZ0lDQWdJQ0IwYUdsekxtUnBjblI1SUQwZ2RISjFaVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EyOXNiR1ZqZENCaGJHd2dZMjlzYkdsemFXOXVJSEJoYVhKekNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWTI5c2JHbHphVzl1VUdGcGNuTW9kMjl5YkdRc0lIQXhMQ0J3TWlrZ2V3b2dJQ0FnSUNCamIyNXpkQ0JpYjJScFpYTWdQU0IwYUdsekxtRjRhWE5NYVhOME93b2dJQ0FnSUNCamIyNXpkQ0JPSUQwZ1ltOWthV1Z6TG14bGJtZDBhRHNLSUNBZ0lDQWdZMjl1YzNRZ1lYaHBjMGx1WkdWNElEMGdkR2hwY3k1aGVHbHpTVzVrWlhnN0NpQWdJQ0FnSUd4bGRDQnBPd29nSUNBZ0lDQnNaWFFnYWpzS0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG1ScGNuUjVLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXpiM0owVEdsemRDZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdVpHbHlkSGtnUFNCbVlXeHpaVHNLSUNBZ0lDQWdmU0F2THlCTWIyOXJJSFJvY205MVoyZ2dkR2hsSUd4cGMzUUtDZ29nSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUNFOVBTQk9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCaWFTQTlJR0p2WkdsbGMxdHBYVHNLQ2lBZ0lDQWdJQ0FnWm05eUlDaHFJRDBnYVNBcklERTdJR29nUENCT095QnFLeXNwSUhzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdKcUlEMGdZbTlrYVdWelcycGRPd29LSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1dVpXVmtRbkp2WVdSd2FHRnpaVU52Ykd4cGMybHZiaWhpYVN3Z1ltb3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hVMEZRUW5KdllXUndhR0Z6WlM1amFHVmphMEp2ZFc1a2N5aGlhU3dnWW1vc0lHRjRhWE5KYm1SbGVDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJuUmxjbk5sWTNScGIyNVVaWE4wS0dKcExDQmlhaXdnY0RFc0lIQXlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtDaUFnSUNCemIzSjBUR2x6ZENncElIc0tJQ0FnSUNBZ1kyOXVjM1FnWVhocGMweHBjM1FnUFNCMGFHbHpMbUY0YVhOTWFYTjBPd29nSUNBZ0lDQmpiMjV6ZENCaGVHbHpTVzVrWlhnZ1BTQjBhR2x6TG1GNGFYTkpibVJsZURzS0lDQWdJQ0FnWTI5dWMzUWdUaUE5SUdGNGFYTk1hWE4wTG14bGJtZDBhRHNnTHk4Z1ZYQmtZWFJsSUVGQlFrSnpDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQWhQVDBnVGpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZbWtnUFNCaGVHbHpUR2x6ZEZ0cFhUc0tDaUFnSUNBZ0lDQWdhV1lnS0dKcExtRmhZbUpPWldWa2MxVndaR0YwWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdZbWt1ZFhCa1lYUmxRVUZDUWlncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZTQXZMeUJUYjNKMElIUm9aU0JzYVhOMENnb0tJQ0FnSUNBZ2FXWWdLR0Y0YVhOSmJtUmxlQ0E5UFQwZ01Da2dld29nSUNBZ0lDQWdJRk5CVUVKeWIyRmtjR2hoYzJVdWFXNXpaWEowYVc5dVUyOXlkRmdvWVhocGMweHBjM1FwT3dvZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGNGFYTkpibVJsZUNBOVBUMGdNU2tnZXdvZ0lDQWdJQ0FnSUZOQlVFSnliMkZrY0doaGMyVXVhVzV6WlhKMGFXOXVVMjl5ZEZrb1lYaHBjMHhwYzNRcE93b2dJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHRjRhWE5KYm1SbGVDQTlQVDBnTWlrZ2V3b2dJQ0FnSUNBZ0lGTkJVRUp5YjJGa2NHaGhjMlV1YVc1elpYSjBhVzl1VTI5eWRGb29ZWGhwYzB4cGMzUXBPd29nSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVOdmJYQjFkR1Z6SUhSb1pTQjJZWEpwWVc1alpTQnZaaUIwYUdVZ1ltOWtlU0J3YjNOcGRHbHZibk1nWVc1a0lHVnpkR2x0WVhSbGN5QjBhR1VnWW1WemRDQmhlR2x6SUhSdklIVnpaUzRLSUNBZ0lDQXFJRmRwYkd3Z1lYVjBiMjFoZEdsallXeHNlU0J6WlhRZ2NISnZjR1Z5ZEhrZ1lHRjRhWE5KYm1SbGVHQXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ1lYVjBiMFJsZEdWamRFRjRhWE1vS1NCN0NpQWdJQ0FnSUd4bGRDQnpkVzFZSUQwZ01Ec0tJQ0FnSUNBZ2JHVjBJSE4xYlZneUlEMGdNRHNLSUNBZ0lDQWdiR1YwSUhOMWJWa2dQU0F3T3dvZ0lDQWdJQ0JzWlhRZ2MzVnRXVElnUFNBd093b2dJQ0FnSUNCc1pYUWdjM1Z0V2lBOUlEQTdDaUFnSUNBZ0lHeGxkQ0J6ZFcxYU1pQTlJREE3Q2lBZ0lDQWdJR052Ym5OMElHSnZaR2xsY3lBOUlIUm9hWE11WVhocGMweHBjM1E3Q2lBZ0lDQWdJR052Ym5OMElFNGdQU0JpYjJScFpYTXViR1Z1WjNSb093b2dJQ0FnSUNCamIyNXpkQ0JwYm5aT0lEMGdNU0F2SUU0N0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdUanNnYVNzcktTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1lpQTlJR0p2WkdsbGMxdHBYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmpaVzUwWlhKWUlEMGdZaTV3YjNOcGRHbHZiaTU0T3dvZ0lDQWdJQ0FnSUhOMWJWZ2dLejBnWTJWdWRHVnlXRHNLSUNBZ0lDQWdJQ0J6ZFcxWU1pQXJQU0JqWlc1MFpYSllJQ29nWTJWdWRHVnlXRHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmpaVzUwWlhKWklEMGdZaTV3YjNOcGRHbHZiaTU1T3dvZ0lDQWdJQ0FnSUhOMWJWa2dLejBnWTJWdWRHVnlXVHNLSUNBZ0lDQWdJQ0J6ZFcxWk1pQXJQU0JqWlc1MFpYSlpJQ29nWTJWdWRHVnlXVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmpaVzUwWlhKYUlEMGdZaTV3YjNOcGRHbHZiaTU2T3dvZ0lDQWdJQ0FnSUhOMWJWb2dLejBnWTJWdWRHVnlXanNLSUNBZ0lDQWdJQ0J6ZFcxYU1pQXJQU0JqWlc1MFpYSmFJQ29nWTJWdWRHVnlXanNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ2RtRnlhV0Z1WTJWWUlEMGdjM1Z0V0RJZ0xTQnpkVzFZSUNvZ2MzVnRXQ0FxSUdsdWRrNDdDaUFnSUNBZ0lHTnZibk4wSUhaaGNtbGhibU5sV1NBOUlITjFiVmt5SUMwZ2MzVnRXU0FxSUhOMWJWa2dLaUJwYm5aT093b2dJQ0FnSUNCamIyNXpkQ0IyWVhKcFlXNWpaVm9nUFNCemRXMWFNaUF0SUhOMWJWb2dLaUJ6ZFcxYUlDb2dhVzUyVGpzS0NpQWdJQ0FnSUdsbUlDaDJZWEpwWVc1alpWZ2dQaUIyWVhKcFlXNWpaVmtwSUhzS0lDQWdJQ0FnSUNCcFppQW9kbUZ5YVdGdVkyVllJRDRnZG1GeWFXRnVZMlZhS1NCN0NpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GNGFYTkpibVJsZUNBOUlEQTdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYaHBjMGx1WkdWNElEMGdNanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBnWld4elpTQnBaaUFvZG1GeWFXRnVZMlZaSUQ0Z2RtRnlhV0Z1WTJWYUtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1aGVHbHpTVzVrWlhnZ1BTQXhPd29nSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WVhocGMwbHVaR1Y0SUQwZ01qc0tJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTWlhSMWNtNXpJR0ZzYkNCMGFHVWdZbTlrYVdWeklIZHBkR2hwYmlCaGJpQkJRVUpDTGdvZ0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNWc2RDQkJiaUJoY25KaGVTQjBieUJ6ZEc5eVpTQnlaWE4xYkhScGJtY2dZbTlrYVdWeklHbHVMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHRmhZbUpSZFdWeWVTaDNiM0pzWkN3Z1lXRmlZaXdnY21WemRXeDBLU0I3Q2lBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxjM1ZzZENBOUlGdGRPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvZEdocGN5NWthWEowZVNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YzI5eWRFeHBjM1FvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwY25SNUlEMGdabUZzYzJVN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdOdmJuTjBJR0Y0YVhOSmJtUmxlQ0E5SUhSb2FYTXVZWGhwYzBsdVpHVjRPd29nSUNBZ0lDQnNaWFFnWVhocGN5QTlJQ2Q0SnpzS0NpQWdJQ0FnSUdsbUlDaGhlR2x6U1c1a1pYZ2dQVDA5SURFcElIc0tJQ0FnSUNBZ0lDQmhlR2x6SUQwZ0oza25Pd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvWVhocGMwbHVaR1Y0SUQwOVBTQXlLU0I3Q2lBZ0lDQWdJQ0FnWVhocGN5QTlJQ2Q2SnpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWTI5dWMzUWdZWGhwYzB4cGMzUWdQU0IwYUdsekxtRjRhWE5NYVhOME93b2dJQ0FnSUNCaFlXSmlMbXh2ZDJWeVFtOTFibVJiWVhocGMxMDdDaUFnSUNBZ0lHRmhZbUl1ZFhCd1pYSkNiM1Z1WkZ0aGVHbHpYVHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWVhocGMweHBjM1F1YkdWdVozUm9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCaUlEMGdZWGhwYzB4cGMzUmJhVjA3Q2dvZ0lDQWdJQ0FnSUdsbUlDaGlMbUZoWW1KT1pXVmtjMVZ3WkdGMFpTa2dld29nSUNBZ0lDQWdJQ0FnWWk1MWNHUmhkR1ZCUVVKQ0tDazdDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0JwWmlBb1lpNWhZV0ppTG05MlpYSnNZWEJ6S0dGaFltSXBLU0I3Q2lBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaGlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN0NpQWdJQ0I5Q2dvZ0lIMEtDaUFnWTJ4aGMzTWdWWFJwYkhNZ2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRmVIUmxibVFnWVc0Z2IzQjBhVzl1Y3lCdlltcGxZM1FnZDJsMGFDQmtaV1poZFd4MElIWmhiSFZsY3k0S0lDQWdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpJRlJvWlNCdmNIUnBiMjV6SUc5aWFtVmpkQzRnVFdGNUlHSmxJR1poYkhONU9pQnBiaUIwYUdseklHTmhjMlVzSUdFZ2JtVjNJRzlpYW1WamRDQnBjeUJqY21WaGRHVmtJR0Z1WkNCeVpYUjFjbTVsWkM0S0lDQWdJQ0FxSUVCd1lYSmhiU0JrWldaaGRXeDBjeUJCYmlCdlltcGxZM1FnWTI5dWRHRnBibWx1WnlCa1pXWmhkV3gwSUhaaGJIVmxjeTRLSUNBZ0lDQXFJRUJ5WlhSMWNtNGdWR2hsSUcxdlpHbG1hV1ZrSUc5d2RHbHZibk1nYjJKcVpXTjBMZ29nSUNBZ0lDb3ZDaUFnSUNCemRHRjBhV01nWkdWbVlYVnNkSE1vYjNCMGFXOXVjeXdnWkdWbVlYVnNkSE1wSUhzS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0I3ZlRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYTJWNUlHbHVJR1JsWm1GMWJIUnpLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tDRW9hMlY1SUdsdUlHOXdkR2x2Ym5NcEtTQjdDaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpXMnRsZVYwZ1BTQmtaV1poZFd4MGMxdHJaWGxkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WMGRYSnVJRzl3ZEdsdmJuTTdDaUFnSUNCOUNnb2dJSDBLQ2lBZ0x5b3FDaUFnSUNvZ1EyOXVjM1J5WVdsdWRDQmlZWE5sSUdOc1lYTnpDaUFnSUNvdkNpQWdZMnhoYzNNZ1EyOXVjM1J5WVdsdWRDQjdDaUFnSUNBdktpb0tJQ0FnSUNBcUlFVnhkV0YwYVc5dWN5QjBieUJpWlNCemIyeDJaV1FnYVc0Z2RHaHBjeUJqYjI1emRISmhhVzUwTGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJDYjJSNUlFRXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFSnZaSGtnUWk0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTJWMElIUnZJR1poYkhObElHbG1JSGx2ZFNCa2IyNG5kQ0IzWVc1MElIUm9aU0JpYjJScFpYTWdkRzhnWTI5c2JHbGtaU0IzYUdWdUlIUm9aWGtnWVhKbElHTnZibTVsWTNSbFpDNEtJQ0FnSUNBcUx3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1ltOWtlVUVzSUdKdlpIbENMQ0J2Y0hScGIyNXpLU0I3Q2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJRzl3ZEdsdmJuTWdQU0JWZEdsc2N5NWtaV1poZFd4MGN5aHZjSFJwYjI1ekxDQjdDaUFnSUNBZ0lDQWdZMjlzYkdsa1pVTnZibTVsWTNSbFpEb2dkSEoxWlN3S0lDQWdJQ0FnSUNCM1lXdGxWWEJDYjJScFpYTTZJSFJ5ZFdVS0lDQWdJQ0FnZlNrN0NpQWdJQ0FnSUhSb2FYTXVaWEYxWVhScGIyNXpJRDBnVzEwN0NpQWdJQ0FnSUhSb2FYTXVZbTlrZVVFZ1BTQmliMlI1UVRzS0lDQWdJQ0FnZEdocGN5NWliMlI1UWlBOUlHSnZaSGxDT3dvZ0lDQWdJQ0IwYUdsekxtbGtJRDBnUTI5dWMzUnlZV2x1ZEM1cFpFTnZkVzUwWlhJckt6c0tJQ0FnSUNBZ2RHaHBjeTVqYjJ4c2FXUmxRMjl1Ym1WamRHVmtJRDBnYjNCMGFXOXVjeTVqYjJ4c2FXUmxRMjl1Ym1WamRHVmtPd29LSUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11ZDJGclpWVndRbTlrYVdWektTQjdDaUFnSUNBZ0lDQWdhV1lnS0dKdlpIbEJLU0I3Q2lBZ0lDQWdJQ0FnSUNCaWIyUjVRUzUzWVd0bFZYQW9LVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdsbUlDaGliMlI1UWlrZ2V3b2dJQ0FnSUNBZ0lDQWdZbTlrZVVJdWQyRnJaVlZ3S0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRlZ3WkdGMFpTQmhiR3dnZEdobElHVnhkV0YwYVc5dWN5QjNhWFJvSUdSaGRHRXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2RYQmtZWFJsS0NrZ2V3b2dJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjIxbGRHaHZaQ0IxY0dSaGRHVW9LU0J1YjNRZ2FXMXdiRzFsYldWdWRHVmtJR2x1SUhSb2FYTWdRMjl1YzNSeVlXbHVkQ0J6ZFdKamJHRnpjeUVuS1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dSVzVoWW14bGN5QmhiR3dnWlhGMVlYUnBiMjV6SUdsdUlIUm9aU0JqYjI1emRISmhhVzUwTGdvZ0lDQWdJQ292Q2dvS0lDQWdJR1Z1WVdKc1pTZ3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ1pYRnpJRDBnZEdocGN5NWxjWFZoZEdsdmJuTTdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR1Z4Y3k1c1pXNW5kR2c3SUdrckt5a2dld29nSUNBZ0lDQWdJR1Z4YzF0cFhTNWxibUZpYkdWa0lEMGdkSEoxWlRzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkVhWE5oWW14bGN5QmhiR3dnWlhGMVlYUnBiMjV6SUdsdUlIUm9aU0JqYjI1emRISmhhVzUwTGdvZ0lDQWdJQ292Q2dvS0lDQWdJR1JwYzJGaWJHVW9LU0I3Q2lBZ0lDQWdJR052Ym5OMElHVnhjeUE5SUhSb2FYTXVaWEYxWVhScGIyNXpPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JsY1hNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JsY1hOYmFWMHVaVzVoWW14bFpDQTlJR1poYkhObE93b2dJQ0FnSUNCOUNpQWdJQ0I5Q2dvZ0lIMEtJQ0JEYjI1emRISmhhVzUwTG1sa1EyOTFiblJsY2lBOUlEQTdDZ29nSUM4cUtnb2dJQ0FxSUVGdUlHVnNaVzFsYm5RZ1kyOXVkR0ZwYm1sdVp5QTJJR1Z1ZEhKcFpYTXNJRE1nYzNCaGRHbGhiQ0JoYm1RZ015QnliM1JoZEdsdmJtRnNJR1JsWjNKbFpYTWdiMllnWm5KbFpXUnZiUzRLSUNBZ0tpOEtDaUFnWTJ4aGMzTWdTbUZqYjJKcFlXNUZiR1Z0Wlc1MElIc0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ2MzQmhkR2xoYkFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJ5YjNSaGRHbHZibUZzQ2lBZ0lDQWdLaThLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZXdvZ0lDQWdJQ0IwYUdsekxuTndZWFJwWVd3Z1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjBhR2x6TG5KdmRHRjBhVzl1WVd3Z1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCTmRXeDBhWEJzZVNCM2FYUm9JRzkwYUdWeUlFcGhZMjlpYVdGdVJXeGxiV1Z1ZEFvZ0lDQWdJQ292Q2dvS0lDQWdJRzExYkhScGNHeDVSV3hsYldWdWRDaGxiR1Z0Wlc1MEtTQjdDaUFnSUNBZ0lISmxkSFZ5YmlCbGJHVnRaVzUwTG5Od1lYUnBZV3d1Wkc5MEtIUm9hWE11YzNCaGRHbGhiQ2tnS3lCbGJHVnRaVzUwTG5KdmRHRjBhVzl1WVd3dVpHOTBLSFJvYVhNdWNtOTBZWFJwYjI1aGJDazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUUxMWJIUnBjR3g1SUhkcGRHZ2dkSGR2SUhabFkzUnZjbk1LSUNBZ0lDQXFMd29LQ2lBZ0lDQnRkV3gwYVhCc2VWWmxZM1J2Y25Nb2MzQmhkR2xoYkN3Z2NtOTBZWFJwYjI1aGJDa2dld29nSUNBZ0lDQnlaWFIxY200Z2MzQmhkR2xoYkM1a2IzUW9kR2hwY3k1emNHRjBhV0ZzS1NBcklISnZkR0YwYVc5dVlXd3VaRzkwS0hSb2FYTXVjbTkwWVhScGIyNWhiQ2s3Q2lBZ0lDQjlDZ29nSUgwS0NpQWdMeW9xQ2lBZ0lDb2dSWEYxWVhScGIyNGdZbUZ6WlNCamJHRnpjeTRLSUNBZ0tnb2dJQ0FxSUdCaFlDd2dZR0pnSUdGdVpDQmdaWEJ6WUNCaGNtVWdlMEJzYVc1cklHaDBkSEJ6T2k4dmQzZDNPQzVqY3k1MWJYVXVjMlV2YTNWeWMyVnlMelZFVmpBMU9DOVdWREUxTDJ4bFkzUjFjbVZ6TDFOUVQwOUxiR0ZpYm05MFpYTXVjR1JtSUZOUVQwOUxmU0J3WVhKaGJXVjBaWEp6SUhSb1lYUWdaR1ZtWVhWc2RDQjBieUJnTUM0d1lDNGdVMlZsSUh0QWJHbHVheUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YzJOb2RHVndjR1V2WTJGdWJtOXVMbXB6TDJsemMzVmxjeTh5TXpnamFYTnpkV1ZqYjIxdFpXNTBMVEUwTnpFM01qTXlOeUIwYUdseklHVjRZMmhoYm1kbGZTQm1iM0lnYlc5eVpTQmtaWFJoYVd4eklHOXVJRU5oYm01dmJpZHpJSEJvZVhOcFkzTWdhVzF3YkdWdFpXNTBZWFJwYjI0dUNpQWdJQ292Q2lBZ1kyeGhjM01nUlhGMVlYUnBiMjRnZXdvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJOYVc1cGJYVnRJQ2h5WldGa09pQnVaV2RoZEdsMlpTQnRZWGdwSUdadmNtTmxJSFJ2SUdKbElHRndjR3hwWldRZ1lua2dkR2hsSUdOdmJuTjBjbUZwYm5RdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUUxaGVHbHRkVzBnS0hKbFlXUTZJSEJ2YzJsMGFYWmxJRzFoZUNrZ1ptOXlZMlVnZEc4Z1ltVWdZWEJ3YkdsbFpDQmllU0IwYUdVZ1kyOXVjM1J5WVdsdWRDNEtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1UxQlBUMHNnY0dGeVlXMWxkR1Z5Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5RVDA5TElIQmhjbUZ0WlhSbGNnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFVFOVBTeUJ3WVhKaGJXVjBaWElLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRU0J1ZFcxaVpYSXNJSEJ5YjNCdmNuUnBiMjVoYkNCMGJ5QjBhR1VnWm05eVkyVWdZV1JrWldRZ2RHOGdkR2hsSUdKdlpHbGxjeTRLSUNBZ0lDQXFMd29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZbWtzSUdKcUxDQnRhVzVHYjNKalpTd2diV0Y0Um05eVkyVXBJSHNLSUNBZ0lDQWdhV1lnS0cxcGJrWnZjbU5sSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnRhVzVHYjNKalpTQTlJQzB4WlRZN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaHRZWGhHYjNKalpTQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYldGNFJtOXlZMlVnUFNBeFpUWTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIUm9hWE11YVdRZ1BTQkZjWFZoZEdsdmJpNXBaRU52ZFc1MFpYSXJLenNLSUNBZ0lDQWdkR2hwY3k1dGFXNUdiM0pqWlNBOUlHMXBia1p2Y21ObE93b2dJQ0FnSUNCMGFHbHpMbTFoZUVadmNtTmxJRDBnYldGNFJtOXlZMlU3Q2lBZ0lDQWdJSFJvYVhNdVlta2dQU0JpYVRzS0lDQWdJQ0FnZEdocGN5NWlhaUE5SUdKcU93b2dJQ0FnSUNCMGFHbHpMbUVnUFNBd0xqQTdJQzh2SUZOUVQwOUxJSEJoY21GdFpYUmxjZ29LSUNBZ0lDQWdkR2hwY3k1aUlEMGdNQzR3T3lBdkx5QlRVRTlQU3lCd1lYSmhiV1YwWlhJS0NpQWdJQ0FnSUhSb2FYTXVaWEJ6SUQwZ01DNHdPeUF2THlCVFVFOVBTeUJ3WVhKaGJXVjBaWElLQ2lBZ0lDQWdJSFJvYVhNdWFtRmpiMkpwWVc1RmJHVnRaVzUwUVNBOUlHNWxkeUJLWVdOdlltbGhia1ZzWlcxbGJuUW9LVHNLSUNBZ0lDQWdkR2hwY3k1cVlXTnZZbWxoYmtWc1pXMWxiblJDSUQwZ2JtVjNJRXBoWTI5aWFXRnVSV3hsYldWdWRDZ3BPd29nSUNBZ0lDQjBhR2x6TG1WdVlXSnNaV1FnUFNCMGNuVmxPd29nSUNBZ0lDQjBhR2x6TG0xMWJIUnBjR3hwWlhJZ1BTQXdPd29nSUNBZ0lDQjBhR2x6TG5ObGRGTndiMjlyVUdGeVlXMXpLREZsTnl3Z05Dd2dNU0F2SURZd0tUc2dMeThnVTJWMElIUjVjR2xqWVd3Z2MzQnZiMnNnY0dGeVlXMXpDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZKbFkyRnNZM1ZzWVhSbGN5QmhMQ0JpTENCaGJtUWdaWEJ6TGdvZ0lDQWdJQ29LSUNBZ0lDQXFJRlJvWlNCRmNYVmhkR2x2YmlCamIyNXpkSEoxWTNSdmNpQnpaWFJ6SUhSNWNHbGpZV3dnVTFCUFQwc2djR0Z5WVcxbGRHVnljeUJoY3lCemRXTm9PZ29nSUNBZ0lDb2dLaUJnYzNScFptWnVaWE56WUNBOUlERmxOd29nSUNBZ0lDb2dLaUJnY21Wc1lYaGhkR2x2Ym1BZ1BTQTBDaUFnSUNBZ0tpQXFJR0IwYVcxbFUzUmxjR0E5SURFZ0x5QTJNQ3dnWDI1dmRHVWdkR2hsSUdoaGNtUmpiMlJsWkNCeVpXWnlaWE5vSUhKaGRHVXVYd29nSUNBZ0lDb3ZDZ29LSUNBZ0lITmxkRk53YjI5clVHRnlZVzF6S0hOMGFXWm1ibVZ6Y3l3Z2NtVnNZWGhoZEdsdmJpd2dkR2x0WlZOMFpYQXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ1pDQTlJSEpsYkdGNFlYUnBiMjQ3Q2lBZ0lDQWdJR052Ym5OMElHc2dQU0J6ZEdsbVptNWxjM003Q2lBZ0lDQWdJR052Ym5OMElHZ2dQU0IwYVcxbFUzUmxjRHNLSUNBZ0lDQWdkR2hwY3k1aElEMGdOQzR3SUM4Z0tHZ2dLaUFvTVNBcklEUWdLaUJrS1NrN0NpQWdJQ0FnSUhSb2FYTXVZaUE5SURRdU1DQXFJR1FnTHlBb01TQXJJRFFnS2lCa0tUc0tJQ0FnSUNBZ2RHaHBjeTVsY0hNZ1BTQTBMakFnTHlBb2FDQXFJR2dnS2lCcklDb2dLREVnS3lBMElDb2daQ2twT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRiMjF3ZFhSbGN5QjBhR1VnY21sbmFIUWdhR0Z1WkNCemFXUmxJRzltSUhSb1pTQlRVRTlQU3lCbGNYVmhkR2x2YmdvZ0lDQWdJQ292Q2dvS0lDQWdJR052YlhCMWRHVkNLR0VzSUdJc0lHZ3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ1IxY2dQU0IwYUdsekxtTnZiWEIxZEdWSFZ5Z3BPd29nSUNBZ0lDQmpiMjV6ZENCSGNTQTlJSFJvYVhNdVkyOXRjSFYwWlVkeEtDazdDaUFnSUNBZ0lHTnZibk4wSUVkcFRXWWdQU0IwYUdsekxtTnZiWEIxZEdWSGFVMW1LQ2s3Q2lBZ0lDQWdJSEpsZEhWeWJpQXRSM0VnS2lCaElDMGdSMWNnS2lCaUlDMGdSMmxOWmlBcUlHZzdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVOdmJYQjFkR1Z6SUVjcWNTd2dkMmhsY21VZ2NTQmhjbVVnZEdobElHZGxibVZ5WVd4cGVtVmtJR0p2WkhrZ1kyOXZjbVJwYm1GMFpYTUtJQ0FnSUNBcUx3b0tDaUFnSUNCamIyMXdkWFJsUjNFb0tTQjdDaUFnSUNBZ0lHTnZibk4wSUVkQklEMGdkR2hwY3k1cVlXTnZZbWxoYmtWc1pXMWxiblJCT3dvZ0lDQWdJQ0JqYjI1emRDQkhRaUE5SUhSb2FYTXVhbUZqYjJKcFlXNUZiR1Z0Wlc1MFFqc0tJQ0FnSUNBZ1kyOXVjM1FnWW1rZ1BTQjBhR2x6TG1KcE93b2dJQ0FnSUNCamIyNXpkQ0JpYWlBOUlIUm9hWE11WW1vN0NpQWdJQ0FnSUdOdmJuTjBJSGhwSUQwZ1lta3VjRzl6YVhScGIyNDdDaUFnSUNBZ0lHTnZibk4wSUhocUlEMGdZbW91Y0c5emFYUnBiMjQ3Q2lBZ0lDQWdJSEpsZEhWeWJpQkhRUzV6Y0dGMGFXRnNMbVJ2ZENoNGFTa2dLeUJIUWk1emNHRjBhV0ZzTG1SdmRDaDRhaWs3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZiWEIxZEdWeklFY3FWeXdnZDJobGNtVWdWeUJoY21VZ2RHaGxJR0p2WkhrZ2RtVnNiMk5wZEdsbGN3b2dJQ0FnSUNvdkNnb0tJQ0FnSUdOdmJYQjFkR1ZIVnlncElIc0tJQ0FnSUNBZ1kyOXVjM1FnUjBFZ1BTQjBhR2x6TG1waFkyOWlhV0Z1Uld4bGJXVnVkRUU3Q2lBZ0lDQWdJR052Ym5OMElFZENJRDBnZEdocGN5NXFZV052WW1saGJrVnNaVzFsYm5SQ093b2dJQ0FnSUNCamIyNXpkQ0JpYVNBOUlIUm9hWE11WW1rN0NpQWdJQ0FnSUdOdmJuTjBJR0pxSUQwZ2RHaHBjeTVpYWpzS0lDQWdJQ0FnWTI5dWMzUWdkbWtnUFNCaWFTNTJaV3h2WTJsMGVUc0tJQ0FnSUNBZ1kyOXVjM1FnZG1vZ1BTQmlhaTUyWld4dlkybDBlVHNLSUNBZ0lDQWdZMjl1YzNRZ2Qya2dQU0JpYVM1aGJtZDFiR0Z5Vm1Wc2IyTnBkSGs3Q2lBZ0lDQWdJR052Ym5OMElIZHFJRDBnWW1vdVlXNW5kV3hoY2xabGJHOWphWFI1T3dvZ0lDQWdJQ0J5WlhSMWNtNGdSMEV1YlhWc2RHbHdiSGxXWldOMGIzSnpLSFpwTENCM2FTa2dLeUJIUWk1dGRXeDBhWEJzZVZabFkzUnZjbk1vZG1vc0lIZHFLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1EyOXRjSFYwWlhNZ1J5cFhiR0Z0WW1SaExDQjNhR1Z5WlNCWElHRnlaU0IwYUdVZ1ltOWtlU0IyWld4dlkybDBhV1Z6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZMjl0Y0hWMFpVZFhiR0Z0WW1SaEtDa2dld29nSUNBZ0lDQmpiMjV6ZENCSFFTQTlJSFJvYVhNdWFtRmpiMkpwWVc1RmJHVnRaVzUwUVRzS0lDQWdJQ0FnWTI5dWMzUWdSMElnUFNCMGFHbHpMbXBoWTI5aWFXRnVSV3hsYldWdWRFSTdDaUFnSUNBZ0lHTnZibk4wSUdKcElEMGdkR2hwY3k1aWFUc0tJQ0FnSUNBZ1kyOXVjM1FnWW1vZ1BTQjBhR2x6TG1KcU93b2dJQ0FnSUNCamIyNXpkQ0IyYVNBOUlHSnBMblpzWVcxaVpHRTdDaUFnSUNBZ0lHTnZibk4wSUhacUlEMGdZbW91ZG14aGJXSmtZVHNLSUNBZ0lDQWdZMjl1YzNRZ2Qya2dQU0JpYVM1M2JHRnRZbVJoT3dvZ0lDQWdJQ0JqYjI1emRDQjNhaUE5SUdKcUxuZHNZVzFpWkdFN0NpQWdJQ0FnSUhKbGRIVnliaUJIUVM1dGRXeDBhWEJzZVZabFkzUnZjbk1vZG1rc0lIZHBLU0FySUVkQ0xtMTFiSFJwY0d4NVZtVmpkRzl5Y3loMmFpd2dkMm9wT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkRiMjF3ZFhSbGN5QkhLbWx1ZGloTktTcG1MQ0IzYUdWeVpTQk5JR2x6SUhSb1pTQnRZWE56SUcxaGRISnBlQ0IzYVhSb0lHUnBZV2R2Ym1Gc0lHSnNiMk5yY3lCbWIzSWdaV0ZqYUNCaWIyUjVMQ0JoYm1RZ1ppQmhjbVVnZEdobElHWnZjbU5sY3lCdmJpQjBhR1VnWW05a2FXVnpMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHTnZiWEIxZEdWSGFVMW1LQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQkhRU0E5SUhSb2FYTXVhbUZqYjJKcFlXNUZiR1Z0Wlc1MFFUc0tJQ0FnSUNBZ1kyOXVjM1FnUjBJZ1BTQjBhR2x6TG1waFkyOWlhV0Z1Uld4bGJXVnVkRUk3Q2lBZ0lDQWdJR052Ym5OMElHSnBJRDBnZEdocGN5NWlhVHNLSUNBZ0lDQWdZMjl1YzNRZ1ltb2dQU0IwYUdsekxtSnFPd29nSUNBZ0lDQmpiMjV6ZENCbWFTQTlJR0pwTG1admNtTmxPd29nSUNBZ0lDQmpiMjV6ZENCMGFTQTlJR0pwTG5SdmNuRjFaVHNLSUNBZ0lDQWdZMjl1YzNRZ1ptb2dQU0JpYWk1bWIzSmpaVHNLSUNBZ0lDQWdZMjl1YzNRZ2RHb2dQU0JpYWk1MGIzSnhkV1U3Q2lBZ0lDQWdJR052Ym5OMElHbHVkazFoYzNOcElEMGdZbWt1YVc1MlRXRnpjMU52YkhabE93b2dJQ0FnSUNCamIyNXpkQ0JwYm5aTllYTnphaUE5SUdKcUxtbHVkazFoYzNOVGIyeDJaVHNLSUNBZ0lDQWdabWt1YzJOaGJHVW9hVzUyVFdGemMya3NJR2xOWm1rcE93b2dJQ0FnSUNCbWFpNXpZMkZzWlNocGJuWk5ZWE56YWl3Z2FVMW1haWs3Q2lBZ0lDQWdJR0pwTG1sdWRrbHVaWEowYVdGWGIzSnNaRk52YkhabExuWnRkV3gwS0hScExDQnBiblpKYVY5MmJYVnNkRjkwWVhWcEtUc0tJQ0FnSUNBZ1ltb3VhVzUyU1c1bGNuUnBZVmR2Y214a1UyOXNkbVV1ZG0xMWJIUW9kR29zSUdsdWRrbHFYM1p0ZFd4MFgzUmhkV29wT3dvZ0lDQWdJQ0J5WlhSMWNtNGdSMEV1YlhWc2RHbHdiSGxXWldOMGIzSnpLR2xOWm1rc0lHbHVka2xwWDNadGRXeDBYM1JoZFdrcElDc2dSMEl1YlhWc2RHbHdiSGxXWldOMGIzSnpLR2xOWm1vc0lHbHVka2xxWDNadGRXeDBYM1JoZFdvcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJEYjIxd2RYUmxjeUJIS21sdWRpaE5LU3BISndvZ0lDQWdJQ292Q2dvS0lDQWdJR052YlhCMWRHVkhhVTFIZENncElIc0tJQ0FnSUNBZ1kyOXVjM1FnUjBFZ1BTQjBhR2x6TG1waFkyOWlhV0Z1Uld4bGJXVnVkRUU3Q2lBZ0lDQWdJR052Ym5OMElFZENJRDBnZEdocGN5NXFZV052WW1saGJrVnNaVzFsYm5SQ093b2dJQ0FnSUNCamIyNXpkQ0JpYVNBOUlIUm9hWE11WW1rN0NpQWdJQ0FnSUdOdmJuTjBJR0pxSUQwZ2RHaHBjeTVpYWpzS0lDQWdJQ0FnWTI5dWMzUWdhVzUyVFdGemMya2dQU0JpYVM1cGJuWk5ZWE56VTI5c2RtVTdDaUFnSUNBZ0lHTnZibk4wSUdsdWRrMWhjM05xSUQwZ1ltb3VhVzUyVFdGemMxTnZiSFpsT3dvZ0lDQWdJQ0JqYjI1emRDQnBiblpKYVNBOUlHSnBMbWx1ZGtsdVpYSjBhV0ZYYjNKc1pGTnZiSFpsT3dvZ0lDQWdJQ0JqYjI1emRDQnBiblpKYWlBOUlHSnFMbWx1ZGtsdVpYSjBhV0ZYYjNKc1pGTnZiSFpsT3dvZ0lDQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ2FXNTJUV0Z6YzJrZ0t5QnBiblpOWVhOemFqc0tJQ0FnSUNBZ2FXNTJTV2t1ZG0xMWJIUW9SMEV1Y205MFlYUnBiMjVoYkN3Z2RHMXdLVHNLSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSFJ0Y0M1a2IzUW9SMEV1Y205MFlYUnBiMjVoYkNrN0NpQWdJQ0FnSUdsdWRrbHFMblp0ZFd4MEtFZENMbkp2ZEdGMGFXOXVZV3dzSUhSdGNDazdDaUFnSUNBZ0lISmxjM1ZzZENBclBTQjBiWEF1Wkc5MEtFZENMbkp2ZEdGMGFXOXVZV3dwT3dvZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJCWkdRZ1kyOXVjM1J5WVdsdWRDQjJaV3h2WTJsMGVTQjBieUIwYUdVZ1ltOWthV1Z6TGdvZ0lDQWdJQ292Q2dvS0lDQWdJR0ZrWkZSdlYyeGhiV0prWVNoa1pXeDBZV3hoYldKa1lTa2dld29nSUNBZ0lDQmpiMjV6ZENCSFFTQTlJSFJvYVhNdWFtRmpiMkpwWVc1RmJHVnRaVzUwUVRzS0lDQWdJQ0FnWTI5dWMzUWdSMElnUFNCMGFHbHpMbXBoWTI5aWFXRnVSV3hsYldWdWRFSTdDaUFnSUNBZ0lHTnZibk4wSUdKcElEMGdkR2hwY3k1aWFUc0tJQ0FnSUNBZ1kyOXVjM1FnWW1vZ1BTQjBhR2x6TG1KcU93b2dJQ0FnSUNCamIyNXpkQ0IwWlcxd0lEMGdZV1JrVkc5WGJHRnRZbVJoWDNSbGJYQTdJQzh2SUVGa1pDQjBieUJzYVc1bFlYSWdkbVZzYjJOcGRIa0tJQ0FnSUNBZ0x5OGdkbDlzWVcxaVpHRWdLejBnYVc1MktFMHBJQ29nWkdWc2RHRmZiR0Z0WW1FZ0tpQkhDZ29nSUNBZ0lDQmlhUzUyYkdGdFltUmhMbUZrWkZOallXeGxaRlpsWTNSdmNpaGlhUzVwYm5aTllYTnpVMjlzZG1VZ0tpQmtaV3gwWVd4aGJXSmtZU3dnUjBFdWMzQmhkR2xoYkN3Z1lta3VkbXhoYldKa1lTazdDaUFnSUNBZ0lHSnFMblpzWVcxaVpHRXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtHSnFMbWx1ZGsxaGMzTlRiMngyWlNBcUlHUmxiSFJoYkdGdFltUmhMQ0JIUWk1emNHRjBhV0ZzTENCaWFpNTJiR0Z0WW1SaEtUc2dMeThnUVdSa0lIUnZJR0Z1WjNWc1lYSWdkbVZzYjJOcGRIa0tDaUFnSUNBZ0lHSnBMbWx1ZGtsdVpYSjBhV0ZYYjNKc1pGTnZiSFpsTG5adGRXeDBLRWRCTG5KdmRHRjBhVzl1WVd3c0lIUmxiWEFwT3dvZ0lDQWdJQ0JpYVM1M2JHRnRZbVJoTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhrWld4MFlXeGhiV0prWVN3Z2RHVnRjQ3dnWW1rdWQyeGhiV0prWVNrN0NpQWdJQ0FnSUdKcUxtbHVka2x1WlhKMGFXRlhiM0pzWkZOdmJIWmxMblp0ZFd4MEtFZENMbkp2ZEdGMGFXOXVZV3dzSUhSbGJYQXBPd29nSUNBZ0lDQmlhaTUzYkdGdFltUmhMbUZrWkZOallXeGxaRlpsWTNSdmNpaGtaV3gwWVd4aGJXSmtZU3dnZEdWdGNDd2dZbW91ZDJ4aGJXSmtZU2s3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZiWEIxZEdVZ2RHaGxJR1JsYm05dGFXNWhkRzl5SUhCaGNuUWdiMllnZEdobElGTlFUMDlMSUdWeGRXRjBhVzl1T2lCRElEMGdSeXBwYm5Zb1RTa3FSeWNnS3lCbGNITUtJQ0FnSUNBcUx3b0tDaUFnSUNCamIyMXdkWFJsUXlncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl0Y0hWMFpVZHBUVWQwS0NrZ0t5QjBhR2x6TG1Wd2N6c0tJQ0FnSUgwS0NpQWdmUW9nSUVWeGRXRjBhVzl1TG1sa1EyOTFiblJsY2lBOUlEQTdDaUFnWTI5dWMzUWdhVTFtYVNBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdhVTFtYWlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdhVzUyU1dsZmRtMTFiSFJmZEdGMWFTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnYVc1MlNXcGZkbTExYkhSZmRHRjFhaUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2RHMXdJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCaFpHUlViMWRzWVcxaVpHRmZkR1Z0Y0NBOUlHNWxkeUJXWldNektDazdDZ29nSUM4cUtnb2dJQ0FxSUVOdmJuUmhZM1F2Ym05dUxYQmxibVYwY21GMGFXOXVJR052Ym5OMGNtRnBiblFnWlhGMVlYUnBiMjRLSUNBZ0tpOEtJQ0JqYkdGemN5QkRiMjUwWVdOMFJYRjFZWFJwYjI0Z1pYaDBaVzVrY3lCRmNYVmhkR2x2YmlCN0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUNKaWIzVnVZMmx1WlhOeklqb2dkVEVnUFNBdFpTcDFNQW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlhiM0pzWkMxdmNtbGxiblJsWkNCMlpXTjBiM0lnZEdoaGRDQm5iMlZ6SUdaeWIyMGdkR2hsSUdObGJuUmxjaUJ2WmlCaWFTQjBieUIwYUdVZ1kyOXVkR0ZqZENCd2IybHVkQzRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWMjl5YkdRdGIzSnBaVzUwWldRZ2RtVmpkRzl5SUhSb1lYUWdjM1JoY25SeklHbHVJR0p2WkhrZ2FpQndiM05wZEdsdmJpQmhibVFnWjI5bGN5QjBieUIwYUdVZ1kyOXVkR0ZqZENCd2IybHVkQzRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMjl1ZEdGamRDQnViM0p0WVd3c0lIQnZhVzUwYVc1bklHOTFkQ0J2WmlCaWIyUjVJR2t1Q2lBZ0lDQWdLaThLSUNBZ0lHTnZibk4wY25WamRHOXlLR0p2WkhsQkxDQmliMlI1UWl3Z2JXRjRSbTl5WTJVcElIc0tJQ0FnSUNBZ2FXWWdLRzFoZUVadmNtTmxJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCdFlYaEdiM0pqWlNBOUlERmxOanNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjM1Z3WlhJb1ltOWtlVUVzSUdKdlpIbENMQ0F3TENCdFlYaEdiM0pqWlNrN0NpQWdJQ0FnSUhSb2FYTXVjbVZ6ZEdsMGRYUnBiMjRnUFNBd0xqQTdDaUFnSUNBZ0lIUm9hWE11Y21rZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjBhR2x6TG5KcUlEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdkR2hwY3k1dWFTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQjlDZ29nSUNBZ1kyOXRjSFYwWlVJb2FDa2dld29nSUNBZ0lDQmpiMjV6ZENCaElEMGdkR2hwY3k1aE93b2dJQ0FnSUNCamIyNXpkQ0JpSUQwZ2RHaHBjeTVpT3dvZ0lDQWdJQ0JqYjI1emRDQmlhU0E5SUhSb2FYTXVZbWs3Q2lBZ0lDQWdJR052Ym5OMElHSnFJRDBnZEdocGN5NWlhanNLSUNBZ0lDQWdZMjl1YzNRZ2Nta2dQU0IwYUdsekxuSnBPd29nSUNBZ0lDQmpiMjV6ZENCeWFpQTlJSFJvYVhNdWNtbzdDaUFnSUNBZ0lHTnZibk4wSUhKcGVHNGdQU0JEYjI1MFlXTjBSWEYxWVhScGIyNWZZMjl0Y0hWMFpVSmZkR1Z0Y0RFN0NpQWdJQ0FnSUdOdmJuTjBJSEpxZUc0Z1BTQkRiMjUwWVdOMFJYRjFZWFJwYjI1ZlkyOXRjSFYwWlVKZmRHVnRjREk3Q2lBZ0lDQWdJR052Ym5OMElIWnBJRDBnWW1rdWRtVnNiMk5wZEhrN0NpQWdJQ0FnSUdOdmJuTjBJSGRwSUQwZ1lta3VZVzVuZFd4aGNsWmxiRzlqYVhSNU93b2dJQ0FnSUNCaWFTNW1iM0pqWlRzS0lDQWdJQ0FnWW1rdWRHOXljWFZsT3dvZ0lDQWdJQ0JqYjI1emRDQjJhaUE5SUdKcUxuWmxiRzlqYVhSNU93b2dJQ0FnSUNCamIyNXpkQ0IzYWlBOUlHSnFMbUZ1WjNWc1lYSldaV3h2WTJsMGVUc0tJQ0FnSUNBZ1ltb3VabTl5WTJVN0NpQWdJQ0FnSUdKcUxuUnZjbkYxWlRzS0lDQWdJQ0FnWTI5dWMzUWdjR1Z1WlhSeVlYUnBiMjVXWldNZ1BTQkRiMjUwWVdOMFJYRjFZWFJwYjI1ZlkyOXRjSFYwWlVKZmRHVnRjRE03Q2lBZ0lDQWdJR052Ym5OMElFZEJJRDBnZEdocGN5NXFZV052WW1saGJrVnNaVzFsYm5SQk93b2dJQ0FnSUNCamIyNXpkQ0JIUWlBOUlIUm9hWE11YW1GamIySnBZVzVGYkdWdFpXNTBRanNLSUNBZ0lDQWdZMjl1YzNRZ2JpQTlJSFJvYVhNdWJtazdJQzh2SUVOaGJIVmpiR0YwWlNCamNtOXpjeUJ3Y205a2RXTjBjd29LSUNBZ0lDQWdjbWt1WTNKdmMzTW9iaXdnY21sNGJpazdDaUFnSUNBZ0lISnFMbU55YjNOektHNHNJSEpxZUc0cE95QXZMeUJuSUQwZ2VHb3JjbW9nTFNoNGFTdHlhU2tLSUNBZ0lDQWdMeThnUnlBOUlGc2dMVzVwSUNBdGNtbDRiaUFnYm1rZ0lISnFlRzRnWFFvS0lDQWdJQ0FnYmk1dVpXZGhkR1VvUjBFdWMzQmhkR2xoYkNrN0NpQWdJQ0FnSUhKcGVHNHVibVZuWVhSbEtFZEJMbkp2ZEdGMGFXOXVZV3dwT3dvZ0lDQWdJQ0JIUWk1emNHRjBhV0ZzTG1OdmNIa29iaWs3Q2lBZ0lDQWdJRWRDTG5KdmRHRjBhVzl1WVd3dVkyOXdlU2h5YW5odUtUc2dMeThnUTJGc1kzVnNZWFJsSUhSb1pTQndaVzVsZEhKaGRHbHZiaUIyWldOMGIzSUtDaUFnSUNBZ0lIQmxibVYwY21GMGFXOXVWbVZqTG1OdmNIa29ZbW91Y0c5emFYUnBiMjRwT3dvZ0lDQWdJQ0J3Wlc1bGRISmhkR2x2YmxabFl5NTJZV1JrS0hKcUxDQndaVzVsZEhKaGRHbHZibFpsWXlrN0NpQWdJQ0FnSUhCbGJtVjBjbUYwYVc5dVZtVmpMblp6ZFdJb1lta3VjRzl6YVhScGIyNHNJSEJsYm1WMGNtRjBhVzl1Vm1WaktUc0tJQ0FnSUNBZ2NHVnVaWFJ5WVhScGIyNVdaV011ZG5OMVlpaHlhU3dnY0dWdVpYUnlZWFJwYjI1V1pXTXBPd29nSUNBZ0lDQmpiMjV6ZENCbklEMGdiaTVrYjNRb2NHVnVaWFJ5WVhScGIyNVdaV01wT3lBdkx5QkRiMjF3ZFhSbElHbDBaWEpoZEdsdmJnb0tJQ0FnSUNBZ1kyOXVjM1FnWlZCc2RYTlBibVVnUFNCMGFHbHpMbkpsYzNScGRIVjBhVzl1SUNzZ01Uc0tJQ0FnSUNBZ1kyOXVjM1FnUjFjZ1BTQmxVR3gxYzA5dVpTQXFJSFpxTG1SdmRDaHVLU0F0SUdWUWJIVnpUMjVsSUNvZ2Rta3VaRzkwS0c0cElDc2dkMm91Wkc5MEtISnFlRzRwSUMwZ2Qya3VaRzkwS0hKcGVHNHBPd29nSUNBZ0lDQmpiMjV6ZENCSGFVMW1JRDBnZEdocGN5NWpiMjF3ZFhSbFIybE5aaWdwT3dvZ0lDQWdJQ0JqYjI1emRDQkNJRDBnTFdjZ0tpQmhJQzBnUjFjZ0tpQmlJQzBnYUNBcUlFZHBUV1k3Q2lBZ0lDQWdJSEpsZEhWeWJpQkNPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCSFpYUWdkR2hsSUdOMWNuSmxiblFnY21Wc1lYUnBkbVVnZG1Wc2IyTnBkSGtnYVc0Z2RHaGxJR052Ym5SaFkzUWdjRzlwYm5RdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWjJWMFNXMXdZV04wVm1Wc2IyTnBkSGxCYkc5dVowNXZjbTFoYkNncElIc0tJQ0FnSUNBZ1kyOXVjM1FnZG1rZ1BTQkRiMjUwWVdOMFJYRjFZWFJwYjI1ZloyVjBTVzF3WVdOMFZtVnNiMk5wZEhsQmJHOXVaMDV2Y20xaGJGOTJhVHNLSUNBZ0lDQWdZMjl1YzNRZ2Rtb2dQU0JEYjI1MFlXTjBSWEYxWVhScGIyNWZaMlYwU1cxd1lXTjBWbVZzYjJOcGRIbEJiRzl1WjA1dmNtMWhiRjkyYWpzS0lDQWdJQ0FnWTI5dWMzUWdlR2tnUFNCRGIyNTBZV04wUlhGMVlYUnBiMjVmWjJWMFNXMXdZV04wVm1Wc2IyTnBkSGxCYkc5dVowNXZjbTFoYkY5NGFUc0tJQ0FnSUNBZ1kyOXVjM1FnZUdvZ1BTQkRiMjUwWVdOMFJYRjFZWFJwYjI1ZloyVjBTVzF3WVdOMFZtVnNiMk5wZEhsQmJHOXVaMDV2Y20xaGJGOTRhanNLSUNBZ0lDQWdZMjl1YzNRZ2NtVnNWbVZzSUQwZ1EyOXVkR0ZqZEVWeGRXRjBhVzl1WDJkbGRFbHRjR0ZqZEZabGJHOWphWFI1UVd4dmJtZE9iM0p0WVd4ZmNtVnNWbVZzT3dvZ0lDQWdJQ0IwYUdsekxtSnBMbkJ2YzJsMGFXOXVMblpoWkdRb2RHaHBjeTV5YVN3Z2VHa3BPd29nSUNBZ0lDQjBhR2x6TG1KcUxuQnZjMmwwYVc5dUxuWmhaR1FvZEdocGN5NXlhaXdnZUdvcE93b2dJQ0FnSUNCMGFHbHpMbUpwTG1kbGRGWmxiRzlqYVhSNVFYUlhiM0pzWkZCdmFXNTBLSGhwTENCMmFTazdDaUFnSUNBZ0lIUm9hWE11WW1vdVoyVjBWbVZzYjJOcGRIbEJkRmR2Y214a1VHOXBiblFvZUdvc0lIWnFLVHNLSUNBZ0lDQWdkbWt1ZG5OMVlpaDJhaXdnY21Wc1ZtVnNLVHNLSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym1rdVpHOTBLSEpsYkZabGJDazdDaUFnSUNCOUNnb2dJSDBLSUNCamIyNXpkQ0JEYjI1MFlXTjBSWEYxWVhScGIyNWZZMjl0Y0hWMFpVSmZkR1Z0Y0RFZ1BTQnVaWGNnVm1Wak15Z3BPeUF2THlCVVpXMXdJSFpsWTNSdmNuTUtDaUFnWTI5dWMzUWdRMjl1ZEdGamRFVnhkV0YwYVc5dVgyTnZiWEIxZEdWQ1gzUmxiWEF5SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQkRiMjUwWVdOMFJYRjFZWFJwYjI1ZlkyOXRjSFYwWlVKZmRHVnRjRE1nUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElFTnZiblJoWTNSRmNYVmhkR2x2Ymw5blpYUkpiWEJoWTNSV1pXeHZZMmwwZVVGc2IyNW5UbTl5YldGc1gzWnBJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCRGIyNTBZV04wUlhGMVlYUnBiMjVmWjJWMFNXMXdZV04wVm1Wc2IyTnBkSGxCYkc5dVowNXZjbTFoYkY5MmFpQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnUTI5dWRHRmpkRVZ4ZFdGMGFXOXVYMmRsZEVsdGNHRmpkRlpsYkc5amFYUjVRV3h2Ym1kT2IzSnRZV3hmZUdrZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJRU52Ym5SaFkzUkZjWFZoZEdsdmJsOW5aWFJKYlhCaFkzUldaV3h2WTJsMGVVRnNiMjVuVG05eWJXRnNYM2hxSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQkRiMjUwWVdOMFJYRjFZWFJwYjI1ZloyVjBTVzF3WVdOMFZtVnNiMk5wZEhsQmJHOXVaMDV2Y20xaGJGOXlaV3hXWld3Z1BTQnVaWGNnVm1Wak15Z3BPd29LSUNBdktpb0tJQ0FnS2lCRGIyNXVaV04wY3lCMGQyOGdZbTlrYVdWeklHRjBJR2RwZG1WdUlHOW1abk5sZENCd2IybHVkSE11Q2lBZ0lDb2dRR1Y0WVcxd2JHVUtJQ0FnS2lBZ0lDQWdZMjl1YzNRZ1ltOWtlVUVnUFNCdVpYY2dRbTlrZVNoN0lHMWhjM002SURFZ2ZTa0tJQ0FnS2lBZ0lDQWdZMjl1YzNRZ1ltOWtlVUlnUFNCdVpYY2dRbTlrZVNoN0lHMWhjM002SURFZ2ZTa0tJQ0FnS2lBZ0lDQWdZbTlrZVVFdWNHOXphWFJwYjI0dWMyVjBLQzB4TENBd0xDQXdLUW9nSUNBcUlDQWdJQ0JpYjJSNVFpNXdiM05wZEdsdmJpNXpaWFFvTVN3Z01Dd2dNQ2tLSUNBZ0tpQWdJQ0FnWW05a2VVRXVZV1JrVTJoaGNHVW9jMmhoY0dWQktRb2dJQ0FxSUNBZ0lDQmliMlI1UWk1aFpHUlRhR0Z3WlNoemFHRndaVUlwQ2lBZ0lDb2dJQ0FnSUhkdmNteGtMbUZrWkVKdlpIa29ZbTlrZVVFcENpQWdJQ29nSUNBZ0lIZHZjbXhrTG1Ga1pFSnZaSGtvWW05a2VVSXBDaUFnSUNvZ0lDQWdJR052Ym5OMElHeHZZMkZzVUdsMmIzUkJJRDBnYm1WM0lGWmxZek1vTVN3Z01Dd2dNQ2tLSUNBZ0tpQWdJQ0FnWTI5dWMzUWdiRzlqWVd4UWFYWnZkRUlnUFNCdVpYY2dWbVZqTXlndE1Td2dNQ3dnTUNrS0lDQWdLaUFnSUNBZ1kyOXVjM1FnWTI5dWMzUnlZV2x1ZENBOUlHNWxkeUJRYjJsdWRGUnZVRzlwYm5SRGIyNXpkSEpoYVc1MEtHSnZaSGxCTENCc2IyTmhiRkJwZG05MFFTd2dZbTlrZVVJc0lHeHZZMkZzVUdsMmIzUkNLUW9nSUNBcUlDQWdJQ0IzYjNKc1pDNWhaR1JEYjI1emRISmhhVzUwS0dOdmJuTjBjbUZwYm5RcENpQWdJQ292Q2lBZ1kyeGhjM01nVUc5cGJuUlViMUJ2YVc1MFEyOXVjM1J5WVdsdWRDQmxlSFJsYm1SeklFTnZibk4wY21GcGJuUWdld29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlFhWFp2ZEN3Z1pHVm1hVzVsWkNCc2IyTmhiR3g1SUdsdUlHSnZaSGxCTGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJRYVhadmRDd2daR1ZtYVc1bFpDQnNiMk5oYkd4NUlHbHVJR0p2WkhsQ0xnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQWNHRnlZVzBnY0dsMmIzUkJJRlJvWlNCd2IybHVkQ0J5Wld4aGRHbDJaU0IwYnlCMGFHVWdZMlZ1ZEdWeUlHOW1JRzFoYzNNZ2IyWWdZbTlrZVVFZ2QyaHBZMmdnWW05a2VVRWdhWE1nWTI5dWMzUnlZV2x1WldRZ2RHOHVDaUFnSUNBZ0tpQkFjR0Z5WVcwZ1ltOWtlVUlnUW05a2VTQjBhR0YwSUhkcGJHd2dZbVVnWTI5dWMzUnlZV2x1WldRZ2FXNGdZU0J6YVcxcGJHRnlJSGRoZVNCMGJ5QjBhR1VnYzJGdFpTQndiMmx1ZENCaGN5QmliMlI1UVM0Z1YyVWdkMmxzYkNCMGFHVnlaV1p2Y21VZ1oyVjBJR0VnYkdsdWF5QmlaWFIzWldWdUlHSnZaSGxCSUdGdVpDQmliMlI1UWk0Z1NXWWdibTkwSUhOd1pXTnBabWxsWkN3Z1ltOWtlVUVnZDJsc2JDQmlaU0JqYjI1emRISmhhVzVsWkNCMGJ5QmhJSE4wWVhScFl5QndiMmx1ZEM0S0lDQWdJQ0FxSUVCd1lYSmhiU0J3YVhadmRFSWdWR2hsSUhCdmFXNTBJSEpsYkdGMGFYWmxJSFJ2SUhSb1pTQmpaVzUwWlhJZ2IyWWdiV0Z6Y3lCdlppQmliMlI1UWlCM2FHbGphQ0JpYjJSNVFpQnBjeUJqYjI1emRISmhhVzVsWkNCMGJ5NEtJQ0FnSUNBcUlFQndZWEpoYlNCdFlYaEdiM0pqWlNCVWFHVWdiV0Y0YVcxMWJTQm1iM0pqWlNCMGFHRjBJSE5vYjNWc1pDQmlaU0JoY0hCc2FXVmtJSFJ2SUdOdmJuTjBjbUZwYmlCMGFHVWdZbTlrYVdWekxnb2dJQ0FnSUNvdkNpQWdJQ0JqYjI1emRISjFZM1J2Y2loaWIyUjVRU3dnY0dsMmIzUkJMQ0JpYjJSNVFpd2djR2wyYjNSQ0xDQnRZWGhHYjNKalpTa2dld29nSUNBZ0lDQnBaaUFvY0dsMmIzUkJJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCd2FYWnZkRUVnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCcFppQW9jR2wyYjNSQ0lEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0J3YVhadmRFSWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2JXRjRSbTl5WTJVZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJRzFoZUVadmNtTmxJRDBnTVdVMk93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCemRYQmxjaWhpYjJSNVFTd2dZbTlrZVVJcE93b2dJQ0FnSUNCMGFHbHpMbkJwZG05MFFTQTlJSEJwZG05MFFTNWpiRzl1WlNncE93b2dJQ0FnSUNCMGFHbHpMbkJwZG05MFFpQTlJSEJwZG05MFFpNWpiRzl1WlNncE93b2dJQ0FnSUNCamIyNXpkQ0I0SUQwZ2RHaHBjeTVsY1hWaGRHbHZibGdnUFNCdVpYY2dRMjl1ZEdGamRFVnhkV0YwYVc5dUtHSnZaSGxCTENCaWIyUjVRaWs3Q2lBZ0lDQWdJR052Ym5OMElIa2dQU0IwYUdsekxtVnhkV0YwYVc5dVdTQTlJRzVsZHlCRGIyNTBZV04wUlhGMVlYUnBiMjRvWW05a2VVRXNJR0p2WkhsQ0tUc0tJQ0FnSUNBZ1kyOXVjM1FnZWlBOUlIUm9hWE11WlhGMVlYUnBiMjVhSUQwZ2JtVjNJRU52Ym5SaFkzUkZjWFZoZEdsdmJpaGliMlI1UVN3Z1ltOWtlVUlwT3lBdkx5QkZjWFZoZEdsdmJuTWdkRzhnWW1VZ1ptVmtJSFJ2SUhSb1pTQnpiMngyWlhJS0NpQWdJQ0FnSUhSb2FYTXVaWEYxWVhScGIyNXpMbkIxYzJnb2VDd2dlU3dnZWlrN0lDOHZJRTFoYTJVZ2RHaGxJR1Z4ZFdGMGFXOXVjeUJpYVdScGNtVmpkR2x2Ym1Gc0Nnb2dJQ0FnSUNCNExtMXBia1p2Y21ObElEMGdlUzV0YVc1R2IzSmpaU0E5SUhvdWJXbHVSbTl5WTJVZ1BTQXRiV0Y0Um05eVkyVTdDaUFnSUNBZ0lIZ3ViV0Y0Um05eVkyVWdQU0I1TG0xaGVFWnZjbU5sSUQwZ2VpNXRZWGhHYjNKalpTQTlJRzFoZUVadmNtTmxPd29nSUNBZ0lDQjRMbTVwTG5ObGRDZ3hMQ0F3TENBd0tUc0tJQ0FnSUNBZ2VTNXVhUzV6WlhRb01Dd2dNU3dnTUNrN0NpQWdJQ0FnSUhvdWJta3VjMlYwS0RBc0lEQXNJREVwT3dvZ0lDQWdmUW9LSUNBZ0lIVndaR0YwWlNncElIc0tJQ0FnSUNBZ1kyOXVjM1FnWW05a2VVRWdQU0IwYUdsekxtSnZaSGxCT3dvZ0lDQWdJQ0JqYjI1emRDQmliMlI1UWlBOUlIUm9hWE11WW05a2VVSTdDaUFnSUNBZ0lHTnZibk4wSUhnZ1BTQjBhR2x6TG1WeGRXRjBhVzl1V0RzS0lDQWdJQ0FnWTI5dWMzUWdlU0E5SUhSb2FYTXVaWEYxWVhScGIyNVpPd29nSUNBZ0lDQmpiMjV6ZENCNklEMGdkR2hwY3k1bGNYVmhkR2x2YmxvN0lDOHZJRkp2ZEdGMFpTQjBhR1VnY0dsMmIzUnpJSFJ2SUhkdmNteGtJSE53WVdObENnb2dJQ0FnSUNCaWIyUjVRUzV4ZFdGMFpYSnVhVzl1TG5adGRXeDBLSFJvYVhNdWNHbDJiM1JCTENCNExuSnBLVHNLSUNBZ0lDQWdZbTlrZVVJdWNYVmhkR1Z5Ym1sdmJpNTJiWFZzZENoMGFHbHpMbkJwZG05MFFpd2dlQzV5YWlrN0NpQWdJQ0FnSUhrdWNta3VZMjl3ZVNoNExuSnBLVHNLSUNBZ0lDQWdlUzV5YWk1amIzQjVLSGd1Y21vcE93b2dJQ0FnSUNCNkxuSnBMbU52Y0hrb2VDNXlhU2s3Q2lBZ0lDQWdJSG91Y21vdVkyOXdlU2g0TG5KcUtUc0tJQ0FnSUgwS0NpQWdmUW9LSUNBdktpb0tJQ0FnS2lCRGIyNWxJR1Z4ZFdGMGFXOXVMaUJYYjNKcmN5QjBieUJyWldWd0lIUm9aU0JuYVhabGJpQmliMlI1SUhkdmNteGtJSFpsWTNSdmNuTWdZV3hwWjI1bFpDd2diM0lnZEdsc2RHVmtJSGRwZEdocGJpQmhJR2RwZG1WdUlHRnVaMnhsSUdaeWIyMGdaV0ZqYUNCdmRHaGxjaTRLSUNBZ0tpOEtJQ0JqYkdGemN5QkRiMjVsUlhGMVlYUnBiMjRnWlhoMFpXNWtjeUJGY1hWaGRHbHZiaUI3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRXh2WTJGc0lHRjRhWE1nYVc0Z1FRb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCTWIyTmhiQ0JoZUdseklHbHVJRUlLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWR2hsSUNKamIyNWxJR0Z1WjJ4bElpQjBieUJyWldWd0NpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0dKdlpIbEJMQ0JpYjJSNVFpd2diM0IwYVc5dWN5a2dld29nSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeUE5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlIdDlPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCdFlYaEdiM0pqWlNBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG0xaGVFWnZjbU5sSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUc5d2RHbHZibk11YldGNFJtOXlZMlVnT2lBeFpUWTdDaUFnSUNBZ0lITjFjR1Z5S0dKdlpIbEJMQ0JpYjJSNVFpd2dMVzFoZUVadmNtTmxMQ0J0WVhoR2IzSmpaU2s3Q2lBZ0lDQWdJSFJvYVhNdVlYaHBjMEVnUFNCdmNIUnBiMjV6TG1GNGFYTkJJRDhnYjNCMGFXOXVjeTVoZUdselFTNWpiRzl1WlNncElEb2dibVYzSUZabFl6TW9NU3dnTUN3Z01DazdDaUFnSUNBZ0lIUm9hWE11WVhocGMwSWdQU0J2Y0hScGIyNXpMbUY0YVhOQ0lEOGdiM0IwYVc5dWN5NWhlR2x6UWk1amJHOXVaU2dwSURvZ2JtVjNJRlpsWXpNb01Dd2dNU3dnTUNrN0NpQWdJQ0FnSUhSb2FYTXVZVzVuYkdVZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1aGJtZHNaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2Y0hScGIyNXpMbUZ1WjJ4bElEb2dNRHNLSUNBZ0lIMEtDaUFnSUNCamIyMXdkWFJsUWlob0tTQjdDaUFnSUNBZ0lHTnZibk4wSUdFZ1BTQjBhR2x6TG1FN0NpQWdJQ0FnSUdOdmJuTjBJR0lnUFNCMGFHbHpMbUk3Q2lBZ0lDQWdJR052Ym5OMElHNXBJRDBnZEdocGN5NWhlR2x6UVRzS0lDQWdJQ0FnWTI5dWMzUWdibW9nUFNCMGFHbHpMbUY0YVhOQ093b2dJQ0FnSUNCamIyNXpkQ0J1YVhodWFpQTlJSFJ0Y0ZabFl6RWtNanNLSUNBZ0lDQWdZMjl1YzNRZ2JtcDRibWtnUFNCMGJYQldaV015SkRJN0NpQWdJQ0FnSUdOdmJuTjBJRWRCSUQwZ2RHaHBjeTVxWVdOdlltbGhia1ZzWlcxbGJuUkJPd29nSUNBZ0lDQmpiMjV6ZENCSFFpQTlJSFJvYVhNdWFtRmpiMkpwWVc1RmJHVnRaVzUwUWpzZ0x5OGdRMkZzZFdOc1lYUmxJR055YjNOeklIQnliMlIxWTNSekNnb2dJQ0FnSUNCdWFTNWpjbTl6Y3lodWFpd2dibWw0Ym1vcE93b2dJQ0FnSUNCdWFpNWpjbTl6Y3lodWFTd2dibXA0Ym1rcE95QXZMeUJVYUdVZ1lXNW5iR1VnWW1WMGQyVmxiaUIwZDI4Z2RtVmpkRzl5SUdsek9nb2dJQ0FnSUNBdkx5QmpiM01vZEdobGRHRXBJRDBnWVNBcUlHSWdMeUFvYkdWdVozUm9LR0VwSUNvZ2JHVnVaM1JvS0dJcElEMGdleUJzWlc0b1lTa2dQU0JzWlc0b1lpa2dQU0F4SUgwZ1BTQmhJQ29nWWdvZ0lDQWdJQ0F2THlCbklEMGdZU0FxSUdJS0lDQWdJQ0FnTHk4Z1oyUnZkQ0E5SUNoaUlIZ2dZU2tnS2lCM2FTQXJJQ2hoSUhnZ1lpa2dLaUIzYWdvZ0lDQWdJQ0F2THlCSElEMGdXekFnWW5oaElEQWdZWGhpWFFvZ0lDQWdJQ0F2THlCWElEMGdXM1pwSUhkcElIWnFJSGRxWFFvS0lDQWdJQ0FnUjBFdWNtOTBZWFJwYjI1aGJDNWpiM0I1S0c1cWVHNXBLVHNLSUNBZ0lDQWdSMEl1Y205MFlYUnBiMjVoYkM1amIzQjVLRzVwZUc1cUtUc0tJQ0FnSUNBZ1kyOXVjM1FnWnlBOUlFMWhkR2d1WTI5ektIUm9hWE11WVc1bmJHVXBJQzBnYm1rdVpHOTBLRzVxS1RzS0lDQWdJQ0FnWTI5dWMzUWdSMWNnUFNCMGFHbHpMbU52YlhCMWRHVkhWeWdwT3dvZ0lDQWdJQ0JqYjI1emRDQkhhVTFtSUQwZ2RHaHBjeTVqYjIxd2RYUmxSMmxOWmlncE93b2dJQ0FnSUNCamIyNXpkQ0JDSUQwZ0xXY2dLaUJoSUMwZ1IxY2dLaUJpSUMwZ2FDQXFJRWRwVFdZN0NpQWdJQ0FnSUhKbGRIVnliaUJDT3dvZ0lDQWdmUW9LSUNCOUNpQWdZMjl1YzNRZ2RHMXdWbVZqTVNReUlEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0IwYlhCV1pXTXlKRElnUFNCdVpYY2dWbVZqTXlncE93b0tJQ0F2S2lvS0lDQWdLaUJTYjNSaGRHbHZibUZzSUdOdmJuTjBjbUZwYm5RdUlGZHZjbXR6SUhSdklHdGxaWEFnZEdobElHeHZZMkZzSUhabFkzUnZjbk1nYjNKMGFHOW5iMjVoYkNCMGJ5QmxZV05vSUc5MGFHVnlJR2x1SUhkdmNteGtJSE53WVdObExnb2dJQ0FxTHdvZ0lHTnNZWE56SUZKdmRHRjBhVzl1WVd4RmNYVmhkR2x2YmlCbGVIUmxibVJ6SUVWeGRXRjBhVzl1SUhzS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVjI5eWJHUWdiM0pwWlc1MFpXUWdjbTkwWVhScGIyNWhiQ0JoZUdsekxnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCWGIzSnNaQ0J2Y21sbGJuUmxaQ0J5YjNSaGRHbHZibUZzSUdGNGFYTXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlHMWhlRUZ1WjJ4bENpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0dKdlpIbEJMQ0JpYjJSNVFpd2diM0IwYVc5dWN5a2dld29nSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeUE5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlIdDlPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCdFlYaEdiM0pqWlNBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG0xaGVFWnZjbU5sSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUc5d2RHbHZibk11YldGNFJtOXlZMlVnT2lBeFpUWTdDaUFnSUNBZ0lITjFjR1Z5S0dKdlpIbEJMQ0JpYjJSNVFpd2dMVzFoZUVadmNtTmxMQ0J0WVhoR2IzSmpaU2s3Q2lBZ0lDQWdJSFJvYVhNdVlYaHBjMEVnUFNCdmNIUnBiMjV6TG1GNGFYTkJJRDhnYjNCMGFXOXVjeTVoZUdselFTNWpiRzl1WlNncElEb2dibVYzSUZabFl6TW9NU3dnTUN3Z01DazdDaUFnSUNBZ0lIUm9hWE11WVhocGMwSWdQU0J2Y0hScGIyNXpMbUY0YVhOQ0lEOGdiM0IwYVc5dWN5NWhlR2x6UWk1amJHOXVaU2dwSURvZ2JtVjNJRlpsWXpNb01Dd2dNU3dnTUNrN0NpQWdJQ0FnSUhSb2FYTXViV0Y0UVc1bmJHVWdQU0JOWVhSb0xsQkpJQzhnTWpzS0lDQWdJSDBLQ2lBZ0lDQmpiMjF3ZFhSbFFpaG9LU0I3Q2lBZ0lDQWdJR052Ym5OMElHRWdQU0IwYUdsekxtRTdDaUFnSUNBZ0lHTnZibk4wSUdJZ1BTQjBhR2x6TG1JN0NpQWdJQ0FnSUdOdmJuTjBJRzVwSUQwZ2RHaHBjeTVoZUdselFUc0tJQ0FnSUNBZ1kyOXVjM1FnYm1vZ1BTQjBhR2x6TG1GNGFYTkNPd29nSUNBZ0lDQmpiMjV6ZENCdWFYaHVhaUE5SUhSdGNGWmxZekVrTVRzS0lDQWdJQ0FnWTI5dWMzUWdibXA0Ym1rZ1BTQjBiWEJXWldNeUpERTdDaUFnSUNBZ0lHTnZibk4wSUVkQklEMGdkR2hwY3k1cVlXTnZZbWxoYmtWc1pXMWxiblJCT3dvZ0lDQWdJQ0JqYjI1emRDQkhRaUE5SUhSb2FYTXVhbUZqYjJKcFlXNUZiR1Z0Wlc1MFFqc2dMeThnUTJGc2RXTnNZWFJsSUdOeWIzTnpJSEJ5YjJSMVkzUnpDZ29nSUNBZ0lDQnVhUzVqY205emN5aHVhaXdnYm1sNGJtb3BPd29nSUNBZ0lDQnVhaTVqY205emN5aHVhU3dnYm1wNGJta3BPeUF2THlCbklEMGdibWtnS2lCdWFnb2dJQ0FnSUNBdkx5Qm5aRzkwSUQwZ0tHNXFJSGdnYm1rcElDb2dkMmtnS3lBb2Jta2dlQ0J1YWlrZ0tpQjNhZ29nSUNBZ0lDQXZMeUJISUQwZ1d6QWdibXA0Ym1rZ01DQnVhWGh1YWwwS0lDQWdJQ0FnTHk4Z1Z5QTlJRnQyYVNCM2FTQjJhaUIzYWwwS0NpQWdJQ0FnSUVkQkxuSnZkR0YwYVc5dVlXd3VZMjl3ZVNodWFuaHVhU2s3Q2lBZ0lDQWdJRWRDTG5KdmRHRjBhVzl1WVd3dVkyOXdlU2h1YVhodWFpazdDaUFnSUNBZ0lHTnZibk4wSUdjZ1BTQk5ZWFJvTG1OdmN5aDBhR2x6TG0xaGVFRnVaMnhsS1NBdElHNXBMbVJ2ZENodWFpazdDaUFnSUNBZ0lHTnZibk4wSUVkWElEMGdkR2hwY3k1amIyMXdkWFJsUjFjb0tUc0tJQ0FnSUNBZ1kyOXVjM1FnUjJsTlppQTlJSFJvYVhNdVkyOXRjSFYwWlVkcFRXWW9LVHNLSUNBZ0lDQWdZMjl1YzNRZ1FpQTlJQzFuSUNvZ1lTQXRJRWRYSUNvZ1lpQXRJR2dnS2lCSGFVMW1Pd29nSUNBZ0lDQnlaWFIxY200Z1Fqc0tJQ0FnSUgwS0NpQWdmUW9nSUdOdmJuTjBJSFJ0Y0ZabFl6RWtNU0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2RHMXdWbVZqTWlReElEMGdibVYzSUZabFl6TW9LVHNLQ2lBZ0x5b3FDaUFnSUNvZ1FTQkRiMjVsSUZSM2FYTjBJR052Ym5OMGNtRnBiblFzSUhWelpXWjFiQ0JtYjNJZ2NtRm5aRzlzYkhNdUNpQWdJQ292Q2lBZ1kyeGhjM01nUTI5dVpWUjNhWE4wUTI5dWMzUnlZV2x1ZENCbGVIUmxibVJ6SUZCdmFXNTBWRzlRYjJsdWRFTnZibk4wY21GcGJuUWdld29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlVhR1VnWVhocGN5QmthWEpsWTNScGIyNGdabTl5SUhSb1pTQmpiMjV6ZEhKaGFXNTBJRzltSUhSb1pTQmliMlI1SUVFdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSb1pTQmhlR2x6SUdScGNtVmpkR2x2YmlCbWIzSWdkR2hsSUdOdmJuTjBjbUZwYm5RZ2IyWWdkR2hsSUdKdlpIa2dRaTRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWR2hsSUdGd1pYSjBkWEpsSUdGdVoyeGxJRzltSUhSb1pTQmpiMjVsTGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJVYUdVZ2RIZHBjM1FnWVc1bmJHVWdiMllnZEdobElHcHZhVzUwTGdvZ0lDQWdJQ292Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhpYjJSNVFTd2dZbTlrZVVJc0lHOXdkR2x2Ym5NcElIc0tJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUc5d2RHbHZibk1nUFNCN2ZUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1kyOXVjM1FnYldGNFJtOXlZMlVnUFNCMGVYQmxiMllnYjNCMGFXOXVjeTV0WVhoR2IzSmpaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2Y0hScGIyNXpMbTFoZUVadmNtTmxJRG9nTVdVMk95QXZMeUJUWlhRZ2NHbDJiM1FnY0c5cGJuUWdhVzRnWW1WMGQyVmxiZ29LSUNBZ0lDQWdZMjl1YzNRZ2NHbDJiM1JCSUQwZ2IzQjBhVzl1Y3k1d2FYWnZkRUVnUHlCdmNIUnBiMjV6TG5CcGRtOTBRUzVqYkc5dVpTZ3BJRG9nYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdjR2wyYjNSQ0lEMGdiM0IwYVc5dWN5NXdhWFp2ZEVJZ1B5QnZjSFJwYjI1ekxuQnBkbTkwUWk1amJHOXVaU2dwSURvZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2MzVndaWElvWW05a2VVRXNJSEJwZG05MFFTd2dZbTlrZVVJc0lIQnBkbTkwUWl3Z2JXRjRSbTl5WTJVcE93b2dJQ0FnSUNCMGFHbHpMbUY0YVhOQklEMGdiM0IwYVc5dWN5NWhlR2x6UVNBL0lHOXdkR2x2Ym5NdVlYaHBjMEV1WTJ4dmJtVW9LU0E2SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUhSb2FYTXVZWGhwYzBJZ1BTQnZjSFJwYjI1ekxtRjRhWE5DSUQ4Z2IzQjBhVzl1Y3k1aGVHbHpRaTVqYkc5dVpTZ3BJRG9nYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnZEdocGN5NWpiMnhzYVdSbFEyOXVibVZqZEdWa0lEMGdJU0Z2Y0hScGIyNXpMbU52Ykd4cFpHVkRiMjV1WldOMFpXUTdDaUFnSUNBZ0lIUm9hWE11WVc1bmJHVWdQU0IwZVhCbGIyWWdiM0IwYVc5dWN5NWhibWRzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdmNIUnBiMjV6TG1GdVoyeGxJRG9nTURzS0lDQWdJQ0FnWTI5dWMzUWdZeUE5SUhSb2FYTXVZMjl1WlVWeGRXRjBhVzl1SUQwZ2JtVjNJRU52Ym1WRmNYVmhkR2x2YmloaWIyUjVRU3dnWW05a2VVSXNJRzl3ZEdsdmJuTXBPd29nSUNBZ0lDQmpiMjV6ZENCMElEMGdkR2hwY3k1MGQybHpkRVZ4ZFdGMGFXOXVJRDBnYm1WM0lGSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJpaGliMlI1UVN3Z1ltOWtlVUlzSUc5d2RHbHZibk1wT3dvZ0lDQWdJQ0IwYUdsekxuUjNhWE4wUVc1bmJHVWdQU0IwZVhCbGIyWWdiM0IwYVc5dWN5NTBkMmx6ZEVGdVoyeGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzl3ZEdsdmJuTXVkSGRwYzNSQmJtZHNaU0E2SURBN0lDOHZJRTFoYTJVZ2RHaGxJR052Ym1VZ1pYRjFZWFJwYjI0Z2NIVnphQ0IwYUdVZ1ltOWthV1Z6SUhSdmQyRnlaQ0IwYUdVZ1kyOXVaU0JoZUdsekxDQnViM1FnYjNWMGQyRnlaQW9LSUNBZ0lDQWdZeTV0WVhoR2IzSmpaU0E5SURBN0NpQWdJQ0FnSUdNdWJXbHVSbTl5WTJVZ1BTQXRiV0Y0Um05eVkyVTdJQzh2SUUxaGEyVWdkR2hsSUhSM2FYTjBJR1Z4ZFdGMGFXOXVJR0ZrWkNCMGIzSnhkV1VnZEc5M1lYSmtJSFJvWlNCcGJtbDBhV0ZzSUhCdmMybDBhVzl1Q2dvZ0lDQWdJQ0IwTG0xaGVFWnZjbU5sSUQwZ01Ec0tJQ0FnSUNBZ2RDNXRhVzVHYjNKalpTQTlJQzF0WVhoR2IzSmpaVHNLSUNBZ0lDQWdkR2hwY3k1bGNYVmhkR2x2Ym5NdWNIVnphQ2hqTENCMEtUc0tJQ0FnSUgwS0NpQWdJQ0IxY0dSaGRHVW9LU0I3Q2lBZ0lDQWdJR052Ym5OMElHSnZaSGxCSUQwZ2RHaHBjeTVpYjJSNVFUc0tJQ0FnSUNBZ1kyOXVjM1FnWW05a2VVSWdQU0IwYUdsekxtSnZaSGxDT3dvZ0lDQWdJQ0JqYjI1emRDQmpiMjVsSUQwZ2RHaHBjeTVqYjI1bFJYRjFZWFJwYjI0N0NpQWdJQ0FnSUdOdmJuTjBJSFIzYVhOMElEMGdkR2hwY3k1MGQybHpkRVZ4ZFdGMGFXOXVPd29nSUNBZ0lDQnpkWEJsY2k1MWNHUmhkR1VvS1RzZ0x5OGdWWEJrWVhSbElIUm9aU0JoZUdWeklIUnZJSFJvWlNCamIyNWxJR052Ym5OMGNtRnBiblFLQ2lBZ0lDQWdJR0p2WkhsQkxuWmxZM1J2Y2xSdlYyOXliR1JHY21GdFpTaDBhR2x6TG1GNGFYTkJMQ0JqYjI1bExtRjRhWE5CS1RzS0lDQWdJQ0FnWW05a2VVSXVkbVZqZEc5eVZHOVhiM0pzWkVaeVlXMWxLSFJvYVhNdVlYaHBjMElzSUdOdmJtVXVZWGhwYzBJcE95QXZMeUJWY0dSaGRHVWdkR2hsSUhkdmNteGtJR0Y0WlhNZ2FXNGdkR2hsSUhSM2FYTjBJR052Ym5OMGNtRnBiblFLQ2lBZ0lDQWdJSFJvYVhNdVlYaHBjMEV1ZEdGdVoyVnVkSE1vZEhkcGMzUXVZWGhwYzBFc0lIUjNhWE4wTG1GNGFYTkJLVHNLSUNBZ0lDQWdZbTlrZVVFdWRtVmpkRzl5Vkc5WGIzSnNaRVp5WVcxbEtIUjNhWE4wTG1GNGFYTkJMQ0IwZDJsemRDNWhlR2x6UVNrN0NpQWdJQ0FnSUhSb2FYTXVZWGhwYzBJdWRHRnVaMlZ1ZEhNb2RIZHBjM1F1WVhocGMwSXNJSFIzYVhOMExtRjRhWE5DS1RzS0lDQWdJQ0FnWW05a2VVSXVkbVZqZEc5eVZHOVhiM0pzWkVaeVlXMWxLSFIzYVhOMExtRjRhWE5DTENCMGQybHpkQzVoZUdselFpazdDaUFnSUNBZ0lHTnZibVV1WVc1bmJHVWdQU0IwYUdsekxtRnVaMnhsT3dvZ0lDQWdJQ0IwZDJsemRDNXRZWGhCYm1kc1pTQTlJSFJvYVhNdWRIZHBjM1JCYm1kc1pUc0tJQ0FnSUgwS0NpQWdmUW9nSUc1bGR5QldaV016S0NrN0NpQWdibVYzSUZabFl6TW9LVHNLQ2lBZ0x5b3FDaUFnSUNvZ1EyOXVjM1J5WVdsdWN5QjBkMjhnWW05a2FXVnpJSFJ2SUdKbElHRjBJR0VnWTI5dWMzUmhiblFnWkdsemRHRnVZMlVnWm5KdmJTQmxZV05vSUc5MGFHVnljeUJqWlc1MFpYSWdiMllnYldGemN5NEtJQ0FnS2k4S0lDQmpiR0Z6Y3lCRWFYTjBZVzVqWlVOdmJuTjBjbUZwYm5RZ1pYaDBaVzVrY3lCRGIyNXpkSEpoYVc1MElIc0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZHaGxJR1JwYzNSaGJtTmxJSFJ2SUd0bFpYQXVJRWxtSUhWdVpHVm1hVzVsWkN3Z2FYUWdkMmxzYkNCaVpTQnpaWFFnZEc4Z2RHaGxJR04xY25KbGJuUWdaR2x6ZEdGdVkyVWdZbVYwZDJWbGJpQmliMlI1UVNCaGJtUWdZbTlrZVVJS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUUhCaGNtRnRJR1JwYzNSaGJtTmxJRlJvWlNCa2FYTjBZVzVqWlNCMGJ5QnJaV1Z3TGlCSlppQjFibVJsWm1sdVpXUXNJR2wwSUhkcGJHd2dZbVVnYzJWMElIUnZJSFJvWlNCamRYSnlaVzUwSUdScGMzUmhibU5sSUdKbGRIZGxaVzRnWW05a2VVRWdZVzVrSUdKdlpIbENMZ29nSUNBZ0lDb2dRSEJoY21GdElHMWhlRVp2Y21ObElGUm9aU0J0WVhocGJYVnRJR1p2Y21ObElIUm9ZWFFnYzJodmRXeGtJR0psSUdGd2NHeHBaV1FnZEc4Z1kyOXVjM1J5WVdsdUlIUm9aU0JpYjJScFpYTXVDaUFnSUNBZ0tpOEtJQ0FnSUdOdmJuTjBjblZqZEc5eUtHSnZaSGxCTENCaWIyUjVRaXdnWkdsemRHRnVZMlVzSUcxaGVFWnZjbU5sS1NCN0NpQWdJQ0FnSUdsbUlDaHRZWGhHYjNKalpTQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYldGNFJtOXlZMlVnUFNBeFpUWTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lITjFjR1Z5S0dKdlpIbEJMQ0JpYjJSNVFpazdDZ29nSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1JwYzNSaGJtTmxJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dld29nSUNBZ0lDQWdJR1JwYzNSaGJtTmxJRDBnWW05a2VVRXVjRzl6YVhScGIyNHVaR2x6ZEdGdVkyVlVieWhpYjJSNVFpNXdiM05wZEdsdmJpazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIUm9hWE11WkdsemRHRnVZMlVnUFNCa2FYTjBZVzVqWlRzS0lDQWdJQ0FnWTI5dWMzUWdaWEVnUFNCMGFHbHpMbVJwYzNSaGJtTmxSWEYxWVhScGIyNGdQU0J1WlhjZ1EyOXVkR0ZqZEVWeGRXRjBhVzl1S0dKdlpIbEJMQ0JpYjJSNVFpazdDaUFnSUNBZ0lIUm9hWE11WlhGMVlYUnBiMjV6TG5CMWMyZ29aWEVwT3lBdkx5Qk5ZV3RsSUdsMElHSnBaR2x5WldOMGFXOXVZV3dLQ2lBZ0lDQWdJR1Z4TG0xcGJrWnZjbU5sSUQwZ0xXMWhlRVp2Y21ObE93b2dJQ0FnSUNCbGNTNXRZWGhHYjNKalpTQTlJRzFoZUVadmNtTmxPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCMWNHUmhkR1VLSUNBZ0lDQXFMd29LQ2lBZ0lDQjFjR1JoZEdVb0tTQjdDaUFnSUNBZ0lHTnZibk4wSUdKdlpIbEJJRDBnZEdocGN5NWliMlI1UVRzS0lDQWdJQ0FnWTI5dWMzUWdZbTlrZVVJZ1BTQjBhR2x6TG1KdlpIbENPd29nSUNBZ0lDQmpiMjV6ZENCbGNTQTlJSFJvYVhNdVpHbHpkR0Z1WTJWRmNYVmhkR2x2YmpzS0lDQWdJQ0FnWTI5dWMzUWdhR0ZzWmtScGMzUWdQU0IwYUdsekxtUnBjM1JoYm1ObElDb2dNQzQxT3dvZ0lDQWdJQ0JqYjI1emRDQnViM0p0WVd3Z1BTQmxjUzV1YVRzS0lDQWdJQ0FnWW05a2VVSXVjRzl6YVhScGIyNHVkbk4xWWloaWIyUjVRUzV3YjNOcGRHbHZiaXdnYm05eWJXRnNLVHNLSUNBZ0lDQWdibTl5YldGc0xtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQnViM0p0WVd3dWMyTmhiR1VvYUdGc1prUnBjM1FzSUdWeExuSnBLVHNLSUNBZ0lDQWdibTl5YldGc0xuTmpZV3hsS0Mxb1lXeG1SR2x6ZEN3Z1pYRXVjbW9wT3dvZ0lDQWdmUW9LSUNCOUNnb2dJQzhxS2dvZ0lDQXFJRXh2WTJzZ1kyOXVjM1J5WVdsdWRDNGdWMmxzYkNCeVpXMXZkbVVnWVd4c0lHUmxaM0psWlhNZ2IyWWdabkpsWldSdmJTQmlaWFIzWldWdUlIUm9aU0JpYjJScFpYTXVDaUFnSUNvdkNpQWdZMnhoYzNNZ1RHOWphME52Ym5OMGNtRnBiblFnWlhoMFpXNWtjeUJRYjJsdWRGUnZVRzlwYm5SRGIyNXpkSEpoYVc1MElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHSnZaSGxCTENCaWIyUjVRaXdnYjNCMGFXOXVjeWtnZXdvZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JqYjI1emRDQnRZWGhHYjNKalpTQTlJSFI1Y0dWdlppQnZjSFJwYjI1ekxtMWhlRVp2Y21ObElDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOXdkR2x2Ym5NdWJXRjRSbTl5WTJVZ09pQXhaVFk3SUM4dklGTmxkQ0J3YVhadmRDQndiMmx1ZENCcGJpQmlaWFIzWldWdUNnb2dJQ0FnSUNCamIyNXpkQ0J3YVhadmRFRWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0JqYjI1emRDQndhWFp2ZEVJZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQmpiMjV6ZENCb1lXeG1WMkY1SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ1ltOWtlVUV1Y0c5emFYUnBiMjR1ZG1Ga1pDaGliMlI1UWk1d2IzTnBkR2x2Yml3Z2FHRnNabGRoZVNrN0NpQWdJQ0FnSUdoaGJHWlhZWGt1YzJOaGJHVW9NQzQxTENCb1lXeG1WMkY1S1RzS0lDQWdJQ0FnWW05a2VVSXVjRzlwYm5SVWIweHZZMkZzUm5KaGJXVW9hR0ZzWmxkaGVTd2djR2wyYjNSQ0tUc0tJQ0FnSUNBZ1ltOWtlVUV1Y0c5cGJuUlViMHh2WTJGc1JuSmhiV1VvYUdGc1psZGhlU3dnY0dsMmIzUkJLVHNnTHk4Z1ZHaGxJSEJ2YVc1MExYUnZMWEJ2YVc1MElHTnZibk4wY21GcGJuUWdkMmxzYkNCclpXVndJR0VnY0c5cGJuUWdjMmhoY21Wa0lHSmxkSGRsWlc0Z2RHaGxJR0p2WkdsbGN3b0tJQ0FnSUNBZ2MzVndaWElvWW05a2VVRXNJSEJwZG05MFFTd2dZbTlrZVVJc0lIQnBkbTkwUWl3Z2JXRjRSbTl5WTJVcE95QXZMeUJUZEc5eVpTQnBibWwwYVdGc0lISnZkR0YwYVc5dUlHOW1JSFJvWlNCaWIyUnBaWE1nWVhNZ2RXNXBkQ0IyWldOMGIzSnpJR2x1SUhSb1pTQnNiMk5oYkNCaWIyUjVJSE53WVdObGN3b0tJQ0FnSUNBZ2RHaHBjeTU0UVNBOUlHSnZaSGxCTG5abFkzUnZjbFJ2VEc5allXeEdjbUZ0WlNoV1pXTXpMbFZPU1ZSZldDazdDaUFnSUNBZ0lIUm9hWE11ZUVJZ1BTQmliMlI1UWk1MlpXTjBiM0pVYjB4dlkyRnNSbkpoYldVb1ZtVmpNeTVWVGtsVVgxZ3BPd29nSUNBZ0lDQjBhR2x6TG5sQklEMGdZbTlrZVVFdWRtVmpkRzl5Vkc5TWIyTmhiRVp5WVcxbEtGWmxZek11VlU1SlZGOVpLVHNLSUNBZ0lDQWdkR2hwY3k1NVFpQTlJR0p2WkhsQ0xuWmxZM1J2Y2xSdlRHOWpZV3hHY21GdFpTaFdaV016TGxWT1NWUmZXU2s3Q2lBZ0lDQWdJSFJvYVhNdWVrRWdQU0JpYjJSNVFTNTJaV04wYjNKVWIweHZZMkZzUm5KaGJXVW9WbVZqTXk1VlRrbFVYMW9wT3dvZ0lDQWdJQ0IwYUdsekxucENJRDBnWW05a2VVSXVkbVZqZEc5eVZHOU1iMk5oYkVaeVlXMWxLRlpsWXpNdVZVNUpWRjlhS1RzZ0x5OGdMaTR1WVc1a0lIUm9aU0JtYjJ4c2IzZHBibWNnY205MFlYUnBiMjVoYkNCbGNYVmhkR2x2Ym5NZ2QybHNiQ0JyWldWd0lHRnNiQ0J5YjNSaGRHbHZibUZzSUVSUFJpZHpJR2x1SUhCc1lXTmxDZ29nSUNBZ0lDQmpiMjV6ZENCeU1TQTlJSFJvYVhNdWNtOTBZWFJwYjI1aGJFVnhkV0YwYVc5dU1TQTlJRzVsZHlCU2IzUmhkR2x2Ym1Gc1JYRjFZWFJwYjI0b1ltOWtlVUVzSUdKdlpIbENMQ0J2Y0hScGIyNXpLVHNLSUNBZ0lDQWdZMjl1YzNRZ2NqSWdQU0IwYUdsekxuSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJqSWdQU0J1WlhjZ1VtOTBZWFJwYjI1aGJFVnhkV0YwYVc5dUtHSnZaSGxCTENCaWIyUjVRaXdnYjNCMGFXOXVjeWs3Q2lBZ0lDQWdJR052Ym5OMElISXpJRDBnZEdocGN5NXliM1JoZEdsdmJtRnNSWEYxWVhScGIyNHpJRDBnYm1WM0lGSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJpaGliMlI1UVN3Z1ltOWtlVUlzSUc5d2RHbHZibk1wT3dvZ0lDQWdJQ0IwYUdsekxtVnhkV0YwYVc5dWN5NXdkWE5vS0hJeExDQnlNaXdnY2pNcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUIxY0dSaGRHVUtJQ0FnSUNBcUx3b0tDaUFnSUNCMWNHUmhkR1VvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR0p2WkhsQklEMGdkR2hwY3k1aWIyUjVRVHNLSUNBZ0lDQWdZMjl1YzNRZ1ltOWtlVUlnUFNCMGFHbHpMbUp2WkhsQ093b2dJQ0FnSUNCMGFHbHpMbTF2ZEc5eVJYRjFZWFJwYjI0N0NpQWdJQ0FnSUdOdmJuTjBJSEl4SUQwZ2RHaHBjeTV5YjNSaGRHbHZibUZzUlhGMVlYUnBiMjR4T3dvZ0lDQWdJQ0JqYjI1emRDQnlNaUE5SUhSb2FYTXVjbTkwWVhScGIyNWhiRVZ4ZFdGMGFXOXVNanNLSUNBZ0lDQWdZMjl1YzNRZ2NqTWdQU0IwYUdsekxuSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJqTTdDaUFnSUNBZ0lITjFjR1Z5TG5Wd1pHRjBaU2dwT3lBdkx5QlVhR1Z6WlNCMlpXTjBiM0lnY0dGcGNuTWdiWFZ6ZENCaVpTQnZjblJvYjJkdmJtRnNDZ29nSUNBZ0lDQmliMlI1UVM1MlpXTjBiM0pVYjFkdmNteGtSbkpoYldVb2RHaHBjeTU0UVN3Z2NqRXVZWGhwYzBFcE93b2dJQ0FnSUNCaWIyUjVRaTUyWldOMGIzSlViMWR2Y214a1JuSmhiV1VvZEdocGN5NTVRaXdnY2pFdVlYaHBjMElwT3dvZ0lDQWdJQ0JpYjJSNVFTNTJaV04wYjNKVWIxZHZjbXhrUm5KaGJXVW9kR2hwY3k1NVFTd2djakl1WVhocGMwRXBPd29nSUNBZ0lDQmliMlI1UWk1MlpXTjBiM0pVYjFkdmNteGtSbkpoYldVb2RHaHBjeTU2UWl3Z2NqSXVZWGhwYzBJcE93b2dJQ0FnSUNCaWIyUjVRUzUyWldOMGIzSlViMWR2Y214a1JuSmhiV1VvZEdocGN5NTZRU3dnY2pNdVlYaHBjMEVwT3dvZ0lDQWdJQ0JpYjJSNVFpNTJaV04wYjNKVWIxZHZjbXhrUm5KaGJXVW9kR2hwY3k1NFFpd2djak11WVhocGMwSXBPd29nSUNBZ2ZRb0tJQ0I5Q2lBZ2JtVjNJRlpsWXpNb0tUc0tJQ0J1WlhjZ1ZtVmpNeWdwT3dvS0lDQXZLaW9LSUNBZ0tpQlNiM1JoZEdsdmJtRnNJRzF2ZEc5eUlHTnZibk4wY21GcGJuUXVJRlJ5YVdWeklIUnZJR3RsWlhBZ2RHaGxJSEpsYkdGMGFYWmxJR0Z1WjNWc1lYSWdkbVZzYjJOcGRIa2diMllnZEdobElHSnZaR2xsY3lCMGJ5QmhJR2RwZG1WdUlIWmhiSFZsTGdvZ0lDQXFMd29nSUdOc1lYTnpJRkp2ZEdGMGFXOXVZV3hOYjNSdmNrVnhkV0YwYVc5dUlHVjRkR1Z1WkhNZ1JYRjFZWFJwYjI0Z2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCWGIzSnNaQ0J2Y21sbGJuUmxaQ0J5YjNSaGRHbHZibUZzSUdGNGFYTXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlGZHZjbXhrSUc5eWFXVnVkR1ZrSUhKdmRHRjBhVzl1WVd3Z1lYaHBjeTRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dUVzkwYjNJZ2RtVnNiMk5wZEhrdUNpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0dKdlpIbEJMQ0JpYjJSNVFpd2diV0Y0Um05eVkyVXBJSHNLSUNBZ0lDQWdhV1lnS0cxaGVFWnZjbU5sSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnRZWGhHYjNKalpTQTlJREZsTmpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYzNWd1pYSW9ZbTlrZVVFc0lHSnZaSGxDTENBdGJXRjRSbTl5WTJVc0lHMWhlRVp2Y21ObEtUc0tJQ0FnSUNBZ2RHaHBjeTVoZUdselFTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVlYaHBjMElnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCMGFHbHpMblJoY21kbGRGWmxiRzlqYVhSNUlEMGdNRHNLSUNBZ0lIMEtDaUFnSUNCamIyMXdkWFJsUWlob0tTQjdDaUFnSUNBZ0lIUm9hWE11WVRzS0lDQWdJQ0FnWTI5dWMzUWdZaUE5SUhSb2FYTXVZanNLSUNBZ0lDQWdkR2hwY3k1aWFUc0tJQ0FnSUNBZ2RHaHBjeTVpYWpzS0lDQWdJQ0FnWTI5dWMzUWdZWGhwYzBFZ1BTQjBhR2x6TG1GNGFYTkJPd29nSUNBZ0lDQmpiMjV6ZENCaGVHbHpRaUE5SUhSb2FYTXVZWGhwYzBJN0NpQWdJQ0FnSUdOdmJuTjBJRWRCSUQwZ2RHaHBjeTVxWVdOdlltbGhia1ZzWlcxbGJuUkJPd29nSUNBZ0lDQmpiMjV6ZENCSFFpQTlJSFJvYVhNdWFtRmpiMkpwWVc1RmJHVnRaVzUwUWpzZ0x5OGdaeUE5SURBS0lDQWdJQ0FnTHk4Z1oyUnZkQ0E5SUdGNGFYTkJJQ29nZDJrZ0xTQmhlR2x6UWlBcUlIZHFDaUFnSUNBZ0lDOHZJR2RrYjNRZ1BTQkhJQ29nVnlBOUlFY2dLaUJiZG1rZ2Qya2dkbW9nZDJwZENpQWdJQ0FnSUM4dklEMCtDaUFnSUNBZ0lDOHZJRWNnUFNCYk1DQmhlR2x6UVNBd0lDMWhlR2x6UWwwS0NpQWdJQ0FnSUVkQkxuSnZkR0YwYVc5dVlXd3VZMjl3ZVNoaGVHbHpRU2s3Q2lBZ0lDQWdJR0Y0YVhOQ0xtNWxaMkYwWlNoSFFpNXliM1JoZEdsdmJtRnNLVHNLSUNBZ0lDQWdZMjl1YzNRZ1IxY2dQU0IwYUdsekxtTnZiWEIxZEdWSFZ5Z3BJQzBnZEdocGN5NTBZWEpuWlhSV1pXeHZZMmwwZVRzS0lDQWdJQ0FnWTI5dWMzUWdSMmxOWmlBOUlIUm9hWE11WTI5dGNIVjBaVWRwVFdZb0tUc0tJQ0FnSUNBZ1kyOXVjM1FnUWlBOUlDMUhWeUFxSUdJZ0xTQm9JQ29nUjJsTlpqc0tJQ0FnSUNBZ2NtVjBkWEp1SUVJN0NpQWdJQ0I5Q2dvZ0lIMEtDaUFnTHlvcUNpQWdJQ29nU0dsdVoyVWdZMjl1YzNSeVlXbHVkQzRnVkdocGJtc2diMllnYVhRZ1lYTWdZU0JrYjI5eUlHaHBibWRsTGlCSmRDQjBjbWxsY3lCMGJ5QnJaV1Z3SUhSb1pTQmtiMjl5SUdsdUlIUm9aU0JqYjNKeVpXTjBJSEJzWVdObElHRnVaQ0IzYVhSb0lIUm9aU0JqYjNKeVpXTjBJRzl5YVdWdWRHRjBhVzl1TGdvZ0lDQXFMd29nSUdOc1lYTnpJRWhwYm1kbFEyOXVjM1J5WVdsdWRDQmxlSFJsYm1SeklGQnZhVzUwVkc5UWIybHVkRU52Ym5OMGNtRnBiblFnZXdvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTYjNSaGRHbHZiaUJoZUdsekxDQmtaV1pwYm1Wa0lHeHZZMkZzYkhrZ2FXNGdZbTlrZVVFdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZKdmRHRjBhVzl1SUdGNGFYTXNJR1JsWm1sdVpXUWdiRzlqWVd4c2VTQnBiaUJpYjJSNVFpNEtJQ0FnSUNBcUx3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1ltOWtlVUVzSUdKdlpIbENMQ0J2Y0hScGIyNXpLU0I3Q2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHMWhlRVp2Y21ObElEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWJXRjRSbTl5WTJVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2IzQjBhVzl1Y3k1dFlYaEdiM0pqWlNBNklERmxOanNLSUNBZ0lDQWdZMjl1YzNRZ2NHbDJiM1JCSUQwZ2IzQjBhVzl1Y3k1d2FYWnZkRUVnUHlCdmNIUnBiMjV6TG5CcGRtOTBRUzVqYkc5dVpTZ3BJRG9nYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnWTI5dWMzUWdjR2wyYjNSQ0lEMGdiM0IwYVc5dWN5NXdhWFp2ZEVJZ1B5QnZjSFJwYjI1ekxuQnBkbTkwUWk1amJHOXVaU2dwSURvZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2MzVndaWElvWW05a2VVRXNJSEJwZG05MFFTd2dZbTlrZVVJc0lIQnBkbTkwUWl3Z2JXRjRSbTl5WTJVcE93b2dJQ0FnSUNCamIyNXpkQ0JoZUdselFTQTlJSFJvYVhNdVlYaHBjMEVnUFNCdmNIUnBiMjV6TG1GNGFYTkJJRDhnYjNCMGFXOXVjeTVoZUdselFTNWpiRzl1WlNncElEb2dibVYzSUZabFl6TW9NU3dnTUN3Z01DazdDaUFnSUNBZ0lHRjRhWE5CTG01dmNtMWhiR2w2WlNncE93b2dJQ0FnSUNCamIyNXpkQ0JoZUdselFpQTlJSFJvYVhNdVlYaHBjMElnUFNCdmNIUnBiMjV6TG1GNGFYTkNJRDhnYjNCMGFXOXVjeTVoZUdselFpNWpiRzl1WlNncElEb2dibVYzSUZabFl6TW9NU3dnTUN3Z01DazdDaUFnSUNBZ0lHRjRhWE5DTG01dmNtMWhiR2w2WlNncE93b2dJQ0FnSUNCMGFHbHpMbU52Ykd4cFpHVkRiMjV1WldOMFpXUWdQU0FoSVc5d2RHbHZibk11WTI5c2JHbGtaVU52Ym01bFkzUmxaRHNLSUNBZ0lDQWdZMjl1YzNRZ2NtOTBZWFJwYjI1aGJERWdQU0IwYUdsekxuSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJqRWdQU0J1WlhjZ1VtOTBZWFJwYjI1aGJFVnhkV0YwYVc5dUtHSnZaSGxCTENCaWIyUjVRaXdnYjNCMGFXOXVjeWs3Q2lBZ0lDQWdJR052Ym5OMElISnZkR0YwYVc5dVlXd3lJRDBnZEdocGN5NXliM1JoZEdsdmJtRnNSWEYxWVhScGIyNHlJRDBnYm1WM0lGSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJpaGliMlI1UVN3Z1ltOWtlVUlzSUc5d2RHbHZibk1wT3dvZ0lDQWdJQ0JqYjI1emRDQnRiM1J2Y2lBOUlIUm9hWE11Ylc5MGIzSkZjWFZoZEdsdmJpQTlJRzVsZHlCU2IzUmhkR2x2Ym1Gc1RXOTBiM0pGY1hWaGRHbHZiaWhpYjJSNVFTd2dZbTlrZVVJc0lHMWhlRVp2Y21ObEtUc0tJQ0FnSUNBZ2JXOTBiM0l1Wlc1aFlteGxaQ0E5SUdaaGJITmxPeUF2THlCT2IzUWdaVzVoWW14bFpDQmllU0JrWldaaGRXeDBDaUFnSUNBZ0lDOHZJRVZ4ZFdGMGFXOXVjeUIwYnlCaVpTQm1aV1FnZEc4Z2RHaGxJSE52YkhabGNnb0tJQ0FnSUNBZ2RHaHBjeTVsY1hWaGRHbHZibk11Y0hWemFDaHliM1JoZEdsdmJtRnNNU3dnY205MFlYUnBiMjVoYkRJc0lHMXZkRzl5S1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2daVzVoWW14bFRXOTBiM0lLSUNBZ0lDQXFMd29LQ2lBZ0lDQmxibUZpYkdWTmIzUnZjaWdwSUhzS0lDQWdJQ0FnZEdocGN5NXRiM1J2Y2tWeGRXRjBhVzl1TG1WdVlXSnNaV1FnUFNCMGNuVmxPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCa2FYTmhZbXhsVFc5MGIzSUtJQ0FnSUNBcUx3b0tDaUFnSUNCa2FYTmhZbXhsVFc5MGIzSW9LU0I3Q2lBZ0lDQWdJSFJvYVhNdWJXOTBiM0pGY1hWaGRHbHZiaTVsYm1GaWJHVmtJRDBnWm1Gc2MyVTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUhObGRFMXZkRzl5VTNCbFpXUUtJQ0FnSUNBcUx3b0tDaUFnSUNCelpYUk5iM1J2Y2xOd1pXVmtLSE53WldWa0tTQjdDaUFnSUNBZ0lIUm9hWE11Ylc5MGIzSkZjWFZoZEdsdmJpNTBZWEpuWlhSV1pXeHZZMmwwZVNBOUlITndaV1ZrT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQnpaWFJOYjNSdmNrMWhlRVp2Y21ObENpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzJWMFRXOTBiM0pOWVhoR2IzSmpaU2h0WVhoR2IzSmpaU2tnZXdvZ0lDQWdJQ0IwYUdsekxtMXZkRzl5UlhGMVlYUnBiMjR1YldGNFJtOXlZMlVnUFNCdFlYaEdiM0pqWlRzS0lDQWdJQ0FnZEdocGN5NXRiM1J2Y2tWeGRXRjBhVzl1TG0xcGJrWnZjbU5sSUQwZ0xXMWhlRVp2Y21ObE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUIxY0dSaGRHVUtJQ0FnSUNBcUx3b0tDaUFnSUNCMWNHUmhkR1VvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR0p2WkhsQklEMGdkR2hwY3k1aWIyUjVRVHNLSUNBZ0lDQWdZMjl1YzNRZ1ltOWtlVUlnUFNCMGFHbHpMbUp2WkhsQ093b2dJQ0FnSUNCamIyNXpkQ0J0YjNSdmNpQTlJSFJvYVhNdWJXOTBiM0pGY1hWaGRHbHZianNLSUNBZ0lDQWdZMjl1YzNRZ2NqRWdQU0IwYUdsekxuSnZkR0YwYVc5dVlXeEZjWFZoZEdsdmJqRTdDaUFnSUNBZ0lHTnZibk4wSUhJeUlEMGdkR2hwY3k1eWIzUmhkR2x2Ym1Gc1JYRjFZWFJwYjI0eU93b2dJQ0FnSUNCamIyNXpkQ0IzYjNKc1pFRjRhWE5CSUQwZ1NHbHVaMlZEYjI1emRISmhhVzUwWDNWd1pHRjBaVjkwYlhCV1pXTXhPd29nSUNBZ0lDQmpiMjV6ZENCM2IzSnNaRUY0YVhOQ0lEMGdTR2x1WjJWRGIyNXpkSEpoYVc1MFgzVndaR0YwWlY5MGJYQldaV015T3dvZ0lDQWdJQ0JqYjI1emRDQmhlR2x6UVNBOUlIUm9hWE11WVhocGMwRTdDaUFnSUNBZ0lHTnZibk4wSUdGNGFYTkNJRDBnZEdocGN5NWhlR2x6UWpzS0lDQWdJQ0FnYzNWd1pYSXVkWEJrWVhSbEtDazdJQzh2SUVkbGRDQjNiM0pzWkNCaGVHVnpDZ29nSUNBZ0lDQmliMlI1UVM1eGRXRjBaWEp1YVc5dUxuWnRkV3gwS0dGNGFYTkJMQ0IzYjNKc1pFRjRhWE5CS1RzS0lDQWdJQ0FnWW05a2VVSXVjWFZoZEdWeWJtbHZiaTUyYlhWc2RDaGhlR2x6UWl3Z2QyOXliR1JCZUdselFpazdDaUFnSUNBZ0lIZHZjbXhrUVhocGMwRXVkR0Z1WjJWdWRITW9jakV1WVhocGMwRXNJSEl5TG1GNGFYTkJLVHNLSUNBZ0lDQWdjakV1WVhocGMwSXVZMjl3ZVNoM2IzSnNaRUY0YVhOQ0tUc0tJQ0FnSUNBZ2NqSXVZWGhwYzBJdVkyOXdlU2gzYjNKc1pFRjRhWE5DS1RzS0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG0xdmRHOXlSWEYxWVhScGIyNHVaVzVoWW14bFpDa2dld29nSUNBZ0lDQWdJR0p2WkhsQkxuRjFZWFJsY201cGIyNHVkbTExYkhRb2RHaHBjeTVoZUdselFTd2diVzkwYjNJdVlYaHBjMEVwT3dvZ0lDQWdJQ0FnSUdKdlpIbENMbkYxWVhSbGNtNXBiMjR1ZG0xMWJIUW9kR2hwY3k1aGVHbHpRaXdnYlc5MGIzSXVZWGhwYzBJcE93b2dJQ0FnSUNCOUNpQWdJQ0I5Q2dvZ0lIMEtJQ0JqYjI1emRDQklhVzVuWlVOdmJuTjBjbUZwYm5SZmRYQmtZWFJsWDNSdGNGWmxZekVnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElFaHBibWRsUTI5dWMzUnlZV2x1ZEY5MWNHUmhkR1ZmZEcxd1ZtVmpNaUE5SUc1bGR5QldaV016S0NrN0Nnb2dJQzhxS2dvZ0lDQXFJRU52Ym5OMGNtRnBibk1nZEdobElITnNhWEJ3YVc1bklHbHVJR0VnWTI5dWRHRmpkQ0JoYkc5dVp5QmhJSFJoYm1kbGJuUUtJQ0FnS2k4S0lDQmpiR0Z6Y3lCR2NtbGpkR2x2YmtWeGRXRjBhVzl1SUdWNGRHVnVaSE1nUlhGMVlYUnBiMjRnZXdvZ0lDQWdMeThnVkdGdVoyVnVkQW9LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRSEJoY21GdElITnNhWEJHYjNKalpTQnphRzkxYkdRZ1ltVWdLeTFHWDJaeWFXTjBhVzl1SUQwZ0t5MXRkU0FxSUVaZmJtOXliV0ZzSUQwZ0t5MXRkU0FxSUcwZ0tpQm5DaUFnSUNBZ0tpOEtJQ0FnSUdOdmJuTjBjblZqZEc5eUtHSnZaSGxCTENCaWIyUjVRaXdnYzJ4cGNFWnZjbU5sS1NCN0NpQWdJQ0FnSUhOMWNHVnlLR0p2WkhsQkxDQmliMlI1UWl3Z0xYTnNhWEJHYjNKalpTd2djMnhwY0VadmNtTmxLVHNLSUNBZ0lDQWdkR2hwY3k1eWFTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJSFJvYVhNdWNtb2dQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdJQ0IwYUdsekxuUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdmUW9LSUNBZ0lHTnZiWEIxZEdWQ0tHZ3BJSHNLSUNBZ0lDQWdkR2hwY3k1aE93b2dJQ0FnSUNCamIyNXpkQ0JpSUQwZ2RHaHBjeTVpT3dvZ0lDQWdJQ0IwYUdsekxtSnBPd29nSUNBZ0lDQjBhR2x6TG1KcU93b2dJQ0FnSUNCamIyNXpkQ0J5YVNBOUlIUm9hWE11Y21rN0NpQWdJQ0FnSUdOdmJuTjBJSEpxSUQwZ2RHaHBjeTV5YWpzS0lDQWdJQ0FnWTI5dWMzUWdjbWw0ZENBOUlFWnlhV04wYVc5dVJYRjFZWFJwYjI1ZlkyOXRjSFYwWlVKZmRHVnRjREU3Q2lBZ0lDQWdJR052Ym5OMElISnFlSFFnUFNCR2NtbGpkR2x2YmtWeGRXRjBhVzl1WDJOdmJYQjFkR1ZDWDNSbGJYQXlPd29nSUNBZ0lDQmpiMjV6ZENCMElEMGdkR2hwY3k1ME95QXZMeUJEWVd4MVkyeGhkR1VnWTNKdmMzTWdjSEp2WkhWamRITUtDaUFnSUNBZ0lISnBMbU55YjNOektIUXNJSEpwZUhRcE93b2dJQ0FnSUNCeWFpNWpjbTl6Y3loMExDQnlhbmgwS1RzZ0x5OGdSeUE5SUZzdGRDQXRjbWw0ZENCMElISnFlSFJkQ2lBZ0lDQWdJQzh2SUVGdVpDQnlaVzFsYldKbGNpd2dkR2hwY3lCcGN5QmhJSEIxY21VZ2RtVnNiMk5wZEhrZ1kyOXVjM1J5WVdsdWRDd2daeUJwY3lCaGJIZGhlWE1nZW1WeWJ5RUtDaUFnSUNBZ0lHTnZibk4wSUVkQklEMGdkR2hwY3k1cVlXTnZZbWxoYmtWc1pXMWxiblJCT3dvZ0lDQWdJQ0JqYjI1emRDQkhRaUE5SUhSb2FYTXVhbUZqYjJKcFlXNUZiR1Z0Wlc1MFFqc0tJQ0FnSUNBZ2RDNXVaV2RoZEdVb1IwRXVjM0JoZEdsaGJDazdDaUFnSUNBZ0lISnBlSFF1Ym1WbllYUmxLRWRCTG5KdmRHRjBhVzl1WVd3cE93b2dJQ0FnSUNCSFFpNXpjR0YwYVdGc0xtTnZjSGtvZENrN0NpQWdJQ0FnSUVkQ0xuSnZkR0YwYVc5dVlXd3VZMjl3ZVNoeWFuaDBLVHNLSUNBZ0lDQWdZMjl1YzNRZ1IxY2dQU0IwYUdsekxtTnZiWEIxZEdWSFZ5Z3BPd29nSUNBZ0lDQmpiMjV6ZENCSGFVMW1JRDBnZEdocGN5NWpiMjF3ZFhSbFIybE5aaWdwT3dvZ0lDQWdJQ0JqYjI1emRDQkNJRDBnTFVkWElDb2dZaUF0SUdnZ0tpQkhhVTFtT3dvZ0lDQWdJQ0J5WlhSMWNtNGdRanNLSUNBZ0lIMEtDaUFnZlFvZ0lHTnZibk4wSUVaeWFXTjBhVzl1UlhGMVlYUnBiMjVmWTI5dGNIVjBaVUpmZEdWdGNERWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUVaeWFXTjBhVzl1UlhGMVlYUnBiMjVmWTI5dGNIVjBaVUpmZEdWdGNESWdQU0J1WlhjZ1ZtVmpNeWdwT3dvS0lDQXZLaW9LSUNBZ0tpQkVaV1pwYm1WeklIZG9ZWFFnYUdGd2NHVnVjeUIzYUdWdUlIUjNieUJ0WVhSbGNtbGhiSE1nYldWbGRDNEtJQ0FnS2lCQWRHOWtieUJTWldaaFkzUnZjaUJ0WVhSbGNtbGhiSE1nZEc4Z2JXRjBaWEpwWVd4QklHRnVaQ0J0WVhSbGNtbGhiRUlLSUNBZ0tpOEtJQ0JqYkdGemN5QkRiMjUwWVdOMFRXRjBaWEpwWVd3Z2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCSlpHVnVkR2xtYVdWeUlHOW1JSFJvYVhNZ2JXRjBaWEpwWVd3dUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZCaGNuUnBZMmx3WVhScGJtY2diV0YwWlhKcFlXeHpMZ29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkdjbWxqZEdsdmJpQmpiMlZtWm1samFXVnVkQzRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREF1TXdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTWlhOMGFYUjFkR2x2YmlCamIyVm1abWxqYVdWdWRDNEtJQ0FnSUNBcUlFQmtaV1poZFd4MElEQXVNd29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlRkR2xtWm01bGMzTWdiMllnZEdobElIQnliMlIxWTJWa0lHTnZiblJoWTNRZ1pYRjFZWFJwYjI1ekxnb2dJQ0FnSUNvZ1FHUmxabUYxYkhRZ01XVTNDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlGSmxiR0Y0WVhScGIyNGdkR2x0WlNCdlppQjBhR1VnY0hKdlpIVmpaV1FnWTI5dWRHRmpkQ0JsY1hWaGRHbHZibk11Q2lBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F6Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk4wYVdabWJtVnpjeUJ2WmlCMGFHVWdjSEp2WkhWalpXUWdabkpwWTNScGIyNGdaWEYxWVhScGIyNXpMZ29nSUNBZ0lDb2dRR1JsWm1GMWJIUWdNV1UzQ2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRkpsYkdGNFlYUnBiMjRnZEdsdFpTQnZaaUIwYUdVZ2NISnZaSFZqWldRZ1puSnBZM1JwYjI0Z1pYRjFZWFJwYjI1ekNpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBekNpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0cweExDQnRNaXdnYjNCMGFXOXVjeWtnZXdvZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnVlhScGJITXVaR1ZtWVhWc2RITW9iM0IwYVc5dWN5d2dld29nSUNBZ0lDQWdJR1p5YVdOMGFXOXVPaUF3TGpNc0NpQWdJQ0FnSUNBZ2NtVnpkR2wwZFhScGIyNDZJREF1TXl3S0lDQWdJQ0FnSUNCamIyNTBZV04wUlhGMVlYUnBiMjVUZEdsbVptNWxjM002SURGbE55d0tJQ0FnSUNBZ0lDQmpiMjUwWVdOMFJYRjFZWFJwYjI1U1pXeGhlR0YwYVc5dU9pQXpMQW9nSUNBZ0lDQWdJR1p5YVdOMGFXOXVSWEYxWVhScGIyNVRkR2xtWm01bGMzTTZJREZsTnl3S0lDQWdJQ0FnSUNCbWNtbGpkR2x2YmtWeGRXRjBhVzl1VW1Wc1lYaGhkR2x2YmpvZ013b2dJQ0FnSUNCOUtUc0tJQ0FnSUNBZ2RHaHBjeTVwWkNBOUlFTnZiblJoWTNSTllYUmxjbWxoYkM1cFpFTnZkVzUwWlhJckt6c0tJQ0FnSUNBZ2RHaHBjeTV0WVhSbGNtbGhiSE1nUFNCYmJURXNJRzB5WFRzS0lDQWdJQ0FnZEdocGN5NW1jbWxqZEdsdmJpQTlJRzl3ZEdsdmJuTXVabkpwWTNScGIyNDdDaUFnSUNBZ0lIUm9hWE11Y21WemRHbDBkWFJwYjI0Z1BTQnZjSFJwYjI1ekxuSmxjM1JwZEhWMGFXOXVPd29nSUNBZ0lDQjBhR2x6TG1OdmJuUmhZM1JGY1hWaGRHbHZibE4wYVdabWJtVnpjeUE5SUc5d2RHbHZibk11WTI5dWRHRmpkRVZ4ZFdGMGFXOXVVM1JwWm1adVpYTnpPd29nSUNBZ0lDQjBhR2x6TG1OdmJuUmhZM1JGY1hWaGRHbHZibEpsYkdGNFlYUnBiMjRnUFNCdmNIUnBiMjV6TG1OdmJuUmhZM1JGY1hWaGRHbHZibEpsYkdGNFlYUnBiMjQ3Q2lBZ0lDQWdJSFJvYVhNdVpuSnBZM1JwYjI1RmNYVmhkR2x2YmxOMGFXWm1ibVZ6Y3lBOUlHOXdkR2x2Ym5NdVpuSnBZM1JwYjI1RmNYVmhkR2x2YmxOMGFXWm1ibVZ6Y3pzS0lDQWdJQ0FnZEdocGN5NW1jbWxqZEdsdmJrVnhkV0YwYVc5dVVtVnNZWGhoZEdsdmJpQTlJRzl3ZEdsdmJuTXVabkpwWTNScGIyNUZjWFZoZEdsdmJsSmxiR0Y0WVhScGIyNDdDaUFnSUNCOUNnb2dJSDBLSUNCRGIyNTBZV04wVFdGMFpYSnBZV3d1YVdSRGIzVnVkR1Z5SUQwZ01Ec0tDaUFnTHlvcUNpQWdJQ29nUkdWbWFXNWxjeUJoSUhCb2VYTnBZM01nYldGMFpYSnBZV3d1Q2lBZ0lDb3ZDaUFnWTJ4aGMzTWdUV0YwWlhKcFlXd2dld29nSUNBZ0x5b3FDaUFnSUNBZ0tpQk5ZWFJsY21saGJDQnVZVzFsTGdvZ0lDQWdJQ29nU1dZZ2IzQjBhVzl1Y3lCcGN5QmhJSE4wY21sdVp5d2dibUZ0WlNCM2FXeHNJR0psSUhObGRDQjBieUIwYUdGMElITjBjbWx1Wnk0S0lDQWdJQ0FxSUVCMGIyUnZJRVJsY0hKbFkyRjBaU0IwYUdsekNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvZ1RXRjBaWEpwWVd3Z2FXUXVJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJHY21samRHbHZiaUJtYjNJZ2RHaHBjeUJ0WVhSbGNtbGhiQzRLSUNBZ0lDQXFJRWxtSUc1dmJpMXVaV2RoZEdsMlpTd2dhWFFnZDJsc2JDQmlaU0IxYzJWa0lHbHVjM1JsWVdRZ2IyWWdkR2hsSUdaeWFXTjBhVzl1SUdkcGRtVnVJR0o1SUVOdmJuUmhZM1JOWVhSbGNtbGhiSE11SUVsbUlIUm9aWEpsSjNNZ2JtOGdiV0YwWTJocGJtY2dRMjl1ZEdGamRFMWhkR1Z5YVdGc0xDQjBhR1VnZG1Gc2RXVWdabkp2YlNCZ1pHVm1ZWFZzZEVOdmJuUmhZM1JOWVhSbGNtbGhiR0FnYVc0Z2RHaGxJRmR2Y214a0lIZHBiR3dnWW1VZ2RYTmxaQzRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVbVZ6ZEdsMGRYUnBiMjRnWm05eUlIUm9hWE1nYldGMFpYSnBZV3d1Q2lBZ0lDQWdLaUJKWmlCdWIyNHRibVZuWVhScGRtVXNJR2wwSUhkcGJHd2dZbVVnZFhObFpDQnBibk4wWldGa0lHOW1JSFJvWlNCeVpYTjBhWFIxZEdsdmJpQm5hWFpsYmlCaWVTQkRiMjUwWVdOMFRXRjBaWEpwWVd4ekxpQkpaaUIwYUdWeVpTZHpJRzV2SUcxaGRHTm9hVzVuSUVOdmJuUmhZM1JOWVhSbGNtbGhiQ3dnZEdobElIWmhiSFZsSUdaeWIyMGdZR1JsWm1GMWJIUkRiMjUwWVdOMFRXRjBaWEpwWVd4Z0lHbHVJSFJvWlNCWGIzSnNaQ0IzYVd4c0lHSmxJSFZ6WldRdUNpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk1wSUhzS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0I3ZlRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYkdWMElHNWhiV1VnUFNBbkp6c2dMeThnUW1GamEzZGhjbVJ6SUdOdmJYQmhkR2xpYVd4cGRIa2dabWw0Q2dvZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk1nUFQwOUlDZHpkSEpwYm1jbktTQjdDaUFnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbmRoY200b1lGQmhjM05wYm1jZ1lTQnpkSEpwYm1jZ2RHOGdUV0YwWlhKcFlXeFBjSFJwYjI1eklHbHpJR1JsY0hKbFkyRjBaV1FzSUdGdVpDQm9ZWE1nYm04Z1pXWm1aV04wWUNrS0lDQWdJQ0FnSUNCdVlXMWxJRDBnYjNCMGFXOXVjenNLSUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTMwN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVibUZ0WlNBOUlHNWhiV1U3Q2lBZ0lDQWdJSFJvYVhNdWFXUWdQU0JOWVhSbGNtbGhiQzVwWkVOdmRXNTBaWElyS3pzS0lDQWdJQ0FnZEdocGN5NW1jbWxqZEdsdmJpQTlJSFI1Y0dWdlppQnZjSFJwYjI1ekxtWnlhV04wYVc5dUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOXdkR2x2Ym5NdVpuSnBZM1JwYjI0Z09pQXRNVHNLSUNBZ0lDQWdkR2hwY3k1eVpYTjBhWFIxZEdsdmJpQTlJSFI1Y0dWdlppQnZjSFJwYjI1ekxuSmxjM1JwZEhWMGFXOXVJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzl3ZEdsdmJuTXVjbVZ6ZEdsMGRYUnBiMjRnT2lBdE1Uc0tJQ0FnSUgwS0NpQWdmUW9nSUUxaGRHVnlhV0ZzTG1sa1EyOTFiblJsY2lBOUlEQTdDZ29nSUM4cUtnb2dJQ0FxSUVFZ2MzQnlhVzVuTENCamIyNXVaV04wYVc1bklIUjNieUJpYjJScFpYTXVDaUFnSUNvZ1FHVjRZVzF3YkdVS0lDQWdLaUFnSUNBZ1kyOXVjM1FnYzNCeWFXNW5JRDBnYm1WM0lGTndjbWx1WnloaWIzaENiMlI1TENCemNHaGxjbVZDYjJSNUxDQjdDaUFnSUNvZ0lDQWdJQ0FnY21WemRFeGxibWQwYURvZ01Dd0tJQ0FnS2lBZ0lDQWdJQ0J6ZEdsbVptNWxjM002SURVd0xBb2dJQ0FxSUNBZ0lDQWdJR1JoYlhCcGJtYzZJREVzQ2lBZ0lDb2dJQ0FnSUgwcENpQWdJQ29LSUNBZ0tpQWdJQ0FnTHk4Z1EyOXRjSFYwWlNCMGFHVWdabTl5WTJVZ1lXWjBaWElnWldGamFDQnpkR1Z3Q2lBZ0lDb2dJQ0FnSUhkdmNteGtMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM0J2YzNSVGRHVndKeXdnS0dWMlpXNTBLU0E5UGlCN0NpQWdJQ29nSUNBZ0lDQWdjM0J5YVc1bkxtRndjR3g1Um05eVkyVW9LUW9nSUNBcUlDQWdJQ0I5S1FvZ0lDQXFMd29nSUdOc1lYTnpJRk53Y21sdVp5QjdDaUFnSUNBdktpb0tJQ0FnSUNBcUlGSmxjM1FnYkdWdVozUm9JRzltSUhSb1pTQnpjSEpwYm1jdUlFRWdiblZ0WW1WeUlENGdNQzRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREVLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVM1JwWm1adVpYTnpJRzltSUhSb1pTQnpjSEpwYm1jdUlFRWdiblZ0WW1WeUlENDlJREF1Q2lBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4TURBS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUkdGdGNHbHVaeUJ2WmlCMGFHVWdjM0J5YVc1bkxpQkJJRzUxYldKbGNpQStQU0F3TGdvZ0lDQWdJQ29nUUdSbFptRjFiSFFnTVFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJHYVhKemRDQmpiMjV1WldOMFpXUWdZbTlrZVM0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTJWamIyNWtJR052Ym01bFkzUmxaQ0JpYjJSNUxnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQmJtTm9iM0lnWm05eUlHSnZaSGxCSUdsdUlHeHZZMkZzSUdKdlpIbEJJR052YjNKa2FXNWhkR1Z6TGdvZ0lDQWdJQ29nVjJobGNtVWdkRzhnYUc5dmF5QjBhR1VnYzNCeWFXNW5JSFJ2SUdKdlpIa2dRU3dnYVc0Z2JHOWpZV3dnWW05a2VTQmpiMjl5WkdsdVlYUmxjeTRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJRzVsZHlCV1pXTXpLQ2tLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRVzVqYUc5eUlHWnZjaUJpYjJSNVFpQnBiaUJzYjJOaGJDQmliMlI1UWlCamIyOXlaR2x1WVhSbGN5NEtJQ0FnSUNBcUlGZG9aWEpsSUhSdklHaHZiMnNnZEdobElITndjbWx1WnlCMGJ5QmliMlI1SUVJc0lHbHVJR3h2WTJGc0lHSnZaSGtnWTI5dmNtUnBibUYwWlhNdUNpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCdVpYY2dWbVZqTXlncENpQWdJQ0FnS2k4S0lDQWdJR052Ym5OMGNuVmpkRzl5S0dKdlpIbEJMQ0JpYjJSNVFpd2diM0IwYVc5dWN5a2dld29nSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeUE5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlIdDlPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG5KbGMzUk1aVzVuZEdnZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1eVpYTjBUR1Z1WjNSb0lEMDlQU0FuYm5WdFltVnlKeUEvSUc5d2RHbHZibk11Y21WemRFeGxibWQwYUNBNklERTdDaUFnSUNBZ0lIUm9hWE11YzNScFptWnVaWE56SUQwZ2IzQjBhVzl1Y3k1emRHbG1abTVsYzNNZ2ZId2dNVEF3T3dvZ0lDQWdJQ0IwYUdsekxtUmhiWEJwYm1jZ1BTQnZjSFJwYjI1ekxtUmhiWEJwYm1jZ2ZId2dNVHNLSUNBZ0lDQWdkR2hwY3k1aWIyUjVRU0E5SUdKdlpIbEJPd29nSUNBZ0lDQjBhR2x6TG1KdlpIbENJRDBnWW05a2VVSTdDaUFnSUNBZ0lIUm9hWE11Ykc5allXeEJibU5vYjNKQklEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdkR2hwY3k1c2IyTmhiRUZ1WTJodmNrSWdQU0J1WlhjZ1ZtVmpNeWdwT3dvS0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWJHOWpZV3hCYm1Ob2IzSkJLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXNiMk5oYkVGdVkyaHZja0V1WTI5d2VTaHZjSFJwYjI1ekxteHZZMkZzUVc1amFHOXlRU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG14dlkyRnNRVzVqYUc5eVFpa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJHOWpZV3hCYm1Ob2IzSkNMbU52Y0hrb2IzQjBhVzl1Y3k1c2IyTmhiRUZ1WTJodmNrSXBPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTUzYjNKc1pFRnVZMmh2Y2tFcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGZHZjbXhrUVc1amFHOXlRU2h2Y0hScGIyNXpMbmR2Y214a1FXNWphRzl5UVNrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuZHZjbXhrUVc1amFHOXlRaWtnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVjI5eWJHUkJibU5vYjNKQ0tHOXdkR2x2Ym5NdWQyOXliR1JCYm1Ob2IzSkNLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFpYUWdkR2hsSUdGdVkyaHZjaUJ3YjJsdWRDQnZiaUJpYjJSNUlFRXNJSFZ6YVc1bklIZHZjbXhrSUdOdmIzSmthVzVoZEdWekxnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhObGRGZHZjbXhrUVc1amFHOXlRU2gzYjNKc1pFRnVZMmh2Y2tFcElIc0tJQ0FnSUNBZ2RHaHBjeTVpYjJSNVFTNXdiMmx1ZEZSdlRHOWpZV3hHY21GdFpTaDNiM0pzWkVGdVkyaHZja0VzSUhSb2FYTXViRzlqWVd4QmJtTm9iM0pCS1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVMlYwSUhSb1pTQmhibU5vYjNJZ2NHOXBiblFnYjI0Z1ltOWtlU0JDTENCMWMybHVaeUIzYjNKc1pDQmpiMjl5WkdsdVlYUmxjeTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnpaWFJYYjNKc1pFRnVZMmh2Y2tJb2QyOXliR1JCYm1Ob2IzSkNLU0I3Q2lBZ0lDQWdJSFJvYVhNdVltOWtlVUl1Y0c5cGJuUlViMHh2WTJGc1JuSmhiV1VvZDI5eWJHUkJibU5vYjNKQ0xDQjBhR2x6TG14dlkyRnNRVzVqYUc5eVFpazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQjBhR1VnWVc1amFHOXlJSEJ2YVc1MElHOXVJR0p2WkhrZ1FTd2dhVzRnZDI5eWJHUWdZMjl2Y21ScGJtRjBaWE11Q2lBZ0lDQWdLaUJBY0dGeVlXMGdjbVZ6ZFd4MElGUm9aU0IyWldOMGIzSWdkRzhnYzNSdmNtVWdkR2hsSUhKbGMzVnNkQ0JwYmk0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSWGIzSnNaRUZ1WTJodmNrRW9jbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lIUm9hWE11WW05a2VVRXVjRzlwYm5SVWIxZHZjbXhrUm5KaGJXVW9kR2hwY3k1c2IyTmhiRUZ1WTJodmNrRXNJSEpsYzNWc2RDazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQjBhR1VnWVc1amFHOXlJSEJ2YVc1MElHOXVJR0p2WkhrZ1Fpd2dhVzRnZDI5eWJHUWdZMjl2Y21ScGJtRjBaWE11Q2lBZ0lDQWdLaUJBY0dGeVlXMGdjbVZ6ZFd4MElGUm9aU0IyWldOMGIzSWdkRzhnYzNSdmNtVWdkR2hsSUhKbGMzVnNkQ0JwYmk0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSWGIzSnNaRUZ1WTJodmNrSW9jbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lIUm9hWE11WW05a2VVSXVjRzlwYm5SVWIxZHZjbXhrUm5KaGJXVW9kR2hwY3k1c2IyTmhiRUZ1WTJodmNrSXNJSEpsYzNWc2RDazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVGd2NHeDVJSFJvWlNCemNISnBibWNnWm05eVkyVWdkRzhnZEdobElHTnZibTVsWTNSbFpDQmliMlJwWlhNdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWVhCd2JIbEdiM0pqWlNncElIc0tJQ0FnSUNBZ1kyOXVjM1FnYXlBOUlIUm9hWE11YzNScFptWnVaWE56T3dvZ0lDQWdJQ0JqYjI1emRDQmtJRDBnZEdocGN5NWtZVzF3YVc1bk93b2dJQ0FnSUNCamIyNXpkQ0JzSUQwZ2RHaHBjeTV5WlhOMFRHVnVaM1JvT3dvZ0lDQWdJQ0JqYjI1emRDQmliMlI1UVNBOUlIUm9hWE11WW05a2VVRTdDaUFnSUNBZ0lHTnZibk4wSUdKdlpIbENJRDBnZEdocGN5NWliMlI1UWpzS0lDQWdJQ0FnWTI5dWMzUWdjaUE5SUdGd2NHeDVSbTl5WTJWZmNqc0tJQ0FnSUNBZ1kyOXVjM1FnY2w5MWJtbDBJRDBnWVhCd2JIbEdiM0pqWlY5eVgzVnVhWFE3Q2lBZ0lDQWdJR052Ym5OMElIVWdQU0JoY0hCc2VVWnZjbU5sWDNVN0NpQWdJQ0FnSUdOdmJuTjBJR1lnUFNCaGNIQnNlVVp2Y21ObFgyWTdDaUFnSUNBZ0lHTnZibk4wSUhSdGNDQTlJR0Z3Y0d4NVJtOXlZMlZmZEcxd093b2dJQ0FnSUNCamIyNXpkQ0IzYjNKc1pFRnVZMmh2Y2tFZ1BTQmhjSEJzZVVadmNtTmxYM2R2Y214a1FXNWphRzl5UVRzS0lDQWdJQ0FnWTI5dWMzUWdkMjl5YkdSQmJtTm9iM0pDSUQwZ1lYQndiSGxHYjNKalpWOTNiM0pzWkVGdVkyaHZja0k3Q2lBZ0lDQWdJR052Ym5OMElISnBJRDBnWVhCd2JIbEdiM0pqWlY5eWFUc0tJQ0FnSUNBZ1kyOXVjM1FnY21vZ1BTQmhjSEJzZVVadmNtTmxYM0pxT3dvZ0lDQWdJQ0JqYjI1emRDQnlhVjk0WDJZZ1BTQmhjSEJzZVVadmNtTmxYM0pwWDNoZlpqc0tJQ0FnSUNBZ1kyOXVjM1FnY21wZmVGOW1JRDBnWVhCd2JIbEdiM0pqWlY5eWFsOTRYMlk3SUM4dklFZGxkQ0IzYjNKc1pDQmhibU5vYjNKekNnb2dJQ0FnSUNCMGFHbHpMbWRsZEZkdmNteGtRVzVqYUc5eVFTaDNiM0pzWkVGdVkyaHZja0VwT3dvZ0lDQWdJQ0IwYUdsekxtZGxkRmR2Y214a1FXNWphRzl5UWloM2IzSnNaRUZ1WTJodmNrSXBPeUF2THlCSFpYUWdiMlptYzJWMElIQnZhVzUwY3dvS0lDQWdJQ0FnZDI5eWJHUkJibU5vYjNKQkxuWnpkV0lvWW05a2VVRXVjRzl6YVhScGIyNHNJSEpwS1RzS0lDQWdJQ0FnZDI5eWJHUkJibU5vYjNKQ0xuWnpkV0lvWW05a2VVSXVjRzl6YVhScGIyNHNJSEpxS1RzZ0x5OGdRMjl0Y0hWMFpTQmthWE4wWVc1alpTQjJaV04wYjNJZ1ltVjBkMlZsYmlCM2IzSnNaQ0JoYm1Ob2IzSWdjRzlwYm5SekNnb2dJQ0FnSUNCM2IzSnNaRUZ1WTJodmNrSXVkbk4xWWloM2IzSnNaRUZ1WTJodmNrRXNJSElwT3dvZ0lDQWdJQ0JqYjI1emRDQnliR1Z1SUQwZ2NpNXNaVzVuZEdnb0tUc0tJQ0FnSUNBZ2NsOTFibWwwTG1OdmNIa29jaWs3Q2lBZ0lDQWdJSEpmZFc1cGRDNXViM0p0WVd4cGVtVW9LVHNnTHk4Z1EyOXRjSFYwWlNCeVpXeGhkR2wyWlNCMlpXeHZZMmwwZVNCdlppQjBhR1VnWVc1amFHOXlJSEJ2YVc1MGN5d2dkUW9LSUNBZ0lDQWdZbTlrZVVJdWRtVnNiMk5wZEhrdWRuTjFZaWhpYjJSNVFTNTJaV3h2WTJsMGVTd2dkU2s3SUM4dklFRmtaQ0J5YjNSaGRHbHZibUZzSUhabGJHOWphWFI1Q2dvZ0lDQWdJQ0JpYjJSNVFpNWhibWQxYkdGeVZtVnNiMk5wZEhrdVkzSnZjM01vY21vc0lIUnRjQ2s3Q2lBZ0lDQWdJSFV1ZG1Ga1pDaDBiWEFzSUhVcE93b2dJQ0FnSUNCaWIyUjVRUzVoYm1kMWJHRnlWbVZzYjJOcGRIa3VZM0p2YzNNb2Nta3NJSFJ0Y0NrN0NpQWdJQ0FnSUhVdWRuTjFZaWgwYlhBc0lIVXBPeUF2THlCR0lEMGdMU0JySUNvZ0tDQjRJQzBnVENBcElDMGdSQ0FxSUNnZ2RTQXBDZ29nSUNBZ0lDQnlYM1Z1YVhRdWMyTmhiR1VvTFdzZ0tpQW9jbXhsYmlBdElHd3BJQzBnWkNBcUlIVXVaRzkwS0hKZmRXNXBkQ2tzSUdZcE95QXZMeUJCWkdRZ1ptOXlZMlZ6SUhSdklHSnZaR2xsY3dvS0lDQWdJQ0FnWW05a2VVRXVabTl5WTJVdWRuTjFZaWhtTENCaWIyUjVRUzVtYjNKalpTazdDaUFnSUNBZ0lHSnZaSGxDTG1admNtTmxMblpoWkdRb1ppd2dZbTlrZVVJdVptOXlZMlVwT3lBdkx5QkJibWQxYkdGeUlHWnZjbU5sQ2dvZ0lDQWdJQ0J5YVM1amNtOXpjeWhtTENCeWFWOTRYMllwT3dvZ0lDQWdJQ0J5YWk1amNtOXpjeWhtTENCeWFsOTRYMllwT3dvZ0lDQWdJQ0JpYjJSNVFTNTBiM0p4ZFdVdWRuTjFZaWh5YVY5NFgyWXNJR0p2WkhsQkxuUnZjbkYxWlNrN0NpQWdJQ0FnSUdKdlpIbENMblJ2Y25GMVpTNTJZV1JrS0hKcVgzaGZaaXdnWW05a2VVSXVkRzl5Y1hWbEtUc0tJQ0FnSUgwS0NpQWdmUW9nSUdOdmJuTjBJR0Z3Y0d4NVJtOXlZMlZmY2lBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdZWEJ3YkhsR2IzSmpaVjl5WDNWdWFYUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdGd2NHeDVSbTl5WTJWZmRTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWVhCd2JIbEdiM0pqWlY5bUlEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0JoY0hCc2VVWnZjbU5sWDNkdmNteGtRVzVqYUc5eVFTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWVhCd2JIbEdiM0pqWlY5M2IzSnNaRUZ1WTJodmNrSWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdGd2NHeDVSbTl5WTJWZmNta2dQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdGd2NHeDVSbTl5WTJWZmNtb2dQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdGd2NHeDVSbTl5WTJWZmNtbGZlRjltSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQmhjSEJzZVVadmNtTmxYM0pxWDNoZlppQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWVhCd2JIbEdiM0pqWlY5MGJYQWdQU0J1WlhjZ1ZtVmpNeWdwT3dvS0lDQXZLaW9LSUNBZ0tpQlhhR1ZsYkVsdVptOEtJQ0FnS2k4S0lDQmpiR0Z6Y3lCWGFHVmxiRWx1Wm04Z2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCTllYZ2dkSEpoZG1Wc0lHUnBjM1JoYm1ObElHOW1JSFJvWlNCemRYTndaVzV6YVc5dUxDQnBiaUJ0WlhSbGNuTXVDaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlGTndaV1ZrSUhSdklHRndjR3g1SUhSdklIUm9aU0IzYUdWbGJDQnliM1JoZEdsdmJpQjNhR1Z1SUhSb1pTQjNhR1ZsYkNCcGN5QnpiR2xrYVc1bkxnb2dJQ0FnSUNvZ1FHUmxabUYxYkhRZ0xUQXVNUW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkpaaUIwYUdVZ1kzVnpkRzl0VTJ4cFpHbHVaMUp2ZEdGMGFXOXVZV3hUY0dWbFpDQnphRzkxYkdRZ1ltVWdkWE5sWkM0S0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlITnNhV1JwYm1jS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTI5dWJtVmpkR2x2YmlCd2IybHVkQ3dnWkdWbWFXNWxaQ0JzYjJOaGJHeDVJR2x1SUhSb1pTQmphR0Z6YzJseklHSnZaSGtnWm5KaGJXVXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlHTm9ZWE56YVhORGIyNXVaV04wYVc5dVVHOXBiblJYYjNKc1pBb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCa2FYSmxZM1JwYjI1TWIyTmhiQW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQmthWEpsWTNScGIyNVhiM0pzWkFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJoZUd4bFRHOWpZV3dLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dZWGhzWlZkdmNteGtDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlITjFjM0JsYm5OcGIyNVNaWE4wVEdWdVozUm9DaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlITjFjM0JsYm5OcGIyNU5ZWGhNWlc1bmRHZ0tJQ0FnSUNBcUlFQmtaV1poZFd4MElESUtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ2NtRmthWFZ6Q2lBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSE4xYzNCbGJuTnBiMjVUZEdsbVptNWxjM01LSUNBZ0lDQXFJRUJrWldaaGRXeDBJREV3TUFvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJrWVcxd2FXNW5RMjl0Y0hKbGMzTnBiMjRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREV3Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJR1JoYlhCcGJtZFNaV3hoZUdGMGFXOXVDaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhNQW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQm1jbWxqZEdsdmJsTnNhWEFLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREV3TGpVS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2lCbWIzSjNZWEprUVdOalpXeGxjbUYwYVc5dUlDb3ZDZ29nSUNBZ0x5b3FJSE5wWkdWQlkyTmxiR1Z5WVhScGIyNGdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSE4wWldWeWFXNW5DaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlGSnZkR0YwYVc5dUlIWmhiSFZsTENCcGJpQnlZV1JwWVc1ekxnb2dJQ0FnSUNvZ1FHUmxabUYxYkhRZ01Bb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCa1pXeDBZVkp2ZEdGMGFXOXVDaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlISnZiR3hKYm1ac2RXVnVZMlVLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREF1TURFS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nYldGNFUzVnpjR1Z1YzJsdmJrWnZjbU5sQ2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJR1Z1WjJsdVpVWnZjbU5sQ2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJR0p5WVd0bENpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUdselJuSnZiblJYYUdWbGJBb2dJQ0FnSUNvZ1FHUmxabUYxYkhRZ2RISjFaUW9nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQmpiR2x3Y0dWa1NXNTJRMjl1ZEdGamRFUnZkRk4xYzNCbGJuTnBiMjRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREVLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2djM1Z6Y0dWdWMybHZibEpsYkdGMGFYWmxWbVZzYjJOcGRIa0tJQ0FnSUNBcUlFQmtaV1poZFd4MElEQUtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ2MzVnpjR1Z1YzJsdmJrWnZjbU5sQ2lBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSE5zYVhCSmJtWnZDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlITnJhV1JKYm1adkNpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd0NpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUhOMWMzQmxibk5wYjI1TVpXNW5kR2dLSUNBZ0lDQXFJRUJrWldaaGRXeDBJREFLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2djMmxrWlVsdGNIVnNjMlVLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dabTl5ZDJGeVpFbHRjSFZzYzJVS0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVkdobElISmxjM1ZzZENCbWNtOXRJSEpoZVdOaGMzUnBibWN1Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRmRvWldWc0lIZHZjbXhrSUhSeVlXNXpabTl5YlM0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nYVhOSmJrTnZiblJoWTNRS0lDQWdJQ0FxTHdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjeWtnZXdvZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnVlhScGJITXVaR1ZtWVhWc2RITW9iM0IwYVc5dWN5d2dld29nSUNBZ0lDQWdJR05vWVhOemFYTkRiMjV1WldOMGFXOXVVRzlwYm5STWIyTmhiRG9nYm1WM0lGWmxZek1vS1N3S0lDQWdJQ0FnSUNCamFHRnpjMmx6UTI5dWJtVmpkR2x2YmxCdmFXNTBWMjl5YkdRNklHNWxkeUJXWldNektDa3NDaUFnSUNBZ0lDQWdaR2x5WldOMGFXOXVURzlqWVd3NklHNWxkeUJXWldNektDa3NDaUFnSUNBZ0lDQWdaR2x5WldOMGFXOXVWMjl5YkdRNklHNWxkeUJXWldNektDa3NDaUFnSUNBZ0lDQWdZWGhzWlV4dlkyRnNPaUJ1WlhjZ1ZtVmpNeWdwTEFvZ0lDQWdJQ0FnSUdGNGJHVlhiM0pzWkRvZ2JtVjNJRlpsWXpNb0tTd0tJQ0FnSUNBZ0lDQnpkWE53Wlc1emFXOXVVbVZ6ZEV4bGJtZDBhRG9nTVN3S0lDQWdJQ0FnSUNCemRYTndaVzV6YVc5dVRXRjRUR1Z1WjNSb09pQXlMQW9nSUNBZ0lDQWdJSEpoWkdsMWN6b2dNU3dLSUNBZ0lDQWdJQ0J6ZFhOd1pXNXphVzl1VTNScFptWnVaWE56T2lBeE1EQXNDaUFnSUNBZ0lDQWdaR0Z0Y0dsdVowTnZiWEJ5WlhOemFXOXVPaUF4TUN3S0lDQWdJQ0FnSUNCa1lXMXdhVzVuVW1Wc1lYaGhkR2x2YmpvZ01UQXNDaUFnSUNBZ0lDQWdabkpwWTNScGIyNVRiR2x3T2lBeE1DNDFMQW9nSUNBZ0lDQWdJR1p2Y25kaGNtUkJZMk5sYkdWeVlYUnBiMjQ2SURFc0NpQWdJQ0FnSUNBZ2MybGtaVUZqWTJWc1pYSmhkR2x2YmpvZ01Td0tJQ0FnSUNBZ0lDQnpkR1ZsY21sdVp6b2dNQ3dLSUNBZ0lDQWdJQ0J5YjNSaGRHbHZiam9nTUN3S0lDQWdJQ0FnSUNCa1pXeDBZVkp2ZEdGMGFXOXVPaUF3TEFvZ0lDQWdJQ0FnSUhKdmJHeEpibVpzZFdWdVkyVTZJREF1TURFc0NpQWdJQ0FnSUNBZ2JXRjRVM1Z6Y0dWdWMybHZia1p2Y21ObE9pQk9kVzFpWlhJdVRVRllYMVpCVEZWRkxBb2dJQ0FnSUNBZ0lHbHpSbkp2Ym5SWGFHVmxiRG9nZEhKMVpTd0tJQ0FnSUNBZ0lDQmpiR2x3Y0dWa1NXNTJRMjl1ZEdGamRFUnZkRk4xYzNCbGJuTnBiMjQ2SURFc0NpQWdJQ0FnSUNBZ2MzVnpjR1Z1YzJsdmJsSmxiR0YwYVhabFZtVnNiMk5wZEhrNklEQXNDaUFnSUNBZ0lDQWdjM1Z6Y0dWdWMybHZia1p2Y21ObE9pQXdMQW9nSUNBZ0lDQWdJSE5zYVhCSmJtWnZPaUF3TEFvZ0lDQWdJQ0FnSUhOcmFXUkpibVp2T2lBd0xBb2dJQ0FnSUNBZ0lITjFjM0JsYm5OcGIyNU1aVzVuZEdnNklEQXNDaUFnSUNBZ0lDQWdiV0Y0VTNWemNHVnVjMmx2YmxSeVlYWmxiRG9nTVN3S0lDQWdJQ0FnSUNCMWMyVkRkWE4wYjIxVGJHbGthVzVuVW05MFlYUnBiMjVoYkZOd1pXVmtPaUJtWVd4elpTd0tJQ0FnSUNBZ0lDQmpkWE4wYjIxVGJHbGthVzVuVW05MFlYUnBiMjVoYkZOd1pXVmtPaUF0TUM0eENpQWdJQ0FnSUgwcE93b2dJQ0FnSUNCMGFHbHpMbTFoZUZOMWMzQmxibk5wYjI1VWNtRjJaV3dnUFNCdmNIUnBiMjV6TG0xaGVGTjFjM0JsYm5OcGIyNVVjbUYyWld3N0NpQWdJQ0FnSUhSb2FYTXVZM1Z6ZEc5dFUyeHBaR2x1WjFKdmRHRjBhVzl1WVd4VGNHVmxaQ0E5SUc5d2RHbHZibk11WTNWemRHOXRVMnhwWkdsdVoxSnZkR0YwYVc5dVlXeFRjR1ZsWkRzS0lDQWdJQ0FnZEdocGN5NTFjMlZEZFhOMGIyMVRiR2xrYVc1blVtOTBZWFJwYjI1aGJGTndaV1ZrSUQwZ2IzQjBhVzl1Y3k1MWMyVkRkWE4wYjIxVGJHbGthVzVuVW05MFlYUnBiMjVoYkZOd1pXVmtPd29nSUNBZ0lDQjBhR2x6TG5Oc2FXUnBibWNnUFNCbVlXeHpaVHNLSUNBZ0lDQWdkR2hwY3k1amFHRnpjMmx6UTI5dWJtVmpkR2x2YmxCdmFXNTBURzlqWVd3Z1BTQnZjSFJwYjI1ekxtTm9ZWE56YVhORGIyNXVaV04wYVc5dVVHOXBiblJNYjJOaGJDNWpiRzl1WlNncE93b2dJQ0FnSUNCMGFHbHpMbU5vWVhOemFYTkRiMjV1WldOMGFXOXVVRzlwYm5SWGIzSnNaQ0E5SUc5d2RHbHZibk11WTJoaGMzTnBjME52Ym01bFkzUnBiMjVRYjJsdWRGZHZjbXhrTG1Oc2IyNWxLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVpHbHlaV04wYVc5dVRHOWpZV3dnUFNCdmNIUnBiMjV6TG1ScGNtVmpkR2x2Ymt4dlkyRnNMbU5zYjI1bEtDazdDaUFnSUNBZ0lIUm9hWE11WkdseVpXTjBhVzl1VjI5eWJHUWdQU0J2Y0hScGIyNXpMbVJwY21WamRHbHZibGR2Y214a0xtTnNiMjVsS0NrN0NpQWdJQ0FnSUhSb2FYTXVZWGhzWlV4dlkyRnNJRDBnYjNCMGFXOXVjeTVoZUd4bFRHOWpZV3d1WTJ4dmJtVW9LVHNLSUNBZ0lDQWdkR2hwY3k1aGVHeGxWMjl5YkdRZ1BTQnZjSFJwYjI1ekxtRjRiR1ZYYjNKc1pDNWpiRzl1WlNncE93b2dJQ0FnSUNCMGFHbHpMbk4xYzNCbGJuTnBiMjVTWlhOMFRHVnVaM1JvSUQwZ2IzQjBhVzl1Y3k1emRYTndaVzV6YVc5dVVtVnpkRXhsYm1kMGFEc0tJQ0FnSUNBZ2RHaHBjeTV6ZFhOd1pXNXphVzl1VFdGNFRHVnVaM1JvSUQwZ2IzQjBhVzl1Y3k1emRYTndaVzV6YVc5dVRXRjRUR1Z1WjNSb093b2dJQ0FnSUNCMGFHbHpMbkpoWkdsMWN5QTlJRzl3ZEdsdmJuTXVjbUZrYVhWek93b2dJQ0FnSUNCMGFHbHpMbk4xYzNCbGJuTnBiMjVUZEdsbVptNWxjM01nUFNCdmNIUnBiMjV6TG5OMWMzQmxibk5wYjI1VGRHbG1abTVsYzNNN0NpQWdJQ0FnSUhSb2FYTXVaR0Z0Y0dsdVowTnZiWEJ5WlhOemFXOXVJRDBnYjNCMGFXOXVjeTVrWVcxd2FXNW5RMjl0Y0hKbGMzTnBiMjQ3Q2lBZ0lDQWdJSFJvYVhNdVpHRnRjR2x1WjFKbGJHRjRZWFJwYjI0Z1BTQnZjSFJwYjI1ekxtUmhiWEJwYm1kU1pXeGhlR0YwYVc5dU93b2dJQ0FnSUNCMGFHbHpMbVp5YVdOMGFXOXVVMnhwY0NBOUlHOXdkR2x2Ym5NdVpuSnBZM1JwYjI1VGJHbHdPd29nSUNBZ0lDQjBhR2x6TG1admNuZGhjbVJCWTJObGJHVnlZWFJwYjI0Z1BTQnZjSFJwYjI1ekxtWnZjbmRoY21SQlkyTmxiR1Z5WVhScGIyNDdDaUFnSUNBZ0lIUm9hWE11YzJsa1pVRmpZMlZzWlhKaGRHbHZiaUE5SUc5d2RHbHZibk11YzJsa1pVRmpZMlZzWlhKaGRHbHZianNLSUNBZ0lDQWdkR2hwY3k1emRHVmxjbWx1WnlBOUlEQTdDaUFnSUNBZ0lIUm9hWE11Y205MFlYUnBiMjRnUFNBd093b2dJQ0FnSUNCMGFHbHpMbVJsYkhSaFVtOTBZWFJwYjI0Z1BTQXdPd29nSUNBZ0lDQjBhR2x6TG5KdmJHeEpibVpzZFdWdVkyVWdQU0J2Y0hScGIyNXpMbkp2Ykd4SmJtWnNkV1Z1WTJVN0NpQWdJQ0FnSUhSb2FYTXViV0Y0VTNWemNHVnVjMmx2YmtadmNtTmxJRDBnYjNCMGFXOXVjeTV0WVhoVGRYTndaVzV6YVc5dVJtOXlZMlU3Q2lBZ0lDQWdJSFJvYVhNdVpXNW5hVzVsUm05eVkyVWdQU0F3T3dvZ0lDQWdJQ0IwYUdsekxtSnlZV3RsSUQwZ01Ec0tJQ0FnSUNBZ2RHaHBjeTVwYzBaeWIyNTBWMmhsWld3Z1BTQnZjSFJwYjI1ekxtbHpSbkp2Ym5SWGFHVmxiRHNLSUNBZ0lDQWdkR2hwY3k1amJHbHdjR1ZrU1c1MlEyOXVkR0ZqZEVSdmRGTjFjM0JsYm5OcGIyNGdQU0F4T3dvZ0lDQWdJQ0IwYUdsekxuTjFjM0JsYm5OcGIyNVNaV3hoZEdsMlpWWmxiRzlqYVhSNUlEMGdNRHNLSUNBZ0lDQWdkR2hwY3k1emRYTndaVzV6YVc5dVJtOXlZMlVnUFNBd093b2dJQ0FnSUNCMGFHbHpMbk5zYVhCSmJtWnZJRDBnTURzS0lDQWdJQ0FnZEdocGN5NXphMmxrU1c1bWJ5QTlJREE3Q2lBZ0lDQWdJSFJvYVhNdWMzVnpjR1Z1YzJsdmJreGxibWQwYUNBOUlEQTdDaUFnSUNBZ0lIUm9hWE11YzJsa1pVbHRjSFZzYzJVZ1BTQXdPd29nSUNBZ0lDQjBhR2x6TG1admNuZGhjbVJKYlhCMWJITmxJRDBnTURzS0lDQWdJQ0FnZEdocGN5NXlZWGxqWVhOMFVtVnpkV3gwSUQwZ2JtVjNJRkpoZVdOaGMzUlNaWE4xYkhRb0tUc0tJQ0FnSUNBZ2RHaHBjeTUzYjNKc1pGUnlZVzV6Wm05eWJTQTlJRzVsZHlCVWNtRnVjMlp2Y20wb0tUc0tJQ0FnSUNBZ2RHaHBjeTVwYzBsdVEyOXVkR0ZqZENBOUlHWmhiSE5sT3dvZ0lDQWdmUW9LSUNBZ0lIVndaR0YwWlZkb1pXVnNLR05vWVhOemFYTXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ2NtRjVZMkZ6ZEZKbGMzVnNkQ0E5SUhSb2FYTXVjbUY1WTJGemRGSmxjM1ZzZERzS0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG1selNXNURiMjUwWVdOMEtTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NISnZhbVZqZENBOUlISmhlV05oYzNSU1pYTjFiSFF1YUdsMFRtOXliV0ZzVjI5eWJHUXVaRzkwS0hKaGVXTmhjM1JTWlhOMWJIUXVaR2x5WldOMGFXOXVWMjl5YkdRcE93b2dJQ0FnSUNBZ0lISmhlV05oYzNSU1pYTjFiSFF1YUdsMFVHOXBiblJYYjNKc1pDNTJjM1ZpS0dOb1lYTnphWE11Y0c5emFYUnBiMjRzSUhKbGJIQnZjeWs3Q2lBZ0lDQWdJQ0FnWTJoaGMzTnBjeTVuWlhSV1pXeHZZMmwwZVVGMFYyOXliR1JRYjJsdWRDaHlaV3h3YjNNc0lHTm9ZWE56YVhOZmRtVnNiMk5wZEhsZllYUmZZMjl1ZEdGamRGQnZhVzUwS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205cVZtVnNJRDBnY21GNVkyRnpkRkpsYzNWc2RDNW9hWFJPYjNKdFlXeFhiM0pzWkM1a2IzUW9ZMmhoYzNOcGMxOTJaV3h2WTJsMGVWOWhkRjlqYjI1MFlXTjBVRzlwYm5RcE93b0tJQ0FnSUNBZ0lDQnBaaUFvY0hKdmFtVmpkQ0ErUFNBdE1DNHhLU0I3Q2lBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4xYzNCbGJuTnBiMjVTWld4aGRHbDJaVlpsYkc5amFYUjVJRDBnTUM0d093b2dJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHbHdjR1ZrU1c1MlEyOXVkR0ZqZEVSdmRGTjFjM0JsYm5OcGIyNGdQU0F4TGpBZ0x5QXdMakU3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2x1ZGlBOUlDMHhJQzhnY0hKdmFtVmpkRHNLSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1Z6Y0dWdWMybHZibEpsYkdGMGFYWmxWbVZzYjJOcGRIa2dQU0J3Y205cVZtVnNJQ29nYVc1Mk93b2dJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHbHdjR1ZrU1c1MlEyOXVkR0ZqZEVSdmRGTjFjM0JsYm5OcGIyNGdQU0JwYm5ZN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUM4dklFNXZkQ0JwYmlCamIyNTBZV04wSURvZ2NHOXphWFJwYjI0Z2QyaGxaV3dnYVc0Z1lTQnVhV05sSUNoeVpYTjBJR3hsYm1kMGFDa2djRzl6YVhScGIyNEtJQ0FnSUNBZ0lDQnlZWGxqWVhOMFVtVnpkV3gwTG5OMWMzQmxibk5wYjI1TVpXNW5kR2dnUFNCMGFHbHpMbk4xYzNCbGJuTnBiMjVTWlhOMFRHVnVaM1JvT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjM1Z6Y0dWdWMybHZibEpsYkdGMGFYWmxWbVZzYjJOcGRIa2dQU0F3TGpBN0NpQWdJQ0FnSUNBZ2NtRjVZMkZ6ZEZKbGMzVnNkQzVrYVhKbFkzUnBiMjVYYjNKc1pDNXpZMkZzWlNndE1Td2djbUY1WTJGemRGSmxjM1ZzZEM1b2FYUk9iM0p0WVd4WGIzSnNaQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiR2x3Y0dWa1NXNTJRMjl1ZEdGamRFUnZkRk4xYzNCbGJuTnBiMjRnUFNBeExqQTdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdmUW9nSUdOdmJuTjBJR05vWVhOemFYTmZkbVZzYjJOcGRIbGZZWFJmWTI5dWRHRmpkRkJ2YVc1MElEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J5Wld4d2IzTWdQU0J1WlhjZ1ZtVmpNeWdwT3dvS0lDQXZLaW9LSUNBZ0tpQldaV2hwWTJ4bElHaGxiSEJsY2lCamJHRnpjeUIwYUdGMElHTmhjM1J6SUhKaGVYTWdabkp2YlNCMGFHVWdkMmhsWld3Z2NHOXphWFJwYjI1eklIUnZkMkZ5WkhNZ2RHaGxJR2R5YjNWdVpDQmhibVFnWVhCd2JHbGxjeUJtYjNKalpYTXVDaUFnSUNvdkNpQWdZMnhoYzNNZ1VtRjVZMkZ6ZEZabGFHbGpiR1VnZXdvZ0lDQWdMeW9xSUZSb1pTQmpZWElnWTJoaGMzTnBjeUJpYjJSNUxpQXFMd29LSUNBZ0lDOHFLaUJVYUdVZ2QyaGxaV3h6TGlBcUx3b0tJQ0FnSUM4cUtpQlhhV3hzSUdKbElITmxkQ0IwYnlCMGNuVmxJR2xtSUhSb1pTQmpZWElnYVhNZ2MyeHBaR2x1Wnk0Z0tpOEtDaUFnSUNBdktpb2dTVzVrWlhnZ2IyWWdkR2hsSUhKcFoyaDBJR0Y0YVhNdUlIZzlNQ3dnZVQweExDQjZQVElnS2k4S0NpQWdJQ0F2S2lvZ1NXNWtaWGdnYjJZZ2RHaGxJR1p2Y25kaGNtUWdZWGhwY3k0Z2VEMHdMQ0I1UFRFc0lIbzlNaUFxTHdvS0lDQWdJQzhxS2lCSmJtUmxlQ0J2WmlCMGFHVWdkWEFnWVhocGN5NGdlRDB3TENCNVBURXNJSG85TWlBcUx3b0tJQ0FnSUM4cUtpQlVhR1VnWTI5dWMzUnlZV2x1ZEhNdUlDb3ZDZ29nSUNBZ0x5b3FJRTl3ZEdsdmJtRnNJSEJ5WlMxemRHVndJR05oYkd4aVlXTnJMaUFxTHdvS0lDQWdJQzhxS2lCT2RXMWlaWElnYjJZZ2QyaGxaV3h6SUc5dUlIUm9aU0JuY205MWJtUXVJQ292Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hScGIyNXpLU0I3Q2lBZ0lDQWdJSFJvYVhNdVkyaGhjM05wYzBKdlpIa2dQU0J2Y0hScGIyNXpMbU5vWVhOemFYTkNiMlI1T3dvZ0lDQWdJQ0IwYUdsekxuZG9aV1ZzU1c1bWIzTWdQU0JiWFRzS0lDQWdJQ0FnZEdocGN5NXpiR2xrYVc1bklEMGdabUZzYzJVN0NpQWdJQ0FnSUhSb2FYTXVkMjl5YkdRZ1BTQnVkV3hzT3dvZ0lDQWdJQ0IwYUdsekxtbHVaR1Y0VW1sbmFIUkJlR2x6SUQwZ2RIbHdaVzltSUc5d2RHbHZibk11YVc1a1pYaFNhV2RvZEVGNGFYTWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdiM0IwYVc5dWN5NXBibVJsZUZKcFoyaDBRWGhwY3lBNklESTdDaUFnSUNBZ0lIUm9hWE11YVc1a1pYaEdiM0ozWVhKa1FYaHBjeUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbWx1WkdWNFJtOXlkMkZ5WkVGNGFYTWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdiM0IwYVc5dWN5NXBibVJsZUVadmNuZGhjbVJCZUdseklEb2dNRHNLSUNBZ0lDQWdkR2hwY3k1cGJtUmxlRlZ3UVhocGN5QTlJSFI1Y0dWdlppQnZjSFJwYjI1ekxtbHVaR1Y0VlhCQmVHbHpJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzl3ZEdsdmJuTXVhVzVrWlhoVmNFRjRhWE1nT2lBeE93b2dJQ0FnSUNCMGFHbHpMbU52Ym5OMGNtRnBiblJ6SUQwZ1cxMDdDZ29nSUNBZ0lDQjBhR2x6TG5CeVpWTjBaWEJEWVd4c1ltRmpheUE5SUNncElEMCtJSHQ5T3dvS0lDQWdJQ0FnZEdocGN5NWpkWEp5Wlc1MFZtVm9hV05zWlZOd1pXVmtTMjFJYjNWeUlEMGdNRHNLSUNBZ0lDQWdkR2hwY3k1dWRXMVhhR1ZsYkhOUGJrZHliM1Z1WkNBOUlEQTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVGa1pDQmhJSGRvWldWc0xpQkdiM0lnYVc1bWIzSnRZWFJwYjI0Z1lXSnZkWFFnZEdobElHOXdkR2x2Ym5Nc0lITmxaU0JnVjJobFpXeEpibVp2WUM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JoWkdSWGFHVmxiQ2h2Y0hScGIyNXpLU0I3Q2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHbHVabThnUFNCdVpYY2dWMmhsWld4SmJtWnZLRzl3ZEdsdmJuTXBPd29nSUNBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUhSb2FYTXVkMmhsWld4SmJtWnZjeTVzWlc1bmRHZzdDaUFnSUNBZ0lIUm9hWE11ZDJobFpXeEpibVp2Y3k1d2RYTm9LR2x1Wm04cE93b2dJQ0FnSUNCeVpYUjFjbTRnYVc1a1pYZzdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZObGRDQjBhR1VnYzNSbFpYSnBibWNnZG1Gc2RXVWdiMllnWVNCM2FHVmxiQzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQnpaWFJUZEdWbGNtbHVaMVpoYkhWbEtIWmhiSFZsTENCM2FHVmxiRWx1WkdWNEtTQjdDaUFnSUNBZ0lHTnZibk4wSUhkb1pXVnNJRDBnZEdocGN5NTNhR1ZsYkVsdVptOXpXM2RvWldWc1NXNWtaWGhkT3dvZ0lDQWdJQ0IzYUdWbGJDNXpkR1ZsY21sdVp5QTlJSFpoYkhWbE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUWlhRZ2RHaGxJSGRvWldWc0lHWnZjbU5sSUhSdklHRndjR3g1SUc5dUlHOXVaU0J2WmlCMGFHVWdkMmhsWld4eklHVmhZMmdnZEdsdFpTQnpkR1Z3Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZWEJ3YkhsRmJtZHBibVZHYjNKalpTaDJZV3gxWlN3Z2QyaGxaV3hKYm1SbGVDa2dld29nSUNBZ0lDQjBhR2x6TG5kb1pXVnNTVzVtYjNOYmQyaGxaV3hKYm1SbGVGMHVaVzVuYVc1bFJtOXlZMlVnUFNCMllXeDFaVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1UyVjBJSFJvWlNCaWNtRnJhVzVuSUdadmNtTmxJRzltSUdFZ2QyaGxaV3dLSUNBZ0lDQXFMd29LQ2lBZ0lDQnpaWFJDY21GclpTaGljbUZyWlN3Z2QyaGxaV3hKYm1SbGVDa2dld29nSUNBZ0lDQjBhR2x6TG5kb1pXVnNTVzVtYjNOYmQyaGxaV3hKYm1SbGVGMHVZbkpoYTJVZ1BTQmljbUZyWlRzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRV1JrSUhSb1pTQjJaV2hwWTJ4bElHbHVZMngxWkdsdVp5QnBkSE1nWTI5dWMzUnlZV2x1ZEhNZ2RHOGdkR2hsSUhkdmNteGtMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lHRmtaRlJ2VjI5eWJHUW9kMjl5YkdRcElIc0tJQ0FnSUNBZ2QyOXliR1F1WVdSa1FtOWtlU2gwYUdsekxtTm9ZWE56YVhOQ2IyUjVLVHNLSUNBZ0lDQWdZMjl1YzNRZ2RHaGhkQ0E5SUhSb2FYTTdDZ29nSUNBZ0lDQjBhR2x6TG5CeVpWTjBaWEJEWVd4c1ltRmpheUE5SUNncElEMCtJSHNLSUNBZ0lDQWdJQ0IwYUdGMExuVndaR0YwWlZabGFHbGpiR1VvZDI5eWJHUXVaSFFwT3dvZ0lDQWdJQ0I5T3dvS0lDQWdJQ0FnZDI5eWJHUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jSEpsVTNSbGNDY3NJSFJvYVhNdWNISmxVM1JsY0VOaGJHeGlZV05yS1RzS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkNBOUlIZHZjbXhrT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnYjI1bElHOW1JSFJvWlNCM2FHVmxiQ0JoZUd4bGN5d2dkMjl5YkdRdGIzSnBaVzUwWldRdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnWjJWMFZtVm9hV05zWlVGNGFYTlhiM0pzWkNoaGVHbHpTVzVrWlhnc0lISmxjM1ZzZENrZ2V3b2dJQ0FnSUNCeVpYTjFiSFF1YzJWMEtHRjRhWE5KYm1SbGVDQTlQVDBnTUNBL0lERWdPaUF3TENCaGVHbHpTVzVrWlhnZ1BUMDlJREVnUHlBeElEb2dNQ3dnWVhocGMwbHVaR1Y0SUQwOVBTQXlJRDhnTVNBNklEQXBPd29nSUNBZ0lDQjBhR2x6TG1Ob1lYTnphWE5DYjJSNUxuWmxZM1J2Y2xSdlYyOXliR1JHY21GdFpTaHlaWE4xYkhRc0lISmxjM1ZzZENrN0NpQWdJQ0I5Q2dvZ0lDQWdkWEJrWVhSbFZtVm9hV05zWlNoMGFXMWxVM1JsY0NrZ2V3b2dJQ0FnSUNCamIyNXpkQ0IzYUdWbGJFbHVabTl6SUQwZ2RHaHBjeTUzYUdWbGJFbHVabTl6T3dvZ0lDQWdJQ0JqYjI1emRDQnVkVzFYYUdWbGJITWdQU0IzYUdWbGJFbHVabTl6TG14bGJtZDBhRHNLSUNBZ0lDQWdZMjl1YzNRZ1kyaGhjM05wYzBKdlpIa2dQU0IwYUdsekxtTm9ZWE56YVhOQ2IyUjVPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J1ZFcxWGFHVmxiSE03SUdrckt5a2dld29nSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVjJobFpXeFVjbUZ1YzJadmNtMG9hU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZabGFHbGpiR1ZUY0dWbFpFdHRTRzkxY2lBOUlETXVOaUFxSUdOb1lYTnphWE5DYjJSNUxuWmxiRzlqYVhSNUxteGxibWQwYUNncE93b2dJQ0FnSUNCamIyNXpkQ0JtYjNKM1lYSmtWMjl5YkdRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjBhR2x6TG1kbGRGWmxhR2xqYkdWQmVHbHpWMjl5YkdRb2RHaHBjeTVwYm1SbGVFWnZjbmRoY21SQmVHbHpMQ0JtYjNKM1lYSmtWMjl5YkdRcE93b0tJQ0FnSUNBZ2FXWWdLR1p2Y25kaGNtUlhiM0pzWkM1a2IzUW9ZMmhoYzNOcGMwSnZaSGt1ZG1Wc2IyTnBkSGtwSUR3Z01Da2dld29nSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZabGFHbGpiR1ZUY0dWbFpFdHRTRzkxY2lBcVBTQXRNVHNLSUNBZ0lDQWdmU0F2THlCemFXMTFiR0YwWlNCemRYTndaVzV6YVc5dUNnb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnVkVzFYYUdWbGJITTdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WTJGemRGSmhlU2gzYUdWbGJFbHVabTl6VzJsZEtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlRkWE53Wlc1emFXOXVLSFJwYldWVGRHVndLVHNLSUNBZ0lDQWdZMjl1YzNRZ2FXMXdkV3h6WlNBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lHTnZibk4wSUhKbGJIQnZjeUE5SUc1bGR5QldaV016S0NrN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHNTFiVmRvWldWc2N6c2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ0x5OWhjSEJzZVNCemRYTndaVzV6YVc5dUlHWnZjbU5sQ2lBZ0lDQWdJQ0FnWTI5dWMzUWdkMmhsWld3Z1BTQjNhR1ZsYkVsdVptOXpXMmxkT3dvZ0lDQWdJQ0FnSUd4bGRDQnpkWE53Wlc1emFXOXVSbTl5WTJVZ1BTQjNhR1ZsYkM1emRYTndaVzV6YVc5dVJtOXlZMlU3Q2dvZ0lDQWdJQ0FnSUdsbUlDaHpkWE53Wlc1emFXOXVSbTl5WTJVZ1BpQjNhR1ZsYkM1dFlYaFRkWE53Wlc1emFXOXVSbTl5WTJVcElIc0tJQ0FnSUNBZ0lDQWdJSE4xYzNCbGJuTnBiMjVHYjNKalpTQTlJSGRvWldWc0xtMWhlRk4xYzNCbGJuTnBiMjVHYjNKalpUc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJSGRvWldWc0xuSmhlV05oYzNSU1pYTjFiSFF1YUdsMFRtOXliV0ZzVjI5eWJHUXVjMk5oYkdVb2MzVnpjR1Z1YzJsdmJrWnZjbU5sSUNvZ2RHbHRaVk4wWlhBc0lHbHRjSFZzYzJVcE93b2dJQ0FnSUNBZ0lIZG9aV1ZzTG5KaGVXTmhjM1JTWlhOMWJIUXVhR2wwVUc5cGJuUlhiM0pzWkM1MmMzVmlLR05vWVhOemFYTkNiMlI1TG5CdmMybDBhVzl1TENCeVpXeHdiM01wT3dvZ0lDQWdJQ0FnSUdOb1lYTnphWE5DYjJSNUxtRndjR3g1U1cxd2RXeHpaU2hwYlhCMWJITmxMQ0J5Wld4d2IzTXBPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVVp5YVdOMGFXOXVLSFJwYldWVGRHVndLVHNLSUNBZ0lDQWdZMjl1YzNRZ2FHbDBUbTl5YldGc1YyOXliR1JUWTJGc1pXUlhhWFJvVUhKdmFpQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJR052Ym5OMElHWjNaQ0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUdOdmJuTjBJSFpsYkNBOUlHNWxkeUJXWldNektDazdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzUxYlZkb1pXVnNjenNnYVNzcktTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2QyaGxaV3dnUFNCM2FHVmxiRWx1Wm05elcybGRPeUF2TDJOdmJuTjBJSEpsYkhCdmN5QTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJQ0FnTHk5M2FHVmxiQzVqYUdGemMybHpRMjl1Ym1WamRHbHZibEJ2YVc1MFYyOXliR1F1ZG5OMVlpaGphR0Z6YzJselFtOWtlUzV3YjNOcGRHbHZiaXdnY21Wc2NHOXpLVHNLQ2lBZ0lDQWdJQ0FnWTJoaGMzTnBjMEp2WkhrdVoyVjBWbVZzYjJOcGRIbEJkRmR2Y214a1VHOXBiblFvZDJobFpXd3VZMmhoYzNOcGMwTnZibTVsWTNScGIyNVFiMmx1ZEZkdmNteGtMQ0IyWld3cE95QXZMeUJJWVdOcklIUnZJR2RsZENCMGFHVWdjbTkwWVhScGIyNGdhVzRnZEdobElHTnZjbkpsWTNRZ1pHbHlaV04wYVc5dUNnb2dJQ0FnSUNBZ0lHeGxkQ0J0SUQwZ01Uc0tDaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaDBhR2x6TG1sdVpHVjRWWEJCZUdsektTQjdDaUFnSUNBZ0lDQWdJQ0JqWVhObElERTZDaUFnSUNBZ0lDQWdJQ0FnSUcwZ1BTQXRNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCcFppQW9kMmhsWld3dWFYTkpia052Ym5SaFkzUXBJSHNLSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMlYwVm1Wb2FXTnNaVUY0YVhOWGIzSnNaQ2gwYUdsekxtbHVaR1Y0Um05eWQyRnlaRUY0YVhNc0lHWjNaQ2s3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205cUlEMGdabmRrTG1SdmRDaDNhR1ZsYkM1eVlYbGpZWE4wVW1WemRXeDBMbWhwZEU1dmNtMWhiRmR2Y214a0tUc0tJQ0FnSUNBZ0lDQWdJSGRvWldWc0xuSmhlV05oYzNSU1pYTjFiSFF1YUdsMFRtOXliV0ZzVjI5eWJHUXVjMk5oYkdVb2NISnZhaXdnYUdsMFRtOXliV0ZzVjI5eWJHUlRZMkZzWldSWGFYUm9VSEp2YWlrN0NpQWdJQ0FnSUNBZ0lDQm1kMlF1ZG5OMVlpaG9hWFJPYjNKdFlXeFhiM0pzWkZOallXeGxaRmRwZEdoUWNtOXFMQ0JtZDJRcE93b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISnZhaklnUFNCbWQyUXVaRzkwS0habGJDazdDaUFnSUNBZ0lDQWdJQ0IzYUdWbGJDNWtaV3gwWVZKdmRHRjBhVzl1SUQwZ2JTQXFJSEJ5YjJveUlDb2dkR2x0WlZOMFpYQWdMeUIzYUdWbGJDNXlZV1JwZFhNN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQnBaaUFvS0hkb1pXVnNMbk5zYVdScGJtY2dmSHdnSVhkb1pXVnNMbWx6U1c1RGIyNTBZV04wS1NBbUppQjNhR1ZsYkM1bGJtZHBibVZHYjNKalpTQWhQVDBnTUNBbUppQjNhR1ZsYkM1MWMyVkRkWE4wYjIxVGJHbGthVzVuVW05MFlYUnBiMjVoYkZOd1pXVmtLU0I3Q2lBZ0lDQWdJQ0FnSUNBdkx5QkJjSEJzZVNCamRYTjBiMjBnY205MFlYUnBiMjRnZDJobGJpQmhZMk5sYkdWeVlYUnBibWNnWVc1a0lITnNhV1JwYm1jS0lDQWdJQ0FnSUNBZ0lIZG9aV1ZzTG1SbGJIUmhVbTkwWVhScGIyNGdQU0FvZDJobFpXd3VaVzVuYVc1bFJtOXlZMlVnUGlBd0lEOGdNU0E2SUMweEtTQXFJSGRvWldWc0xtTjFjM1J2YlZOc2FXUnBibWRTYjNSaGRHbHZibUZzVTNCbFpXUWdLaUIwYVcxbFUzUmxjRHNLSUNBZ0lDQWdJQ0I5SUM4dklFeHZZMnNnZDJobFpXeHpDZ29LSUNBZ0lDQWdJQ0JwWmlBb1RXRjBhQzVoWW5Nb2QyaGxaV3d1WW5KaGEyVXBJRDRnVFdGMGFDNWhZbk1vZDJobFpXd3VaVzVuYVc1bFJtOXlZMlVwS1NCN0NpQWdJQ0FnSUNBZ0lDQjNhR1ZsYkM1a1pXeDBZVkp2ZEdGMGFXOXVJRDBnTURzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lIZG9aV1ZzTG5KdmRHRjBhVzl1SUNzOUlIZG9aV1ZzTG1SbGJIUmhVbTkwWVhScGIyNDdJQzh2SUZWelpTQjBhR1VnYjJ4a0lIWmhiSFZsQ2dvZ0lDQWdJQ0FnSUhkb1pXVnNMbVJsYkhSaFVtOTBZWFJwYjI0Z0tqMGdNQzQ1T1RzZ0x5OGdaR0Z0Y0dsdVp5QnZaaUJ5YjNSaGRHbHZiaUIzYUdWdUlHNXZkQ0JwYmlCamIyNTBZV04wQ2lBZ0lDQWdJSDBLSUNBZ0lIMEtDaUFnSUNCMWNHUmhkR1ZUZFhOd1pXNXphVzl1S0dSbGJIUmhWR2x0WlNrZ2V3b2dJQ0FnSUNCamIyNXpkQ0JqYUdGemMybHpRbTlrZVNBOUlIUm9hWE11WTJoaGMzTnBjMEp2WkhrN0NpQWdJQ0FnSUdOdmJuTjBJR05vWVhOemFYTk5ZWE56SUQwZ1kyaGhjM05wYzBKdlpIa3ViV0Z6Y3pzS0lDQWdJQ0FnWTI5dWMzUWdkMmhsWld4SmJtWnZjeUE5SUhSb2FYTXVkMmhsWld4SmJtWnZjenNLSUNBZ0lDQWdZMjl1YzNRZ2JuVnRWMmhsWld4eklEMGdkMmhsWld4SmJtWnZjeTVzWlc1bmRHZzdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQjNYMmwwSUQwZ01Ec2dkMTlwZENBOElHNTFiVmRvWldWc2N6c2dkMTlwZENzcktTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2QyaGxaV3dnUFNCM2FHVmxiRWx1Wm05elczZGZhWFJkT3dvS0lDQWdJQ0FnSUNCcFppQW9kMmhsWld3dWFYTkpia052Ym5SaFkzUXBJSHNLSUNBZ0lDQWdJQ0FnSUd4bGRDQm1iM0pqWlRzZ0x5OGdVM0J5YVc1bkNnb2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzVnpjRjlzWlc1bmRHZ2dQU0IzYUdWbGJDNXpkWE53Wlc1emFXOXVVbVZ6ZEV4bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR04xY25KbGJuUmZiR1Z1WjNSb0lEMGdkMmhsWld3dWMzVnpjR1Z1YzJsdmJreGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUd4bGJtZDBhRjlrYVdabUlEMGdjM1Z6Y0Y5c1pXNW5kR2dnTFNCamRYSnlaVzUwWDJ4bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUdadmNtTmxJRDBnZDJobFpXd3VjM1Z6Y0dWdWMybHZibE4wYVdabWJtVnpjeUFxSUd4bGJtZDBhRjlrYVdabUlDb2dkMmhsWld3dVkyeHBjSEJsWkVsdWRrTnZiblJoWTNSRWIzUlRkWE53Wlc1emFXOXVPeUF2THlCRVlXMXdaWElLQ2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205cVpXTjBaV1JmY21Wc1gzWmxiQ0E5SUhkb1pXVnNMbk4xYzNCbGJuTnBiMjVTWld4aGRHbDJaVlpsYkc5amFYUjVPd29nSUNBZ0lDQWdJQ0FnYkdWMElITjFjM0JmWkdGdGNHbHVaenNLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9jSEp2YW1WamRHVmtYM0psYkY5MlpXd2dQQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSE4xYzNCZlpHRnRjR2x1WnlBOUlIZG9aV1ZzTG1SaGJYQnBibWREYjIxd2NtVnpjMmx2YmpzS0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJSE4xYzNCZlpHRnRjR2x1WnlBOUlIZG9aV1ZzTG1SaGJYQnBibWRTWld4aGVHRjBhVzl1T3dvZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJR1p2Y21ObElDMDlJSE4xYzNCZlpHRnRjR2x1WnlBcUlIQnliMnBsWTNSbFpGOXlaV3hmZG1Wc093b2dJQ0FnSUNBZ0lDQWdkMmhsWld3dWMzVnpjR1Z1YzJsdmJrWnZjbU5sSUQwZ1ptOXlZMlVnS2lCamFHRnpjMmx6VFdGemN6c0tDaUFnSUNBZ0lDQWdJQ0JwWmlBb2QyaGxaV3d1YzNWemNHVnVjMmx2YmtadmNtTmxJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IzYUdWbGJDNXpkWE53Wlc1emFXOXVSbTl5WTJVZ1BTQXdPd29nSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNCM2FHVmxiQzV6ZFhOd1pXNXphVzl1Um05eVkyVWdQU0F3T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlNaVzF2ZG1VZ2RHaGxJSFpsYUdsamJHVWdhVzVqYkhWa2FXNW5JR2wwY3lCamIyNXpkSEpoYVc1MGN5Qm1jbTl0SUhSb1pTQjNiM0pzWkM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0J5WlcxdmRtVkdjbTl0VjI5eWJHUW9kMjl5YkdRcElIc0tJQ0FnSUNBZ2RHaHBjeTVqYjI1emRISmhhVzUwY3pzS0lDQWdJQ0FnZDI5eWJHUXVjbVZ0YjNabFFtOWtlU2gwYUdsekxtTm9ZWE56YVhOQ2IyUjVLVHNLSUNBZ0lDQWdkMjl5YkdRdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25jSEpsVTNSbGNDY3NJSFJvYVhNdWNISmxVM1JsY0VOaGJHeGlZV05yS1RzS0lDQWdJQ0FnZEdocGN5NTNiM0pzWkNBOUlHNTFiR3c3Q2lBZ0lDQjlDZ29nSUNBZ1kyRnpkRkpoZVNoM2FHVmxiQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQnlZWGwyWldOMGIzSWdQU0JqWVhOMFVtRjVYM0poZVhabFkzUnZjanNLSUNBZ0lDQWdZMjl1YzNRZ2RHRnlaMlYwSUQwZ1kyRnpkRkpoZVY5MFlYSm5aWFE3Q2lBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVjJobFpXeFVjbUZ1YzJadmNtMVhiM0pzWkNoM2FHVmxiQ2s3Q2lBZ0lDQWdJR052Ym5OMElHTm9ZWE56YVhOQ2IyUjVJRDBnZEdocGN5NWphR0Z6YzJselFtOWtlVHNLSUNBZ0lDQWdiR1YwSUdSbGNIUm9JRDBnTFRFN0NpQWdJQ0FnSUdOdmJuTjBJSEpoZVd4bGJpQTlJSGRvWldWc0xuTjFjM0JsYm5OcGIyNVNaWE4wVEdWdVozUm9JQ3NnZDJobFpXd3VjbUZrYVhWek93b2dJQ0FnSUNCM2FHVmxiQzVrYVhKbFkzUnBiMjVYYjNKc1pDNXpZMkZzWlNoeVlYbHNaVzRzSUhKaGVYWmxZM1J2Y2lrN0NpQWdJQ0FnSUdOdmJuTjBJSE52ZFhKalpTQTlJSGRvWldWc0xtTm9ZWE56YVhORGIyNXVaV04wYVc5dVVHOXBiblJYYjNKc1pEc0tJQ0FnSUNBZ2MyOTFjbU5sTG5aaFpHUW9jbUY1ZG1WamRHOXlMQ0IwWVhKblpYUXBPd29nSUNBZ0lDQmpiMjV6ZENCeVlYbGpZWE4wVW1WemRXeDBJRDBnZDJobFpXd3VjbUY1WTJGemRGSmxjM1ZzZERzS0lDQWdJQ0FnY21GNVkyRnpkRkpsYzNWc2RDNXlaWE5sZENncE95QXZMeUJVZFhKdUlHOW1aaUJ5WVhrZ1kyOXNiR2x6YVc5dUlIZHBkR2dnZEdobElHTm9ZWE56YVhNZ2RHVnRjRzl5WVhKcGJIa0tDaUFnSUNBZ0lHTnZibk4wSUc5c1pGTjBZWFJsSUQwZ1kyaGhjM05wYzBKdlpIa3VZMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVTdDaUFnSUNBZ0lHTm9ZWE56YVhOQ2IyUjVMbU52Ykd4cGMybHZibEpsYzNCdmJuTmxJRDBnWm1Gc2MyVTdJQzh2SUVOaGMzUWdjbUY1SUdGbllXbHVjM1FnZDI5eWJHUUtDaUFnSUNBZ0lIUm9hWE11ZDI5eWJHUXVjbUY1VkdWemRDaHpiM1Z5WTJVc0lIUmhjbWRsZEN3Z2NtRjVZMkZ6ZEZKbGMzVnNkQ2s3Q2lBZ0lDQWdJR05vWVhOemFYTkNiMlI1TG1OdmJHeHBjMmx2YmxKbGMzQnZibk5sSUQwZ2IyeGtVM1JoZEdVN0NpQWdJQ0FnSUdOdmJuTjBJRzlpYW1WamRDQTlJSEpoZVdOaGMzUlNaWE4xYkhRdVltOWtlVHNLSUNBZ0lDQWdkMmhsWld3dWNtRjVZMkZ6ZEZKbGMzVnNkQzVuY205MWJtUlBZbXBsWTNRZ1BTQXdPd29LSUNBZ0lDQWdhV1lnS0c5aWFtVmpkQ2tnZXdvZ0lDQWdJQ0FnSUdSbGNIUm9JRDBnY21GNVkyRnpkRkpsYzNWc2RDNWthWE4wWVc1alpUc0tJQ0FnSUNBZ0lDQjNhR1ZsYkM1eVlYbGpZWE4wVW1WemRXeDBMbWhwZEU1dmNtMWhiRmR2Y214a0lEMGdjbUY1WTJGemRGSmxjM1ZzZEM1b2FYUk9iM0p0WVd4WGIzSnNaRHNLSUNBZ0lDQWdJQ0IzYUdWbGJDNXBjMGx1UTI5dWRHRmpkQ0E5SUhSeWRXVTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHbDBSR2x6ZEdGdVkyVWdQU0J5WVhsallYTjBVbVZ6ZFd4MExtUnBjM1JoYm1ObE93b2dJQ0FnSUNBZ0lIZG9aV1ZzTG5OMWMzQmxibk5wYjI1TVpXNW5kR2dnUFNCb2FYUkVhWE4wWVc1alpTQXRJSGRvWldWc0xuSmhaR2wxY3pzZ0x5OGdZMnhoYlhBZ2IyNGdiV0Y0SUhOMWMzQmxibk5wYjI0Z2RISmhkbVZzQ2dvZ0lDQWdJQ0FnSUdOdmJuTjBJRzFwYmxOMWMzQmxibk5wYjI1TVpXNW5kR2dnUFNCM2FHVmxiQzV6ZFhOd1pXNXphVzl1VW1WemRFeGxibWQwYUNBdElIZG9aV1ZzTG0xaGVGTjFjM0JsYm5OcGIyNVVjbUYyWld3N0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYldGNFUzVnpjR1Z1YzJsdmJreGxibWQwYUNBOUlIZG9aV1ZzTG5OMWMzQmxibk5wYjI1U1pYTjBUR1Z1WjNSb0lDc2dkMmhsWld3dWJXRjRVM1Z6Y0dWdWMybHZibFJ5WVhabGJEc0tDaUFnSUNBZ0lDQWdhV1lnS0hkb1pXVnNMbk4xYzNCbGJuTnBiMjVNWlc1bmRHZ2dQQ0J0YVc1VGRYTndaVzV6YVc5dVRHVnVaM1JvS1NCN0NpQWdJQ0FnSUNBZ0lDQjNhR1ZsYkM1emRYTndaVzV6YVc5dVRHVnVaM1JvSUQwZ2JXbHVVM1Z6Y0dWdWMybHZia3hsYm1kMGFEc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR2xtSUNoM2FHVmxiQzV6ZFhOd1pXNXphVzl1VEdWdVozUm9JRDRnYldGNFUzVnpjR1Z1YzJsdmJreGxibWQwYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdkMmhsWld3dWMzVnpjR1Z1YzJsdmJreGxibWQwYUNBOUlHMWhlRk4xYzNCbGJuTnBiMjVNWlc1bmRHZzdDaUFnSUNBZ0lDQWdJQ0IzYUdWbGJDNXlZWGxqWVhOMFVtVnpkV3gwTG5KbGMyVjBLQ2s3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCamIyNXpkQ0JrWlc1dmJXbHVZWFJ2Y2lBOUlIZG9aV1ZzTG5KaGVXTmhjM1JTWlhOMWJIUXVhR2wwVG05eWJXRnNWMjl5YkdRdVpHOTBLSGRvWldWc0xtUnBjbVZqZEdsdmJsZHZjbXhrS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0JqYUdGemMybHpYM1psYkc5amFYUjVYMkYwWDJOdmJuUmhZM1JRYjJsdWRDQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJQ0FnWTJoaGMzTnBjMEp2WkhrdVoyVjBWbVZzYjJOcGRIbEJkRmR2Y214a1VHOXBiblFvZDJobFpXd3VjbUY1WTJGemRGSmxjM1ZzZEM1b2FYUlFiMmx1ZEZkdmNteGtMQ0JqYUdGemMybHpYM1psYkc5amFYUjVYMkYwWDJOdmJuUmhZM1JRYjJsdWRDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NISnZhbFpsYkNBOUlIZG9aV1ZzTG5KaGVXTmhjM1JTWlhOMWJIUXVhR2wwVG05eWJXRnNWMjl5YkdRdVpHOTBLR05vWVhOemFYTmZkbVZzYjJOcGRIbGZZWFJmWTI5dWRHRmpkRkJ2YVc1MEtUc0tDaUFnSUNBZ0lDQWdhV1lnS0dSbGJtOXRhVzVoZEc5eUlENDlJQzB3TGpFcElIc0tJQ0FnSUNBZ0lDQWdJSGRvWldWc0xuTjFjM0JsYm5OcGIyNVNaV3hoZEdsMlpWWmxiRzlqYVhSNUlEMGdNRHNLSUNBZ0lDQWdJQ0FnSUhkb1pXVnNMbU5zYVhCd1pXUkpiblpEYjI1MFlXTjBSRzkwVTNWemNHVnVjMmx2YmlBOUlERWdMeUF3TGpFN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdsdWRpQTlJQzB4SUM4Z1pHVnViMjFwYm1GMGIzSTdDaUFnSUNBZ0lDQWdJQ0IzYUdWbGJDNXpkWE53Wlc1emFXOXVVbVZzWVhScGRtVldaV3h2WTJsMGVTQTlJSEJ5YjJwV1pXd2dLaUJwYm5ZN0NpQWdJQ0FnSUNBZ0lDQjNhR1ZsYkM1amJHbHdjR1ZrU1c1MlEyOXVkR0ZqZEVSdmRGTjFjM0JsYm5OcGIyNGdQU0JwYm5ZN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUM4dmNIVjBJSGRvWldWc0lHbHVabThnWVhNZ2FXNGdjbVZ6ZENCd2IzTnBkR2x2YmdvZ0lDQWdJQ0FnSUhkb1pXVnNMbk4xYzNCbGJuTnBiMjVNWlc1bmRHZ2dQU0IzYUdWbGJDNXpkWE53Wlc1emFXOXVVbVZ6ZEV4bGJtZDBhQ0FySURBZ0tpQjNhR1ZsYkM1dFlYaFRkWE53Wlc1emFXOXVWSEpoZG1Wc093b2dJQ0FnSUNBZ0lIZG9aV1ZzTG5OMWMzQmxibk5wYjI1U1pXeGhkR2wyWlZabGJHOWphWFI1SUQwZ01DNHdPd29nSUNBZ0lDQWdJSGRvWldWc0xtUnBjbVZqZEdsdmJsZHZjbXhrTG5OallXeGxLQzB4TENCM2FHVmxiQzV5WVhsallYTjBVbVZ6ZFd4MExtaHBkRTV2Y20xaGJGZHZjbXhrS1RzS0lDQWdJQ0FnSUNCM2FHVmxiQzVqYkdsd2NHVmtTVzUyUTI5dWRHRmpkRVJ2ZEZOMWMzQmxibk5wYjI0Z1BTQXhMakE3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSEpsZEhWeWJpQmtaWEIwYURzS0lDQWdJSDBLQ2lBZ0lDQjFjR1JoZEdWWGFHVmxiRlJ5WVc1elptOXliVmR2Y214a0tIZG9aV1ZzS1NCN0NpQWdJQ0FnSUhkb1pXVnNMbWx6U1c1RGIyNTBZV04wSUQwZ1ptRnNjMlU3Q2lBZ0lDQWdJR052Ym5OMElHTm9ZWE56YVhOQ2IyUjVJRDBnZEdocGN5NWphR0Z6YzJselFtOWtlVHNLSUNBZ0lDQWdZMmhoYzNOcGMwSnZaSGt1Y0c5cGJuUlViMWR2Y214a1JuSmhiV1VvZDJobFpXd3VZMmhoYzNOcGMwTnZibTVsWTNScGIyNVFiMmx1ZEV4dlkyRnNMQ0IzYUdWbGJDNWphR0Z6YzJselEyOXVibVZqZEdsdmJsQnZhVzUwVjI5eWJHUXBPd29nSUNBZ0lDQmphR0Z6YzJselFtOWtlUzUyWldOMGIzSlViMWR2Y214a1JuSmhiV1VvZDJobFpXd3VaR2x5WldOMGFXOXVURzlqWVd3c0lIZG9aV1ZzTG1ScGNtVmpkR2x2YmxkdmNteGtLVHNLSUNBZ0lDQWdZMmhoYzNOcGMwSnZaSGt1ZG1WamRHOXlWRzlYYjNKc1pFWnlZVzFsS0hkb1pXVnNMbUY0YkdWTWIyTmhiQ3dnZDJobFpXd3VZWGhzWlZkdmNteGtLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZYQmtZWFJsSUc5dVpTQnZaaUIwYUdVZ2QyaGxaV3dnZEhKaGJuTm1iM0p0TGdvZ0lDQWdJQ29nVG05MFpTQjNhR1Z1SUhKbGJtUmxjbWx1WnlCM2FHVmxiSE02SUdSMWNtbHVaeUJsWVdOb0lITjBaWEFzSUhkb1pXVnNJSFJ5WVc1elptOXliWE1nWVhKbElIVndaR0YwWldRZ1FrVkdUMUpGSUhSb1pTQmphR0Z6YzJsek95QnBaUzRnZEdobGFYSWdjRzl6YVhScGIyNGdZbVZqYjIxbGN5QnBiblpoYkdsa0lHRm1kR1Z5SUhSb1pTQnpkR1Z3TGlCVWFIVnpJSGRvWlc0Z2VXOTFJSEpsYm1SbGNpQjNhR1ZsYkhNc0lIbHZkU0J0ZFhOMElIVndaR0YwWlNCM2FHVmxiQ0IwY21GdWMyWnZjbTF6SUdKbFptOXlaU0J5Wlc1a1pYSnBibWNnZEdobGJTNGdVMlZsSUhKaGVXTmhjM1JXWldocFkyeGxJR1JsYlc4Z1ptOXlJR0Z1SUdWNFlXMXdiR1V1Q2lBZ0lDQWdLaUJBY0dGeVlXMGdkMmhsWld4SmJtUmxlQ0JVYUdVZ2QyaGxaV3dnYVc1a1pYZ2dkRzhnZFhCa1lYUmxMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lIVndaR0YwWlZkb1pXVnNWSEpoYm5ObWIzSnRLSGRvWldWc1NXNWtaWGdwSUhzS0lDQWdJQ0FnWTI5dWMzUWdkWEFnUFNCMGJYQldaV00wT3dvZ0lDQWdJQ0JqYjI1emRDQnlhV2RvZENBOUlIUnRjRlpsWXpVN0NpQWdJQ0FnSUdOdmJuTjBJR1ozWkNBOUlIUnRjRlpsWXpZN0NpQWdJQ0FnSUdOdmJuTjBJSGRvWldWc0lEMGdkR2hwY3k1M2FHVmxiRWx1Wm05elczZG9aV1ZzU1c1a1pYaGRPd29nSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVmRvWldWc1ZISmhibk5tYjNKdFYyOXliR1FvZDJobFpXd3BPd29nSUNBZ0lDQjNhR1ZsYkM1a2FYSmxZM1JwYjI1TWIyTmhiQzV6WTJGc1pTZ3RNU3dnZFhBcE93b2dJQ0FnSUNCeWFXZG9kQzVqYjNCNUtIZG9aV1ZzTG1GNGJHVk1iMk5oYkNrN0NpQWdJQ0FnSUhWd0xtTnliM056S0hKcFoyaDBMQ0JtZDJRcE93b2dJQ0FnSUNCbWQyUXVibTl5YldGc2FYcGxLQ2s3Q2lBZ0lDQWdJSEpwWjJoMExtNXZjbTFoYkdsNlpTZ3BPeUF2THlCU2IzUmhkR1VnWVhKdmRXNWtJSE4wWldWeWFXNW5JRzkyWlhJZ2RHaGxJSGRvWldWc1FYaHNaUW9LSUNBZ0lDQWdZMjl1YzNRZ2MzUmxaWEpwYm1jZ1BTQjNhR1ZsYkM1emRHVmxjbWx1WnpzS0lDQWdJQ0FnWTI5dWMzUWdjM1JsWlhKcGJtZFBjbTRnUFNCdVpYY2dVWFZoZEdWeWJtbHZiaWdwT3dvZ0lDQWdJQ0J6ZEdWbGNtbHVaMDl5Ymk1elpYUkdjbTl0UVhocGMwRnVaMnhsS0hWd0xDQnpkR1ZsY21sdVp5azdDaUFnSUNBZ0lHTnZibk4wSUhKdmRHRjBhVzVuVDNKdUlEMGdibVYzSUZGMVlYUmxjbTVwYjI0b0tUc0tJQ0FnSUNBZ2NtOTBZWFJwYm1kUGNtNHVjMlYwUm5KdmJVRjRhWE5CYm1kc1pTaHlhV2RvZEN3Z2QyaGxaV3d1Y205MFlYUnBiMjRwT3lBdkx5QlhiM0pzWkNCeWIzUmhkR2x2YmlCdlppQjBhR1VnZDJobFpXd0tDaUFnSUNBZ0lHTnZibk4wSUhFZ1BTQjNhR1ZsYkM1M2IzSnNaRlJ5WVc1elptOXliUzV4ZFdGMFpYSnVhVzl1T3dvZ0lDQWdJQ0IwYUdsekxtTm9ZWE56YVhOQ2IyUjVMbkYxWVhSbGNtNXBiMjR1YlhWc2RDaHpkR1ZsY21sdVowOXliaXdnY1NrN0NpQWdJQ0FnSUhFdWJYVnNkQ2h5YjNSaGRHbHVaMDl5Yml3Z2NTazdDaUFnSUNBZ0lIRXVibTl5YldGc2FYcGxLQ2s3SUM4dklIZHZjbXhrSUhCdmMybDBhVzl1SUc5bUlIUm9aU0IzYUdWbGJBb0tJQ0FnSUNBZ1kyOXVjM1FnY0NBOUlIZG9aV1ZzTG5kdmNteGtWSEpoYm5ObWIzSnRMbkJ2YzJsMGFXOXVPd29nSUNBZ0lDQndMbU52Y0hrb2QyaGxaV3d1WkdseVpXTjBhVzl1VjI5eWJHUXBPd29nSUNBZ0lDQndMbk5qWVd4bEtIZG9aV1ZzTG5OMWMzQmxibk5wYjI1TVpXNW5kR2dzSUhBcE93b2dJQ0FnSUNCd0xuWmhaR1FvZDJobFpXd3VZMmhoYzNOcGMwTnZibTVsWTNScGIyNVFiMmx1ZEZkdmNteGtMQ0J3S1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dSMlYwSUhSb1pTQjNiM0pzWkNCMGNtRnVjMlp2Y20wZ2IyWWdiMjVsSUc5bUlIUm9aU0IzYUdWbGJITUtJQ0FnSUNBcUx3b0tDaUFnSUNCblpYUlhhR1ZsYkZSeVlXNXpabTl5YlZkdmNteGtLSGRvWldWc1NXNWtaWGdwSUhzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWQyaGxaV3hKYm1admMxdDNhR1ZsYkVsdVpHVjRYUzUzYjNKc1pGUnlZVzV6Wm05eWJUc0tJQ0FnSUgwS0NpQWdJQ0IxY0dSaGRHVkdjbWxqZEdsdmJpaDBhVzFsVTNSbGNDa2dld29nSUNBZ0lDQmpiMjV6ZENCemRYSm1UbTl5YldGc1YxTmZjMk5oYkdWa1gzQnliMm9nUFNCMWNHUmhkR1ZHY21samRHbHZibDl6ZFhKbVRtOXliV0ZzVjFOZmMyTmhiR1ZrWDNCeWIybzdJQzh2WTJGc1kzVnNZWFJsSUhSb1pTQnBiWEIxYkhObExDQnpieUIwYUdGMElIUm9aU0IzYUdWbGJITWdaRzl1SjNRZ2JXOTJaU0J6YVdSbGQyRnlaSE1LQ2lBZ0lDQWdJR052Ym5OMElIZG9aV1ZzU1c1bWIzTWdQU0IwYUdsekxuZG9aV1ZzU1c1bWIzTTdDaUFnSUNBZ0lHTnZibk4wSUc1MWJWZG9aV1ZzY3lBOUlIZG9aV1ZzU1c1bWIzTXViR1Z1WjNSb093b2dJQ0FnSUNCamIyNXpkQ0JqYUdGemMybHpRbTlrZVNBOUlIUm9hWE11WTJoaGMzTnBjMEp2WkhrN0NpQWdJQ0FnSUdOdmJuTjBJR1p2Y25kaGNtUlhVeUE5SUhWd1pHRjBaVVp5YVdOMGFXOXVYMlp2Y25kaGNtUlhVenNLSUNBZ0lDQWdZMjl1YzNRZ1lYaHNaU0E5SUhWd1pHRjBaVVp5YVdOMGFXOXVYMkY0YkdVN0NpQWdJQ0FnSUhSb2FYTXViblZ0VjJobFpXeHpUMjVIY205MWJtUWdQU0F3T3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdWRXMVhhR1ZsYkhNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSGRvWldWc0lEMGdkMmhsWld4SmJtWnZjMXRwWFRzS0lDQWdJQ0FnSUNCamIyNXpkQ0JuY205MWJtUlBZbXBsWTNRZ1BTQjNhR1ZsYkM1eVlYbGpZWE4wVW1WemRXeDBMbUp2WkhrN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2huY205MWJtUlBZbXBsWTNRcElIc0tJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJuVnRWMmhsWld4elQyNUhjbTkxYm1Rckt6c0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJSGRvWldWc0xuTnBaR1ZKYlhCMWJITmxJRDBnTURzS0lDQWdJQ0FnSUNCM2FHVmxiQzVtYjNKM1lYSmtTVzF3ZFd4elpTQTlJREE3Q2dvZ0lDQWdJQ0FnSUdsbUlDZ2habTl5ZDJGeVpGZFRXMmxkS1NCN0NpQWdJQ0FnSUNBZ0lDQm1iM0ozWVhKa1YxTmJhVjBnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdhV1lnS0NGaGVHeGxXMmxkS1NCN0NpQWdJQ0FnSUNBZ0lDQmhlR3hsVzJsZElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYm5WdFYyaGxaV3h6T3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjNhR1ZsYkNBOUlIZG9aV1ZzU1c1bWIzTmJhVjA3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdaM0p2ZFc1a1QySnFaV04wSUQwZ2QyaGxaV3d1Y21GNVkyRnpkRkpsYzNWc2RDNWliMlI1T3dvS0lDQWdJQ0FnSUNCcFppQW9aM0p2ZFc1a1QySnFaV04wS1NCN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGVHeGxhU0E5SUdGNGJHVmJhVjA3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IzYUdWbGJGUnlZVzV6SUQwZ2RHaHBjeTVuWlhSWGFHVmxiRlJ5WVc1elptOXliVmR2Y214a0tHa3BPeUF2THlCSFpYUWdkMjl5YkdRZ1lYaHNaUW9LSUNBZ0lDQWdJQ0FnSUhkb1pXVnNWSEpoYm5NdWRtVmpkRzl5Vkc5WGIzSnNaRVp5WVcxbEtHUnBjbVZqZEdsdmJuTmJkR2hwY3k1cGJtUmxlRkpwWjJoMFFYaHBjMTBzSUdGNGJHVnBLVHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE4xY21aT2IzSnRZV3hYVXlBOUlIZG9aV1ZzTG5KaGVXTmhjM1JTWlhOMWJIUXVhR2wwVG05eWJXRnNWMjl5YkdRN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtOXFJRDBnWVhoc1pXa3VaRzkwS0hOMWNtWk9iM0p0WVd4WFV5azdDaUFnSUNBZ0lDQWdJQ0J6ZFhKbVRtOXliV0ZzVjFNdWMyTmhiR1VvY0hKdmFpd2djM1Z5Wms1dmNtMWhiRmRUWDNOallXeGxaRjl3Y205cUtUc0tJQ0FnSUNBZ0lDQWdJR0Y0YkdWcExuWnpkV0lvYzNWeVprNXZjbTFoYkZkVFgzTmpZV3hsWkY5d2NtOXFMQ0JoZUd4bGFTazdDaUFnSUNBZ0lDQWdJQ0JoZUd4bGFTNXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lDQWdJQ0FnSUhOMWNtWk9iM0p0WVd4WFV5NWpjbTl6Y3loaGVHeGxhU3dnWm05eWQyRnlaRmRUVzJsZEtUc0tJQ0FnSUNBZ0lDQWdJR1p2Y25kaGNtUlhVMXRwWFM1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUNBZ0lDQWdJSGRvWldWc0xuTnBaR1ZKYlhCMWJITmxJRDBnY21WemIyeDJaVk5wYm1kc1pVSnBiR0YwWlhKaGJDaGphR0Z6YzJselFtOWtlU3dnZDJobFpXd3VjbUY1WTJGemRGSmxjM1ZzZEM1b2FYUlFiMmx1ZEZkdmNteGtMQ0JuY205MWJtUlBZbXBsWTNRc0lIZG9aV1ZzTG5KaGVXTmhjM1JTWlhOMWJIUXVhR2wwVUc5cGJuUlhiM0pzWkN3Z1lYaHNaV2twT3dvZ0lDQWdJQ0FnSUNBZ2QyaGxaV3d1YzJsa1pVbHRjSFZzYzJVZ0tqMGdjMmxrWlVaeWFXTjBhVzl1VTNScFptWnVaWE56TWpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdOdmJuTjBJSE5wWkdWR1lXTjBiM0lnUFNBeE93b2dJQ0FnSUNCamIyNXpkQ0JtZDJSR1lXTjBiM0lnUFNBd0xqVTdDaUFnSUNBZ0lIUm9hWE11YzJ4cFpHbHVaeUE5SUdaaGJITmxPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J1ZFcxWGFHVmxiSE03SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElIZG9aV1ZzSUQwZ2QyaGxaV3hKYm1admMxdHBYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQm5jbTkxYm1SUFltcGxZM1FnUFNCM2FHVmxiQzV5WVhsallYTjBVbVZ6ZFd4MExtSnZaSGs3Q2lBZ0lDQWdJQ0FnYkdWMElISnZiR3hwYm1kR2NtbGpkR2x2YmlBOUlEQTdDaUFnSUNBZ0lDQWdkMmhsWld3dWMyeHBjRWx1Wm04Z1BTQXhPd29LSUNBZ0lDQWdJQ0JwWmlBb1ozSnZkVzVrVDJKcVpXTjBLU0I3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWldaaGRXeDBVbTlzYkdsdVowWnlhV04wYVc5dVNXMXdkV3h6WlNBOUlEQTdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWGhKYlhCMWJITmxJRDBnZDJobFpXd3VZbkpoYTJVZ1B5QjNhR1ZsYkM1aWNtRnJaU0E2SUdSbFptRjFiSFJTYjJ4c2FXNW5SbkpwWTNScGIyNUpiWEIxYkhObE95QXZMeUJpZEZkb1pXVnNRMjl1ZEdGamRGQnZhVzUwSUdOdmJuUmhZM1JRZENoamFHRnpjMmx6UW05a2VTeG5jbTkxYm1SUFltcGxZM1FzZDJobFpXeEpibVp5WVhsallYTjBTVzVtYnk1b2FYUlFiMmx1ZEZkdmNteGtMR1p2Y25kaGNtUlhVMXQzYUdWbGJGMHNiV0Y0U1cxd2RXeHpaU2s3Q2lBZ0lDQWdJQ0FnSUNBdkx5QnliMnhzYVc1blJuSnBZM1JwYjI0Z1BTQmpZV3hqVW05c2JHbHVaMFp5YVdOMGFXOXVLR052Ym5SaFkzUlFkQ2s3Q2dvZ0lDQWdJQ0FnSUNBZ2NtOXNiR2x1WjBaeWFXTjBhVzl1SUQwZ1kyRnNZMUp2Ykd4cGJtZEdjbWxqZEdsdmJpaGphR0Z6YzJselFtOWtlU3dnWjNKdmRXNWtUMkpxWldOMExDQjNhR1ZsYkM1eVlYbGpZWE4wVW1WemRXeDBMbWhwZEZCdmFXNTBWMjl5YkdRc0lHWnZjbmRoY21SWFUxdHBYU3dnYldGNFNXMXdkV3h6WlNrN0NpQWdJQ0FnSUNBZ0lDQnliMnhzYVc1blJuSnBZM1JwYjI0Z0t6MGdkMmhsWld3dVpXNW5hVzVsUm05eVkyVWdLaUIwYVcxbFUzUmxjRHNnTHk4Z2NtOXNiR2x1WjBaeWFXTjBhVzl1SUQwZ01Ec0tDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQm1ZV04wYjNJZ1BTQnRZWGhKYlhCMWJITmxJQzhnY205c2JHbHVaMFp5YVdOMGFXOXVPd29nSUNBZ0lDQWdJQ0FnZDJobFpXd3VjMnhwY0VsdVptOGdLajBnWm1GamRHOXlPd29nSUNBZ0lDQWdJSDBnTHk5emQybDBZMmdnWW1WMGQyVmxiaUJoWTNScGRtVWdjbTlzYkdsdVp5QW9kR2h5YjNSMGJHVXBMQ0JpY21GcmFXNW5JR0Z1WkNCdWIyNHRZV04wYVhabElISnZiR3hwYm1jZ1puSnBZM1JwYjI0Z0tHNTBhSEp2ZEhSc1pTOWljbVZoYXlrS0Nnb2dJQ0FnSUNBZ0lIZG9aV1ZzTG1admNuZGhjbVJKYlhCMWJITmxJRDBnTURzS0lDQWdJQ0FnSUNCM2FHVmxiQzV6YTJsa1NXNW1ieUE5SURFN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2huY205MWJtUlBZbXBsWTNRcElIc0tJQ0FnSUNBZ0lDQWdJSGRvWldWc0xuTnJhV1JKYm1adklEMGdNVHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzFoZUdsdGNDQTlJSGRvWldWc0xuTjFjM0JsYm5OcGIyNUdiM0pqWlNBcUlIUnBiV1ZUZEdWd0lDb2dkMmhsWld3dVpuSnBZM1JwYjI1VGJHbHdPd29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0Y0YVcxd1UybGtaU0E5SUcxaGVHbHRjRHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzFoZUdsdGNGTnhkV0Z5WldRZ1BTQnRZWGhwYlhBZ0tpQnRZWGhwYlhCVGFXUmxPd29nSUNBZ0lDQWdJQ0FnZDJobFpXd3VabTl5ZDJGeVpFbHRjSFZzYzJVZ1BTQnliMnhzYVc1blJuSnBZM1JwYjI0N0lDOHZkMmhsWld4SmJtWnZMbVZ1WjJsdVpVWnZjbU5sS2lCMGFXMWxVM1JsY0RzS0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCNElEMGdkMmhsWld3dVptOXlkMkZ5WkVsdGNIVnNjMlVnS2lCbWQyUkdZV04wYjNJZ0x5QjNhR1ZsYkM1bWIzSjNZWEprUVdOalpXeGxjbUYwYVc5dU93b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VTQTlJSGRvWldWc0xuTnBaR1ZKYlhCMWJITmxJQ29nYzJsa1pVWmhZM1J2Y2lBdklIZG9aV1ZzTG5OcFpHVkJZMk5sYkdWeVlYUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JwYlhCMWJITmxVM0YxWVhKbFpDQTlJSGdnS2lCNElDc2dlU0FxSUhrN0NpQWdJQ0FnSUNBZ0lDQjNhR1ZsYkM1emJHbGthVzVuSUQwZ1ptRnNjMlU3Q2dvZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x0Y0hWc2MyVlRjWFZoY21Wa0lENGdiV0Y0YVcxd1UzRjFZWEpsWkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTnNhV1JwYm1jZ1BTQjBjblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjNhR1ZsYkM1emJHbGthVzVuSUQwZ2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWm1GamRHOXlJRDBnYldGNGFXMXdJQzhnVFdGMGFDNXpjWEowS0dsdGNIVnNjMlZUY1hWaGNtVmtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2QyaGxaV3d1YzJ0cFpFbHVabThnS2owZ1ptRmpkRzl5T3dvZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMyeHBaR2x1WnlrZ2V3b2dJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diblZ0VjJobFpXeHpPeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElIZG9aV1ZzSUQwZ2QyaGxaV3hKYm1admMxdHBYVHNLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9kMmhsWld3dWMybGtaVWx0Y0hWc2MyVWdJVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZG9aV1ZzTG5OcmFXUkpibVp2SUR3Z01Ta2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9aV1ZzTG1admNuZGhjbVJKYlhCMWJITmxJQ285SUhkb1pXVnNMbk5yYVdSSmJtWnZPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9aV1ZzTG5OcFpHVkpiWEIxYkhObElDbzlJSGRvWldWc0xuTnJhV1JKYm1adk93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlDOHZJR0Z3Y0d4NUlIUm9aU0JwYlhCMWJITmxjd29LQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYm5WdFYyaGxaV3h6T3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjNhR1ZsYkNBOUlIZG9aV1ZzU1c1bWIzTmJhVjA3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZzWDNCdmN5QTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQWdJQ0FnZDJobFpXd3VjbUY1WTJGemRGSmxjM1ZzZEM1b2FYUlFiMmx1ZEZkdmNteGtMblp6ZFdJb1kyaGhjM05wYzBKdlpIa3VjRzl6YVhScGIyNHNJSEpsYkY5d2IzTXBPeUF2THlCallXNXViMjV6SUdGd2NHeDVhVzF3ZFd4elpTQnBjeUIxYzJsdVp5QjNiM0pzWkNCamIyOXlaQ0JtYjNJZ2RHaGxJSEJ2YzJsMGFXOXVDaUFnSUNBZ0lDQWdMeTl5Wld4ZmNHOXpMbU52Y0hrb2QyaGxaV3d1Y21GNVkyRnpkRkpsYzNWc2RDNW9hWFJRYjJsdWRGZHZjbXhrS1RzS0NpQWdJQ0FnSUNBZ2FXWWdLSGRvWldWc0xtWnZjbmRoY21SSmJYQjFiSE5sSUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JwYlhCMWJITmxJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnSUNBZ0lHWnZjbmRoY21SWFUxdHBYUzV6WTJGc1pTaDNhR1ZsYkM1bWIzSjNZWEprU1cxd2RXeHpaU3dnYVcxd2RXeHpaU2s3Q2lBZ0lDQWdJQ0FnSUNCamFHRnpjMmx6UW05a2VTNWhjSEJzZVVsdGNIVnNjMlVvYVcxd2RXeHpaU3dnY21Wc1gzQnZjeWs3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCcFppQW9kMmhsWld3dWMybGtaVWx0Y0hWc2MyVWdJVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElHZHliM1Z1WkU5aWFtVmpkQ0E5SUhkb1pXVnNMbkpoZVdOaGMzUlNaWE4xYkhRdVltOWtlVHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYkY5d2IzTXlJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnSUNBZ0lIZG9aV1ZzTG5KaGVXTmhjM1JTWlhOMWJIUXVhR2wwVUc5cGJuUlhiM0pzWkM1MmMzVmlLR2R5YjNWdVpFOWlhbVZqZEM1d2IzTnBkR2x2Yml3Z2NtVnNYM0J2Y3pJcE95QXZMM0psYkY5d2IzTXlMbU52Y0hrb2QyaGxaV3d1Y21GNVkyRnpkRkpsYzNWc2RDNW9hWFJRYjJsdWRGZHZjbXhrS1RzS0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemFXUmxTVzF3SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ0lDQWdJR0Y0YkdWYmFWMHVjMk5oYkdVb2QyaGxaV3d1YzJsa1pVbHRjSFZzYzJVc0lITnBaR1ZKYlhBcE95QXZMeUJUWTJGc1pTQjBhR1VnY21Wc1lYUnBkbVVnY0c5emFYUnBiMjRnYVc0Z2RHaGxJSFZ3SUdScGNtVmpkR2x2YmlCM2FYUm9JSEp2Ykd4SmJtWnNkV1Z1WTJVdUNpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCeWIyeHNTVzVtYkhWbGJtTmxJR2x6SURFc0lIUm9aU0JwYlhCMWJITmxJSGRwYkd3Z1ltVWdZWEJ3YkdsbFpDQnZiaUIwYUdVZ2FHbDBVRzlwYm5RZ0tHVmhjM2tnZEc4Z2NtOXNiQ0J2ZG1WeUtTd2dhV1lnYVhRZ2FYTWdlbVZ5YnlCcGRDQjNhV3hzSUdKbElHRndjR3hwWldRZ2FXNGdkR2hsSUhOaGJXVWdjR3hoYm1VZ1lYTWdkR2hsSUdObGJuUmxjaUJ2WmlCdFlYTnpJQ2h1YjNRZ1pXRnplU0IwYnlCeWIyeHNJRzkyWlhJcExnb0tJQ0FnSUNBZ0lDQWdJR05vWVhOemFYTkNiMlI1TG5abFkzUnZjbFJ2VEc5allXeEdjbUZ0WlNoeVpXeGZjRzl6TENCeVpXeGZjRzl6S1RzS0lDQWdJQ0FnSUNBZ0lISmxiRjl3YjNOYkozaDVlaWRiZEdocGN5NXBibVJsZUZWd1FYaHBjMTFkSUNvOUlIZG9aV1ZzTG5KdmJHeEpibVpzZFdWdVkyVTdDaUFnSUNBZ0lDQWdJQ0JqYUdGemMybHpRbTlrZVM1MlpXTjBiM0pVYjFkdmNteGtSbkpoYldVb2NtVnNYM0J2Y3l3Z2NtVnNYM0J2Y3lrN0NpQWdJQ0FnSUNBZ0lDQmphR0Z6YzJselFtOWtlUzVoY0hCc2VVbHRjSFZzYzJVb2MybGtaVWx0Y0N3Z2NtVnNYM0J2Y3lrN0lDOHZZWEJ3YkhrZ1puSnBZM1JwYjI0Z2FXMXdkV3h6WlNCdmJpQjBhR1VnWjNKdmRXNWtDZ29nSUNBZ0lDQWdJQ0FnYzJsa1pVbHRjQzV6WTJGc1pTZ3RNU3dnYzJsa1pVbHRjQ2s3Q2lBZ0lDQWdJQ0FnSUNCbmNtOTFibVJQWW1wbFkzUXVZWEJ3YkhsSmJYQjFiSE5sS0hOcFpHVkpiWEFzSUhKbGJGOXdiM015S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0lDQWdJSDBLQ2lBZ2ZRb2dJRzVsZHlCV1pXTXpLQ2s3Q2lBZ2JtVjNJRlpsWXpNb0tUc0tJQ0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUhSdGNGWmxZelFnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElIUnRjRlpsWXpVZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSFJ0Y0ZabFl6WWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHNWxkeUJTWVhrb0tUc0tJQ0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdOaGMzUlNZWGxmY21GNWRtVmpkRzl5SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQmpZWE4wVW1GNVgzUmhjbWRsZENBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdaR2x5WldOMGFXOXVjeUE5SUZ0dVpYY2dWbVZqTXlneExDQXdMQ0F3S1N3Z2JtVjNJRlpsWXpNb01Dd2dNU3dnTUNrc0lHNWxkeUJXWldNektEQXNJREFzSURFcFhUc0tJQ0JqYjI1emRDQjFjR1JoZEdWR2NtbGpkR2x2Ymw5emRYSm1UbTl5YldGc1YxTmZjMk5oYkdWa1gzQnliMm9nUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElIVndaR0YwWlVaeWFXTjBhVzl1WDJGNGJHVWdQU0JiWFRzS0lDQmpiMjV6ZENCMWNHUmhkR1ZHY21samRHbHZibDltYjNKM1lYSmtWMU1nUFNCYlhUc0tJQ0JqYjI1emRDQnphV1JsUm5KcFkzUnBiMjVUZEdsbVptNWxjM015SUQwZ01Uc0tJQ0JqYjI1emRDQmpZV3hqVW05c2JHbHVaMFp5YVdOMGFXOXVYM1psYkRFZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJR05oYkdOU2IyeHNhVzVuUm5KcFkzUnBiMjVmZG1Wc01pQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWTJGc1kxSnZiR3hwYm1kR2NtbGpkR2x2Ymw5MlpXd2dQU0J1WlhjZ1ZtVmpNeWdwT3dvS0lDQm1kVzVqZEdsdmJpQmpZV3hqVW05c2JHbHVaMFp5YVdOMGFXOXVLR0p2Wkhrd0xDQmliMlI1TVN3Z1puSnBZM1JwYjI1UWIzTlhiM0pzWkN3Z1puSnBZM1JwYjI1RWFYSmxZM1JwYjI1WGIzSnNaQ3dnYldGNFNXMXdkV3h6WlNrZ2V3b2dJQ0FnYkdWMElHb3hJRDBnTURzS0lDQWdJR052Ym5OMElHTnZiblJoWTNSUWIzTlhiM0pzWkNBOUlHWnlhV04wYVc5dVVHOXpWMjl5YkdRN0lDOHZJR052Ym5OMElISmxiRjl3YjNNeElEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDOHZJR052Ym5OMElISmxiRjl3YjNNeUlEMGdibVYzSUZabFl6TW9LVHNLQ2lBZ0lDQmpiMjV6ZENCMlpXd3hJRDBnWTJGc1kxSnZiR3hwYm1kR2NtbGpkR2x2Ymw5MlpXd3hPd29nSUNBZ1kyOXVjM1FnZG1Wc01pQTlJR05oYkdOU2IyeHNhVzVuUm5KcFkzUnBiMjVmZG1Wc01qc0tJQ0FnSUdOdmJuTjBJSFpsYkNBOUlHTmhiR05TYjJ4c2FXNW5SbkpwWTNScGIyNWZkbVZzT3lBdkx5QmpiMjUwWVdOMFVHOXpWMjl5YkdRdWRuTjFZaWhpYjJSNU1DNXdiM05wZEdsdmJpd2djbVZzWDNCdmN6RXBPd29nSUNBZ0x5OGdZMjl1ZEdGamRGQnZjMWR2Y214a0xuWnpkV0lvWW05a2VURXVjRzl6YVhScGIyNHNJSEpsYkY5d2IzTXlLVHNLQ2lBZ0lDQmliMlI1TUM1blpYUldaV3h2WTJsMGVVRjBWMjl5YkdSUWIybHVkQ2hqYjI1MFlXTjBVRzl6VjI5eWJHUXNJSFpsYkRFcE93b2dJQ0FnWW05a2VURXVaMlYwVm1Wc2IyTnBkSGxCZEZkdmNteGtVRzlwYm5Rb1kyOXVkR0ZqZEZCdmMxZHZjbXhrTENCMlpXd3lLVHNLSUNBZ0lIWmxiREV1ZG5OMVlpaDJaV3d5TENCMlpXd3BPd29nSUNBZ1kyOXVjM1FnZG5KbGJDQTlJR1p5YVdOMGFXOXVSR2x5WldOMGFXOXVWMjl5YkdRdVpHOTBLSFpsYkNrN0NpQWdJQ0JqYjI1emRDQmtaVzV2YlRBZ1BTQmpiMjF3ZFhSbFNXMXdkV3h6WlVSbGJtOXRhVzVoZEc5eUtHSnZaSGt3TENCbWNtbGpkR2x2YmxCdmMxZHZjbXhrTENCbWNtbGpkR2x2YmtScGNtVmpkR2x2YmxkdmNteGtLVHNLSUNBZ0lHTnZibk4wSUdSbGJtOXRNU0E5SUdOdmJYQjFkR1ZKYlhCMWJITmxSR1Z1YjIxcGJtRjBiM0lvWW05a2VURXNJR1p5YVdOMGFXOXVVRzl6VjI5eWJHUXNJR1p5YVdOMGFXOXVSR2x5WldOMGFXOXVWMjl5YkdRcE93b2dJQ0FnWTI5dWMzUWdjbVZzWVhoaGRHbHZiaUE5SURFN0NpQWdJQ0JqYjI1emRDQnFZV05FYVdGblFVSkpibllnUFNCeVpXeGhlR0YwYVc5dUlDOGdLR1JsYm05dE1DQXJJR1JsYm05dE1TazdJQzh2SUdOaGJHTjFiR0YwWlNCcUlIUm9ZWFFnYlc5MlpYTWdkWE1nZEc4Z2VtVnlieUJ5Wld4aGRHbDJaU0IyWld4dlkybDBlUW9LSUNBZ0lHb3hJRDBnTFhaeVpXd2dLaUJxWVdORWFXRm5RVUpKYm5ZN0Nnb2dJQ0FnYVdZZ0tHMWhlRWx0Y0hWc2MyVWdQQ0JxTVNrZ2V3b2dJQ0FnSUNCcU1TQTlJRzFoZUVsdGNIVnNjMlU3Q2lBZ0lDQjlDZ29nSUNBZ2FXWWdLR294SUR3Z0xXMWhlRWx0Y0hWc2MyVXBJSHNLSUNBZ0lDQWdhakVnUFNBdGJXRjRTVzF3ZFd4elpUc0tJQ0FnSUgwS0NpQWdJQ0J5WlhSMWNtNGdhakU3Q2lBZ2ZRb0tJQ0JqYjI1emRDQmpiMjF3ZFhSbFNXMXdkV3h6WlVSbGJtOXRhVzVoZEc5eVgzSXdJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCamIyMXdkWFJsU1cxd2RXeHpaVVJsYm05dGFXNWhkRzl5WDJNd0lEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0JqYjIxd2RYUmxTVzF3ZFd4elpVUmxibTl0YVc1aGRHOXlYM1psWXlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdZMjl0Y0hWMFpVbHRjSFZzYzJWRVpXNXZiV2x1WVhSdmNsOXRJRDBnYm1WM0lGWmxZek1vS1RzS0NpQWdablZ1WTNScGIyNGdZMjl0Y0hWMFpVbHRjSFZzYzJWRVpXNXZiV2x1WVhSdmNpaGliMlI1TENCd2IzTXNJRzV2Y20xaGJDa2dld29nSUNBZ1kyOXVjM1FnY2pBZ1BTQmpiMjF3ZFhSbFNXMXdkV3h6WlVSbGJtOXRhVzVoZEc5eVgzSXdPd29nSUNBZ1kyOXVjM1FnWXpBZ1BTQmpiMjF3ZFhSbFNXMXdkV3h6WlVSbGJtOXRhVzVoZEc5eVgyTXdPd29nSUNBZ1kyOXVjM1FnZG1WaklEMGdZMjl0Y0hWMFpVbHRjSFZzYzJWRVpXNXZiV2x1WVhSdmNsOTJaV003Q2lBZ0lDQmpiMjV6ZENCdElEMGdZMjl0Y0hWMFpVbHRjSFZzYzJWRVpXNXZiV2x1WVhSdmNsOXRPd29nSUNBZ2NHOXpMblp6ZFdJb1ltOWtlUzV3YjNOcGRHbHZiaXdnY2pBcE93b2dJQ0FnY2pBdVkzSnZjM01vYm05eWJXRnNMQ0JqTUNrN0NpQWdJQ0JpYjJSNUxtbHVka2x1WlhKMGFXRlhiM0pzWkM1MmJYVnNkQ2hqTUN3Z2JTazdDaUFnSUNCdExtTnliM056S0hJd0xDQjJaV01wT3dvZ0lDQWdjbVYwZFhKdUlHSnZaSGt1YVc1MlRXRnpjeUFySUc1dmNtMWhiQzVrYjNRb2RtVmpLVHNLSUNCOUNnb2dJR052Ym5OMElISmxjMjlzZG1WVGFXNW5iR1ZDYVd4aGRHVnlZV3hmZG1Wc01TQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnY21WemIyeDJaVk5wYm1kc1pVSnBiR0YwWlhKaGJGOTJaV3d5SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQnlaWE52YkhabFUybHVaMnhsUW1sc1lYUmxjbUZzWDNabGJDQTlJRzVsZHlCV1pXTXpLQ2s3SUM4dklHSnBiR0YwWlhKaGJDQmpiMjV6ZEhKaGFXNTBJR0psZEhkbFpXNGdkSGR2SUdSNWJtRnRhV01nYjJKcVpXTjBjd29LSUNCbWRXNWpkR2x2YmlCeVpYTnZiSFpsVTJsdVoyeGxRbWxzWVhSbGNtRnNLR0p2WkhreExDQndiM014TENCaWIyUjVNaXdnY0c5ek1pd2dibTl5YldGc0tTQjdDaUFnSUNCamIyNXpkQ0J1YjNKdFlXeE1aVzVUY1hJZ1BTQnViM0p0WVd3dWJHVnVaM1JvVTNGMVlYSmxaQ2dwT3dvS0lDQWdJR2xtSUNodWIzSnRZV3hNWlc1VGNYSWdQaUF4TGpFcElIc0tJQ0FnSUNBZ2NtVjBkWEp1SURBN0lDOHZJRzV2SUdsdGNIVnNjMlVLSUNBZ0lIMGdMeThnWTI5dWMzUWdjbVZzWDNCdmN6RWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdMeThnWTI5dWMzUWdjbVZzWDNCdmN6SWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdMeThnY0c5ek1TNTJjM1ZpS0dKdlpIa3hMbkJ2YzJsMGFXOXVMQ0J5Wld4ZmNHOXpNU2s3Q2lBZ0lDQXZMeUJ3YjNNeUxuWnpkV0lvWW05a2VUSXVjRzl6YVhScGIyNHNJSEpsYkY5d2IzTXlLVHNLQ2dvZ0lDQWdZMjl1YzNRZ2RtVnNNU0E5SUhKbGMyOXNkbVZUYVc1bmJHVkNhV3hoZEdWeVlXeGZkbVZzTVRzS0lDQWdJR052Ym5OMElIWmxiRElnUFNCeVpYTnZiSFpsVTJsdVoyeGxRbWxzWVhSbGNtRnNYM1psYkRJN0NpQWdJQ0JqYjI1emRDQjJaV3dnUFNCeVpYTnZiSFpsVTJsdVoyeGxRbWxzWVhSbGNtRnNYM1psYkRzS0lDQWdJR0p2WkhreExtZGxkRlpsYkc5amFYUjVRWFJYYjNKc1pGQnZhVzUwS0hCdmN6RXNJSFpsYkRFcE93b2dJQ0FnWW05a2VUSXVaMlYwVm1Wc2IyTnBkSGxCZEZkdmNteGtVRzlwYm5Rb2NHOXpNaXdnZG1Wc01pazdDaUFnSUNCMlpXd3hMblp6ZFdJb2RtVnNNaXdnZG1Wc0tUc0tJQ0FnSUdOdmJuTjBJSEpsYkY5MlpXd2dQU0J1YjNKdFlXd3VaRzkwS0habGJDazdDaUFnSUNCamIyNXpkQ0JqYjI1MFlXTjBSR0Z0Y0dsdVp5QTlJREF1TWpzS0lDQWdJR052Ym5OMElHMWhjM05VWlhKdElEMGdNU0F2SUNoaWIyUjVNUzVwYm5aTllYTnpJQ3NnWW05a2VUSXVhVzUyVFdGemN5azdDaUFnSUNCamIyNXpkQ0JwYlhCMWJITmxJRDBnTFdOdmJuUmhZM1JFWVcxd2FXNW5JQ29nY21Wc1gzWmxiQ0FxSUcxaGMzTlVaWEp0T3dvZ0lDQWdjbVYwZFhKdUlHbHRjSFZzYzJVN0NpQWdmUW9LSUNBdktpb0tJQ0FnS2lCVGNHaGxjbWxqWVd3Z2MyaGhjR1VLSUNBZ0tpQkFaWGhoYlhCc1pRb2dJQ0FxSUNBZ0lDQmpiMjV6ZENCeVlXUnBkWE1nUFNBeENpQWdJQ29nSUNBZ0lHTnZibk4wSUhOd2FHVnlaVk5vWVhCbElEMGdibVYzSUVOQlRrNVBUaTVUY0dobGNtVW9jbUZrYVhWektRb2dJQ0FxSUNBZ0lDQmpiMjV6ZENCemNHaGxjbVZDYjJSNUlEMGdibVYzSUVOQlRrNVBUaTVDYjJSNUtIc2diV0Z6Y3pvZ01Td2djMmhoY0dVNklITndhR1Z5WlZOb1lYQmxJSDBwQ2lBZ0lDb2dJQ0FnSUhkdmNteGtMbUZrWkVKdlpIa29jM0JvWlhKbFFtOWtlU2tLSUNBZ0tpOEtJQ0JqYkdGemN5QlRjR2hsY21VZ1pYaDBaVzVrY3lCVGFHRndaU0I3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRlJvWlNCeVlXUnBkWE1nYjJZZ2RHaGxJSE53YUdWeVpTNEtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvS0lDQWdJQ0FxSUVCd1lYSmhiU0J5WVdScGRYTWdWR2hsSUhKaFpHbDFjeUJ2WmlCMGFHVWdjM0JvWlhKbExDQmhJRzV2YmkxdVpXZGhkR2wyWlNCdWRXMWlaWEl1Q2lBZ0lDQWdLaThLSUNBZ0lHTnZibk4wY25WamRHOXlLSEpoWkdsMWN5a2dld29nSUNBZ0lDQnpkWEJsY2loN0NpQWdJQ0FnSUNBZ2RIbHdaVG9nVTJoaGNHVXVkSGx3WlhNdVUxQklSVkpGQ2lBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0IwYUdsekxuSmhaR2wxY3lBOUlISmhaR2wxY3lBaFBUMGdkVzVrWldacGJtVmtJRDhnY21Ga2FYVnpJRG9nTVM0d093b0tJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtRmthWFZ6SUR3Z01Da2dld29nSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WR2hsSUhOd2FHVnlaU0J5WVdScGRYTWdZMkZ1Ym05MElHSmxJRzVsWjJGMGFYWmxMaWNwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlVKdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWektDazdDaUFnSUNCOUNpQWdJQ0F2S2lvZ1kyRnNZM1ZzWVhSbFRHOWpZV3hKYm1WeWRHbGhJQ292Q2dvS0lDQWdJR05oYkdOMWJHRjBaVXh2WTJGc1NXNWxjblJwWVNodFlYTnpMQ0IwWVhKblpYUXBJSHNLSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1kyOXVjM1FnU1NBOUlESXVNQ0FxSUcxaGMzTWdLaUIwYUdsekxuSmhaR2wxY3lBcUlIUm9hWE11Y21Ga2FYVnpJQzhnTlM0d093b2dJQ0FnSUNCMFlYSm5aWFF1ZUNBOUlFazdDaUFnSUNBZ0lIUmhjbWRsZEM1NUlEMGdTVHNLSUNBZ0lDQWdkR0Z5WjJWMExub2dQU0JKT3dvZ0lDQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME93b2dJQ0FnZlFvZ0lDQWdMeW9xSUhadmJIVnRaU0FxTHdvS0NpQWdJQ0IyYjJ4MWJXVW9LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQTBMakFnS2lCTllYUm9MbEJKSUNvZ1RXRjBhQzV3YjNjb2RHaHBjeTV5WVdScGRYTXNJRE1wSUM4Z015NHdPd29nSUNBZ2ZRb0tJQ0FnSUhWd1pHRjBaVUp2ZFc1a2FXNW5VM0JvWlhKbFVtRmthWFZ6S0NrZ2V3b2dJQ0FnSUNCMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbFVtRmthWFZ6SUQwZ2RHaHBjeTV5WVdScGRYTTdDaUFnSUNCOUNnb2dJQ0FnWTJGc1kzVnNZWFJsVjI5eWJHUkJRVUpDS0hCdmN5d2djWFZoZEN3Z2JXbHVMQ0J0WVhncElIc0tJQ0FnSUNBZ1kyOXVjM1FnY2lBOUlIUm9hWE11Y21Ga2FYVnpPd29nSUNBZ0lDQmpiMjV6ZENCaGVHVnpJRDBnV3lkNEp5d2dKM2tuTENBbmVpZGRPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JoZUdWekxteGxibWQwYURzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZWGdnUFNCaGVHVnpXMmxkT3dvZ0lDQWdJQ0FnSUcxcGJsdGhlRjBnUFNCd2IzTmJZWGhkSUMwZ2Nqc0tJQ0FnSUNBZ0lDQnRZWGhiWVhoZElEMGdjRzl6VzJGNFhTQXJJSEk3Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtDaUFnZlFvZ0lHNWxkeUJXWldNektDazdDaUFnYm1WM0lGWmxZek1vS1RzS0lDQnVaWGNnVm1Wak15Z3BPeUF2THlCVVpXMXdJSFpsWTNSdmNuTWdabTl5SUdOaGJHTjFiR0YwYVc5dUNnb2dJRzVsZHlCV1pXTXpLQ2s3SUM4dklGSmxiR0YwYVhabElIWmxiRzlqYVhSNUNnb2dJRzVsZHlCV1pXTXpLQ2s3Q2lBZ2JtVjNJRlpsWXpNb0tUc0tJQ0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHNWxkeUJXWldNektDazdDaUFnYm1WM0lGWmxZek1vS1RzS0NpQWdMeW9xQ2lBZ0lDb2dRM2xzYVc1a1pYSWdZMnhoYzNNdUNpQWdJQ29nUUdWNFlXMXdiR1VLSUNBZ0tpQWdJQ0FnWTI5dWMzUWdjbUZrYVhWelZHOXdJRDBnTUM0MUNpQWdJQ29nSUNBZ0lHTnZibk4wSUhKaFpHbDFjMEp2ZEhSdmJTQTlJREF1TlFvZ0lDQXFJQ0FnSUNCamIyNXpkQ0JvWldsbmFIUWdQU0F5Q2lBZ0lDb2dJQ0FnSUdOdmJuTjBJRzUxYlZObFoyMWxiblJ6SUQwZ01USUtJQ0FnS2lBZ0lDQWdZMjl1YzNRZ1kzbHNhVzVrWlhKVGFHRndaU0E5SUc1bGR5QkRRVTVPVDA0dVEzbHNhVzVrWlhJb2NtRmthWFZ6Vkc5d0xDQnlZV1JwZFhOQ2IzUjBiMjBzSUdobGFXZG9kQ3dnYm5WdFUyVm5iV1Z1ZEhNcENpQWdJQ29nSUNBZ0lHTnZibk4wSUdONWJHbHVaR1Z5UW05a2VTQTlJRzVsZHlCRFFVNU9UMDR1UW05a2VTaDdJRzFoYzNNNklERXNJSE5vWVhCbE9pQmplV3hwYm1SbGNsTm9ZWEJsSUgwcENpQWdJQ29nSUNBZ0lIZHZjbXhrTG1Ga1pFSnZaSGtvWTNsc2FXNWtaWEpDYjJSNUtRb2dJQ0FxTHdvS0lDQmpiR0Z6Y3lCRGVXeHBibVJsY2lCbGVIUmxibVJ6SUVOdmJuWmxlRkJ2Ykhsb1pXUnliMjRnZXdvZ0lDQWdMeW9xSUZSb1pTQnlZV1JwZFhNZ2IyWWdkR2hsSUhSdmNDQnZaaUIwYUdVZ1EzbHNhVzVrWlhJdUlDb3ZDZ29nSUNBZ0x5b3FJRlJvWlNCeVlXUnBkWE1nYjJZZ2RHaGxJR0p2ZEhSdmJTQnZaaUIwYUdVZ1EzbHNhVzVrWlhJdUlDb3ZDZ29nSUNBZ0x5b3FJRlJvWlNCb1pXbG5hSFFnYjJZZ2RHaGxJRU41YkdsdVpHVnlMaUFxTHdvS0lDQWdJQzhxS2lCVWFHVWdiblZ0WW1WeUlHOW1JSE5sWjIxbGJuUnpJSFJ2SUdKMWFXeGtJSFJvWlNCamVXeHBibVJsY2lCdmRYUWdiMll1SUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQWNHRnlZVzBnY21Ga2FYVnpWRzl3SUZSb1pTQnlZV1JwZFhNZ2IyWWdkR2hsSUhSdmNDQnZaaUIwYUdVZ1EzbHNhVzVrWlhJdUNpQWdJQ0FnS2lCQWNHRnlZVzBnY21Ga2FYVnpRbTkwZEc5dElGUm9aU0J5WVdScGRYTWdiMllnZEdobElHSnZkSFJ2YlNCdlppQjBhR1VnUTNsc2FXNWtaWEl1Q2lBZ0lDQWdLaUJBY0dGeVlXMGdhR1ZwWjJoMElGUm9aU0JvWldsbmFIUWdiMllnZEdobElFTjViR2x1WkdWeUxnb2dJQ0FnSUNvZ1FIQmhjbUZ0SUc1MWJWTmxaMjFsYm5SeklGUm9aU0J1ZFcxaVpYSWdiMllnYzJWbmJXVnVkSE1nZEc4Z1luVnBiR1FnZEdobElHTjViR2x1WkdWeUlHOTFkQ0J2Wmk0S0lDQWdJQ0FxTHdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvY21Ga2FYVnpWRzl3TENCeVlXUnBkWE5DYjNSMGIyMHNJR2hsYVdkb2RDd2diblZ0VTJWbmJXVnVkSE1wSUhzS0lDQWdJQ0FnYVdZZ0tISmhaR2wxYzFSdmNDQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnY21Ga2FYVnpWRzl3SUQwZ01Uc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLSEpoWkdsMWMwSnZkSFJ2YlNBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdjbUZrYVhWelFtOTBkRzl0SUQwZ01Uc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLR2hsYVdkb2RDQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYUdWcFoyaDBJRDBnTVRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tHNTFiVk5sWjIxbGJuUnpJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCdWRXMVRaV2R0Wlc1MGN5QTlJRGc3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNoeVlXUnBkWE5VYjNBZ1BDQXdLU0I3Q2lBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RVYUdVZ1kzbHNhVzVrWlhJZ2NtRmthWFZ6Vkc5d0lHTmhibTV2ZENCaVpTQnVaV2RoZEdsMlpTNG5LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0hKaFpHbDFjMEp2ZEhSdmJTQThJREFwSUhzS0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFSb1pTQmplV3hwYm1SbGNpQnlZV1JwZFhOQ2IzUjBiMjBnWTJGdWJtOTBJR0psSUc1bFoyRjBhWFpsTGljcE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCamIyNXpkQ0JPSUQwZ2JuVnRVMlZuYldWdWRITTdDaUFnSUNBZ0lHTnZibk4wSUhabGNuUnBZMlZ6SUQwZ1cxMDdDaUFnSUNBZ0lHTnZibk4wSUdGNFpYTWdQU0JiWFRzS0lDQWdJQ0FnWTI5dWMzUWdabUZqWlhNZ1BTQmJYVHNLSUNBZ0lDQWdZMjl1YzNRZ1ltOTBkRzl0Wm1GalpTQTlJRnRkT3dvZ0lDQWdJQ0JqYjI1emRDQjBiM0JtWVdObElEMGdXMTA3Q2lBZ0lDQWdJR052Ym5OMElHTnZjeUE5SUUxaGRHZ3VZMjl6T3dvZ0lDQWdJQ0JqYjI1emRDQnphVzRnUFNCTllYUm9Mbk5wYmpzZ0x5OGdSbWx5YzNRZ1ltOTBkRzl0SUhCdmFXNTBDZ29nSUNBZ0lDQjJaWEowYVdObGN5NXdkWE5vS0c1bGR5QldaV016S0MxeVlXUnBkWE5DYjNSMGIyMGdLaUJ6YVc0b01Da3NJQzFvWldsbmFIUWdLaUF3TGpVc0lISmhaR2wxYzBKdmRIUnZiU0FxSUdOdmN5Z3dLU2twT3dvZ0lDQWdJQ0JpYjNSMGIyMW1ZV05sTG5CMWMyZ29NQ2s3SUM4dklFWnBjbk4wSUhSdmNDQndiMmx1ZEFvS0lDQWdJQ0FnZG1WeWRHbGpaWE11Y0hWemFDaHVaWGNnVm1Wak15Z3RjbUZrYVhWelZHOXdJQ29nYzJsdUtEQXBMQ0JvWldsbmFIUWdLaUF3TGpVc0lISmhaR2wxYzFSdmNDQXFJR052Y3lnd0tTa3BPd29nSUNBZ0lDQjBiM0JtWVdObExuQjFjMmdvTVNrN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElFNDdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUhSb1pYUmhJRDBnTWlBcUlFMWhkR2d1VUVrZ0x5Qk9JQ29nS0drZ0t5QXhLVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjBhR1YwWVU0Z1BTQXlJQ29nVFdGMGFDNVFTU0F2SUU0Z0tpQW9hU0FySURBdU5TazdDZ29nSUNBZ0lDQWdJR2xtSUNocElEd2dUaUF0SURFcElIc0tJQ0FnSUNBZ0lDQWdJQzh2SUVKdmRIUnZiUW9nSUNBZ0lDQWdJQ0FnZG1WeWRHbGpaWE11Y0hWemFDaHVaWGNnVm1Wak15Z3RjbUZrYVhWelFtOTBkRzl0SUNvZ2MybHVLSFJvWlhSaEtTd2dMV2hsYVdkb2RDQXFJREF1TlN3Z2NtRmthWFZ6UW05MGRHOXRJQ29nWTI5ektIUm9aWFJoS1NrcE93b2dJQ0FnSUNBZ0lDQWdZbTkwZEc5dFptRmpaUzV3ZFhOb0tESWdLaUJwSUNzZ01pazdJQzh2SUZSdmNBb0tJQ0FnSUNBZ0lDQWdJSFpsY25ScFkyVnpMbkIxYzJnb2JtVjNJRlpsWXpNb0xYSmhaR2wxYzFSdmNDQXFJSE5wYmloMGFHVjBZU2tzSUdobGFXZG9kQ0FxSURBdU5Td2djbUZrYVhWelZHOXdJQ29nWTI5ektIUm9aWFJoS1NrcE93b2dJQ0FnSUNBZ0lDQWdkRzl3Wm1GalpTNXdkWE5vS0RJZ0tpQnBJQ3NnTXlrN0lDOHZJRVpoWTJVS0NpQWdJQ0FnSUNBZ0lDQm1ZV05sY3k1d2RYTm9LRnN5SUNvZ2FTd2dNaUFxSUdrZ0t5QXhMQ0F5SUNvZ2FTQXJJRE1zSURJZ0tpQnBJQ3NnTWwwcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQm1ZV05sY3k1d2RYTm9LRnN5SUNvZ2FTd2dNaUFxSUdrZ0t5QXhMQ0F4TENBd1hTazdJQzh2SUVOdmJtNWxZM1FLSUNBZ0lDQWdJQ0I5SUM4dklFRjRhWE02SUhkbElHTmhiaUJqZFhRZ2IyWm1JR2hoYkdZZ2IyWWdkR2hsYlNCcFppQjNaU0JvWVhabElHVjJaVzRnYm5WdFltVnlJRzltSUhObFoyMWxiblJ6Q2dvS0lDQWdJQ0FnSUNCcFppQW9UaUFsSURJZ1BUMDlJREVnZkh3Z2FTQThJRTRnTHlBeUtTQjdDaUFnSUNBZ0lDQWdJQ0JoZUdWekxuQjFjMmdvYm1WM0lGWmxZek1vTFhOcGJpaDBhR1YwWVU0cExDQXdMQ0JqYjNNb2RHaGxkR0ZPS1NrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ1ptRmpaWE11Y0hWemFDaGliM1IwYjIxbVlXTmxLVHNLSUNBZ0lDQWdZWGhsY3k1d2RYTm9LRzVsZHlCV1pXTXpLREFzSURFc0lEQXBLVHNnTHk4Z1VtVnZjbVJsY2lCMGIzQWdabUZqWlFvS0lDQWdJQ0FnWTI5dWMzUWdkR1Z0Y0NBOUlGdGRPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IwYjNCbVlXTmxMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ2RHVnRjQzV3ZFhOb0tIUnZjR1poWTJWYmRHOXdabUZqWlM1c1pXNW5kR2dnTFNCcElDMGdNVjBwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JtWVdObGN5NXdkWE5vS0hSbGJYQXBPd29nSUNBZ0lDQnpkWEJsY2loN0NpQWdJQ0FnSUNBZ2RtVnlkR2xqWlhNc0NpQWdJQ0FnSUNBZ1ptRmpaWE1zQ2lBZ0lDQWdJQ0FnWVhobGN3b2dJQ0FnSUNCOUtUc0tJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdVMmhoY0dVdWRIbHdaWE11UTFsTVNVNUVSVkk3Q2lBZ0lDQWdJSFJvYVhNdWNtRmthWFZ6Vkc5d0lEMGdjbUZrYVhWelZHOXdPd29nSUNBZ0lDQjBhR2x6TG5KaFpHbDFjMEp2ZEhSdmJTQTlJSEpoWkdsMWMwSnZkSFJ2YlRzS0lDQWdJQ0FnZEdocGN5NW9aV2xuYUhRZ1BTQm9aV2xuYUhRN0NpQWdJQ0FnSUhSb2FYTXViblZ0VTJWbmJXVnVkSE1nUFNCdWRXMVRaV2R0Wlc1MGN6c0tJQ0FnSUgwS0NpQWdmUW9LSUNBdktpb0tJQ0FnS2lCUVlYSjBhV05zWlNCemFHRndaUzRLSUNBZ0tpQkFaWGhoYlhCc1pRb2dJQ0FxSUNBZ0lDQmpiMjV6ZENCd1lYSjBhV05zWlZOb1lYQmxJRDBnYm1WM0lFTkJUazVQVGk1UVlYSjBhV05zWlNncENpQWdJQ29nSUNBZ0lHTnZibk4wSUhCaGNuUnBZMnhsUW05a2VTQTlJRzVsZHlCRFFVNU9UMDR1UW05a2VTaDdJRzFoYzNNNklERXNJSE5vWVhCbE9pQndZWEowYVdOc1pWTm9ZWEJsSUgwcENpQWdJQ29nSUNBZ0lIZHZjbXhrTG1Ga1pFSnZaSGtvY0dGeWRHbGpiR1ZDYjJSNUtRb2dJQ0FxTHdvZ0lHTnNZWE56SUZCaGNuUnBZMnhsSUdWNGRHVnVaSE1nVTJoaGNHVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3Q2lBZ0lDQWdJSE4xY0dWeUtIc0tJQ0FnSUNBZ0lDQjBlWEJsT2lCVGFHRndaUzUwZVhCbGN5NVFRVkpVU1VOTVJRb2dJQ0FnSUNCOUtUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nWTJGc1kzVnNZWFJsVEc5allXeEpibVZ5ZEdsaENpQWdJQ0FnS2k4S0Nnb2dJQ0FnWTJGc1kzVnNZWFJsVEc5allXeEpibVZ5ZEdsaEtHMWhjM01zSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBZWEpuWlhRdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwT3dvZ0lDQWdmUW9LSUNBZ0lIWnZiSFZ0WlNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SURBN0NpQWdJQ0I5Q2dvZ0lDQWdkWEJrWVhSbFFtOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTW9LU0I3Q2lBZ0lDQWdJSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTWdQU0F3T3dvZ0lDQWdmUW9LSUNBZ0lHTmhiR04xYkdGMFpWZHZjbXhrUVVGQ1FpaHdiM01zSUhGMVlYUXNJRzFwYml3Z2JXRjRLU0I3Q2lBZ0lDQWdJQzh2SUVkbGRDQmxZV05vSUdGNGFYTWdiV0Y0Q2lBZ0lDQWdJRzFwYmk1amIzQjVLSEJ2Y3lrN0NpQWdJQ0FnSUcxaGVDNWpiM0I1S0hCdmN5azdDaUFnSUNCOUNnb2dJSDBLQ2lBZ0x5b3FDaUFnSUNvZ1FTQndiR0Z1WlN3Z1ptRmphVzVuSUdsdUlIUm9aU0JhSUdScGNtVmpkR2x2Ymk0Z1ZHaGxJSEJzWVc1bElHaGhjeUJwZEhNZ2MzVnlabUZqWlNCaGRDQjZQVEFnWVc1a0lHVjJaWEo1ZEdocGJtY2dZbVZzYjNjZ2VqMHdJR2x6SUdGemMzVnRaV1FnZEc4Z1ltVWdjMjlzYVdRZ2NHeGhibVV1SUZSdklHMWhhMlVnZEdobElIQnNZVzVsSUdaaFkyVWdhVzRnYzI5dFpTQnZkR2hsY2lCa2FYSmxZM1JwYjI0Z2RHaGhiaUI2TENCNWIzVWdiWFZ6ZENCd2RYUWdhWFFnYVc1emFXUmxJR0VnUW05a2VTQmhibVFnY205MFlYUmxJSFJvWVhRZ1ltOWtlUzRnVTJWbElIUm9aU0JrWlcxdmN5NEtJQ0FnS2lCQVpYaGhiWEJzWlFvZ0lDQXFJQ0FnSUNCamIyNXpkQ0J3YkdGdVpWTm9ZWEJsSUQwZ2JtVjNJRU5CVGs1UFRpNVFiR0Z1WlNncENpQWdJQ29nSUNBZ0lHTnZibk4wSUhCc1lXNWxRbTlrZVNBOUlHNWxkeUJEUVU1T1QwNHVRbTlrZVNoN0lHMWhjM002SURBc0lITm9ZWEJsT2lBZ2NHeGhibVZUYUdGd1pTQjlLUW9nSUNBcUlDQWdJQ0J3YkdGdVpVSnZaSGt1Y1hWaGRHVnlibWx2Ymk1elpYUkdjbTl0UlhWc1pYSW9MVTFoZEdndVVFa2dMeUF5TENBd0xDQXdLU0F2THlCdFlXdGxJR2wwSUdaaFkyVWdkWEFLSUNBZ0tpQWdJQ0FnZDI5eWJHUXVZV1JrUW05a2VTaHdiR0Z1WlVKdlpIa3BDaUFnSUNvdkNpQWdZMnhoYzNNZ1VHeGhibVVnWlhoMFpXNWtjeUJUYUdGd1pTQjdDaUFnSUNBdktpb2dkMjl5YkdST2IzSnRZV3dnS2k4S0NpQWdJQ0F2S2lvZ2QyOXliR1JPYjNKdFlXeE9aV1ZrYzFWd1pHRjBaU0FxTHdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN0NpQWdJQ0FnSUhOMWNHVnlLSHNLSUNBZ0lDQWdJQ0IwZVhCbE9pQlRhR0Z3WlM1MGVYQmxjeTVRVEVGT1JRb2dJQ0FnSUNCOUtUc2dMeThnVjI5eWJHUWdiM0pwWlc1MFpXUWdibTl5YldGc0Nnb2dJQ0FnSUNCMGFHbHpMbmR2Y214a1RtOXliV0ZzSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ2RHaHBjeTUzYjNKc1pFNXZjbTFoYkU1bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS0lDQWdJQ0FnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeUE5SUU1MWJXSmxjaTVOUVZoZlZrRk1WVVU3Q2lBZ0lDQjlDaUFnSUNBdktpb2dZMjl0Y0hWMFpWZHZjbXhrVG05eWJXRnNJQ292Q2dvS0lDQWdJR052YlhCMWRHVlhiM0pzWkU1dmNtMWhiQ2h4ZFdGMEtTQjdDaUFnSUNBZ0lHTnZibk4wSUc0Z1BTQjBhR2x6TG5kdmNteGtUbTl5YldGc093b2dJQ0FnSUNCdUxuTmxkQ2d3TENBd0xDQXhLVHNLSUNBZ0lDQWdjWFZoZEM1MmJYVnNkQ2h1TENCdUtUc0tJQ0FnSUNBZ2RHaHBjeTUzYjNKc1pFNXZjbTFoYkU1bFpXUnpWWEJrWVhSbElEMGdabUZzYzJVN0NpQWdJQ0I5Q2dvZ0lDQWdZMkZzWTNWc1lYUmxURzlqWVd4SmJtVnlkR2xoS0cxaGMzTXNJSFJoY21kbGRDa2dld29nSUNBZ0lDQnBaaUFvZEdGeVoyVjBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCMFlYSm5aWFFnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCeVpYUjFjbTRnZEdGeVoyVjBPd29nSUNBZ2ZRb0tJQ0FnSUhadmJIVnRaU2dwSUhzS0lDQWdJQ0FnY21WMGRYSnVJQ2d2THlCVWFHVWdjR3hoYm1VZ2FYTWdhVzVtYVc1cGRHVXVMaTRLSUNBZ0lDQWdJQ0JPZFcxaVpYSXVUVUZZWDFaQlRGVkZDaUFnSUNBZ0lDazdDaUFnSUNCOUNnb2dJQ0FnWTJGc1kzVnNZWFJsVjI5eWJHUkJRVUpDS0hCdmN5d2djWFZoZEN3Z2JXbHVMQ0J0WVhncElIc0tJQ0FnSUNBZ0x5OGdWR2hsSUhCc1lXNWxJRUZCUWtJZ2FYTWdhVzVtYVc1cGRHVXNJR1Y0WTJWd2RDQnBaaUIwYUdVZ2JtOXliV0ZzSUdseklIQnZhVzUwYVc1bklHRnNiMjVuSUdGdWVTQmhlR2x6Q2lBZ0lDQWdJSFJsYlhCT2IzSnRZV3d1YzJWMEtEQXNJREFzSURFcE95QXZMeUJFWldaaGRXeDBJSEJzWVc1bElHNXZjbTFoYkNCcGN5QjZDZ29nSUNBZ0lDQnhkV0YwTG5adGRXeDBLSFJsYlhCT2IzSnRZV3dzSUhSbGJYQk9iM0p0WVd3cE93b2dJQ0FnSUNCamIyNXpkQ0J0WVhoV1lXd2dQU0JPZFcxaVpYSXVUVUZZWDFaQlRGVkZPd29nSUNBZ0lDQnRhVzR1YzJWMEtDMXRZWGhXWVd3c0lDMXRZWGhXWVd3c0lDMXRZWGhXWVd3cE93b2dJQ0FnSUNCdFlYZ3VjMlYwS0cxaGVGWmhiQ3dnYldGNFZtRnNMQ0J0WVhoV1lXd3BPd29LSUNBZ0lDQWdhV1lnS0hSbGJYQk9iM0p0WVd3dWVDQTlQVDBnTVNrZ2V3b2dJQ0FnSUNBZ0lHMWhlQzU0SUQwZ2NHOXpMbmc3Q2lBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdWdGNFNXZjbTFoYkM1NElEMDlQU0F0TVNrZ2V3b2dJQ0FnSUNBZ0lHMXBiaTU0SUQwZ2NHOXpMbmc3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNoMFpXMXdUbTl5YldGc0xua2dQVDA5SURFcElIc0tJQ0FnSUNBZ0lDQnRZWGd1ZVNBOUlIQnZjeTU1T3dvZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSbGJYQk9iM0p0WVd3dWVTQTlQVDBnTFRFcElIc0tJQ0FnSUNBZ0lDQnRhVzR1ZVNBOUlIQnZjeTU1T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2RHVnRjRTV2Y20xaGJDNTZJRDA5UFNBeEtTQjdDaUFnSUNBZ0lDQWdiV0Y0TG5vZ1BTQndiM011ZWpzS0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMFpXMXdUbTl5YldGc0xub2dQVDA5SUMweEtTQjdDaUFnSUNBZ0lDQWdiV2x1TG5vZ1BTQndiM011ZWpzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9LSUNBZ0lIVndaR0YwWlVKdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWektDa2dld29nSUNBZ0lDQjBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWeklEMGdUblZ0WW1WeUxrMUJXRjlXUVV4VlJUc0tJQ0FnSUgwS0NpQWdmUW9nSUdOdmJuTjBJSFJsYlhCT2IzSnRZV3dnUFNCdVpYY2dWbVZqTXlncE93b0tJQ0F2S2lvS0lDQWdLaUJJWldsbmFIUm1hV1ZzWkNCemFHRndaU0JqYkdGemN5NGdTR1ZwWjJoMElHUmhkR0VnYVhNZ1oybDJaVzRnWVhNZ1lXNGdZWEp5WVhrdUlGUm9aWE5sSUdSaGRHRWdjRzlwYm5SeklHRnlaU0J6Y0hKbFlXUWdiM1YwSUdWMlpXNXNlU0IzYVhSb0lHRWdaMmwyWlc0Z1pHbHpkR0Z1WTJVdUNpQWdJQ29nUUhSdlpHOGdVMmh2ZFd4a0lHSmxJSEJ2YzNOcFlteGxJSFJ2SUhWelpTQmhiRzl1WnlCaGJHd2dZWGhsY3l3Z2JtOTBJR3AxYzNRZ2VRb2dJQ0FxSUVCMGIyUnZJSE5vYjNWc1pDQmlaU0J3YjNOemFXSnNaU0IwYnlCelkyRnNaU0JoYkc5dVp5QmhiR3dnWVhobGN3b2dJQ0FxSUVCMGIyUnZJRkpsWm1GamRHOXlJR1ZzWlcxbGJuUlRhWHBsSUhSdklHVnNaVzFsYm5SVGFYcGxXQ0JoYm1RZ1pXeGxiV1Z1ZEZOcGVtVlpDaUFnSUNvS0lDQWdLaUJBWlhoaGJYQnNaUW9nSUNBcUlDQWdJQ0F2THlCSFpXNWxjbUYwWlNCemIyMWxJR2hsYVdkb2RDQmtZWFJoSUNoNUxYWmhiSFZsY3lrdUNpQWdJQ29nSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0JiWFFvZ0lDQXFJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElERXdNREE3SUdrckt5a2dld29nSUNBcUlDQWdJQ0FnSUNBZ1kyOXVjM1FnZVNBOUlEQXVOU0FxSUUxaGRHZ3VZMjl6S0RBdU1pQXFJR2twQ2lBZ0lDb2dJQ0FnSUNBZ0lDQmtZWFJoTG5CMWMyZ29lU2tLSUNBZ0tpQWdJQ0FnZlFvZ0lDQXFDaUFnSUNvZ0lDQWdJQzh2SUVOeVpXRjBaU0IwYUdVZ2FHVnBaMmgwWm1sbGJHUWdjMmhoY0dVS0lDQWdLaUFnSUNBZ1kyOXVjM1FnYUdWcFoyaDBabWxsYkdSVGFHRndaU0E5SUc1bGR5QkRRVTVPVDA0dVNHVnBaMmgwWm1sbGJHUW9aR0YwWVN3Z2V3b2dJQ0FxSUNBZ0lDQWdJQ0FnWld4bGJXVnVkRk5wZW1VNklERWdMeThnUkdsemRHRnVZMlVnWW1WMGQyVmxiaUIwYUdVZ1pHRjBZU0J3YjJsdWRITWdhVzRnV0NCaGJtUWdXU0JrYVhKbFkzUnBiMjV6Q2lBZ0lDb2dJQ0FnSUgwcENpQWdJQ29nSUNBZ0lHTnZibk4wSUdobGFXZG9kR1pwWld4a1FtOWtlU0E5SUc1bGR5QkRRVTVPVDA0dVFtOWtlU2g3SUhOb1lYQmxPaUJvWldsbmFIUm1hV1ZzWkZOb1lYQmxJSDBwQ2lBZ0lDb2dJQ0FnSUhkdmNteGtMbUZrWkVKdlpIa29hR1ZwWjJoMFptbGxiR1JDYjJSNUtRb2dJQ0FxTHdvZ0lHTnNZWE56SUVobGFXZG9kR1pwWld4a0lHVjRkR1Z1WkhNZ1UyaGhjR1VnZXdvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJCYmlCaGNuSmhlU0J2WmlCdWRXMWlaWEp6TENCdmNpQm9aV2xuYUhRZ2RtRnNkV1Z6TENCMGFHRjBJR0Z5WlNCemNISmxZV1FnYjNWMElHRnNiMjVuSUhSb1pTQjRJR0Y0YVhNdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUUxaGVDQjJZV3gxWlNCdlppQjBhR1VnWkdGMFlTQndiMmx1ZEhNZ2FXNGdkR2hsSUdSaGRHRWdZWEp5WVhrdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUUxcGJtbHRkVzBnZG1Gc2RXVWdiMllnZEdobElHUmhkR0VnY0c5cGJuUnpJR2x1SUhSb1pTQmtZWFJoSUdGeWNtRjVMZ29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQlhiM0pzWkNCemNHRmphVzVuSUdKbGRIZGxaVzRnZEdobElHUmhkR0VnY0c5cGJuUnpJR2x1SUZnZ1lXNWtJRmtnWkdseVpXTjBhVzl1TGdvZ0lDQWdJQ29nUUhSdlpHOGdaV3hsYldWdWRGTnBlbVZZSUdGdVpDQlpDaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFQmtaV1poZFd4MElIUnlkV1VLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRSEJoY21GdElHUmhkR0VnUVc0Z1lYSnlZWGtnYjJZZ2JuVnRZbVZ5Y3l3Z2IzSWdhR1ZwWjJoMElIWmhiSFZsY3l3Z2RHaGhkQ0JoY21VZ2MzQnlaV0ZrSUc5MWRDQmhiRzl1WnlCMGFHVWdlQ0JoZUdsekxnb2dJQ0FnSUNvdkNpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhMQ0J2Y0hScGIyNXpLU0I3Q2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJRzl3ZEdsdmJuTWdQU0JWZEdsc2N5NWtaV1poZFd4MGN5aHZjSFJwYjI1ekxDQjdDaUFnSUNBZ0lDQWdiV0Y0Vm1Gc2RXVTZJRzUxYkd3c0NpQWdJQ0FnSUNBZ2JXbHVWbUZzZFdVNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnWld4bGJXVnVkRk5wZW1VNklERUtJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lITjFjR1Z5S0hzS0lDQWdJQ0FnSUNCMGVYQmxPaUJUYUdGd1pTNTBlWEJsY3k1SVJVbEhTRlJHU1VWTVJBb2dJQ0FnSUNCOUtUc0tJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVRzS0lDQWdJQ0FnZEdocGN5NXRZWGhXWVd4MVpTQTlJRzl3ZEdsdmJuTXViV0Y0Vm1Gc2RXVTdDaUFnSUNBZ0lIUm9hWE11YldsdVZtRnNkV1VnUFNCdmNIUnBiMjV6TG0xcGJsWmhiSFZsT3dvZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5SVGFYcGxJRDBnYjNCMGFXOXVjeTVsYkdWdFpXNTBVMmw2WlRzS0NpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtMXBibFpoYkhWbElEMDlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZOYVc1V1lXeDFaU2dwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1dFlYaFdZV3gxWlNBOVBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxUV0Y0Vm1Gc2RXVW9LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkR2hwY3k1allXTm9aVVZ1WVdKc1pXUWdQU0IwY25WbE93b2dJQ0FnSUNCMGFHbHpMbkJwYkd4aGNrTnZiblpsZUNBOUlHNWxkeUJEYjI1MlpYaFFiMng1YUdWa2NtOXVLQ2s3Q2lBZ0lDQWdJSFJvYVhNdWNHbHNiR0Z5VDJabWMyVjBJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWQ2IzVnVaR2x1WjFOd2FHVnlaVkpoWkdsMWN5Z3BPeUF2THlBaWFWOXFYMmx6VlhCd1pYSWlJRDArSUhzZ1kyOXVkbVY0T2lBdUxpNHNJRzltWm5ObGREb2dMaTR1SUgwS0lDQWdJQ0FnTHk4Z1ptOXlJR1Y0WVcxd2JHVTZDaUFnSUNBZ0lDOHZJRjlqWVdOb1pXUlFhV3hzWVhKeld5SXdYekpmTVNKZENnb2dJQ0FnSUNCMGFHbHpMbDlqWVdOb1pXUlFhV3hzWVhKeklEMGdlMzA3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTmhiR3dnZDJobGJtVjJaWElnZVc5MUlHTm9ZVzVuWlNCMGFHVWdaR0YwWVNCaGNuSmhlUzRLSUNBZ0lDQXFMd29LQ2lBZ0lDQjFjR1JoZEdVb0tTQjdDaUFnSUNBZ0lIUm9hWE11WDJOaFkyaGxaRkJwYkd4aGNuTWdQU0I3ZlRzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWWEJrWVhSbElIUm9aU0JnYldsdVZtRnNkV1ZnSUhCeWIzQmxjblI1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdkWEJrWVhSbFRXbHVWbUZzZFdVb0tTQjdDaUFnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwYUdsekxtUmhkR0U3Q2lBZ0lDQWdJR3hsZENCdGFXNVdZV3gxWlNBOUlHUmhkR0ZiTUYxYk1GMDdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQWhQVDBnWkdGMFlTNXNaVzVuZEdnN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQXdPeUJxSUNFOVBTQmtZWFJoVzJsZExteGxibWQwYURzZ2Fpc3JLU0I3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IySUQwZ1pHRjBZVnRwWFZ0cVhUc0tDaUFnSUNBZ0lDQWdJQ0JwWmlBb2RpQThJRzFwYmxaaGJIVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXBibFpoYkhWbElEMGdkanNLSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXViV2x1Vm1Gc2RXVWdQU0J0YVc1V1lXeDFaVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZYQmtZWFJsSUhSb1pTQmdiV0Y0Vm1Gc2RXVmdJSEJ5YjNCbGNuUjVDaUFnSUNBZ0tpOEtDZ29nSUNBZ2RYQmtZWFJsVFdGNFZtRnNkV1VvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR1JoZEdFZ1BTQjBhR2x6TG1SaGRHRTdDaUFnSUNBZ0lHeGxkQ0J0WVhoV1lXeDFaU0E5SUdSaGRHRmJNRjFiTUYwN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdaR0YwWVM1c1pXNW5kR2c3SUdrckt5a2dld29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJQ0U5UFNCa1lYUmhXMmxkTG14bGJtZDBhRHNnYWlzcktTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjJJRDBnWkdGMFlWdHBYVnRxWFRzS0NpQWdJQ0FnSUNBZ0lDQnBaaUFvZGlBK0lHMWhlRlpoYkhWbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUcxaGVGWmhiSFZsSUQwZ2Rqc0tJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJvYVhNdWJXRjRWbUZzZFdVZ1BTQnRZWGhXWVd4MVpUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTJWMElIUm9aU0JvWldsbmFIUWdkbUZzZFdVZ1lYUWdZVzRnYVc1a1pYZ3VJRVJ2YmlkMElHWnZjbWRsZENCMGJ5QjFjR1JoZEdVZ2JXRjRWbUZzZFdVZ1lXNWtJRzFwYmxaaGJIVmxJR0ZtZEdWeUlIbHZkU2R5WlNCa2IyNWxMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lITmxkRWhsYVdkb2RGWmhiSFZsUVhSSmJtUmxlQ2g0YVN3Z2VXa3NJSFpoYkhWbEtTQjdDaUFnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwYUdsekxtUmhkR0U3Q2lBZ0lDQWdJR1JoZEdGYmVHbGRXM2xwWFNBOUlIWmhiSFZsT3lBdkx5QkpiblpoYkdsa1lYUmxJR05oWTJobENnb2dJQ0FnSUNCMGFHbHpMbU5zWldGeVEyRmphR1ZrUTI5dWRtVjRWSEpwWVc1bmJHVlFhV3hzWVhJb2VHa3NJSGxwTENCbVlXeHpaU2s3Q2dvZ0lDQWdJQ0JwWmlBb2VHa2dQaUF3S1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqYkdWaGNrTmhZMmhsWkVOdmJuWmxlRlJ5YVdGdVoyeGxVR2xzYkdGeUtIaHBJQzBnTVN3Z2VXa3NJSFJ5ZFdVcE93b2dJQ0FnSUNBZ0lIUm9hWE11WTJ4bFlYSkRZV05vWldSRGIyNTJaWGhVY21saGJtZHNaVkJwYkd4aGNpaDRhU0F0SURFc0lIbHBMQ0JtWVd4elpTazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2g1YVNBK0lEQXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtTnNaV0Z5UTJGamFHVmtRMjl1ZG1WNFZISnBZVzVuYkdWUWFXeHNZWElvZUdrc0lIbHBJQzBnTVN3Z2RISjFaU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiR1ZoY2tOaFkyaGxaRU52Ym5abGVGUnlhV0Z1WjJ4bFVHbHNiR0Z5S0hocExDQjVhU0F0SURFc0lHWmhiSE5sS1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tIbHBJRDRnTUNBbUppQjRhU0ErSURBcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1pXRnlRMkZqYUdWa1EyOXVkbVY0VkhKcFlXNW5iR1ZRYVd4c1lYSW9lR2tnTFNBeExDQjVhU0F0SURFc0lIUnlkV1VwT3dvZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFZGxkQ0J0WVhndmJXbHVJR2x1SUdFZ2NtVmpkR0Z1WjJ4bElHbHVJSFJvWlNCdFlYUnlhWGdnWkdGMFlRb2dJQ0FnSUNvZ1FIQmhjbUZ0SUhKbGMzVnNkQ0JCYmlCaGNuSmhlU0IwYnlCemRHOXlaU0IwYUdVZ2NtVnpkV3gwY3lCcGJpNEtJQ0FnSUNBcUlFQnlaWFIxY200Z1ZHaGxJSEpsYzNWc2RDQmhjbkpoZVN3Z2FXWWdhWFFnZDJGeklIQmhjM05sWkNCcGJpNGdUV2x1YVcxMWJTQjNhV3hzSUdKbElHRjBJSEJ2YzJsMGFXOXVJREFnWVc1a0lHMWhlQ0JoZENBeExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRGSmxZM1JOYVc1TllYZ29hVTFwYmxnc0lHbE5hVzVaTENCcFRXRjRXQ3dnYVUxaGVGa3NJSEpsYzNWc2RDa2dld29nSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCYlhUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0x5OGdSMlYwSUcxaGVDQmhibVFnYldsdUlHOW1JSFJvWlNCa1lYUmhDaUFnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwYUdsekxtUmhkR0U3SUM4dklGTmxkQ0JtYVhKemRDQjJZV3gxWlFvS0lDQWdJQ0FnYkdWMElHMWhlQ0E5SUhSb2FYTXViV2x1Vm1Gc2RXVTdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnYVUxcGJsZzdJR2tnUEQwZ2FVMWhlRmc3SUdrckt5a2dld29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNCcFRXbHVXVHNnYWlBOFBTQnBUV0Y0V1RzZ2Fpc3JLU0I3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JvWldsbmFIUWdQU0JrWVhSaFcybGRXMnBkT3dvS0lDQWdJQ0FnSUNBZ0lHbG1JQ2hvWldsbmFIUWdQaUJ0WVhncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYldGNElEMGdhR1ZwWjJoME93b2dJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVZ6ZFd4MFd6QmRJRDBnZEdocGN5NXRhVzVXWVd4MVpUc0tJQ0FnSUNBZ2NtVnpkV3gwV3pGZElEMGdiV0Y0T3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnZEdobElHbHVaR1Y0SUc5bUlHRWdiRzlqWVd3Z2NHOXphWFJwYjI0Z2IyNGdkR2hsSUdobGFXZG9kR1pwWld4a0xpQlVhR1VnYVc1a1pYaGxjeUJwYm1ScFkyRjBaU0IwYUdVZ2NtVmpkR0Z1WjJ4bGN5d2djMjhnYVdZZ2VXOTFjaUIwWlhKeVlXbHVJR2x6SUcxaFpHVWdiMllnVGlCNElFNGdhR1ZwWjJoMElHUmhkR0VnY0c5cGJuUnpMQ0I1YjNVZ2QybHNiQ0JvWVhabElISmxZM1JoYm1kc1pTQnBibVJsZUdWeklISmhibWRwYm1jZ1puSnZiU0F3SUhSdklFNHRNUzRLSUNBZ0lDQXFJRUJ3WVhKaGJTQnlaWE4xYkhRZ1ZIZHZMV1ZzWlcxbGJuUWdZWEp5WVhrS0lDQWdJQ0FxSUVCd1lYSmhiU0JqYkdGdGNDQkpaaUIwYUdVZ2NHOXphWFJwYjI0Z2MyaHZkV3hrSUdKbElHTnNZVzF3WldRZ2RHOGdkR2hsSUdobGFXZG9kR1pwWld4a0lHVmtaMlV1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdaMlYwU1c1a1pYaFBabEJ2YzJsMGFXOXVLSGdzSUhrc0lISmxjM1ZzZEN3Z1kyeGhiWEFwSUhzS0lDQWdJQ0FnTHk4Z1IyVjBJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdaR0YwWVNCd2IybHVkSE1nZEc4Z2RHVnpkQ0JoWjJGcGJuTjBDaUFnSUNBZ0lHTnZibk4wSUhjZ1BTQjBhR2x6TG1Wc1pXMWxiblJUYVhwbE93b2dJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdkR2hwY3k1a1lYUmhPd29nSUNBZ0lDQnNaWFFnZUdrZ1BTQk5ZWFJvTG1ac2IyOXlLSGdnTHlCM0tUc0tJQ0FnSUNBZ2JHVjBJSGxwSUQwZ1RXRjBhQzVtYkc5dmNpaDVJQzhnZHlrN0NpQWdJQ0FnSUhKbGMzVnNkRnN3WFNBOUlIaHBPd29nSUNBZ0lDQnlaWE4xYkhSYk1WMGdQU0I1YVRzS0NpQWdJQ0FnSUdsbUlDaGpiR0Z0Y0NrZ2V3b2dJQ0FnSUNBZ0lDOHZJRU5zWVcxd0lHbHVaR1Y0SUhSdklHVmtaMlZ6Q2lBZ0lDQWdJQ0FnYVdZZ0tIaHBJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdlR2tnUFNBd093b2dJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdhV1lnS0hscElEd2dNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ2VXa2dQU0F3T3dvZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ2FXWWdLSGhwSUQ0OUlHUmhkR0V1YkdWdVozUm9JQzBnTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdlR2tnUFNCa1lYUmhMbXhsYm1kMGFDQXRJREU3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCcFppQW9lV2tnUGowZ1pHRjBZVnN3WFM1c1pXNW5kR2dnTFNBeEtTQjdDaUFnSUNBZ0lDQWdJQ0I1YVNBOUlHUmhkR0ZiTUYwdWJHVnVaM1JvSUMwZ01Uc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMGdMeThnUW1GcGJDQnZkWFFnYVdZZ2QyVWdZWEpsSUc5MWRDQnZaaUIwYUdVZ2RHVnljbUZwYmdvS0NpQWdJQ0FnSUdsbUlDaDRhU0E4SURBZ2ZId2dlV2tnUENBd0lIeDhJSGhwSUQ0OUlHUmhkR0V1YkdWdVozUm9JQzBnTVNCOGZDQjVhU0ErUFNCa1lYUmhXekJkTG14bGJtZDBhQ0F0SURFcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSEpsZEhWeWJpQjBjblZsT3dvZ0lDQWdmUW9LSUNBZ0lHZGxkRlJ5YVdGdVoyeGxRWFFvZUN3Z2VTd2daV1JuWlVOc1lXMXdMQ0JoTENCaUxDQmpLU0I3Q2lBZ0lDQWdJR052Ym5OMElHbGtlQ0E5SUdkbGRFaGxhV2RvZEVGMFgybGtlRHNLSUNBZ0lDQWdkR2hwY3k1blpYUkpibVJsZUU5bVVHOXphWFJwYjI0b2VDd2dlU3dnYVdSNExDQmxaR2RsUTJ4aGJYQXBPd29nSUNBZ0lDQnNaWFFnZUdrZ1BTQnBaSGhiTUYwN0NpQWdJQ0FnSUd4bGRDQjVhU0E5SUdsa2VGc3hYVHNLSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUhSb2FYTXVaR0YwWVRzS0NpQWdJQ0FnSUdsbUlDaGxaR2RsUTJ4aGJYQXBJSHNLSUNBZ0lDQWdJQ0I0YVNBOUlFMWhkR2d1YldsdUtHUmhkR0V1YkdWdVozUm9JQzBnTWl3Z1RXRjBhQzV0WVhnb01Dd2dlR2twS1RzS0lDQWdJQ0FnSUNCNWFTQTlJRTFoZEdndWJXbHVLR1JoZEdGYk1GMHViR1Z1WjNSb0lDMGdNaXdnVFdGMGFDNXRZWGdvTUN3Z2VXa3BLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ1pXeGxiV1Z1ZEZOcGVtVWdQU0IwYUdsekxtVnNaVzFsYm5SVGFYcGxPd29nSUNBZ0lDQmpiMjV6ZENCc2IzZGxja1JwYzNReUlEMGdLSGdnTHlCbGJHVnRaVzUwVTJsNlpTQXRJSGhwS1NBcUtpQXlJQ3NnS0hrZ0x5QmxiR1Z0Wlc1MFUybDZaU0F0SUhscEtTQXFLaUF5T3dvZ0lDQWdJQ0JqYjI1emRDQjFjSEJsY2tScGMzUXlJRDBnS0hnZ0x5QmxiR1Z0Wlc1MFUybDZaU0F0SUNoNGFTQXJJREVwS1NBcUtpQXlJQ3NnS0hrZ0x5QmxiR1Z0Wlc1MFUybDZaU0F0SUNoNWFTQXJJREVwS1NBcUtpQXlPd29nSUNBZ0lDQmpiMjV6ZENCMWNIQmxjaUE5SUd4dmQyVnlSR2x6ZERJZ1BpQjFjSEJsY2tScGMzUXlPd29nSUNBZ0lDQjBhR2x6TG1kbGRGUnlhV0Z1WjJ4bEtIaHBMQ0I1YVN3Z2RYQndaWElzSUdFc0lHSXNJR01wT3dvZ0lDQWdJQ0J5WlhSMWNtNGdkWEJ3WlhJN0NpQWdJQ0I5Q2dvZ0lDQWdaMlYwVG05eWJXRnNRWFFvZUN3Z2VTd2daV1JuWlVOc1lXMXdMQ0J5WlhOMWJIUXBJSHNLSUNBZ0lDQWdZMjl1YzNRZ1lTQTlJR2RsZEU1dmNtMWhiRUYwWDJFN0NpQWdJQ0FnSUdOdmJuTjBJR0lnUFNCblpYUk9iM0p0WVd4QmRGOWlPd29nSUNBZ0lDQmpiMjV6ZENCaklEMGdaMlYwVG05eWJXRnNRWFJmWXpzS0lDQWdJQ0FnWTI5dWMzUWdaVEFnUFNCblpYUk9iM0p0WVd4QmRGOWxNRHNLSUNBZ0lDQWdZMjl1YzNRZ1pURWdQU0JuWlhST2IzSnRZV3hCZEY5bE1Uc0tJQ0FnSUNBZ2RHaHBjeTVuWlhSVWNtbGhibWRzWlVGMEtIZ3NJSGtzSUdWa1oyVkRiR0Z0Y0N3Z1lTd2dZaXdnWXlrN0NpQWdJQ0FnSUdJdWRuTjFZaWhoTENCbE1DazdDaUFnSUNBZ0lHTXVkbk4xWWloaExDQmxNU2s3Q2lBZ0lDQWdJR1V3TG1OeWIzTnpLR1V4TENCeVpYTjFiSFFwT3dvZ0lDQWdJQ0J5WlhOMWJIUXVibTl5YldGc2FYcGxLQ2s3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFZGxkQ0JoYmlCQlFVSkNJRzltSUdFZ2MzRjFZWEpsSUdsdUlIUm9aU0JvWldsbmFIUm1hV1ZzWkFvZ0lDQWdJQ29nUUhCaGNtRnRJSGhwQ2lBZ0lDQWdLaUJBY0dGeVlXMGdlV2tLSUNBZ0lDQXFJRUJ3WVhKaGJTQnlaWE4xYkhRS0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSQllXSmlRWFJKYm1SbGVDaDRhU3dnZVdrc0lGOXlaV1lwSUhzS0lDQWdJQ0FnYkdWMElIc0tJQ0FnSUNBZ0lDQnNiM2RsY2tKdmRXNWtMQW9nSUNBZ0lDQWdJSFZ3Y0dWeVFtOTFibVFLSUNBZ0lDQWdmU0E5SUY5eVpXWTdDaUFnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwYUdsekxtUmhkR0U3Q2lBZ0lDQWdJR052Ym5OMElHVnNaVzFsYm5SVGFYcGxJRDBnZEdocGN5NWxiR1Z0Wlc1MFUybDZaVHNLSUNBZ0lDQWdiRzkzWlhKQ2IzVnVaQzV6WlhRb2VHa2dLaUJsYkdWdFpXNTBVMmw2WlN3Z2VXa2dLaUJsYkdWdFpXNTBVMmw2WlN3Z1pHRjBZVnQ0YVYxYmVXbGRLVHNLSUNBZ0lDQWdkWEJ3WlhKQ2IzVnVaQzV6WlhRb0tIaHBJQ3NnTVNrZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnS0hscElDc2dNU2tnS2lCbGJHVnRaVzUwVTJsNlpTd2daR0YwWVZ0NGFTQXJJREZkVzNscElDc2dNVjBwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnZEdobElHaGxhV2RvZENCcGJpQjBhR1VnYUdWcFoyaDBabWxsYkdRZ1lYUWdZU0JuYVhabGJpQndiM05wZEdsdmJnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRFaGxhV2RvZEVGMEtIZ3NJSGtzSUdWa1oyVkRiR0Z0Y0NrZ2V3b2dJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdkR2hwY3k1a1lYUmhPd29nSUNBZ0lDQmpiMjV6ZENCaElEMGdaMlYwU0dWcFoyaDBRWFJmWVRzS0lDQWdJQ0FnWTI5dWMzUWdZaUE5SUdkbGRFaGxhV2RvZEVGMFgySTdDaUFnSUNBZ0lHTnZibk4wSUdNZ1BTQm5aWFJJWldsbmFIUkJkRjlqT3dvZ0lDQWdJQ0JqYjI1emRDQnBaSGdnUFNCblpYUklaV2xuYUhSQmRGOXBaSGc3Q2lBZ0lDQWdJSFJvYVhNdVoyVjBTVzVrWlhoUFpsQnZjMmwwYVc5dUtIZ3NJSGtzSUdsa2VDd2daV1JuWlVOc1lXMXdLVHNLSUNBZ0lDQWdiR1YwSUhocElEMGdhV1I0V3pCZE93b2dJQ0FnSUNCc1pYUWdlV2tnUFNCcFpIaGJNVjA3Q2dvZ0lDQWdJQ0JwWmlBb1pXUm5aVU5zWVcxd0tTQjdDaUFnSUNBZ0lDQWdlR2tnUFNCTllYUm9MbTFwYmloa1lYUmhMbXhsYm1kMGFDQXRJRElzSUUxaGRHZ3ViV0Y0S0RBc0lIaHBLU2s3Q2lBZ0lDQWdJQ0FnZVdrZ1BTQk5ZWFJvTG0xcGJpaGtZWFJoV3pCZExteGxibWQwYUNBdElESXNJRTFoZEdndWJXRjRLREFzSUhscEtTazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUhWd2NHVnlJRDBnZEdocGN5NW5aWFJVY21saGJtZHNaVUYwS0hnc0lIa3NJR1ZrWjJWRGJHRnRjQ3dnWVN3Z1lpd2dZeWs3Q2lBZ0lDQWdJR0poY25salpXNTBjbWxqVjJWcFoyaDBjeWg0TENCNUxDQmhMbmdzSUdFdWVTd2dZaTU0TENCaUxua3NJR011ZUN3Z1l5NTVMQ0JuWlhSSVpXbG5hSFJCZEY5M1pXbG5hSFJ6S1RzS0lDQWdJQ0FnWTI5dWMzUWdkeUE5SUdkbGRFaGxhV2RvZEVGMFgzZGxhV2RvZEhNN0Nnb2dJQ0FnSUNCcFppQW9kWEJ3WlhJcElIc0tJQ0FnSUNBZ0lDQXZMeUJVYjNBZ2RISnBZVzVuYkdVZ2RtVnlkSE1LSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVZ0NGFTQXJJREZkVzNscElDc2dNVjBnS2lCM0xuZ2dLeUJrWVhSaFczaHBYVnQ1YVNBcklERmRJQ29nZHk1NUlDc2daR0YwWVZ0NGFTQXJJREZkVzNscFhTQXFJSGN1ZWpzS0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0F2THlCVWIzQWdkSEpwWVc1bmJHVWdkbVZ5ZEhNS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWkdGMFlWdDRhVjFiZVdsZElDb2dkeTU0SUNzZ1pHRjBZVnQ0YVNBcklERmRXM2xwWFNBcUlIY3VlU0FySUdSaGRHRmJlR2xkVzNscElDc2dNVjBnS2lCM0xubzdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdJQ0JuWlhSRFlXTm9aVU52Ym5abGVGUnlhV0Z1WjJ4bFVHbHNiR0Z5UzJWNUtIaHBMQ0I1YVN3Z1oyVjBWWEJ3WlhKVWNtbGhibWRzWlNrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnWUNSN2VHbDlYeVI3ZVdsOVh5UjdaMlYwVlhCd1pYSlVjbWxoYm1kc1pTQS9JREVnT2lBd2ZXQTdDaUFnSUNCOUNnb2dJQ0FnWjJWMFEyRmphR1ZrUTI5dWRtVjRWSEpwWVc1bmJHVlFhV3hzWVhJb2VHa3NJSGxwTENCblpYUlZjSEJsY2xSeWFXRnVaMnhsS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpZV05vWldSUWFXeHNZWEp6VzNSb2FYTXVaMlYwUTJGamFHVkRiMjUyWlhoVWNtbGhibWRzWlZCcGJHeGhja3RsZVNoNGFTd2dlV2tzSUdkbGRGVndjR1Z5VkhKcFlXNW5iR1VwWFRzS0lDQWdJSDBLQ2lBZ0lDQnpaWFJEWVdOb1pXUkRiMjUyWlhoVWNtbGhibWRzWlZCcGJHeGhjaWg0YVN3Z2VXa3NJR2RsZEZWd2NHVnlWSEpwWVc1bmJHVXNJR052Ym5abGVDd2diMlptYzJWMEtTQjdDaUFnSUNBZ0lIUm9hWE11WDJOaFkyaGxaRkJwYkd4aGNuTmJkR2hwY3k1blpYUkRZV05vWlVOdmJuWmxlRlJ5YVdGdVoyeGxVR2xzYkdGeVMyVjVLSGhwTENCNWFTd2daMlYwVlhCd1pYSlVjbWxoYm1kc1pTbGRJRDBnZXdvZ0lDQWdJQ0FnSUdOdmJuWmxlQ3dLSUNBZ0lDQWdJQ0J2Wm1aelpYUUtJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS0NpQWdJQ0JqYkdWaGNrTmhZMmhsWkVOdmJuWmxlRlJ5YVdGdVoyeGxVR2xzYkdGeUtIaHBMQ0I1YVN3Z1oyVjBWWEJ3WlhKVWNtbGhibWRzWlNrZ2V3b2dJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZZMkZqYUdWa1VHbHNiR0Z5YzF0MGFHbHpMbWRsZEVOaFkyaGxRMjl1ZG1WNFZISnBZVzVuYkdWUWFXeHNZWEpMWlhrb2VHa3NJSGxwTENCblpYUlZjSEJsY2xSeWFXRnVaMnhsS1YwN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWRsZENCaElIUnlhV0Z1WjJ4bElHWnliMjBnZEdobElHaGxhV2RvZEdacFpXeGtDaUFnSUNBZ0tpOEtDZ29nSUNBZ1oyVjBWSEpwWVc1bmJHVW9lR2tzSUhscExDQjFjSEJsY2l3Z1lTd2dZaXdnWXlrZ2V3b2dJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdkR2hwY3k1a1lYUmhPd29nSUNBZ0lDQmpiMjV6ZENCbGJHVnRaVzUwVTJsNlpTQTlJSFJvYVhNdVpXeGxiV1Z1ZEZOcGVtVTdDZ29nSUNBZ0lDQnBaaUFvZFhCd1pYSXBJSHNLSUNBZ0lDQWdJQ0F2THlCVWIzQWdkSEpwWVc1bmJHVWdkbVZ5ZEhNS0lDQWdJQ0FnSUNCaExuTmxkQ2dvZUdrZ0t5QXhLU0FxSUdWc1pXMWxiblJUYVhwbExDQW9lV2tnS3lBeEtTQXFJR1ZzWlcxbGJuUlRhWHBsTENCa1lYUmhXM2hwSUNzZ01WMWJlV2tnS3lBeFhTazdDaUFnSUNBZ0lDQWdZaTV6WlhRb2VHa2dLaUJsYkdWdFpXNTBVMmw2WlN3Z0tIbHBJQ3NnTVNrZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnWkdGMFlWdDRhVjFiZVdrZ0t5QXhYU2s3Q2lBZ0lDQWdJQ0FnWXk1elpYUW9LSGhwSUNzZ01Ta2dLaUJsYkdWdFpXNTBVMmw2WlN3Z2VXa2dLaUJsYkdWdFpXNTBVMmw2WlN3Z1pHRjBZVnQ0YVNBcklERmRXM2xwWFNrN0NpQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnTHk4Z1ZHOXdJSFJ5YVdGdVoyeGxJSFpsY25SekNpQWdJQ0FnSUNBZ1lTNXpaWFFvZUdrZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnZVdrZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnWkdGMFlWdDRhVjFiZVdsZEtUc0tJQ0FnSUNBZ0lDQmlMbk5sZENnb2VHa2dLeUF4S1NBcUlHVnNaVzFsYm5SVGFYcGxMQ0I1YVNBcUlHVnNaVzFsYm5SVGFYcGxMQ0JrWVhSaFczaHBJQ3NnTVYxYmVXbGRLVHNLSUNBZ0lDQWdJQ0JqTG5ObGRDaDRhU0FxSUdWc1pXMWxiblJUYVhwbExDQW9lV2tnS3lBeEtTQXFJR1ZzWlcxbGJuUlRhWHBsTENCa1lYUmhXM2hwWFZ0NWFTQXJJREZkS1RzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnWVNCMGNtbGhibWRzWlNCcGJpQjBhR1VnZEdWeWNtRnBiaUJwYmlCMGFHVWdabTl5YlNCdlppQmhJSFJ5YVdGdVozVnNZWElnWTI5dWRtVjRJSE5vWVhCbExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRFTnZiblpsZUZSeWFXRnVaMnhsVUdsc2JHRnlLSGhwTENCNWFTd2daMlYwVlhCd1pYSlVjbWxoYm1kc1pTa2dld29nSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnZEdocGN5NXdhV3hzWVhKRGIyNTJaWGc3Q2lBZ0lDQWdJR3hsZENCdlptWnpaWFJTWlhOMWJIUWdQU0IwYUdsekxuQnBiR3hoY2s5bVpuTmxkRHNLQ2lBZ0lDQWdJR2xtSUNoMGFHbHpMbU5oWTJobFJXNWhZbXhsWkNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwYUdsekxtZGxkRU5oWTJobFpFTnZiblpsZUZSeWFXRnVaMnhsVUdsc2JHRnlLSGhwTENCNWFTd2daMlYwVlhCd1pYSlVjbWxoYm1kc1pTazdDZ29nSUNBZ0lDQWdJR2xtSUNoa1lYUmhLU0I3Q2lBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwYkd4aGNrTnZiblpsZUNBOUlHUmhkR0V1WTI5dWRtVjRPd29nSUNBZ0lDQWdJQ0FnZEdocGN5NXdhV3hzWVhKUFptWnpaWFFnUFNCa1lYUmhMbTltWm5ObGREc0tJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRzVsZHlCRGIyNTJaWGhRYjJ4NWFHVmtjbTl1S0NrN0NpQWdJQ0FnSUNBZ2IyWm1jMlYwVW1WemRXeDBJRDBnYm1WM0lGWmxZek1vS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJwYkd4aGNrTnZiblpsZUNBOUlISmxjM1ZzZERzS0lDQWdJQ0FnSUNCMGFHbHpMbkJwYkd4aGNrOW1abk5sZENBOUlHOW1abk5sZEZKbGMzVnNkRHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUhSb2FYTXVaR0YwWVRzS0lDQWdJQ0FnWTI5dWMzUWdaV3hsYldWdWRGTnBlbVVnUFNCMGFHbHpMbVZzWlcxbGJuUlRhWHBsT3dvZ0lDQWdJQ0JqYjI1emRDQm1ZV05sY3lBOUlISmxjM1ZzZEM1bVlXTmxjenNnTHk4Z1VtVjFjMlVnZG1WeWRITWdhV1lnY0c5emMybGliR1VLQ2lBZ0lDQWdJSEpsYzNWc2RDNTJaWEowYVdObGN5NXNaVzVuZEdnZ1BTQTJPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0EyT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JwWmlBb0lYSmxjM1ZzZEM1MlpYSjBhV05sYzF0cFhTa2dld29nSUNBZ0lDQWdJQ0FnY21WemRXeDBMblpsY25ScFkyVnpXMmxkSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMGdMeThnVW1WMWMyVWdabUZqWlhNZ2FXWWdjRzl6YzJsaWJHVUtDZ29nSUNBZ0lDQm1ZV05sY3k1c1pXNW5kR2dnUFNBMU93b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQTFPeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQnBaaUFvSVdaaFkyVnpXMmxkS1NCN0NpQWdJQ0FnSUNBZ0lDQm1ZV05sYzF0cFhTQTlJRnRkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWTI5dWMzUWdkbVZ5ZEhNZ1BTQnlaWE4xYkhRdWRtVnlkR2xqWlhNN0NpQWdJQ0FnSUdOdmJuTjBJR2dnUFNBb1RXRjBhQzV0YVc0b1pHRjBZVnQ0YVYxYmVXbGRMQ0JrWVhSaFczaHBJQ3NnTVYxYmVXbGRMQ0JrWVhSaFczaHBYVnQ1YVNBcklERmRMQ0JrWVhSaFczaHBJQ3NnTVYxYmVXa2dLeUF4WFNrZ0xTQjBhR2x6TG0xcGJsWmhiSFZsS1NBdklESWdLeUIwYUdsekxtMXBibFpoYkhWbE93b0tJQ0FnSUNBZ2FXWWdLQ0ZuWlhSVmNIQmxjbFJ5YVdGdVoyeGxLU0I3Q2lBZ0lDQWdJQ0FnTHk4Z1EyVnVkR1Z5SUc5bUlIUm9aU0IwY21saGJtZHNaU0J3YVd4c1lYSWdMU0JoYkd3Z2NHOXNlV2R2Ym5NZ1lYSmxJR2RwZG1WdUlISmxiR0YwYVhabElIUnZJSFJvYVhNZ2IyNWxDaUFnSUNBZ0lDQWdiMlptYzJWMFVtVnpkV3gwTG5ObGRDZ29lR2tnS3lBd0xqSTFLU0FxSUdWc1pXMWxiblJUYVhwbExDQXZMeUJ6YjNKMElHOW1JR05sYm5SbGNpQnZaaUJoSUhSeWFXRnVaMnhsQ2lBZ0lDQWdJQ0FnS0hscElDc2dNQzR5TlNrZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnYUNBdkx5QjJaWEowYVdOaGJDQmpaVzUwWlhJS0lDQWdJQ0FnSUNBcE95QXZMeUJVYjNBZ2RISnBZVzVuYkdVZ2RtVnlkSE1LQ2lBZ0lDQWdJQ0FnZG1WeWRITmJNRjB1YzJWMEtDMHdMakkxSUNvZ1pXeGxiV1Z1ZEZOcGVtVXNJQzB3TGpJMUlDb2daV3hsYldWdWRGTnBlbVVzSUdSaGRHRmJlR2xkVzNscFhTQXRJR2dwT3dvZ0lDQWdJQ0FnSUhabGNuUnpXekZkTG5ObGRDZ3dMamMxSUNvZ1pXeGxiV1Z1ZEZOcGVtVXNJQzB3TGpJMUlDb2daV3hsYldWdWRGTnBlbVVzSUdSaGRHRmJlR2tnS3lBeFhWdDVhVjBnTFNCb0tUc0tJQ0FnSUNBZ0lDQjJaWEowYzFzeVhTNXpaWFFvTFRBdU1qVWdLaUJsYkdWdFpXNTBVMmw2WlN3Z01DNDNOU0FxSUdWc1pXMWxiblJUYVhwbExDQmtZWFJoVzNocFhWdDVhU0FySURGZElDMGdhQ2s3SUM4dklHSnZkSFJ2YlNCMGNtbGhibWRzWlNCMlpYSjBjd29LSUNBZ0lDQWdJQ0IyWlhKMGMxc3pYUzV6WlhRb0xUQXVNalVnS2lCbGJHVnRaVzUwVTJsNlpTd2dMVEF1TWpVZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnTFUxaGRHZ3VZV0p6S0dncElDMGdNU2s3Q2lBZ0lDQWdJQ0FnZG1WeWRITmJORjB1YzJWMEtEQXVOelVnS2lCbGJHVnRaVzUwVTJsNlpTd2dMVEF1TWpVZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnTFUxaGRHZ3VZV0p6S0dncElDMGdNU2s3Q2lBZ0lDQWdJQ0FnZG1WeWRITmJOVjB1YzJWMEtDMHdMakkxSUNvZ1pXeGxiV1Z1ZEZOcGVtVXNJREF1TnpVZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnTFUxaGRHZ3VZV0p6S0dncElDMGdNU2s3SUM4dklIUnZjQ0IwY21saGJtZHNaUW9LSUNBZ0lDQWdJQ0JtWVdObGMxc3dYVnN3WFNBOUlEQTdDaUFnSUNBZ0lDQWdabUZqWlhOYk1GMWJNVjBnUFNBeE93b2dJQ0FnSUNBZ0lHWmhZMlZ6V3pCZFd6SmRJRDBnTWpzZ0x5OGdZbTkwZEc5dElIUnlhV0Z1WjJ4bENnb2dJQ0FnSUNBZ0lHWmhZMlZ6V3pGZFd6QmRJRDBnTlRzS0lDQWdJQ0FnSUNCbVlXTmxjMXN4WFZzeFhTQTlJRFE3Q2lBZ0lDQWdJQ0FnWm1GalpYTmJNVjFiTWwwZ1BTQXpPeUF2THlBdGVDQm1ZV05wYm1jZ2NYVmhaQW9LSUNBZ0lDQWdJQ0JtWVdObGMxc3lYVnN3WFNBOUlEQTdDaUFnSUNBZ0lDQWdabUZqWlhOYk1sMWJNVjBnUFNBeU93b2dJQ0FnSUNBZ0lHWmhZMlZ6V3pKZFd6SmRJRDBnTlRzS0lDQWdJQ0FnSUNCbVlXTmxjMXN5WFZzelhTQTlJRE03SUM4dklDMTVJR1poWTJsdVp5QnhkV0ZrQ2dvZ0lDQWdJQ0FnSUdaaFkyVnpXek5kV3pCZElEMGdNVHNLSUNBZ0lDQWdJQ0JtWVdObGMxc3pYVnN4WFNBOUlEQTdDaUFnSUNBZ0lDQWdabUZqWlhOYk0xMWJNbDBnUFNBek93b2dJQ0FnSUNBZ0lHWmhZMlZ6V3pOZFd6TmRJRDBnTkRzZ0x5OGdLM2g1SUdaaFkybHVaeUJ4ZFdGa0Nnb2dJQ0FnSUNBZ0lHWmhZMlZ6V3pSZFd6QmRJRDBnTkRzS0lDQWdJQ0FnSUNCbVlXTmxjMXMwWFZzeFhTQTlJRFU3Q2lBZ0lDQWdJQ0FnWm1GalpYTmJORjFiTWwwZ1BTQXlPd29nSUNBZ0lDQWdJR1poWTJWeld6UmRXek5kSUQwZ01Uc0tJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBdkx5QkRaVzUwWlhJZ2IyWWdkR2hsSUhSeWFXRnVaMnhsSUhCcGJHeGhjaUF0SUdGc2JDQndiMng1WjI5dWN5QmhjbVVnWjJsMlpXNGdjbVZzWVhScGRtVWdkRzhnZEdocGN5QnZibVVLSUNBZ0lDQWdJQ0J2Wm1aelpYUlNaWE4xYkhRdWMyVjBLQ2g0YVNBcklEQXVOelVwSUNvZ1pXeGxiV1Z1ZEZOcGVtVXNJQzh2SUhOdmNuUWdiMllnWTJWdWRHVnlJRzltSUdFZ2RISnBZVzVuYkdVS0lDQWdJQ0FnSUNBb2VXa2dLeUF3TGpjMUtTQXFJR1ZzWlcxbGJuUlRhWHBsTENCb0lDOHZJSFpsY25ScFkyRnNJR05sYm5SbGNnb2dJQ0FnSUNBZ0lDazdJQzh2SUZSdmNDQjBjbWxoYm1kc1pTQjJaWEowY3dvS0lDQWdJQ0FnSUNCMlpYSjBjMXN3WFM1elpYUW9NQzR5TlNBcUlHVnNaVzFsYm5SVGFYcGxMQ0F3TGpJMUlDb2daV3hsYldWdWRGTnBlbVVzSUdSaGRHRmJlR2tnS3lBeFhWdDVhU0FySURGZElDMGdhQ2s3Q2lBZ0lDQWdJQ0FnZG1WeWRITmJNVjB1YzJWMEtDMHdMamMxSUNvZ1pXeGxiV1Z1ZEZOcGVtVXNJREF1TWpVZ0tpQmxiR1Z0Wlc1MFUybDZaU3dnWkdGMFlWdDRhVjFiZVdrZ0t5QXhYU0F0SUdncE93b2dJQ0FnSUNBZ0lIWmxjblJ6V3pKZExuTmxkQ2d3TGpJMUlDb2daV3hsYldWdWRGTnBlbVVzSUMwd0xqYzFJQ29nWld4bGJXVnVkRk5wZW1Vc0lHUmhkR0ZiZUdrZ0t5QXhYVnQ1YVYwZ0xTQm9LVHNnTHk4Z1ltOTBkRzl0SUhSeWFXRnVaMnhsSUhabGNuUnpDZ29nSUNBZ0lDQWdJSFpsY25Seld6TmRMbk5sZENnd0xqSTFJQ29nWld4bGJXVnVkRk5wZW1Vc0lEQXVNalVnS2lCbGJHVnRaVzUwVTJsNlpTd2dMVTFoZEdndVlXSnpLR2dwSUMwZ01TazdDaUFnSUNBZ0lDQWdkbVZ5ZEhOYk5GMHVjMlYwS0Mwd0xqYzFJQ29nWld4bGJXVnVkRk5wZW1Vc0lEQXVNalVnS2lCbGJHVnRaVzUwVTJsNlpTd2dMVTFoZEdndVlXSnpLR2dwSUMwZ01TazdDaUFnSUNBZ0lDQWdkbVZ5ZEhOYk5WMHVjMlYwS0RBdU1qVWdLaUJsYkdWdFpXNTBVMmw2WlN3Z0xUQXVOelVnS2lCbGJHVnRaVzUwVTJsNlpTd2dMVTFoZEdndVlXSnpLR2dwSUMwZ01TazdJQzh2SUZSdmNDQjBjbWxoYm1kc1pRb0tJQ0FnSUNBZ0lDQm1ZV05sYzFzd1hWc3dYU0E5SURBN0NpQWdJQ0FnSUNBZ1ptRmpaWE5iTUYxYk1WMGdQU0F4T3dvZ0lDQWdJQ0FnSUdaaFkyVnpXekJkV3pKZElEMGdNanNnTHk4Z1ltOTBkRzl0SUhSeWFXRnVaMnhsQ2dvZ0lDQWdJQ0FnSUdaaFkyVnpXekZkV3pCZElEMGdOVHNLSUNBZ0lDQWdJQ0JtWVdObGMxc3hYVnN4WFNBOUlEUTdDaUFnSUNBZ0lDQWdabUZqWlhOYk1WMWJNbDBnUFNBek95QXZMeUFyZUNCbVlXTnBibWNnY1hWaFpBb0tJQ0FnSUNBZ0lDQm1ZV05sYzFzeVhWc3dYU0E5SURJN0NpQWdJQ0FnSUNBZ1ptRmpaWE5iTWwxYk1WMGdQU0ExT3dvZ0lDQWdJQ0FnSUdaaFkyVnpXekpkV3pKZElEMGdNenNLSUNBZ0lDQWdJQ0JtWVdObGMxc3lYVnN6WFNBOUlEQTdJQzh2SUN0NUlHWmhZMmx1WnlCeGRXRmtDZ29nSUNBZ0lDQWdJR1poWTJWeld6TmRXekJkSUQwZ016c0tJQ0FnSUNBZ0lDQm1ZV05sYzFzelhWc3hYU0E5SURRN0NpQWdJQ0FnSUNBZ1ptRmpaWE5iTTExYk1sMGdQU0F4T3dvZ0lDQWdJQ0FnSUdaaFkyVnpXek5kV3pOZElEMGdNRHNnTHk4Z0xYaDVJR1poWTJsdVp5QnhkV0ZrQ2dvZ0lDQWdJQ0FnSUdaaFkyVnpXelJkV3pCZElEMGdNVHNLSUNBZ0lDQWdJQ0JtWVdObGMxczBYVnN4WFNBOUlEUTdDaUFnSUNBZ0lDQWdabUZqWlhOYk5GMWJNbDBnUFNBMU93b2dJQ0FnSUNBZ0lHWmhZMlZ6V3pSZFd6TmRJRDBnTWpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WemRXeDBMbU52YlhCMWRHVk9iM0p0WVd4ektDazdDaUFnSUNBZ0lISmxjM1ZzZEM1amIyMXdkWFJsUldSblpYTW9LVHNLSUNBZ0lDQWdjbVZ6ZFd4MExuVndaR0YwWlVKdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWektDazdDaUFnSUNBZ0lIUm9hWE11YzJWMFEyRmphR1ZrUTI5dWRtVjRWSEpwWVc1bmJHVlFhV3hzWVhJb2VHa3NJSGxwTENCblpYUlZjSEJsY2xSeWFXRnVaMnhsTENCeVpYTjFiSFFzSUc5bVpuTmxkRkpsYzNWc2RDazdDaUFnSUNCOUNnb2dJQ0FnWTJGc1kzVnNZWFJsVEc5allXeEpibVZ5ZEdsaEtHMWhjM01zSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBZWEpuWlhRdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwT3dvZ0lDQWdmUW9LSUNBZ0lIWnZiSFZ0WlNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUNndkx5QlVhR1VnZEdWeWNtRnBiaUJwY3lCcGJtWnBibWwwWlFvZ0lDQWdJQ0FnSUU1MWJXSmxjaTVOUVZoZlZrRk1WVVVLSUNBZ0lDQWdLVHNLSUNBZ0lIMEtDaUFnSUNCallXeGpkV3hoZEdWWGIzSnNaRUZCUWtJb2NHOXpMQ0J4ZFdGMExDQnRhVzRzSUcxaGVDa2dld29nSUNBZ0lDQXZLaW9nUUZSUFJFOGdaRzhnYVhRZ2NISnZjR1Z5YkhrZ0tpOEtJQ0FnSUNBZ2JXbHVMbk5sZENndFRuVnRZbVZ5TGsxQldGOVdRVXhWUlN3Z0xVNTFiV0psY2k1TlFWaGZWa0ZNVlVVc0lDMU9kVzFpWlhJdVRVRllYMVpCVEZWRktUc0tJQ0FnSUNBZ2JXRjRMbk5sZENoT2RXMWlaWEl1VFVGWVgxWkJURlZGTENCT2RXMWlaWEl1VFVGWVgxWkJURlZGTENCT2RXMWlaWEl1VFVGWVgxWkJURlZGS1RzS0lDQWdJSDBLQ2lBZ0lDQjFjR1JoZEdWQ2IzVnVaR2x1WjFOd2FHVnlaVkpoWkdsMWN5Z3BJSHNLSUNBZ0lDQWdMeThnVlhObElIUm9aU0JpYjNWdVpHbHVaeUJpYjNnZ2IyWWdkR2hsSUcxcGJpOXRZWGdnZG1Gc2RXVnpDaUFnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwYUdsekxtUmhkR0U3Q2lBZ0lDQWdJR052Ym5OMElITWdQU0IwYUdsekxtVnNaVzFsYm5SVGFYcGxPd29nSUNBZ0lDQjBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWeklEMGdibVYzSUZabFl6TW9aR0YwWVM1c1pXNW5kR2dnS2lCekxDQmtZWFJoV3pCZExteGxibWQwYUNBcUlITXNJRTFoZEdndWJXRjRLRTFoZEdndVlXSnpLSFJvYVhNdWJXRjRWbUZzZFdVcExDQk5ZWFJvTG1GaWN5aDBhR2x6TG0xcGJsWmhiSFZsS1NrcExteGxibWQwYUNncE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJUWlhSeklIUm9aU0JvWldsbmFIUWdkbUZzZFdWeklHWnliMjBnWVc0Z2FXMWhaMlV1SUVOMWNuSmxiblJzZVNCdmJteDVJSE4xY0hCdmNuUmxaQ0JwYmlCaWNtOTNjMlZ5TGdvZ0lDQWdJQ292Q2dvS0lDQWdJSE5sZEVobGFXZG9kSE5HY205dFNXMWhaMlVvYVcxaFoyVXNJSE5qWVd4bEtTQjdDaUFnSUNBZ0lHTnZibk4wSUhzS0lDQWdJQ0FnSUNCNExBb2dJQ0FnSUNBZ0lIb3NDaUFnSUNBZ0lDQWdlUW9nSUNBZ0lDQjlJRDBnYzJOaGJHVTdDaUFnSUNBZ0lHTnZibk4wSUdOaGJuWmhjeUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMk5oYm5aaGN5Y3BPd29nSUNBZ0lDQmpZVzUyWVhNdWQybGtkR2dnUFNCcGJXRm5aUzUzYVdSMGFEc0tJQ0FnSUNBZ1kyRnVkbUZ6TG1obGFXZG9kQ0E5SUdsdFlXZGxMbWhsYVdkb2REc0tJQ0FnSUNBZ1kyOXVjM1FnWTI5dWRHVjRkQ0E5SUdOaGJuWmhjeTVuWlhSRGIyNTBaWGgwS0NjeVpDY3BPd29nSUNBZ0lDQmpiMjUwWlhoMExtUnlZWGRKYldGblpTaHBiV0ZuWlN3Z01Dd2dNQ2s3Q2lBZ0lDQWdJR052Ym5OMElHbHRZV2RsUkdGMFlTQTlJR052Ym5SbGVIUXVaMlYwU1cxaFoyVkVZWFJoS0RBc0lEQXNJR2x0WVdkbExuZHBaSFJvTENCcGJXRm5aUzVvWldsbmFIUXBPd29nSUNBZ0lDQmpiMjV6ZENCdFlYUnlhWGdnUFNCMGFHbHpMbVJoZEdFN0NpQWdJQ0FnSUcxaGRISnBlQzVzWlc1bmRHZ2dQU0F3T3dvZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5SVGFYcGxJRDBnVFdGMGFDNWhZbk1vZUNrZ0x5QnBiV0ZuWlVSaGRHRXVkMmxrZEdnN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHbHRZV2RsUkdGMFlTNW9aV2xuYUhRN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSEp2ZHlBOUlGdGRPd29LSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Ec2dhaUE4SUdsdFlXZGxSR0YwWVM1M2FXUjBhRHNnYWlzcktTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmhJRDBnYVcxaFoyVkVZWFJoTG1SaGRHRmJLR2tnS2lCcGJXRm5aVVJoZEdFdWFHVnBaMmgwSUNzZ2Fpa2dLaUEwWFRzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdJZ1BTQnBiV0ZuWlVSaGRHRXVaR0YwWVZzb2FTQXFJR2x0WVdkbFJHRjBZUzVvWldsbmFIUWdLeUJxS1NBcUlEUWdLeUF4WFRzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdNZ1BTQnBiV0ZuWlVSaGRHRXVaR0YwWVZzb2FTQXFJR2x0WVdkbFJHRjBZUzVvWldsbmFIUWdLeUJxS1NBcUlEUWdLeUF5WFRzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdobGFXZG9kQ0E5SUNoaElDc2dZaUFySUdNcElDOGdOQ0F2SURJMU5TQXFJSG83Q2dvZ0lDQWdJQ0FnSUNBZ2FXWWdLSGdnUENBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKdmR5NXdkWE5vS0dobGFXZG9kQ2s3Q2lBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnliM2N1ZFc1emFHbG1kQ2hvWldsbmFIUXBPd29nSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ2FXWWdLSGtnUENBd0tTQjdDaUFnSUNBZ0lDQWdJQ0J0WVhSeWFYZ3VkVzV6YUdsbWRDaHliM2NwT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNCdFlYUnlhWGd1Y0hWemFDaHliM2NwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWTllYaFdZV3gxWlNncE93b2dJQ0FnSUNCMGFHbHpMblZ3WkdGMFpVMXBibFpoYkhWbEtDazdDaUFnSUNBZ0lIUm9hWE11ZFhCa1lYUmxLQ2s3Q2lBZ0lDQjlDZ29nSUgwS0lDQmpiMjV6ZENCblpYUklaV2xuYUhSQmRGOXBaSGdnUFNCYlhUc0tJQ0JqYjI1emRDQm5aWFJJWldsbmFIUkJkRjkzWldsbmFIUnpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUklaV2xuYUhSQmRGOWhJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUklaV2xuYUhSQmRGOWlJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUklaV2xuYUhSQmRGOWpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUk9iM0p0WVd4QmRGOWhJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUk9iM0p0WVd4QmRGOWlJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUk9iM0p0WVd4QmRGOWpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCblpYUk9iM0p0WVd4QmRGOWxNQ0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ1oyVjBUbTl5YldGc1FYUmZaVEVnUFNCdVpYY2dWbVZqTXlncE95QXZMeUJtY205dElHaDBkSEJ6T2k4dlpXNHVkMmxyYVhCbFpHbGhMbTl5Wnk5M2FXdHBMMEpoY25salpXNTBjbWxqWDJOdmIzSmthVzVoZEdWZmMzbHpkR1Z0Q2dvZ0lHWjFibU4wYVc5dUlHSmhjbmxqWlc1MGNtbGpWMlZwWjJoMGN5aDRMQ0I1TENCaGVDd2dZWGtzSUdKNExDQmllU3dnWTNnc0lHTjVMQ0J5WlhOMWJIUXBJSHNLSUNBZ0lISmxjM1ZzZEM1NElEMGdLQ2hpZVNBdElHTjVLU0FxSUNoNElDMGdZM2dwSUNzZ0tHTjRJQzBnWW5ncElDb2dLSGtnTFNCamVTa3BJQzhnS0NoaWVTQXRJR041S1NBcUlDaGhlQ0F0SUdONEtTQXJJQ2hqZUNBdElHSjRLU0FxSUNoaGVTQXRJR041S1NrN0NpQWdJQ0J5WlhOMWJIUXVlU0E5SUNnb1kza2dMU0JoZVNrZ0tpQW9lQ0F0SUdONEtTQXJJQ2hoZUNBdElHTjRLU0FxSUNoNUlDMGdZM2twS1NBdklDZ29ZbmtnTFNCamVTa2dLaUFvWVhnZ0xTQmplQ2tnS3lBb1kzZ2dMU0JpZUNrZ0tpQW9ZWGtnTFNCamVTa3BPd29nSUNBZ2NtVnpkV3gwTG5vZ1BTQXhJQzBnY21WemRXeDBMbmdnTFNCeVpYTjFiSFF1ZVRzS0lDQjlDZ29nSUM4cUtnb2dJQ0FxSUU5amRISmxaVTV2WkdVS0lDQWdLaThLSUNCamJHRnpjeUJQWTNSeVpXVk9iMlJsSUhzS0lDQWdJQzhxS2lCVWFHVWdjbTl2ZENCdWIyUmxJQ292Q2dvZ0lDQWdMeW9xSUVKdmRXNWtZWEo1SUc5bUlIUm9hWE1nYm05a1pTQXFMd29LSUNBZ0lDOHFLaUJEYjI1MFlXbHVaV1FnWkdGMFlTQmhkQ0IwYUdVZ1kzVnljbVZ1ZENCdWIyUmxJR3hsZG1Wc0lDb3ZDZ29nSUNBZ0x5b3FJRU5vYVd4a2NtVnVJSFJ2SUhSb2FYTWdibTlrWlNBcUx3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lrZ2V3b2dJQ0FnSUNCcFppQW9iM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUh0OU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGFHbHpMbkp2YjNRZ1BTQnZjSFJwYjI1ekxuSnZiM1FnZkh3Z2JuVnNiRHNLSUNBZ0lDQWdkR2hwY3k1aFlXSmlJRDBnYjNCMGFXOXVjeTVoWVdKaUlEOGdiM0IwYVc5dWN5NWhZV0ppTG1Oc2IyNWxLQ2tnT2lCdVpYY2dRVUZDUWlncE93b2dJQ0FnSUNCMGFHbHpMbVJoZEdFZ1BTQmJYVHNLSUNBZ0lDQWdkR2hwY3k1amFHbHNaSEpsYmlBOUlGdGRPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCeVpYTmxkQW9nSUNBZ0lDb3ZDZ29LSUNBZ0lISmxjMlYwS0NrZ2V3b2dJQ0FnSUNCMGFHbHpMbU5vYVd4a2NtVnVMbXhsYm1kMGFDQTlJSFJvYVhNdVpHRjBZUzVzWlc1bmRHZ2dQU0F3T3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkpibk5sY25RZ1pHRjBZU0JwYm5SdklIUm9hWE1nYm05a1pRb2dJQ0FnSUNvZ1FISmxkSFZ5YmlCVWNuVmxJR2xtSUhOMVkyTmxjM05tZFd3c0lHOTBhR1Z5ZDJselpTQm1ZV3h6WlFvZ0lDQWdJQ292Q2dvS0lDQWdJR2x1YzJWeWRDaGhZV0ppTENCbGJHVnRaVzUwUkdGMFlTd2diR1YyWld3cElIc0tJQ0FnSUNBZ2FXWWdLR3hsZG1Wc0lEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0JzWlhabGJDQTlJREE3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHNXZaR1ZFWVhSaElEMGdkR2hwY3k1a1lYUmhPeUF2THlCSloyNXZjbVVnYjJKcVpXTjBjeUIwYUdGMElHUnZJRzV2ZENCaVpXeHZibWNnYVc0Z2RHaHBjeUJ1YjJSbENnb2dJQ0FnSUNCcFppQW9JWFJvYVhNdVlXRmlZaTVqYjI1MFlXbHVjeWhoWVdKaUtTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlRzZ0x5OGdiMkpxWldOMElHTmhibTV2ZENCaVpTQmhaR1JsWkFvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JqYjI1emRDQmphR2xzWkhKbGJpQTlJSFJvYVhNdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUdOdmJuTjBJRzFoZUVSbGNIUm9JRDBnZEdocGN5NXRZWGhFWlhCMGFDQjhmQ0IwYUdsekxuSnZiM1F1YldGNFJHVndkR2c3Q2dvZ0lDQWdJQ0JwWmlBb2JHVjJaV3dnUENCdFlYaEVaWEIwYUNrZ2V3b2dJQ0FnSUNBZ0lDOHZJRk4xWW1ScGRtbGtaU0JwWmlCMGFHVnlaU0JoY21VZ2JtOGdZMmhwYkdSeVpXNGdlV1YwQ2lBZ0lDQWdJQ0FnYkdWMElITjFZbVJwZG1sa1pXUWdQU0JtWVd4elpUc0tDaUFnSUNBZ0lDQWdhV1lnS0NGamFHbHNaSEpsYmk1c1pXNW5kR2dwSUhzS0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNWaVpHbDJhV1JsS0NrN0NpQWdJQ0FnSUNBZ0lDQnpkV0prYVhacFpHVmtJRDBnZEhKMVpUc0tJQ0FnSUNBZ0lDQjlJQzh2SUdGa1pDQjBieUIzYUdsamFHVjJaWElnYm05a1pTQjNhV3hzSUdGalkyVndkQ0JwZEFvS0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ0lUMDlJRGc3SUdrckt5a2dld29nSUNBZ0lDQWdJQ0FnYVdZZ0tHTm9hV3hrY21WdVcybGRMbWx1YzJWeWRDaGhZV0ppTENCbGJHVnRaVzUwUkdGMFlTd2diR1YyWld3Z0t5QXhLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lHbG1JQ2h6ZFdKa2FYWnBaR1ZrS1NCN0NpQWdJQ0FnSUNBZ0lDQXZMeUJPYnlCamFHbHNaSEpsYmlCaFkyTmxjSFJsWkNFZ1RXbG5hSFFnWVhNZ2QyVnNiQ0JxZFhOMElISmxiVzkyWlNCbGJTQnphVzVqWlNCMGFHVjVJR052Ym5SaGFXNGdibTl1WlFvZ0lDQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc0dWJHVnVaM1JvSUQwZ01Ec0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMGdMeThnVkc5dklHUmxaWEFzSUc5eUlHTm9hV3hrY21WdUlHUnBaRzUwSUhkaGJuUWdhWFF1SUdGa1pDQnBkQ0JwYmlCamRYSnlaVzUwSUc1dlpHVUtDZ29nSUNBZ0lDQnViMlJsUkdGMFlTNXdkWE5vS0dWc1pXMWxiblJFWVhSaEtUc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVOeVpXRjBaU0E0SUdWeGRXRnNiSGtnYzJsNlpXUWdZMmhwYkdSeVpXNGdibTlrWlhNZ1lXNWtJSEIxZENCMGFHVnRJR2x1SUhSb1pTQmdZMmhwYkdSeVpXNWdJR0Z5Y21GNUxnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhOMVltUnBkbWxrWlNncElIc0tJQ0FnSUNBZ1kyOXVjM1FnWVdGaVlpQTlJSFJvYVhNdVlXRmlZanNLSUNBZ0lDQWdZMjl1YzNRZ2JDQTlJR0ZoWW1JdWJHOTNaWEpDYjNWdVpEc0tJQ0FnSUNBZ1kyOXVjM1FnZFNBOUlHRmhZbUl1ZFhCd1pYSkNiM1Z1WkRzS0lDQWdJQ0FnWTI5dWMzUWdZMmhwYkdSeVpXNGdQU0IwYUdsekxtTm9hV3hrY21WdU93b2dJQ0FnSUNCamFHbHNaSEpsYmk1d2RYTm9LRzVsZHlCUFkzUnlaV1ZPYjJSbEtIc0tJQ0FnSUNBZ0lDQmhZV0ppT2lCdVpYY2dRVUZDUWloN0NpQWdJQ0FnSUNBZ0lDQnNiM2RsY2tKdmRXNWtPaUJ1WlhjZ1ZtVmpNeWd3TENBd0xDQXdLUW9nSUNBZ0lDQWdJSDBwQ2lBZ0lDQWdJSDBwTENCdVpYY2dUMk4wY21WbFRtOWtaU2g3Q2lBZ0lDQWdJQ0FnWVdGaVlqb2dibVYzSUVGQlFrSW9ld29nSUNBZ0lDQWdJQ0FnYkc5M1pYSkNiM1Z1WkRvZ2JtVjNJRlpsWXpNb01Td2dNQ3dnTUNrS0lDQWdJQ0FnSUNCOUtRb2dJQ0FnSUNCOUtTd2dibVYzSUU5amRISmxaVTV2WkdVb2V3b2dJQ0FnSUNBZ0lHRmhZbUk2SUc1bGR5QkJRVUpDS0hzS0lDQWdJQ0FnSUNBZ0lHeHZkMlZ5UW05MWJtUTZJRzVsZHlCV1pXTXpLREVzSURFc0lEQXBDaUFnSUNBZ0lDQWdmU2tLSUNBZ0lDQWdmU2tzSUc1bGR5QlBZM1J5WldWT2IyUmxLSHNLSUNBZ0lDQWdJQ0JoWVdKaU9pQnVaWGNnUVVGQ1FpaDdDaUFnSUNBZ0lDQWdJQ0JzYjNkbGNrSnZkVzVrT2lCdVpYY2dWbVZqTXlneExDQXhMQ0F4S1FvZ0lDQWdJQ0FnSUgwcENpQWdJQ0FnSUgwcExDQnVaWGNnVDJOMGNtVmxUbTlrWlNoN0NpQWdJQ0FnSUNBZ1lXRmlZam9nYm1WM0lFRkJRa0lvZXdvZ0lDQWdJQ0FnSUNBZ2JHOTNaWEpDYjNWdVpEb2dibVYzSUZabFl6TW9NQ3dnTVN3Z01Ta0tJQ0FnSUNBZ0lDQjlLUW9nSUNBZ0lDQjlLU3dnYm1WM0lFOWpkSEpsWlU1dlpHVW9ld29nSUNBZ0lDQWdJR0ZoWW1JNklHNWxkeUJCUVVKQ0tIc0tJQ0FnSUNBZ0lDQWdJR3h2ZDJWeVFtOTFibVE2SUc1bGR5QldaV016S0RBc0lEQXNJREVwQ2lBZ0lDQWdJQ0FnZlNrS0lDQWdJQ0FnZlNrc0lHNWxkeUJQWTNSeVpXVk9iMlJsS0hzS0lDQWdJQ0FnSUNCaFlXSmlPaUJ1WlhjZ1FVRkNRaWg3Q2lBZ0lDQWdJQ0FnSUNCc2IzZGxja0p2ZFc1a09pQnVaWGNnVm1Wak15Z3hMQ0F3TENBeEtRb2dJQ0FnSUNBZ0lIMHBDaUFnSUNBZ0lIMHBMQ0J1WlhjZ1QyTjBjbVZsVG05a1pTaDdDaUFnSUNBZ0lDQWdZV0ZpWWpvZ2JtVjNJRUZCUWtJb2V3b2dJQ0FnSUNBZ0lDQWdiRzkzWlhKQ2IzVnVaRG9nYm1WM0lGWmxZek1vTUN3Z01Td2dNQ2tLSUNBZ0lDQWdJQ0I5S1FvZ0lDQWdJQ0I5S1NrN0NpQWdJQ0FnSUhVdWRuTjFZaWhzTENCb1lXeG1SR2xoWjI5dVlXd3BPd29nSUNBZ0lDQm9ZV3htUkdsaFoyOXVZV3d1YzJOaGJHVW9NQzQxTENCb1lXeG1SR2xoWjI5dVlXd3BPd29nSUNBZ0lDQmpiMjV6ZENCeWIyOTBJRDBnZEdocGN5NXliMjkwSUh4OElIUm9hWE03Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0FoUFQwZ09Ec2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWTJocGJHUWdQU0JqYUdsc1pISmxibHRwWFRzZ0x5OGdVMlYwSUdOMWNuSmxiblFnYm05a1pTQmhjeUJ5YjI5MENnb2dJQ0FnSUNBZ0lHTm9hV3hrTG5KdmIzUWdQU0J5YjI5ME95QXZMeUJEYjIxd2RYUmxJR0p2ZFc1a2N3b0tJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IzZGxja0p2ZFc1a0lEMGdZMmhwYkdRdVlXRmlZaTVzYjNkbGNrSnZkVzVrT3dvZ0lDQWdJQ0FnSUd4dmQyVnlRbTkxYm1RdWVDQXFQU0JvWVd4bVJHbGhaMjl1WVd3dWVEc0tJQ0FnSUNBZ0lDQnNiM2RsY2tKdmRXNWtMbmtnS2owZ2FHRnNaa1JwWVdkdmJtRnNMbms3Q2lBZ0lDQWdJQ0FnYkc5M1pYSkNiM1Z1WkM1NklDbzlJR2hoYkdaRWFXRm5iMjVoYkM1Nk93b2dJQ0FnSUNBZ0lHeHZkMlZ5UW05MWJtUXVkbUZrWkNoc0xDQnNiM2RsY2tKdmRXNWtLVHNnTHk4Z1ZYQndaWElnWW05MWJtUWdhWE1nWVd4M1lYbHpJR3h2ZDJWeUlHSnZkVzVrSUNzZ2FHRnNaa1JwWVdkdmJtRnNDZ29nSUNBZ0lDQWdJR3h2ZDJWeVFtOTFibVF1ZG1Ga1pDaG9ZV3htUkdsaFoyOXVZV3dzSUdOb2FXeGtMbUZoWW1JdWRYQndaWEpDYjNWdVpDazdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUjJWMElHRnNiQ0JrWVhSaExDQndiM1JsYm5ScFlXeHNlU0IzYVhSb2FXNGdZVzRnUVVGQ1Fnb2dJQ0FnSUNvZ1FISmxkSFZ5YmlCVWFHVWdJbkpsYzNWc2RDSWdiMkpxWldOMENpQWdJQ0FnS2k4S0Nnb2dJQ0FnWVdGaVlsRjFaWEo1S0dGaFltSXNJSEpsYzNWc2RDa2dld29nSUNBZ0lDQjBhR2x6TG1SaGRHRTdJQzh2SUdGaWIzSjBJR2xtSUhSb1pTQnlZVzVuWlNCa2IyVnpJRzV2ZENCcGJuUmxjbk5sWTNRZ2RHaHBjeUJ1YjJSbENpQWdJQ0FnSUM4dklHbG1JQ2doZEdocGN5NWhZV0ppTG05MlpYSnNZWEJ6S0dGaFltSXBLWHNLSUNBZ0lDQWdMeThnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3Q2lBZ0lDQWdJQzh2SUgwS0lDQWdJQ0FnTHk4Z1FXUmtJRzlpYW1WamRITWdZWFFnZEdocGN5QnNaWFpsYkFvZ0lDQWdJQ0F2THlCQmNuSmhlUzV3Y205MGIzUjVjR1V1Y0hWemFDNWhjSEJzZVNoeVpYTjFiSFFzSUc1dlpHVkVZWFJoS1RzS0lDQWdJQ0FnTHk4Z1FXUmtJR05vYVd4a0lHUmhkR0VLSUNBZ0lDQWdMeThnUUhSdlpHOGdkVzUzY21Gd0lISmxZM1Z5YzJsdmJpQnBiblJ2SUdFZ2NYVmxkV1VnTHlCc2IyOXdMQ0IwYUdGMEozTWdabUZ6ZEdWeUlHbHVJRXBUQ2dvZ0lDQWdJQ0IwYUdsekxtTm9hV3hrY21WdU95QXZMeUJtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2dUaUE5SUhSb2FYTXVZMmhwYkdSeVpXNHViR1Z1WjNSb095QnBJQ0U5UFNCT095QnBLeXNwSUhzS0lDQWdJQ0FnTHk4Z0lDQWdJR05vYVd4a2NtVnVXMmxkTG1GaFltSlJkV1Z5ZVNoaFlXSmlMQ0J5WlhOMWJIUXBPd29nSUNBZ0lDQXZMeUI5Q2dvZ0lDQWdJQ0JqYjI1emRDQnhkV1YxWlNBOUlGdDBhR2x6WFRzS0NpQWdJQ0FnSUhkb2FXeGxJQ2h4ZFdWMVpTNXNaVzVuZEdncElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnY1hWbGRXVXVjRzl3S0NrN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExtRmhZbUl1YjNabGNteGhjSE1vWVdGaVlpa3BJSHNLSUNBZ0lDQWdJQ0FnSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV3ZFhOb0xtRndjR3g1S0hKbGMzVnNkQ3dnYm05a1pTNWtZWFJoS1RzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lFRnljbUY1TG5CeWIzUnZkSGx3WlM1d2RYTm9MbUZ3Y0d4NUtIRjFaWFZsTENCdWIyUmxMbU5vYVd4a2NtVnVLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZERzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dSMlYwSUdGc2JDQmtZWFJoTENCd2IzUmxiblJwWVd4c2VTQnBiblJsY25ObFkzUmxaQ0JpZVNCaElISmhlUzRLSUNBZ0lDQXFJRUJ5WlhSMWNtNGdWR2hsSUNKeVpYTjFiSFFpSUc5aWFtVmpkQW9nSUNBZ0lDb3ZDZ29LSUNBZ0lISmhlVkYxWlhKNUtISmhlU3dnZEhKbFpWUnlZVzV6Wm05eWJTd2djbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lDOHZJRlZ6WlNCaFlXSmlJSEYxWlhKNUlHWnZjaUJ1YjNjdUNnb2dJQ0FnSUNBdktpb2dRSFJ2Wkc4Z2FXMXdiR1Z0Wlc1MElISmxZV3dnY21GNUlIRjFaWEo1SUhkb2FXTm9JRzVsWldSeklHeGxjM01nYkc5dmEzVndjeUFxTHdvZ0lDQWdJQ0J5WVhrdVoyVjBRVUZDUWloMGJYQkJRVUpDS1RzS0lDQWdJQ0FnZEcxd1FVRkNRaTUwYjB4dlkyRnNSbkpoYldVb2RISmxaVlJ5WVc1elptOXliU3dnZEcxd1FVRkNRaWs3Q2lBZ0lDQWdJSFJvYVhNdVlXRmlZbEYxWlhKNUtIUnRjRUZCUWtJc0lISmxjM1ZzZENrN0NpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUhKbGJXOTJaVVZ0Y0hSNVRtOWtaWE1LSUNBZ0lDQXFMd29LQ2lBZ0lDQnlaVzF2ZG1WRmJYQjBlVTV2WkdWektDa2dld29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnZEdocGN5NWphR2xzWkhKbGJpNXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WTJocGJHUnlaVzViYVYwdWNtVnRiM1psUlcxd2RIbE9iMlJsY3lncE93b0tJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVZMmhwYkdSeVpXNWJhVjB1WTJocGJHUnlaVzR1YkdWdVozUm9JQ1ltSUNGMGFHbHpMbU5vYVd4a2NtVnVXMmxkTG1SaGRHRXViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTm9hV3hrY21WdUxuTndiR2xqWlNocExDQXhLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtDaUFnZlFvZ0lDOHFLZ29nSUNBcUlFOWpkSEpsWlFvZ0lDQXFMd29LQ2lBZ1kyeGhjM01nVDJOMGNtVmxJR1Y0ZEdWdVpITWdUMk4wY21WbFRtOWtaU0I3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRTFoZUdsdGRXMGdjM1ZpWkdsMmFYTnBiMjRnWkdWd2RHZ0tJQ0FnSUNBcUlFQmtaV1poZFd4MElEZ0tJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1FIQmhjbUZ0SUdGaFltSWdWR2hsSUhSdmRHRnNJRUZCUWtJZ2IyWWdkR2hsSUhSeVpXVUtJQ0FnSUNBcUx3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1lXRmlZaXdnYjNCMGFXOXVjeWtnZXdvZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J6ZFhCbGNpaDdDaUFnSUNBZ0lDQWdjbTl2ZERvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0JoWVdKaUNpQWdJQ0FnSUgwcE93b2dJQ0FnSUNCMGFHbHpMbTFoZUVSbGNIUm9JRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXViV0Y0UkdWd2RHZ2dJVDA5SUNkMWJtUmxabWx1WldRbklEOGdiM0IwYVc5dWN5NXRZWGhFWlhCMGFDQTZJRGc3Q2lBZ0lDQjlDZ29nSUgwS0lDQmpiMjV6ZENCb1lXeG1SR2xoWjI5dVlXd2dQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUhSdGNFRkJRa0lnUFNCdVpYY2dRVUZDUWlncE93b0tJQ0F2S2lvS0lDQWdLaUJVY21sdFpYTm9MZ29nSUNBcUlFQmxlR0Z0Y0d4bENpQWdJQ29nSUNBZ0lDOHZJRWh2ZHlCMGJ5QnRZV3RsSUdFZ2JXVnphQ0IzYVhSb0lHRWdjMmx1WjJ4bElIUnlhV0Z1WjJ4bENpQWdJQ29nSUNBZ0lHTnZibk4wSUhabGNuUnBZMlZ6SUQwZ1d3b2dJQ0FxSUNBZ0lDQWdJQ0FnTUN3Z01Dd2dNQ3dnTHk4Z2RtVnlkR1Y0SURBS0lDQWdLaUFnSUNBZ0lDQWdJREVzSURBc0lEQXNJQzh2SUhabGNuUmxlQ0F4Q2lBZ0lDb2dJQ0FnSUNBZ0lDQXdMQ0F4TENBd0lDQXZMeUIyWlhKMFpYZ2dNZ29nSUNBcUlDQWdJQ0JkQ2lBZ0lDb2dJQ0FnSUdOdmJuTjBJR2x1WkdsalpYTWdQU0JiQ2lBZ0lDb2dJQ0FnSUNBZ0lDQXdMQ0F4TENBeUlDQXZMeUIwY21saGJtZHNaU0F3Q2lBZ0lDb2dJQ0FnSUYwS0lDQWdLaUFnSUNBZ1kyOXVjM1FnZEhKcGJXVnphRk5vWVhCbElEMGdibVYzSUVOQlRrNVBUaTVVY21sdFpYTm9LSFpsY25ScFkyVnpMQ0JwYm1ScFkyVnpLUW9nSUNBcUx3b2dJR05zWVhOeklGUnlhVzFsYzJnZ1pYaDBaVzVrY3lCVGFHRndaU0I3Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSFpsY25ScFkyVnpDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFRnljbUY1SUc5bUlHbHVkR1ZuWlhKekxDQnBibVJwWTJGMGFXNW5JSGRvYVdOb0lIWmxjblJwWTJWeklHVmhZMmdnZEhKcFlXNW5iR1VnWTI5dWMybHpkSE1nYjJZdUlGUm9aU0JzWlc1bmRHZ2diMllnZEdocGN5QmhjbkpoZVNCcGN5QjBhSFZ6SURNZ2RHbHRaWE1nZEdobElHNTFiV0psY2lCdlppQjBjbWxoYm1kc1pYTXVDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlGUm9aU0J1YjNKdFlXeHpJR1JoZEdFdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSb1pTQnNiMk5oYkNCQlFVSkNJRzltSUhSb1pTQnRaWE5vTGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTWldabGNtVnVZMlZ6SUhSdklIWmxjblJsZUNCd1lXbHljeXdnYldGcmFXNW5JSFZ3SUdGc2JDQjFibWx4ZFdVZ1pXUm5aWE1nYVc0Z2RHaGxJSFJ5YVcxbGMyZ3VDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFeHZZMkZzSUhOallXeHBibWNnYjJZZ2RHaGxJRzFsYzJndUlGVnpaU0F1YzJWMFUyTmhiR1VvS1NCMGJ5QnpaWFFnYVhRdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSb1pTQnBibVJsZUdWa0lIUnlhV0Z1WjJ4bGN5NGdWWE5sSUM1MWNHUmhkR1ZVY21WbEtDa2dkRzhnZFhCa1lYUmxJR2wwTGdvZ0lDQWdJQ292Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWgyWlhKMGFXTmxjeXdnYVc1a2FXTmxjeWtnZXdvZ0lDQWdJQ0J6ZFhCbGNpaDdDaUFnSUNBZ0lDQWdkSGx3WlRvZ1UyaGhjR1V1ZEhsd1pYTXVWRkpKVFVWVFNBb2dJQ0FnSUNCOUtUc0tJQ0FnSUNBZ2RHaHBjeTUyWlhKMGFXTmxjeUE5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvZG1WeWRHbGpaWE1wT3dvZ0lDQWdJQ0IwYUdsekxtbHVaR2xqWlhNZ1BTQnVaWGNnU1c1ME1UWkJjbkpoZVNocGJtUnBZMlZ6S1RzS0lDQWdJQ0FnZEdocGN5NXViM0p0WVd4eklEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaHBibVJwWTJWekxteGxibWQwYUNrN0NpQWdJQ0FnSUhSb2FYTXVZV0ZpWWlBOUlHNWxkeUJCUVVKQ0tDazdDaUFnSUNBZ0lIUm9hWE11WldSblpYTWdQU0J1ZFd4c093b2dJQ0FnSUNCMGFHbHpMbk5qWVd4bElEMGdibVYzSUZabFl6TW9NU3dnTVN3Z01TazdDaUFnSUNBZ0lIUm9hWE11ZEhKbFpTQTlJRzVsZHlCUFkzUnlaV1VvS1RzS0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWRlpHZGxjeWdwT3dvZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlU1dmNtMWhiSE1vS1RzS0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWQlFVSkNLQ2s3Q2lBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsUW05MWJtUnBibWRUY0dobGNtVlNZV1JwZFhNb0tUc0tJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlVjbVZsS0NrN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJSFZ3WkdGMFpWUnlaV1VLSUNBZ0lDQXFMd29LQ2lBZ0lDQjFjR1JoZEdWVWNtVmxLQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQjBjbVZsSUQwZ2RHaHBjeTUwY21WbE93b2dJQ0FnSUNCMGNtVmxMbkpsYzJWMEtDazdDaUFnSUNBZ0lIUnlaV1V1WVdGaVlpNWpiM0I1S0hSb2FYTXVZV0ZpWWlrN0NpQWdJQ0FnSUdOdmJuTjBJSE5qWVd4bElEMGdkR2hwY3k1elkyRnNaVHNnTHk4Z1ZHaGxJR3h2WTJGc0lHMWxjMmdnUVVGQ1FpQnBjeUJ6WTJGc1pXUXNJR0oxZENCMGFHVWdiMk4wY21WbElFRkJRa0lnYzJodmRXeGtJR0psSUhWdWMyTmhiR1ZrQ2dvZ0lDQWdJQ0IwY21WbExtRmhZbUl1Ykc5M1pYSkNiM1Z1WkM1NElDbzlJREVnTHlCelkyRnNaUzU0T3dvZ0lDQWdJQ0IwY21WbExtRmhZbUl1Ykc5M1pYSkNiM1Z1WkM1NUlDbzlJREVnTHlCelkyRnNaUzU1T3dvZ0lDQWdJQ0IwY21WbExtRmhZbUl1Ykc5M1pYSkNiM1Z1WkM1NklDbzlJREVnTHlCelkyRnNaUzU2T3dvZ0lDQWdJQ0IwY21WbExtRmhZbUl1ZFhCd1pYSkNiM1Z1WkM1NElDbzlJREVnTHlCelkyRnNaUzU0T3dvZ0lDQWdJQ0IwY21WbExtRmhZbUl1ZFhCd1pYSkNiM1Z1WkM1NUlDbzlJREVnTHlCelkyRnNaUzU1T3dvZ0lDQWdJQ0IwY21WbExtRmhZbUl1ZFhCd1pYSkNiM1Z1WkM1NklDbzlJREVnTHlCelkyRnNaUzU2T3lBdkx5Qkpibk5sY25RZ1lXeHNJSFJ5YVdGdVoyeGxjd29LSUNBZ0lDQWdZMjl1YzNRZ2RISnBZVzVuYkdWQlFVSkNJRDBnYm1WM0lFRkJRa0lvS1RzS0lDQWdJQ0FnWTI5dWMzUWdZU0E5SUc1bGR5QldaV016S0NrN0NpQWdJQ0FnSUdOdmJuTjBJR0lnUFNCdVpYY2dWbVZqTXlncE93b2dJQ0FnSUNCamIyNXpkQ0JqSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ1kyOXVjM1FnY0c5cGJuUnpJRDBnVzJFc0lHSXNJR05kT3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMGFHbHpMbWx1WkdsalpYTXViR1Z1WjNSb0lDOGdNenNnYVNzcktTQjdDaUFnSUNBZ0lDQWdMeTkwYUdsekxtZGxkRlJ5YVdGdVoyeGxWbVZ5ZEdsalpYTW9hU3dnWVN3Z1lpd2dZeWs3Q2lBZ0lDQWdJQ0FnTHk4Z1IyVjBJSFZ1YzJOaGJHVmtJSFJ5YVdGdVoyeGxJSFpsY25SekNpQWdJQ0FnSUNBZ1kyOXVjM1FnYVRNZ1BTQnBJQ29nTXpzS0NpQWdJQ0FnSUNBZ2RHaHBjeTVmWjJWMFZXNXpZMkZzWldSV1pYSjBaWGdvZEdocGN5NXBibVJwWTJWelcya3pYU3dnWVNrN0Nnb2dJQ0FnSUNBZ0lIUm9hWE11WDJkbGRGVnVjMk5oYkdWa1ZtVnlkR1Y0S0hSb2FYTXVhVzVrYVdObGMxdHBNeUFySURGZExDQmlLVHNLQ2lBZ0lDQWdJQ0FnZEdocGN5NWZaMlYwVlc1elkyRnNaV1JXWlhKMFpYZ29kR2hwY3k1cGJtUnBZMlZ6VzJreklDc2dNbDBzSUdNcE93b0tJQ0FnSUNBZ0lDQjBjbWxoYm1kc1pVRkJRa0l1YzJWMFJuSnZiVkJ2YVc1MGN5aHdiMmx1ZEhNcE93b2dJQ0FnSUNBZ0lIUnlaV1V1YVc1elpYSjBLSFJ5YVdGdVoyeGxRVUZDUWl3Z2FTazdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lIUnlaV1V1Y21WdGIzWmxSVzF3ZEhsT2IyUmxjeWdwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhaWFFnZEhKcFlXNW5iR1Z6SUdsdUlHRWdiRzlqWVd3Z1FVRkNRaUJtY205dElIUm9aU0IwY21sdFpYTm9MZ29nSUNBZ0lDb2dRSEJoY21GdElISmxjM1ZzZENCQmJpQmhjbkpoZVNCdlppQnBiblJsWjJWeWN5d2djbVZtWlhKbGJtTnBibWNnZEdobElIRjFaWEpwWldRZ2RISnBZVzVuYkdWekxnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRGUnlhV0Z1WjJ4bGMwbHVRVUZDUWloaFlXSmlMQ0J5WlhOMWJIUXBJSHNLSUNBZ0lDQWdkVzV6WTJGc1pXUkJRVUpDTG1OdmNIa29ZV0ZpWWlrN0lDOHZJRk5qWVd4bElHbDBJSFJ2SUd4dlkyRnNDZ29nSUNBZ0lDQmpiMjV6ZENCelkyRnNaU0E5SUhSb2FYTXVjMk5oYkdVN0NpQWdJQ0FnSUdOdmJuTjBJR2x6ZUNBOUlITmpZV3hsTG5nN0NpQWdJQ0FnSUdOdmJuTjBJR2x6ZVNBOUlITmpZV3hsTG5rN0NpQWdJQ0FnSUdOdmJuTjBJR2x6ZWlBOUlITmpZV3hsTG5vN0NpQWdJQ0FnSUdOdmJuTjBJR3dnUFNCMWJuTmpZV3hsWkVGQlFrSXViRzkzWlhKQ2IzVnVaRHNLSUNBZ0lDQWdZMjl1YzNRZ2RTQTlJSFZ1YzJOaGJHVmtRVUZDUWk1MWNIQmxja0p2ZFc1a093b2dJQ0FnSUNCc0xuZ2dMejBnYVhONE93b2dJQ0FnSUNCc0xua2dMejBnYVhONU93b2dJQ0FnSUNCc0xub2dMejBnYVhONk93b2dJQ0FnSUNCMUxuZ2dMejBnYVhONE93b2dJQ0FnSUNCMUxua2dMejBnYVhONU93b2dJQ0FnSUNCMUxub2dMejBnYVhONk93b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBjbVZsTG1GaFltSlJkV1Z5ZVNoMWJuTmpZV3hsWkVGQlFrSXNJSEpsYzNWc2RDazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUhObGRGTmpZV3hsQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdjMlYwVTJOaGJHVW9jMk5oYkdVcElIc0tJQ0FnSUNBZ1kyOXVjM1FnZDJGelZXNXBabTl5YlNBOUlIUm9hWE11YzJOaGJHVXVlQ0E5UFQwZ2RHaHBjeTV6WTJGc1pTNTVJQ1ltSUhSb2FYTXVjMk5oYkdVdWVTQTlQVDBnZEdocGN5NXpZMkZzWlM1Nk93b2dJQ0FnSUNCamIyNXpkQ0JwYzFWdWFXWnZjbTBnUFNCelkyRnNaUzU0SUQwOVBTQnpZMkZzWlM1NUlDWW1JSE5qWVd4bExua2dQVDA5SUhOallXeGxMbm83Q2dvZ0lDQWdJQ0JwWmlBb0lTaDNZWE5WYm1sbWIzSnRJQ1ltSUdselZXNXBabTl5YlNrcElIc0tJQ0FnSUNBZ0lDQXZMeUJPYjI0dGRXNXBabTl5YlNCelkyRnNhVzVuTGlCT1pXVmtJSFJ2SUhWd1pHRjBaU0J1YjNKdFlXeHpMZ29nSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVG05eWJXRnNjeWdwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxuTmpZV3hsTG1OdmNIa29jMk5oYkdVcE93b2dJQ0FnSUNCMGFHbHpMblZ3WkdGMFpVRkJRa0lvS1RzS0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWQ2IzVnVaR2x1WjFOd2FHVnlaVkpoWkdsMWN5Z3BPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRGIyMXdkWFJsSUhSb1pTQnViM0p0WVd4eklHOW1JSFJvWlNCbVlXTmxjeTRnVjJsc2JDQnpZWFpsSUdsdUlIUm9aU0JnTG01dmNtMWhiSE5nSUdGeWNtRjVMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lIVndaR0YwWlU1dmNtMWhiSE1vS1NCN0NpQWdJQ0FnSUdOdmJuTjBJRzRnUFNCamIyMXdkWFJsVG05eWJXRnNjMTl1T3lBdkx5QkhaVzVsY21GMFpTQnViM0p0WVd4ekNnb2dJQ0FnSUNCamIyNXpkQ0J1YjNKdFlXeHpJRDBnZEdocGN5NXViM0p0WVd4ek93b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG1sdVpHbGpaWE11YkdWdVozUm9JQzhnTXpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdhVE1nUFNCcElDb2dNenNLSUNBZ0lDQWdJQ0JqYjI1emRDQmhJRDBnZEdocGN5NXBibVJwWTJWelcya3pYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmlJRDBnZEdocGN5NXBibVJwWTJWelcya3pJQ3NnTVYwN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWXlBOUlIUm9hWE11YVc1a2FXTmxjMXRwTXlBcklESmRPd29nSUNBZ0lDQWdJSFJvYVhNdVoyVjBWbVZ5ZEdWNEtHRXNJSFpoS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbWRsZEZabGNuUmxlQ2hpTENCMllpazdDaUFnSUNBZ0lDQWdkR2hwY3k1blpYUldaWEowWlhnb1l5d2dkbU1wT3dvZ0lDQWdJQ0FnSUZSeWFXMWxjMmd1WTI5dGNIVjBaVTV2Y20xaGJDaDJZaXdnZG1Fc0lIWmpMQ0J1S1RzS0lDQWdJQ0FnSUNCdWIzSnRZV3h6VzJrelhTQTlJRzR1ZURzS0lDQWdJQ0FnSUNCdWIzSnRZV3h6VzJreklDc2dNVjBnUFNCdUxuazdDaUFnSUNBZ0lDQWdibTl5YldGc2MxdHBNeUFySURKZElEMGdiaTU2T3dvZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlGVndaR0YwWlNCMGFHVWdZQzVsWkdkbGMyQWdjSEp2Y0dWeWRIa0tJQ0FnSUNBcUx3b0tDaUFnSUNCMWNHUmhkR1ZGWkdkbGN5Z3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ1pXUm5aWE1nUFNCN2ZUc0tDaUFnSUNBZ0lHTnZibk4wSUdGa1pDQTlJQ2hoTENCaUtTQTlQaUI3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1SUQwZ1lTQThJR0lnUHlCZ0pIdGhmVjhrZTJKOVlDQTZJR0FrZTJKOVh5UjdZWDFnT3dvZ0lDQWdJQ0FnSUdWa1oyVnpXMnRsZVYwZ1BTQjBjblZsT3dvZ0lDQWdJQ0I5T3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMGFHbHpMbWx1WkdsalpYTXViR1Z1WjNSb0lDOGdNenNnYVNzcktTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2FUTWdQU0JwSUNvZ016c0tJQ0FnSUNBZ0lDQmpiMjV6ZENCaElEMGdkR2hwY3k1cGJtUnBZMlZ6VzJrelhUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCaUlEMGdkR2hwY3k1cGJtUnBZMlZ6VzJreklDc2dNVjA3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZeUE5SUhSb2FYTXVhVzVrYVdObGMxdHBNeUFySURKZE93b2dJQ0FnSUNBZ0lHRmtaQ2hoTENCaUtUc0tJQ0FnSUNBZ0lDQmhaR1FvWWl3Z1l5azdDaUFnSUNBZ0lDQWdZV1JrS0dNc0lHRXBPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb1pXUm5aWE1wT3dvZ0lDQWdJQ0IwYUdsekxtVmtaMlZ6SUQwZ2JtVjNJRWx1ZERFMlFYSnlZWGtvYTJWNWN5NXNaVzVuZEdnZ0tpQXlLVHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYTJWNWN5NXNaVzVuZEdnN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJR2x1WkdsalpYTWdQU0JyWlhselcybGRMbk53YkdsMEtDZGZKeWs3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxaR2RsYzFzeUlDb2dhVjBnUFNCd1lYSnpaVWx1ZENocGJtUnBZMlZ6V3pCZExDQXhNQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxaR2RsYzFzeUlDb2dhU0FySURGZElEMGdjR0Z5YzJWSmJuUW9hVzVrYVdObGMxc3hYU3dnTVRBcE93b2dJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWRsZENCaGJpQmxaR2RsSUhabGNuUmxlQW9nSUNBZ0lDb2dRSEJoY21GdElHWnBjbk4wVDNKVFpXTnZibVFnTUNCdmNpQXhMQ0JrWlhCbGJtUnBibWNnYjI0Z2QyaHBZMmdnYjI1bElHOW1JSFJvWlNCMlpYSjBhV05sY3lCNWIzVWdibVZsWkM0S0lDQWdJQ0FxSUVCd1lYSmhiU0IyWlhKMFpYaFRkRzl5WlNCWGFHVnlaU0IwYnlCemRHOXlaU0IwYUdVZ2NtVnpkV3gwQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdaMlYwUldSblpWWmxjblJsZUNobFpHZGxTVzVrWlhnc0lHWnBjbk4wVDNKVFpXTnZibVFzSUhabGNuUmxlRk4wYjNKbEtTQjdDaUFnSUNBZ0lHTnZibk4wSUhabGNuUmxlRWx1WkdWNElEMGdkR2hwY3k1bFpHZGxjMXRsWkdkbFNXNWtaWGdnS2lBeUlDc2dLR1pwY25OMFQzSlRaV052Ym1RZ1B5QXhJRG9nTUNsZE93b2dJQ0FnSUNCMGFHbHpMbWRsZEZabGNuUmxlQ2gyWlhKMFpYaEpibVJsZUN3Z2RtVnlkR1Y0VTNSdmNtVXBPd29nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCSFpYUWdZU0IyWldOMGIzSWdZV3h2Ym1jZ1lXNGdaV1JuWlM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSRlpHZGxWbVZqZEc5eUtHVmtaMlZKYm1SbGVDd2dkbVZqZEc5eVUzUnZjbVVwSUhzS0lDQWdJQ0FnWTI5dWMzUWdkbUVnUFNCblpYUkZaR2RsVm1WamRHOXlYM1poT3dvZ0lDQWdJQ0JqYjI1emRDQjJZaUE5SUdkbGRFVmtaMlZXWldOMGIzSmZkbUk3Q2lBZ0lDQWdJSFJvYVhNdVoyVjBSV1JuWlZabGNuUmxlQ2hsWkdkbFNXNWtaWGdzSURBc0lIWmhLVHNLSUNBZ0lDQWdkR2hwY3k1blpYUkZaR2RsVm1WeWRHVjRLR1ZrWjJWSmJtUmxlQ3dnTVN3Z2RtSXBPd29nSUNBZ0lDQjJZaTUyYzNWaUtIWmhMQ0IyWldOMGIzSlRkRzl5WlNrN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWRsZENCbVlXTmxJRzV2Y20xaGJDQm5hWFpsYmlBeklIWmxjblJwWTJWekNpQWdJQ0FnS2k4S0Nnb2dJQ0FnYzNSaGRHbGpJR052YlhCMWRHVk9iM0p0WVd3b2RtRXNJSFppTENCMll5d2dkR0Z5WjJWMEtTQjdDaUFnSUNBZ0lIWmlMblp6ZFdJb2RtRXNJR0ZpS1RzS0lDQWdJQ0FnZG1NdWRuTjFZaWgyWWl3Z1kySXBPd29nSUNBZ0lDQmpZaTVqY205emN5aGhZaXdnZEdGeVoyVjBLVHNLQ2lBZ0lDQWdJR2xtSUNnaGRHRnlaMlYwTG1seldtVnlieWdwS1NCN0NpQWdJQ0FnSUNBZ2RHRnlaMlYwTG01dmNtMWhiR2w2WlNncE93b2dJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWRsZENCMlpYSjBaWGdnYVM0S0lDQWdJQ0FxSUVCeVpYUjFjbTRnVkdobElDSnZkWFFpSUhabFkzUnZjaUJ2WW1wbFkzUUtJQ0FnSUNBcUx3b0tDaUFnSUNCblpYUldaWEowWlhnb2FTd2diM1YwS1NCN0NpQWdJQ0FnSUdOdmJuTjBJSE5qWVd4bElEMGdkR2hwY3k1elkyRnNaVHNLQ2lBZ0lDQWdJSFJvYVhNdVgyZGxkRlZ1YzJOaGJHVmtWbVZ5ZEdWNEtHa3NJRzkxZENrN0Nnb2dJQ0FnSUNCdmRYUXVlQ0FxUFNCelkyRnNaUzU0T3dvZ0lDQWdJQ0J2ZFhRdWVTQXFQU0J6WTJGc1pTNTVPd29nSUNBZ0lDQnZkWFF1ZWlBcVBTQnpZMkZzWlM1Nk93b2dJQ0FnSUNCeVpYUjFjbTRnYjNWME93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJIWlhRZ2NtRjNJSFpsY25SbGVDQnBDaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUm9aU0FpYjNWMElpQjJaV04wYjNJZ2IySnFaV04wQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdYMmRsZEZWdWMyTmhiR1ZrVm1WeWRHVjRLR2tzSUc5MWRDa2dld29nSUNBZ0lDQmpiMjV6ZENCcE15QTlJR2tnS2lBek93b2dJQ0FnSUNCamIyNXpkQ0IyWlhKMGFXTmxjeUE5SUhSb2FYTXVkbVZ5ZEdsalpYTTdDaUFnSUNBZ0lISmxkSFZ5YmlCdmRYUXVjMlYwS0habGNuUnBZMlZ6VzJrelhTd2dkbVZ5ZEdsalpYTmJhVE1nS3lBeFhTd2dkbVZ5ZEdsalpYTmJhVE1nS3lBeVhTazdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVkbGRDQmhJSFpsY25SbGVDQm1jbTl0SUhSb1pTQjBjbWx0WlhOb0xIUnlZVzV6Wm05eWJXVmtJR0o1SUhSb1pTQm5hWFpsYmlCd2IzTnBkR2x2YmlCaGJtUWdjWFZoZEdWeWJtbHZiaTRLSUNBZ0lDQXFJRUJ5WlhSMWNtNGdWR2hsSUNKdmRYUWlJSFpsWTNSdmNpQnZZbXBsWTNRS0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSWGIzSnNaRlpsY25SbGVDaHBMQ0J3YjNNc0lIRjFZWFFzSUc5MWRDa2dld29nSUNBZ0lDQjBhR2x6TG1kbGRGWmxjblJsZUNocExDQnZkWFFwT3dvZ0lDQWdJQ0JVY21GdWMyWnZjbTB1Y0c5cGJuUlViMWR2Y214a1JuSmhiV1VvY0c5ekxDQnhkV0YwTENCdmRYUXNJRzkxZENrN0NpQWdJQ0FnSUhKbGRIVnliaUJ2ZFhRN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRWRsZENCMGFHVWdkR2h5WldVZ2RtVnlkR2xqWlhNZ1ptOXlJSFJ5YVdGdVoyeGxJR2t1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdaMlYwVkhKcFlXNW5iR1ZXWlhKMGFXTmxjeWhwTENCaExDQmlMQ0JqS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR2t6SUQwZ2FTQXFJRE03Q2lBZ0lDQWdJSFJvYVhNdVoyVjBWbVZ5ZEdWNEtIUm9hWE11YVc1a2FXTmxjMXRwTTEwc0lHRXBPd29nSUNBZ0lDQjBhR2x6TG1kbGRGWmxjblJsZUNoMGFHbHpMbWx1WkdsalpYTmJhVE1nS3lBeFhTd2dZaWs3Q2lBZ0lDQWdJSFJvYVhNdVoyVjBWbVZ5ZEdWNEtIUm9hWE11YVc1a2FXTmxjMXRwTXlBcklESmRMQ0JqS1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRMjl0Y0hWMFpTQjBhR1VnYm05eWJXRnNJRzltSUhSeWFXRnVaMnhsSUdrdUNpQWdJQ0FnS2lCQWNtVjBkWEp1SUZSb1pTQWlkR0Z5WjJWMElpQjJaV04wYjNJZ2IySnFaV04wQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdaMlYwVG05eWJXRnNLR2tzSUhSaGNtZGxkQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQnBNeUE5SUdrZ0tpQXpPd29nSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTG5ObGRDaDBhR2x6TG01dmNtMWhiSE5iYVROZExDQjBhR2x6TG01dmNtMWhiSE5iYVRNZ0t5QXhYU3dnZEdocGN5NXViM0p0WVd4elcya3pJQ3NnTWwwcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJBY21WMGRYSnVJRlJvWlNBaWRHRnlaMlYwSWlCMlpXTjBiM0lnYjJKcVpXTjBDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyRnNZM1ZzWVhSbFRHOWpZV3hKYm1WeWRHbGhLRzFoYzNNc0lIUmhjbWRsZENrZ2V3b2dJQ0FnSUNBdkx5QkJjSEJ5YjNocGJXRjBaU0IzYVhSb0lHSnZlQ0JwYm1WeWRHbGhDaUFnSUNBZ0lDOHZJRVY0WVdOMElHbHVaWEowYVdFZ1kyRnNZM1ZzWVhScGIyNGdhWE1nYjNabGNtdHBiR3dzSUdKMWRDQnpaV1VnYUhSMGNEb3ZMMmRsYjIxbGRISnBZM1J2YjJ4ekxtTnZiUzlFYjJOMWJXVnVkR0YwYVc5dUwxQnZiSGxvWldSeVlXeE5ZWE56VUhKdmNHVnlkR2xsY3k1d1pHWWdabTl5SUhSb1pTQmpiM0p5WldOMElIZGhlU0IwYnlCa2J5QnBkQW9nSUNBZ0lDQjBhR2x6TG1OdmJYQjFkR1ZNYjJOaGJFRkJRa0lvWTJ4cFgyRmhZbUlwT3dvZ0lDQWdJQ0JqYjI1emRDQjRJRDBnWTJ4cFgyRmhZbUl1ZFhCd1pYSkNiM1Z1WkM1NElDMGdZMnhwWDJGaFltSXViRzkzWlhKQ2IzVnVaQzU0T3dvZ0lDQWdJQ0JqYjI1emRDQjVJRDBnWTJ4cFgyRmhZbUl1ZFhCd1pYSkNiM1Z1WkM1NUlDMGdZMnhwWDJGaFltSXViRzkzWlhKQ2IzVnVaQzU1T3dvZ0lDQWdJQ0JqYjI1emRDQjZJRDBnWTJ4cFgyRmhZbUl1ZFhCd1pYSkNiM1Z1WkM1NklDMGdZMnhwWDJGaFltSXViRzkzWlhKQ2IzVnVaQzU2T3dvZ0lDQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWMExuTmxkQ2d4TGpBZ0x5QXhNaTR3SUNvZ2JXRnpjeUFxSUNneUlDb2dlU0FxSURJZ0tpQjVJQ3NnTWlBcUlIb2dLaUF5SUNvZ2Vpa3NJREV1TUNBdklERXlMakFnS2lCdFlYTnpJQ29nS0RJZ0tpQjRJQ29nTWlBcUlIZ2dLeUF5SUNvZ2VpQXFJRElnS2lCNktTd2dNUzR3SUM4Z01USXVNQ0FxSUcxaGMzTWdLaUFvTWlBcUlIa2dLaUF5SUNvZ2VTQXJJRElnS2lCNElDb2dNaUFxSUhncEtUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTI5dGNIVjBaU0IwYUdVZ2JHOWpZV3dnUVVGQ1FpQm1iM0lnZEdobElIUnlhVzFsYzJnS0lDQWdJQ0FxTHdvS0NpQWdJQ0JqYjIxd2RYUmxURzlqWVd4QlFVSkNLR0ZoWW1JcElIc0tJQ0FnSUNBZ1kyOXVjM1FnYkNBOUlHRmhZbUl1Ykc5M1pYSkNiM1Z1WkRzS0lDQWdJQ0FnWTI5dWMzUWdkU0E5SUdGaFltSXVkWEJ3WlhKQ2IzVnVaRHNLSUNBZ0lDQWdZMjl1YzNRZ2JpQTlJSFJvYVhNdWRtVnlkR2xqWlhNdWJHVnVaM1JvT3dvZ0lDQWdJQ0IwYUdsekxuWmxjblJwWTJWek93b2dJQ0FnSUNCamIyNXpkQ0IySUQwZ1kyOXRjSFYwWlV4dlkyRnNRVUZDUWw5M2IzSnNaRlpsY25RN0NpQWdJQ0FnSUhSb2FYTXVaMlYwVm1WeWRHVjRLREFzSUhZcE93b2dJQ0FnSUNCc0xtTnZjSGtvZGlrN0NpQWdJQ0FnSUhVdVkyOXdlU2gyS1RzS0NpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUNFOVBTQnVPeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGWmxjblJsZUNocExDQjJLVHNLQ2lBZ0lDQWdJQ0FnYVdZZ0tIWXVlQ0E4SUd3dWVDa2dld29nSUNBZ0lDQWdJQ0FnYkM1NElEMGdkaTU0T3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RpNTRJRDRnZFM1NEtTQjdDaUFnSUNBZ0lDQWdJQ0IxTG5nZ1BTQjJMbmc3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCcFppQW9kaTU1SUR3Z2JDNTVLU0I3Q2lBZ0lDQWdJQ0FnSUNCc0xua2dQU0IyTG5rN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDJMbmtnUGlCMUxua3BJSHNLSUNBZ0lDQWdJQ0FnSUhVdWVTQTlJSFl1ZVRzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lHbG1JQ2gyTG5vZ1BDQnNMbm9wSUhzS0lDQWdJQ0FnSUNBZ0lHd3VlaUE5SUhZdWVqc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFl1ZWlBK0lIVXVlaWtnZXdvZ0lDQWdJQ0FnSUNBZ2RTNTZJRDBnZGk1Nk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJWY0dSaGRHVWdkR2hsSUdBdVlXRmlZbUFnY0hKdmNHVnlkSGtLSUNBZ0lDQXFMd29LQ2lBZ0lDQjFjR1JoZEdWQlFVSkNLQ2tnZXdvZ0lDQWdJQ0IwYUdsekxtTnZiWEIxZEdWTWIyTmhiRUZCUWtJb2RHaHBjeTVoWVdKaUtUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVjJsc2JDQjFjR1JoZEdVZ2RHaGxJR0F1WW05MWJtUnBibWRUY0dobGNtVlNZV1JwZFhOZ0lIQnliM0JsY25SNUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnZFhCa1lYUmxRbTkxYm1ScGJtZFRjR2hsY21WU1lXUnBkWE1vS1NCN0NpQWdJQ0FnSUM4dklFRnpjM1Z0WlNCd2IybHVkSE1nWVhKbElHUnBjM1J5YVdKMWRHVmtJSGRwZEdnZ2JHOWpZV3dnS0RBc01Dd3dLU0JoY3lCalpXNTBaWElLSUNBZ0lDQWdiR1YwSUcxaGVESWdQU0F3T3dvZ0lDQWdJQ0JqYjI1emRDQjJaWEowYVdObGN5QTlJSFJvYVhNdWRtVnlkR2xqWlhNN0NpQWdJQ0FnSUdOdmJuTjBJSFlnUFNCdVpYY2dWbVZqTXlncE93b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUU0Z1BTQjJaWEowYVdObGN5NXNaVzVuZEdnZ0x5QXpPeUJwSUNFOVBTQk9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGWmxjblJsZUNocExDQjJLVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnViM0p0TWlBOUlIWXViR1Z1WjNSb1UzRjFZWEpsWkNncE93b0tJQ0FnSUNBZ0lDQnBaaUFvYm05eWJUSWdQaUJ0WVhneUtTQjdDaUFnSUNBZ0lDQWdJQ0J0WVhneUlEMGdibTl5YlRJN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbFVtRmthWFZ6SUQwZ1RXRjBhQzV6Y1hKMEtHMWhlRElwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQmpZV3hqZFd4aGRHVlhiM0pzWkVGQlFrSUtJQ0FnSUNBcUx3b0tDaUFnSUNCallXeGpkV3hoZEdWWGIzSnNaRUZCUWtJb2NHOXpMQ0J4ZFdGMExDQnRhVzRzSUcxaGVDa2dld29nSUNBZ0lDQXZLZ29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiaUE5SUhSb2FYTXVkbVZ5ZEdsalpYTXViR1Z1WjNSb0lDOGdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowY3lBOUlIUm9hWE11ZG1WeWRHbGpaWE03Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J0YVc1NExHMXBibmtzYldsdWVpeHRZWGg0TEcxaGVIa3NiV0Y0ZWpzS0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMklEMGdkR1Z0Y0ZkdmNteGtWbVZ5ZEdWNE93b2dJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnBQVEE3SUdrOGJqc2dhU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRlpsY25SbGVDaHBMQ0IyS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4ZFdGMExuWnRkV3gwS0hZc0lIWXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjeTUyWVdSa0tIWXNJSFlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMkxuZ2dQQ0J0YVc1NElIeDhJRzFwYm5nOVBUMTFibVJsWm1sdVpXUXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YVc1NElEMGdkaTU0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaWgyTG5nZ1BpQnRZWGg0SUh4OElHMWhlSGc5UFQxMWJtUmxabWx1WldRcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGg0SUQwZ2RpNTRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFl1ZVNBOElHMXBibmtnZkh3Z2JXbHVlVDA5UFhWdVpHVm1hVzVsWkNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBibmtnUFNCMkxuazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUtIWXVlU0ErSUcxaGVIa2dmSHdnYldGNGVUMDlQWFZ1WkdWbWFXNWxaQ2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGVIa2dQU0IyTG5rN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpNTZJRHdnYldsdWVpQjhmQ0J0YVc1NlBUMDlkVzVrWldacGJtVmtLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsdWVpQTlJSFl1ZWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lvZGk1NklENGdiV0Y0ZWlCOGZDQnRZWGg2UFQwOWRXNWtaV1pwYm1Wa0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0ZWlBOUlIWXVlanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNCdGFXNHVjMlYwS0cxcGJuZ3NiV2x1ZVN4dGFXNTZLVHNLSUNBZ0lDQWdJQ0FnSUcxaGVDNXpaWFFvYldGNGVDeHRZWGg1TEcxaGVIb3BPd29nSUNBZ0lDQWdJQ0FnS2k4S0lDQWdJQ0FnTHk4Z1JtRnpkR1Z5SUdGd2NISnZlR2x0WVhScGIyNGdkWE5wYm1jZ2JHOWpZV3dnUVVGQ1Fnb2dJQ0FnSUNCamIyNXpkQ0JtY21GdFpTQTlJR05oYkdOMWJHRjBaVmR2Y214a1FVRkNRbDltY21GdFpUc0tJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnWTJGc1kzVnNZWFJsVjI5eWJHUkJRVUpDWDJGaFltSTdDaUFnSUNBZ0lHWnlZVzFsTG5CdmMybDBhVzl1SUQwZ2NHOXpPd29nSUNBZ0lDQm1jbUZ0WlM1eGRXRjBaWEp1YVc5dUlEMGdjWFZoZERzS0lDQWdJQ0FnZEdocGN5NWhZV0ppTG5SdlYyOXliR1JHY21GdFpTaG1jbUZ0WlN3Z2NtVnpkV3gwS1RzS0lDQWdJQ0FnYldsdUxtTnZjSGtvY21WemRXeDBMbXh2ZDJWeVFtOTFibVFwT3dvZ0lDQWdJQ0J0WVhndVkyOXdlU2h5WlhOMWJIUXVkWEJ3WlhKQ2IzVnVaQ2s3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFZGxkQ0JoY0hCeWIzaHBiV0YwWlNCMmIyeDFiV1VLSUNBZ0lDQXFMd29LQ2lBZ0lDQjJiMngxYldVb0tTQjdDaUFnSUNBZ0lISmxkSFZ5YmlBMExqQWdLaUJOWVhSb0xsQkpJQ29nZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeUF2SURNdU1Ec0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTNKbFlYUmxJR0VnVkhKcGJXVnphQ0JwYm5OMFlXNWpaU3dnYzJoaGNHVmtJR0Z6SUdFZ2RHOXlkWE11Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdjM1JoZEdsaklHTnlaV0YwWlZSdmNuVnpLSEpoWkdsMWN5d2dkSFZpWlN3Z2NtRmthV0ZzVTJWbmJXVnVkSE1zSUhSMVluVnNZWEpUWldkdFpXNTBjeXdnWVhKaktTQjdDaUFnSUNBZ0lHbG1JQ2h5WVdScGRYTWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhKaFpHbDFjeUE5SURFN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaDBkV0psSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQjBkV0psSUQwZ01DNDFPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvY21Ga2FXRnNVMlZuYldWdWRITWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUhKaFpHbGhiRk5sWjIxbGJuUnpJRDBnT0RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tIUjFZblZzWVhKVFpXZHRaVzUwY3lBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdkSFZpZFd4aGNsTmxaMjFsYm5SeklEMGdOanNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0dGeVl5QTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnWVhKaklEMGdUV0YwYUM1UVNTQXFJREk3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElIWmxjblJwWTJWeklEMGdXMTA3Q2lBZ0lDQWdJR052Ym5OMElHbHVaR2xqWlhNZ1BTQmJYVHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJRHc5SUhKaFpHbGhiRk5sWjIxbGJuUnpPeUJxS3lzcElIc0tJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThQU0IwZFdKMWJHRnlVMlZuYldWdWRITTdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RTQTlJR2tnTHlCMGRXSjFiR0Z5VTJWbmJXVnVkSE1nS2lCaGNtTTdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjJJRDBnYWlBdklISmhaR2xoYkZObFoyMWxiblJ6SUNvZ1RXRjBhQzVRU1NBcUlESTdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjRJRDBnS0hKaFpHbDFjeUFySUhSMVltVWdLaUJOWVhSb0xtTnZjeWgyS1NrZ0tpQk5ZWFJvTG1OdmN5aDFLVHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGtnUFNBb2NtRmthWFZ6SUNzZ2RIVmlaU0FxSUUxaGRHZ3VZMjl6S0hZcEtTQXFJRTFoZEdndWMybHVLSFVwT3dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZWlBOUlIUjFZbVVnS2lCTllYUm9Mbk5wYmloMktUc0tJQ0FnSUNBZ0lDQWdJSFpsY25ScFkyVnpMbkIxYzJnb2VDd2dlU3dnZWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdNVHNnYWlBOFBTQnlZV1JwWVd4VFpXZHRaVzUwY3pzZ2Fpc3JLU0I3Q2lBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlERTdJR2tnUEQwZ2RIVmlkV3hoY2xObFoyMWxiblJ6T3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0VnUFNBb2RIVmlkV3hoY2xObFoyMWxiblJ6SUNzZ01Ta2dLaUJxSUNzZ2FTQXRJREU3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpSUQwZ0tIUjFZblZzWVhKVFpXZHRaVzUwY3lBcklERXBJQ29nS0dvZ0xTQXhLU0FySUdrZ0xTQXhPd29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZeUE5SUNoMGRXSjFiR0Z5VTJWbmJXVnVkSE1nS3lBeEtTQXFJQ2hxSUMwZ01Ta2dLeUJwT3dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkNBOUlDaDBkV0oxYkdGeVUyVm5iV1Z1ZEhNZ0t5QXhLU0FxSUdvZ0t5QnBPd29nSUNBZ0lDQWdJQ0FnYVc1a2FXTmxjeTV3ZFhOb0tHRXNJR0lzSUdRcE93b2dJQ0FnSUNBZ0lDQWdhVzVrYVdObGN5NXdkWE5vS0dJc0lHTXNJR1FwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVWNtbHRaWE5vS0habGNuUnBZMlZ6TENCcGJtUnBZMlZ6S1RzS0lDQWdJSDBLQ2lBZ2ZRb2dJR052Ym5OMElHTnZiWEIxZEdWT2IzSnRZV3h6WDI0Z1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSFZ1YzJOaGJHVmtRVUZDUWlBOUlHNWxkeUJCUVVKQ0tDazdDaUFnWTI5dWMzUWdaMlYwUldSblpWWmxZM1J2Y2w5MllTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWjJWMFJXUm5aVlpsWTNSdmNsOTJZaUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ1kySWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdGaUlEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0IyWVNBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdkbUlnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElIWmpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCamJHbGZZV0ZpWWlBOUlHNWxkeUJCUVVKQ0tDazdDaUFnWTI5dWMzUWdZMjl0Y0hWMFpVeHZZMkZzUVVGQ1FsOTNiM0pzWkZabGNuUWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUdOaGJHTjFiR0YwWlZkdmNteGtRVUZDUWw5bWNtRnRaU0E5SUc1bGR5QlVjbUZ1YzJadmNtMG9LVHNLSUNCamIyNXpkQ0JqWVd4amRXeGhkR1ZYYjNKc1pFRkJRa0pmWVdGaVlpQTlJRzVsZHlCQlFVSkNLQ2s3Q2dvZ0lDOHFLZ29nSUNBcUlFTnZibk4wY21GcGJuUWdaWEYxWVhScGIyNGdjMjlzZG1WeUlHSmhjMlVnWTJ4aGMzTXVDaUFnSUNvdkNpQWdZMnhoYzNNZ1UyOXNkbVZ5SUhzS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUVd4c0lHVnhkV0YwYVc5dWN5QjBieUJpWlNCemIyeDJaV1FLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dRSFJ2Wkc4Z2NtVnRiM1psSUhWelpXeGxjM01nWTI5dWMzUnlkV04wYjNJS0lDQWdJQ0FxTHdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN0NpQWdJQ0FnSUhSb2FYTXVaWEYxWVhScGIyNXpJRDBnVzEwN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk5vYjNWc1pDQmlaU0JwYlhCc1pXMWxiblJsWkNCcGJpQnpkV0pqYkdGemMyVnpJUW9nSUNBZ0lDb2dRSFJ2Wkc4Z2RYTmxJR0ZpYzNSeVlXTjBDaUFnSUNBZ0tpQkFjbVYwZFhKdUlHNTFiV0psY2lCdlppQnBkR1Z5WVhScGIyNXpJSEJsY21admNtMWxaQW9nSUNBZ0lDb3ZDZ29LSUNBZ0lITnZiSFpsS0dSMExDQjNiM0pzWkNrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnS0M4dklGTm9iM1ZzWkNCeVpYUjFjbTRnZEdobElHNTFiV0psY2lCdlppQnBkR1Z5WVhScGIyNXpJR1J2Ym1VaENpQWdJQ0FnSUNBZ01Bb2dJQ0FnSUNBcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJCWkdRZ1lXNGdaWEYxWVhScGIyNEtJQ0FnSUNBcUx3b0tDaUFnSUNCaFpHUkZjWFZoZEdsdmJpaGxjU2tnZXdvZ0lDQWdJQ0JwWmlBb1pYRXVaVzVoWW14bFpDQW1KaUFoWlhFdVlta3VhWE5VY21sbloyVnlJQ1ltSUNGbGNTNWlhaTVwYzFSeWFXZG5aWElwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVZ4ZFdGMGFXOXVjeTV3ZFhOb0tHVnhLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCU1pXMXZkbVVnWVc0Z1pYRjFZWFJwYjI0S0lDQWdJQ0FxTHdvS0NpQWdJQ0J5WlcxdmRtVkZjWFZoZEdsdmJpaGxjU2tnZXdvZ0lDQWdJQ0JqYjI1emRDQmxjWE1nUFNCMGFHbHpMbVZ4ZFdGMGFXOXVjenNLSUNBZ0lDQWdZMjl1YzNRZ2FTQTlJR1Z4Y3k1cGJtUmxlRTltS0dWeEtUc0tDaUFnSUNBZ0lHbG1JQ2hwSUNFOVBTQXRNU2tnZXdvZ0lDQWdJQ0FnSUdWeGN5NXpjR3hwWTJVb2FTd2dNU2s3Q2lBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1FXUmtJR0ZzYkNCbGNYVmhkR2x2Ym5NS0lDQWdJQ0FxTHdvS0NpQWdJQ0J5WlcxdmRtVkJiR3hGY1hWaGRHbHZibk1vS1NCN0NpQWdJQ0FnSUhSb2FYTXVaWEYxWVhScGIyNXpMbXhsYm1kMGFDQTlJREE3Q2lBZ0lDQjlDZ29nSUgwS0NpQWdMeW9xQ2lBZ0lDb2dRMjl1YzNSeVlXbHVkQ0JsY1hWaGRHbHZiaUJIWVhWemN5MVRaV2xrWld3Z2MyOXNkbVZ5TGdvZ0lDQXFJRUIwYjJSdklGUm9aU0J6Y0c5dmF5QndZWEpoYldWMFpYSnpJSE5vYjNWc1pDQmlaU0J6Y0dWamFXWnBaV1FnWm05eUlHVmhZMmdnWTI5dWMzUnlZV2x1ZEN3Z2JtOTBJR2RzYjJKaGJHeDVMZ29nSUNBcUlFQnpaV1VnYUhSMGNITTZMeTkzZDNjNExtTnpMblZ0ZFM1elpTOXJkWEp6WlhJdk5VUldNRFU0TDFaVU1Ea3ZiR1ZqZEhWeVpYTXZjM0J2YjJ0dWIzUmxjeTV3WkdZS0lDQWdLaThLSUNCamJHRnpjeUJIVTFOdmJIWmxjaUJsZUhSbGJtUnpJRk52YkhabGNpQjdDaUFnSUNBdktpb0tJQ0FnSUNBcUlGUm9aU0J1ZFcxaVpYSWdiMllnYzI5c2RtVnlJR2wwWlhKaGRHbHZibk1nWkdWMFpYSnRhVzVsY3lCeGRXRnNhWFI1SUc5bUlIUm9aU0JqYjI1emRISmhhVzUwY3lCcGJpQjBhR1VnZDI5eWJHUXVDaUFnSUNBZ0tpQlVhR1VnYlc5eVpTQnBkR1Z5WVhScGIyNXpMQ0IwYUdVZ2JXOXlaU0JqYjNKeVpXTjBJSE5wYlhWc1lYUnBiMjR1SUUxdmNtVWdhWFJsY21GMGFXOXVjeUJ1WldWa0lHMXZjbVVnWTI5dGNIVjBZWFJwYjI1eklIUm9iM1ZuYUM0Z1NXWWdlVzkxSUdoaGRtVWdZU0JzWVhKblpTQm5jbUYyYVhSNUlHWnZjbU5sSUdsdUlIbHZkWElnZDI5eWJHUXNJSGx2ZFNCM2FXeHNJRzVsWldRZ2JXOXlaU0JwZEdWeVlYUnBiMjV6TGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJYYUdWdUlIUnZiR1Z5WVc1alpTQnBjeUJ5WldGamFHVmtMQ0IwYUdVZ2MzbHpkR1Z0SUdseklHRnpjM1Z0WldRZ2RHOGdZbVVnWTI5dWRtVnlaMlZrTGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJBZEc5a2J5QnlaVzF2ZG1VZ2RYTmxiR1Z6Y3lCamIyNXpkSEoxWTNSdmNnb2dJQ0FnSUNvdkNpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIc0tJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnZEdocGN5NXBkR1Z5WVhScGIyNXpJRDBnTVRBN0NpQWdJQ0FnSUhSb2FYTXVkRzlzWlhKaGJtTmxJRDBnTVdVdE56c0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVTI5c2RtVUtJQ0FnSUNBcUlFQnlaWFIxY200Z2JuVnRZbVZ5SUc5bUlHbDBaWEpoZEdsdmJuTWdjR1Z5Wm05eWJXVmtDaUFnSUNBZ0tpOEtDZ29nSUNBZ2MyOXNkbVVvWkhRc0lIZHZjbXhrS1NCN0NpQWdJQ0FnSUd4bGRDQnBkR1Z5SUQwZ01Ec0tJQ0FnSUNBZ1kyOXVjM1FnYldGNFNYUmxjaUE5SUhSb2FYTXVhWFJsY21GMGFXOXVjenNLSUNBZ0lDQWdZMjl1YzNRZ2RHOXNVM0YxWVhKbFpDQTlJSFJvYVhNdWRHOXNaWEpoYm1ObElDb2dkR2hwY3k1MGIyeGxjbUZ1WTJVN0NpQWdJQ0FnSUdOdmJuTjBJR1Z4ZFdGMGFXOXVjeUE5SUhSb2FYTXVaWEYxWVhScGIyNXpPd29nSUNBZ0lDQmpiMjV6ZENCT1pYRWdQU0JsY1hWaGRHbHZibk11YkdWdVozUm9Pd29nSUNBZ0lDQmpiMjV6ZENCaWIyUnBaWE1nUFNCM2IzSnNaQzVpYjJScFpYTTdDaUFnSUNBZ0lHTnZibk4wSUU1aWIyUnBaWE1nUFNCaWIyUnBaWE11YkdWdVozUm9Pd29nSUNBZ0lDQmpiMjV6ZENCb0lEMGdaSFE3Q2lBZ0lDQWdJR3hsZENCQ093b2dJQ0FnSUNCc1pYUWdhVzUyUXpzS0lDQWdJQ0FnYkdWMElHUmxiSFJoYkdGdFltUmhPd29nSUNBZ0lDQnNaWFFnWkdWc2RHRnNZVzFpWkdGVWIzUTdDaUFnSUNBZ0lHeGxkQ0JIVjJ4aGJXSmtZVHNLSUNBZ0lDQWdiR1YwSUd4aGJXSmtZV283SUM4dklGVndaR0YwWlNCemIyeDJaU0J0WVhOekNnb2dJQ0FnSUNCcFppQW9UbVZ4SUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnSVQwOUlFNWliMlJwWlhNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUNBZ1ltOWthV1Z6VzJsZExuVndaR0YwWlZOdmJIWmxUV0Z6YzFCeWIzQmxjblJwWlhNb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMGdMeThnVkdocGJtZHpJSFJvWVhRZ1pHOGdibTkwSUdOb1lXNW5aU0JrZFhKcGJtY2dhWFJsY21GMGFXOXVJR05oYmlCaVpTQmpiMjF3ZFhSbFpDQnZibU5sQ2dvS0lDQWdJQ0FnWTI5dWMzUWdhVzUyUTNNZ1BTQkhVMU52YkhabGNsOXpiMngyWlY5cGJuWkRjenNLSUNBZ0lDQWdZMjl1YzNRZ1FuTWdQU0JIVTFOdmJIWmxjbDl6YjJ4MlpWOUNjenNLSUNBZ0lDQWdZMjl1YzNRZ2JHRnRZbVJoSUQwZ1IxTlRiMngyWlhKZmMyOXNkbVZmYkdGdFltUmhPd29nSUNBZ0lDQnBiblpEY3k1c1pXNW5kR2dnUFNCT1pYRTdDaUFnSUNBZ0lFSnpMbXhsYm1kMGFDQTlJRTVsY1RzS0lDQWdJQ0FnYkdGdFltUmhMbXhsYm1kMGFDQTlJRTVsY1RzS0NpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUNFOVBTQk9aWEU3SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElHTWdQU0JsY1hWaGRHbHZibk5iYVYwN0NpQWdJQ0FnSUNBZ2JHRnRZbVJoVzJsZElEMGdNQzR3T3dvZ0lDQWdJQ0FnSUVKelcybGRJRDBnWXk1amIyMXdkWFJsUWlob0tUc0tJQ0FnSUNBZ0lDQnBiblpEYzF0cFhTQTlJREV1TUNBdklHTXVZMjl0Y0hWMFpVTW9LVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0U1bGNTQWhQVDBnTUNrZ2V3b2dJQ0FnSUNBZ0lDOHZJRkpsYzJWMElIWnNZVzFpWkdFS0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdUbUp2WkdsbGN6c2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaUlEMGdZbTlrYVdWelcybGRPd29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbXhoYldKa1lTQTlJR0l1ZG14aGJXSmtZVHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGRzWVcxaVpHRWdQU0JpTG5kc1lXMWlaR0U3Q2lBZ0lDQWdJQ0FnSUNCMmJHRnRZbVJoTG5ObGRDZ3dMQ0F3TENBd0tUc0tJQ0FnSUNBZ0lDQWdJSGRzWVcxaVpHRXVjMlYwS0RBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUgwZ0x5OGdTWFJsY21GMFpTQnZkbVZ5SUdWeGRXRjBhVzl1Y3dvS0NpQWdJQ0FnSUNBZ1ptOXlJQ2hwZEdWeUlEMGdNRHNnYVhSbGNpQWhQVDBnYldGNFNYUmxjanNnYVhSbGNpc3JLU0I3Q2lBZ0lDQWdJQ0FnSUNBdkx5QkJZMk4xYlhWc1lYUmxJSFJvWlNCMGIzUmhiQ0JsY25KdmNpQm1iM0lnWldGamFDQnBkR1Z5WVhScGIyNHVDaUFnSUNBZ0lDQWdJQ0JrWld4MFlXeGhiV0prWVZSdmRDQTlJREF1TURzS0NpQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnFJRDBnTURzZ2FpQWhQVDBnVG1WeE95QnFLeXNwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1l5QTlJR1Z4ZFdGMGFXOXVjMXRxWFRzZ0x5OGdRMjl0Y0hWMFpTQnBkR1Z5WVhScGIyNEtDaUFnSUNBZ0lDQWdJQ0FnSUVJZ1BTQkNjMXRxWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhVzUyUXlBOUlHbHVka056VzJwZE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWVcxaVpHRnFJRDBnYkdGdFltUmhXMnBkT3dvZ0lDQWdJQ0FnSUNBZ0lDQkhWMnhoYldKa1lTQTlJR011WTI5dGNIVjBaVWRYYkdGdFltUmhLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxiSFJoYkdGdFltUmhJRDBnYVc1MlF5QXFJQ2hDSUMwZ1IxZHNZVzFpWkdFZ0xTQmpMbVZ3Y3lBcUlHeGhiV0prWVdvcE95QXZMeUJEYkdGdGNDQnBaaUIzWlNCaGNtVWdibTkwSUhkcGRHaHBiaUIwYUdVZ2JXbHVMMjFoZUNCcGJuUmxjblpoYkFvS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGJXSmtZV29nS3lCa1pXeDBZV3hoYldKa1lTQThJR011YldsdVJtOXlZMlVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4MFlXeGhiV0prWVNBOUlHTXViV2x1Um05eVkyVWdMU0JzWVcxaVpHRnFPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHeGhiV0prWVdvZ0t5QmtaV3gwWVd4aGJXSmtZU0ErSUdNdWJXRjRSbTl5WTJVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeDBZV3hoYldKa1lTQTlJR011YldGNFJtOXlZMlVnTFNCc1lXMWlaR0ZxT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnSUNCc1lXMWlaR0ZiYWwwZ0t6MGdaR1ZzZEdGc1lXMWlaR0U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxiSFJoYkdGdFltUmhWRzkwSUNzOUlHUmxiSFJoYkdGdFltUmhJRDRnTUM0d0lEOGdaR1ZzZEdGc1lXMWlaR0VnT2lBdFpHVnNkR0ZzWVcxaVpHRTdJQzh2SUdGaWN5aGtaV3gwWVd4aGJXSmtZU2tLQ2lBZ0lDQWdJQ0FnSUNBZ0lHTXVZV1JrVkc5WGJHRnRZbVJoS0dSbGJIUmhiR0Z0WW1SaEtUc0tJQ0FnSUNBZ0lDQWdJSDBnTHk4Z1NXWWdkR2hsSUhSdmRHRnNJR1Z5Y205eUlHbHpJSE50WVd4c0lHVnViM1ZuYUNBdElITjBiM0FnYVhSbGNtRjBaUW9LQ2lBZ0lDQWdJQ0FnSUNCcFppQW9aR1ZzZEdGc1lXMWlaR0ZVYjNRZ0tpQmtaV3gwWVd4aGJXSmtZVlJ2ZENBOElIUnZiRk54ZFdGeVpXUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQXZMeUJCWkdRZ2NtVnpkV3gwSUhSdklIWmxiRzlqYVhSNUNnb0tJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQWhQVDBnVG1KdlpHbGxjenNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmlJRDBnWW05a2FXVnpXMmxkT3dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZGlBOUlHSXVkbVZzYjJOcGRIazdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjNJRDBnWWk1aGJtZDFiR0Z5Vm1Wc2IyTnBkSGs3Q2lBZ0lDQWdJQ0FnSUNCaUxuWnNZVzFpWkdFdWRtMTFiQ2hpTG14cGJtVmhja1poWTNSdmNpd2dZaTUyYkdGdFltUmhLVHNLSUNBZ0lDQWdJQ0FnSUhZdWRtRmtaQ2hpTG5ac1lXMWlaR0VzSUhZcE93b2dJQ0FnSUNBZ0lDQWdZaTUzYkdGdFltUmhMblp0ZFd3b1lpNWhibWQxYkdGeVJtRmpkRzl5TENCaUxuZHNZVzFpWkdFcE93b2dJQ0FnSUNBZ0lDQWdkeTUyWVdSa0tHSXVkMnhoYldKa1lTd2dkeWs3Q2lBZ0lDQWdJQ0FnZlNBdkx5QlRaWFFnZEdobElHQXViWFZzZEdsd2JHbGxjbUFnY0hKdmNHVnlkSGtnYjJZZ1pXRmphQ0JsY1hWaGRHbHZiZ29LQ2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0JsY1hWaGRHbHZibk11YkdWdVozUm9Pd29nSUNBZ0lDQWdJR052Ym5OMElHbHVka1IwSUQwZ01TQXZJR2c3Q2dvZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hzTFMwcElIc0tJQ0FnSUNBZ0lDQWdJR1Z4ZFdGMGFXOXVjMXRzWFM1dGRXeDBhWEJzYVdWeUlEMGdiR0Z0WW1SaFcyeGRJQ29nYVc1MlJIUTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQjlDZ29nSUNBZ0lDQnlaWFIxY200Z2FYUmxjanNLSUNBZ0lIMEtDaUFnZlNBdkx5QktkWE4wSUhSbGJYQnZjbUZ5ZVNCdWRXMWlaWElnYUc5c1pHVnljeUIwYUdGMElIZGxJSGRoYm5RZ2RHOGdjbVYxYzJVZ1pXRmphQ0JwZEdWeVlYUnBiMjR1Q2dvZ0lHTnZibk4wSUVkVFUyOXNkbVZ5WDNOdmJIWmxYMnhoYldKa1lTQTlJRnRkT3dvZ0lHTnZibk4wSUVkVFUyOXNkbVZ5WDNOdmJIWmxYMmx1ZGtOeklEMGdXMTA3Q2lBZ1kyOXVjM1FnUjFOVGIyeDJaWEpmYzI5c2RtVmZRbk1nUFNCYlhUc0tDaUFnTHlvcUNpQWdJQ29nVTNCc2FYUnpJSFJvWlNCbGNYVmhkR2x2Ym5NZ2FXNTBieUJwYzJ4aGJtUnpJR0Z1WkNCemIyeDJaWE1nZEdobGJTQnBibVJsY0dWdVpHVnVkR3g1TGlCRFlXNGdhVzF3Y205MlpTQndaWEptYjNKdFlXNWpaUzRLSUNBZ0tpOEtJQ0JqYkdGemN5QlRjR3hwZEZOdmJIWmxjaUJsZUhSbGJtUnpJRk52YkhabGNpQjdDaUFnSUNBdktpb0tJQ0FnSUNBcUlGUm9aU0J1ZFcxaVpYSWdiMllnYzI5c2RtVnlJR2wwWlhKaGRHbHZibk1nWkdWMFpYSnRhVzVsY3lCeGRXRnNhWFI1SUc5bUlIUm9aU0JqYjI1emRISmhhVzUwY3lCcGJpQjBhR1VnZDI5eWJHUXVJRlJvWlNCdGIzSmxJR2wwWlhKaGRHbHZibk1zSUhSb1pTQnRiM0psSUdOdmNuSmxZM1FnYzJsdGRXeGhkR2x2Ymk0Z1RXOXlaU0JwZEdWeVlYUnBiMjV6SUc1bFpXUWdiVzl5WlNCamIyMXdkWFJoZEdsdmJuTWdkR2h2ZFdkb0xpQkpaaUI1YjNVZ2FHRjJaU0JoSUd4aGNtZGxJR2R5WVhacGRIa2dabTl5WTJVZ2FXNGdlVzkxY2lCM2IzSnNaQ3dnZVc5MUlIZHBiR3dnYm1WbFpDQnRiM0psSUdsMFpYSmhkR2x2Ym5NdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZkb1pXNGdkRzlzWlhKaGJtTmxJR2x6SUhKbFlXTm9aV1FzSUhSb1pTQnplWE4wWlcwZ2FYTWdZWE56ZFcxbFpDQjBieUJpWlNCamIyNTJaWEpuWldRdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvZ2MzVmljMjlzZG1WeUlDb3ZDaUFnSUNCamIyNXpkSEoxWTNSdmNpaHpkV0p6YjJ4MlpYSXBJSHNLSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ2RHaHBjeTVwZEdWeVlYUnBiMjV6SUQwZ01UQTdDaUFnSUNBZ0lIUm9hWE11ZEc5c1pYSmhibU5sSUQwZ01XVXROenNLSUNBZ0lDQWdkR2hwY3k1emRXSnpiMngyWlhJZ1BTQnpkV0p6YjJ4MlpYSTdDaUFnSUNBZ0lIUm9hWE11Ym05a1pYTWdQU0JiWFRzS0lDQWdJQ0FnZEdocGN5NXViMlJsVUc5dmJDQTlJRnRkT3lBdkx5QkRjbVZoZEdVZ2JtVmxaR1ZrSUc1dlpHVnpMQ0J5WlhWelpTQnBaaUJ3YjNOemFXSnNaUW9LSUNBZ0lDQWdkMmhwYkdVZ0tIUm9hWE11Ym05a1pWQnZiMnd1YkdWdVozUm9JRHdnTVRJNEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dWIyUmxVRzl2YkM1d2RYTm9LSFJvYVhNdVkzSmxZWFJsVG05a1pTZ3BLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCamNtVmhkR1ZPYjJSbENpQWdJQ0FnS2k4S0Nnb2dJQ0FnWTNKbFlYUmxUbTlrWlNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCaWIyUjVPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lHTm9hV3hrY21WdU9pQmJYU3dLSUNBZ0lDQWdJQ0JsY1hNNklGdGRMQW9nSUNBZ0lDQWdJSFpwYzJsMFpXUTZJR1poYkhObENpQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk52YkhabElIUm9aU0J6ZFdKemVYTjBaVzF6Q2lBZ0lDQWdLaUJBY21WMGRYSnVJRzUxYldKbGNpQnZaaUJwZEdWeVlYUnBiMjV6SUhCbGNtWnZjbTFsWkFvZ0lDQWdJQ292Q2dvS0lDQWdJSE52YkhabEtHUjBMQ0IzYjNKc1pDa2dld29nSUNBZ0lDQmpiMjV6ZENCdWIyUmxjeUE5SUZOd2JHbDBVMjlzZG1WeVgzTnZiSFpsWDI1dlpHVnpPd29nSUNBZ0lDQmpiMjV6ZENCdWIyUmxVRzl2YkNBOUlIUm9hWE11Ym05a1pWQnZiMnc3Q2lBZ0lDQWdJR052Ym5OMElHSnZaR2xsY3lBOUlIZHZjbXhrTG1KdlpHbGxjenNLSUNBZ0lDQWdZMjl1YzNRZ1pYRjFZWFJwYjI1eklEMGdkR2hwY3k1bGNYVmhkR2x2Ym5NN0NpQWdJQ0FnSUdOdmJuTjBJRTVsY1NBOUlHVnhkV0YwYVc5dWN5NXNaVzVuZEdnN0NpQWdJQ0FnSUdOdmJuTjBJRTVpYjJScFpYTWdQU0JpYjJScFpYTXViR1Z1WjNSb093b2dJQ0FnSUNCamIyNXpkQ0J6ZFdKemIyeDJaWElnUFNCMGFHbHpMbk4xWW5OdmJIWmxjanNnTHk4Z1EzSmxZWFJsSUc1bFpXUmxaQ0J1YjJSbGN5d2djbVYxYzJVZ2FXWWdjRzl6YzJsaWJHVUtDaUFnSUNBZ0lIZG9hV3hsSUNodWIyUmxVRzl2YkM1c1pXNW5kR2dnUENCT1ltOWthV1Z6S1NCN0NpQWdJQ0FnSUNBZ2JtOWtaVkJ2YjJ3dWNIVnphQ2gwYUdsekxtTnlaV0YwWlU1dlpHVW9LU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJRzV2WkdWekxteGxibWQwYUNBOUlFNWliMlJwWlhNN0Nnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElFNWliMlJwWlhNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUc1dlpHVnpXMmxkSUQwZ2JtOWtaVkJ2YjJ4YmFWMDdDaUFnSUNBZ0lIMGdMeThnVW1WelpYUWdibTlrWlNCMllXeDFaWE1LQ2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0FoUFQwZ1RtSnZaR2xsY3pzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdibTlrWlNBOUlHNXZaR1Z6VzJsZE93b2dJQ0FnSUNBZ0lHNXZaR1V1WW05a2VTQTlJR0p2WkdsbGMxdHBYVHNLSUNBZ0lDQWdJQ0J1YjJSbExtTm9hV3hrY21WdUxteGxibWQwYUNBOUlEQTdDaUFnSUNBZ0lDQWdibTlrWlM1bGNYTXViR1Z1WjNSb0lEMGdNRHNLSUNBZ0lDQWdJQ0J1YjJSbExuWnBjMmwwWldRZ1BTQm1ZV3h6WlRzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYXlBOUlEQTdJR3NnSVQwOUlFNWxjVHNnYXlzcktTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1pYRWdQU0JsY1hWaGRHbHZibk5iYTEwN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYVNBOUlHSnZaR2xsY3k1cGJtUmxlRTltS0dWeExtSnBLVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnFJRDBnWW05a2FXVnpMbWx1WkdWNFQyWW9aWEV1WW1vcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUc1cElEMGdibTlrWlhOYmFWMDdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2Jtb2dQU0J1YjJSbGMxdHFYVHNLSUNBZ0lDQWdJQ0J1YVM1amFHbHNaSEpsYmk1d2RYTm9LRzVxS1RzS0lDQWdJQ0FnSUNCdWFTNWxjWE11Y0hWemFDaGxjU2s3Q2lBZ0lDQWdJQ0FnYm1vdVkyaHBiR1J5Wlc0dWNIVnphQ2h1YVNrN0NpQWdJQ0FnSUNBZ2Jtb3VaWEZ6TG5CMWMyZ29aWEVwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JzWlhRZ1kyaHBiR1E3Q2lBZ0lDQWdJR3hsZENCdUlEMGdNRHNLSUNBZ0lDQWdiR1YwSUdWeGN5QTlJRk53YkdsMFUyOXNkbVZ5WDNOdmJIWmxYMlZ4Y3pzS0lDQWdJQ0FnYzNWaWMyOXNkbVZ5TG5SdmJHVnlZVzVqWlNBOUlIUm9hWE11ZEc5c1pYSmhibU5sT3dvZ0lDQWdJQ0J6ZFdKemIyeDJaWEl1YVhSbGNtRjBhVzl1Y3lBOUlIUm9hWE11YVhSbGNtRjBhVzl1Y3pzS0lDQWdJQ0FnWTI5dWMzUWdaSFZ0YlhsWGIzSnNaQ0E5SUZOd2JHbDBVMjlzZG1WeVgzTnZiSFpsWDJSMWJXMTVWMjl5YkdRN0Nnb2dJQ0FnSUNCM2FHbHNaU0FvWTJocGJHUWdQU0JuWlhSVmJuWnBjMmwwWldST2IyUmxLRzV2WkdWektTa2dld29nSUNBZ0lDQWdJR1Z4Y3k1c1pXNW5kR2dnUFNBd093b2dJQ0FnSUNBZ0lHUjFiVzE1VjI5eWJHUXVZbTlrYVdWekxteGxibWQwYUNBOUlEQTdDaUFnSUNBZ0lDQWdZbVp6S0dOb2FXeGtMQ0IyYVhOcGRFWjFibU1zSUdSMWJXMTVWMjl5YkdRdVltOWthV1Z6TENCbGNYTXBPd29nSUNBZ0lDQWdJR052Ym5OMElFNWxjWE1nUFNCbGNYTXViR1Z1WjNSb093b2dJQ0FnSUNBZ0lHVnhjeUE5SUdWeGN5NXpiM0owS0hOdmNuUkNlVWxrS1RzS0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ0lUMDlJRTVsY1hNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUNBZ2MzVmljMjlzZG1WeUxtRmtaRVZ4ZFdGMGFXOXVLR1Z4YzF0cFhTazdDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0J6ZFdKemIyeDJaWEl1YzI5c2RtVW9aSFFzSUdSMWJXMTVWMjl5YkdRcE93b2dJQ0FnSUNBZ0lITjFZbk52YkhabGNpNXlaVzF2ZG1WQmJHeEZjWFZoZEdsdmJuTW9LVHNLSUNBZ0lDQWdJQ0J1S3lzN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhKbGRIVnliaUJ1T3dvZ0lDQWdmUW9LSUNCOUlDOHZJRkpsZEhWeWJuTWdkR2hsSUc1MWJXSmxjaUJ2WmlCemRXSnplWE4wWlcxekNnb2dJR052Ym5OMElGTndiR2wwVTI5c2RtVnlYM052YkhabFgyNXZaR1Z6SUQwZ1cxMDdJQzh2SUVGc2JDQmhiR3h2WTJGMFpXUWdibTlrWlNCdlltcGxZM1J6Q2dvZ0lHTnZibk4wSUZOd2JHbDBVMjlzZG1WeVgzTnZiSFpsWDJWeGN5QTlJRnRkT3lBdkx5QlVaVzF3SUdGeWNtRjVDZ29nSUdOdmJuTjBJRk53YkdsMFUyOXNkbVZ5WDNOdmJIWmxYMlIxYlcxNVYyOXliR1FnUFNCN0NpQWdJQ0JpYjJScFpYTTZJRnRkQ2lBZ2ZUc2dMeThnVkdWdGNDQnZZbXBsWTNRS0NpQWdZMjl1YzNRZ1UxUkJWRWxESUQwZ1FtOWtlUzVUVkVGVVNVTTdDZ29nSUdaMWJtTjBhVzl1SUdkbGRGVnVkbWx6YVhSbFpFNXZaR1VvYm05a1pYTXBJSHNLSUNBZ0lHTnZibk4wSUU1dWIyUmxjeUE5SUc1dlpHVnpMbXhsYm1kMGFEc0tDaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdUbTV2WkdWek95QnBLeXNwSUhzS0lDQWdJQ0FnWTI5dWMzUWdibTlrWlNBOUlHNXZaR1Z6VzJsZE93b0tJQ0FnSUNBZ2FXWWdLQ0Z1YjJSbExuWnBjMmwwWldRZ0ppWWdJU2h1YjJSbExtSnZaSGt1ZEhsd1pTQW1JRk5VUVZSSlF5a3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibTlrWlRzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9LSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNCOUNnb2dJR052Ym5OMElIRjFaWFZsSUQwZ1cxMDdDZ29nSUdaMWJtTjBhVzl1SUdKbWN5aHliMjkwTENCMmFYTnBkRVoxYm1Nc0lHSmtjeXdnWlhGektTQjdDaUFnSUNCeGRXVjFaUzV3ZFhOb0tISnZiM1FwT3dvZ0lDQWdjbTl2ZEM1MmFYTnBkR1ZrSUQwZ2RISjFaVHNLSUNBZ0lIWnBjMmwwUm5WdVl5aHliMjkwTENCaVpITXNJR1Z4Y3lrN0Nnb2dJQ0FnZDJocGJHVWdLSEYxWlhWbExteGxibWQwYUNrZ2V3b2dJQ0FnSUNCamIyNXpkQ0J1YjJSbElEMGdjWFZsZFdVdWNHOXdLQ2s3SUM4dklFeHZiM0FnYjNabGNpQjFiblpwYzJsMFpXUWdZMmhwYkdRZ2JtOWtaWE1LQ2lBZ0lDQWdJR3hsZENCamFHbHNaRHNLQ2lBZ0lDQWdJSGRvYVd4bElDaGphR2xzWkNBOUlHZGxkRlZ1ZG1semFYUmxaRTV2WkdVb2JtOWtaUzVqYUdsc1pISmxiaWtwSUhzS0lDQWdJQ0FnSUNCamFHbHNaQzUyYVhOcGRHVmtJRDBnZEhKMVpUc0tJQ0FnSUNBZ0lDQjJhWE5wZEVaMWJtTW9ZMmhwYkdRc0lHSmtjeXdnWlhGektUc0tJQ0FnSUNBZ0lDQnhkV1YxWlM1d2RYTm9LR05vYVd4a0tUc0tJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lIMEtDaUFnWm5WdVkzUnBiMjRnZG1semFYUkdkVzVqS0c1dlpHVXNJR0prY3l3Z1pYRnpLU0I3Q2lBZ0lDQmlaSE11Y0hWemFDaHViMlJsTG1KdlpIa3BPd29nSUNBZ1kyOXVjM1FnVG1WeGN5QTlJRzV2WkdVdVpYRnpMbXhsYm1kMGFEc0tDaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdUbVZ4Y3pzZ2FTc3JLU0I3Q2lBZ0lDQWdJR052Ym5OMElHVnhJRDBnYm05a1pTNWxjWE5iYVYwN0Nnb2dJQ0FnSUNCcFppQW9JV1Z4Y3k1cGJtTnNkV1JsY3lobGNTa3BJSHNLSUNBZ0lDQWdJQ0JsY1hNdWNIVnphQ2hsY1NrN0NpQWdJQ0FnSUgwS0lDQWdJSDBLSUNCOUNnb2dJR1oxYm1OMGFXOXVJSE52Y25SQ2VVbGtLR0VzSUdJcElIc0tJQ0FnSUhKbGRIVnliaUJpTG1sa0lDMGdZUzVwWkRzS0lDQjlDZ29nSUM4cUtnb2dJQ0FxSUVadmNpQndiMjlzYVc1bklHOWlhbVZqZEhNZ2RHaGhkQ0JqWVc0Z1ltVWdjbVYxYzJWa0xnb2dJQ0FxTHdvZ0lHTnNZWE56SUZCdmIyd2dld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3Q2lBZ0lDQWdJSFJvYVhNdWIySnFaV04wY3lBOUlGdGRPd29nSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0JQWW1wbFkzUTdDaUFnSUNCOUNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCU1pXeGxZWE5sSUdGdUlHOWlhbVZqZENCaFpuUmxjaUIxYzJVS0lDQWdJQ0FxTHdvZ0lDQWdjbVZzWldGelpTZ3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ1RtRnlaM01nUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnSVQwOUlFNWhjbWR6T3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtOWlhbVZqZEhNdWNIVnphQ2hwSUR3Z01DQjhmQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHc5SUdrZ1B5QjFibVJsWm1sdVpXUWdPaUJoY21kMWJXVnVkSE5iYVYwcE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUjJWMElHRnVJRzlpYW1WamRBb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRDZ3BJSHNLSUNBZ0lDQWdhV1lnS0hSb2FYTXViMkpxWldOMGN5NXNaVzVuZEdnZ1BUMDlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjV6ZEhKMVkzUlBZbXBsWTNRb0tUc0tJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXZZbXBsWTNSekxuQnZjQ2dwT3dvZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlFTnZibk4wY25WamRDQmhiaUJ2WW1wbFkzUXVJRk5vYjNWc1pDQmlaU0JwYlhCc1pXMWxiblJsWkNCcGJpQmxZV05vSUhOMVltTnNZWE56TGdvZ0lDQWdJQ292Q2dvS0lDQWdJR052Ym5OMGNuVmpkRTlpYW1WamRDZ3BJSHNLSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpiMjV6ZEhKMVkzUlBZbXBsWTNRb0tTQnViM1FnYVcxd2JHVnRaVzUwWldRZ2FXNGdkR2hwY3lCUWIyOXNJSE4xWW1Oc1lYTnpJSGxsZENFbktUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUUhKbGRIVnliaUJUWld4bUxDQm1iM0lnWTJoaGFXNXBibWNLSUNBZ0lDQXFMd29LQ2lBZ0lDQnlaWE5wZW1Vb2MybDZaU2tnZXdvZ0lDQWdJQ0JqYjI1emRDQnZZbXBsWTNSeklEMGdkR2hwY3k1dlltcGxZM1J6T3dvS0lDQWdJQ0FnZDJocGJHVWdLRzlpYW1WamRITXViR1Z1WjNSb0lENGdjMmw2WlNrZ2V3b2dJQ0FnSUNBZ0lHOWlhbVZqZEhNdWNHOXdLQ2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSGRvYVd4bElDaHZZbXBsWTNSekxteGxibWQwYUNBOElITnBlbVVwSUhzS0lDQWdJQ0FnSUNCdlltcGxZM1J6TG5CMWMyZ29kR2hwY3k1amIyNXpkSEoxWTNSUFltcGxZM1FvS1NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvS0lDQjlDZ29nSUM4cUtnb2dJQ0FxSUZabFl6TlFiMjlzQ2lBZ0lDb3ZDZ29nSUdOc1lYTnpJRlpsWXpOUWIyOXNJR1Y0ZEdWdVpITWdVRzl2YkNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIc0tJQ0FnSUNBZ2MzVndaWElvTGk0dVlYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdWbVZqTXpzS0lDQWdJSDBLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRU52Ym5OMGNuVmpkQ0JoSUhabFkzUnZjZ29nSUNBZ0lDb3ZDaUFnSUNCamIyNXpkSEoxWTNSUFltcGxZM1FvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdmUW9LSUNCOUNnb2dJQzh2SUU1aGJXbHVaeUJ5ZFd4bE9pQmlZWE5sWkNCdlppQjBhR1VnYjNKa1pYSWdhVzRnVTBoQlVFVmZWRmxRUlZNc0NpQWdMeThnZEdobElHWnBjbk4wSUhCaGNuUWdiMllnZEdobElHMWxkR2h2WkNCcGN5Qm1iM0p0WldRZ1lua2dkR2hsQ2lBZ0x5OGdjMmhoY0dVZ2RIbHdaU0IwYUdGMElHTnZiV1Z6SUdKbFptOXlaU3dnYVc0Z2RHaGxJSE5sWTI5dVpDQndZWEowQ2lBZ0x5OGdkR2hsY21VZ2FYTWdkR2hsSUhOb1lYQmxJSFI1Y0dVZ2RHaGhkQ0JqYjIxbGN5QmhablJsY2lCcGJpQjBhR1VnVTBoQlVFVmZWRmxRUlZNZ2JHbHpkQW9nSUdOdmJuTjBJRU5QVEV4SlUwbFBUbDlVV1ZCRlV5QTlJSHNLSUNBZ0lITndhR1Z5WlZOd2FHVnlaVG9nVTJoaGNHVXVkSGx3WlhNdVUxQklSVkpGTEFvZ0lDQWdjM0JvWlhKbFVHeGhibVU2SUZOb1lYQmxMblI1Y0dWekxsTlFTRVZTUlNCOElGTm9ZWEJsTG5SNWNHVnpMbEJNUVU1RkxBb2dJQ0FnWW05NFFtOTRPaUJUYUdGd1pTNTBlWEJsY3k1Q1QxZ2dmQ0JUYUdGd1pTNTBlWEJsY3k1Q1QxZ3NDaUFnSUNCemNHaGxjbVZDYjNnNklGTm9ZWEJsTG5SNWNHVnpMbE5RU0VWU1JTQjhJRk5vWVhCbExuUjVjR1Z6TGtKUFdDd0tJQ0FnSUhCc1lXNWxRbTk0T2lCVGFHRndaUzUwZVhCbGN5NVFURUZPUlNCOElGTm9ZWEJsTG5SNWNHVnpMa0pQV0N3S0lDQWdJR052Ym5abGVFTnZiblpsZURvZ1UyaGhjR1V1ZEhsd1pYTXVRMDlPVmtWWVVFOU1XVWhGUkZKUFRpd0tJQ0FnSUhOd2FHVnlaVU52Ym5abGVEb2dVMmhoY0dVdWRIbHdaWE11VTFCSVJWSkZJSHdnVTJoaGNHVXVkSGx3WlhNdVEwOU9Wa1ZZVUU5TVdVaEZSRkpQVGl3S0lDQWdJSEJzWVc1bFEyOXVkbVY0T2lCVGFHRndaUzUwZVhCbGN5NVFURUZPUlNCOElGTm9ZWEJsTG5SNWNHVnpMa05QVGxaRldGQlBURmxJUlVSU1QwNHNDaUFnSUNCaWIzaERiMjUyWlhnNklGTm9ZWEJsTG5SNWNHVnpMa0pQV0NCOElGTm9ZWEJsTG5SNWNHVnpMa05QVGxaRldGQlBURmxJUlVSU1QwNHNDaUFnSUNCemNHaGxjbVZJWldsbmFIUm1hV1ZzWkRvZ1UyaGhjR1V1ZEhsd1pYTXVVMUJJUlZKRklId2dVMmhoY0dVdWRIbHdaWE11U0VWSlIwaFVSa2xGVEVRc0NpQWdJQ0JpYjNoSVpXbG5hSFJtYVdWc1pEb2dVMmhoY0dVdWRIbHdaWE11UWs5WUlId2dVMmhoY0dVdWRIbHdaWE11U0VWSlIwaFVSa2xGVEVRc0NpQWdJQ0JqYjI1MlpYaElaV2xuYUhSbWFXVnNaRG9nVTJoaGNHVXVkSGx3WlhNdVEwOU9Wa1ZZVUU5TVdVaEZSRkpQVGlCOElGTm9ZWEJsTG5SNWNHVnpMa2hGU1VkSVZFWkpSVXhFTEFvZ0lDQWdjM0JvWlhKbFVHRnlkR2xqYkdVNklGTm9ZWEJsTG5SNWNHVnpMbEJCVWxSSlEweEZJSHdnVTJoaGNHVXVkSGx3WlhNdVUxQklSVkpGTEFvZ0lDQWdjR3hoYm1WUVlYSjBhV05zWlRvZ1UyaGhjR1V1ZEhsd1pYTXVVRXhCVGtVZ2ZDQlRhR0Z3WlM1MGVYQmxjeTVRUVZKVVNVTk1SU3dLSUNBZ0lHSnZlRkJoY25ScFkyeGxPaUJUYUdGd1pTNTBlWEJsY3k1Q1QxZ2dmQ0JUYUdGd1pTNTBlWEJsY3k1UVFWSlVTVU5NUlN3S0lDQWdJR052Ym5abGVGQmhjblJwWTJ4bE9pQlRhR0Z3WlM1MGVYQmxjeTVRUVZKVVNVTk1SU0I4SUZOb1lYQmxMblI1Y0dWekxrTlBUbFpGV0ZCUFRGbElSVVJTVDA0c0NpQWdJQ0JqZVd4cGJtUmxja041YkdsdVpHVnlPaUJUYUdGd1pTNTBlWEJsY3k1RFdVeEpUa1JGVWl3S0lDQWdJSE53YUdWeVpVTjViR2x1WkdWeU9pQlRhR0Z3WlM1MGVYQmxjeTVUVUVoRlVrVWdmQ0JUYUdGd1pTNTBlWEJsY3k1RFdVeEpUa1JGVWl3S0lDQWdJSEJzWVc1bFEzbHNhVzVrWlhJNklGTm9ZWEJsTG5SNWNHVnpMbEJNUVU1RklId2dVMmhoY0dVdWRIbHdaWE11UTFsTVNVNUVSVklzQ2lBZ0lDQmliM2hEZVd4cGJtUmxjam9nVTJoaGNHVXVkSGx3WlhNdVFrOVlJSHdnVTJoaGNHVXVkSGx3WlhNdVExbE1TVTVFUlZJc0NpQWdJQ0JqYjI1MlpYaERlV3hwYm1SbGNqb2dVMmhoY0dVdWRIbHdaWE11UTA5T1ZrVllVRTlNV1VoRlJGSlBUaUI4SUZOb1lYQmxMblI1Y0dWekxrTlpURWxPUkVWU0xBb2dJQ0FnYUdWcFoyaDBabWxsYkdSRGVXeHBibVJsY2pvZ1UyaGhjR1V1ZEhsd1pYTXVTRVZKUjBoVVJrbEZURVFnZkNCVGFHRndaUzUwZVhCbGN5NURXVXhKVGtSRlVpd0tJQ0FnSUhCaGNuUnBZMnhsUTNsc2FXNWtaWEk2SUZOb1lYQmxMblI1Y0dWekxsQkJVbFJKUTB4RklId2dVMmhoY0dVdWRIbHdaWE11UTFsTVNVNUVSVklzQ2lBZ0lDQnpjR2hsY21WVWNtbHRaWE5vT2lCVGFHRndaUzUwZVhCbGN5NVRVRWhGVWtVZ2ZDQlRhR0Z3WlM1MGVYQmxjeTVVVWtsTlJWTklMQW9nSUNBZ2NHeGhibVZVY21sdFpYTm9PaUJUYUdGd1pTNTBlWEJsY3k1UVRFRk9SU0I4SUZOb1lYQmxMblI1Y0dWekxsUlNTVTFGVTBnS0lDQjlPd29LSUNBdktpb0tJQ0FnS2lCSVpXeHdaWElnWTJ4aGMzTWdabTl5SUhSb1pTQlhiM0pzWkM0Z1IyVnVaWEpoZEdWeklFTnZiblJoWTNSRmNYVmhkR2x2Ym5NdUNpQWdJQ29nUUhSdlpHOGdVM0JvWlhKbExVTnZiblpsZUZCdmJIbG9aV1J5YjI0Z1kyOXVkR0ZqZEhNS0lDQWdLaUJBZEc5a2J5QkRiMjUwWVdOMElISmxaSFZqZEdsdmJnb2dJQ0FxSUVCMGIyUnZJSE5vYjNWc1pDQnRiM1psSUcxbGRHaHZaSE1nZEc4Z2NISnZkRzkwZVhCbENpQWdJQ292Q2lBZ1kyeGhjM01nVG1GeWNtOTNjR2hoYzJVZ2V3b2dJQ0FnTHlvcUNpQWdJQ0FnS2lCSmJuUmxjbTVoYkNCemRHOXlZV2RsSUc5bUlIQnZiMnhsWkNCamIyNTBZV04wSUhCdmFXNTBjeTRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVRzl2YkdWa0lIWmxZM1J2Y25NdUNpQWdJQ0FnS2k4S0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG5Od2FHVnlaVk53YUdWeVpWMG9LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5Od2FHVnlaVk53YUdWeVpUc0tJQ0FnSUgwS0NpQWdJQ0JuWlhRZ1cwTlBURXhKVTBsUFRsOVVXVkJGVXk1emNHaGxjbVZRYkdGdVpWMG9LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5Od2FHVnlaVkJzWVc1bE93b2dJQ0FnZlFvS0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG1KdmVFSnZlRjBvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtSnZlRUp2ZURzS0lDQWdJSDBLQ2lBZ0lDQm5aWFFnVzBOUFRFeEpVMGxQVGw5VVdWQkZVeTV6Y0dobGNtVkNiM2hkS0NrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpjR2hsY21WQ2IzZzdDaUFnSUNCOUNnb2dJQ0FnWjJWMElGdERUMHhNU1ZOSlQwNWZWRmxRUlZNdWNHeGhibVZDYjNoZEtDa2dld29nSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3YkdGdVpVSnZlRHNLSUNBZ0lIMEtDaUFnSUNCblpYUWdXME5QVEV4SlUwbFBUbDlVV1ZCRlV5NWpiMjUyWlhoRGIyNTJaWGhkS0NrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjUyWlhoRGIyNTJaWGc3Q2lBZ0lDQjlDZ29nSUNBZ1oyVjBJRnREVDB4TVNWTkpUMDVmVkZsUVJWTXVjM0JvWlhKbFEyOXVkbVY0WFNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM0JvWlhKbFEyOXVkbVY0T3dvZ0lDQWdmUW9LSUNBZ0lHZGxkQ0JiUTA5TVRFbFRTVTlPWDFSWlVFVlRMbkJzWVc1bFEyOXVkbVY0WFNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR3hoYm1WRGIyNTJaWGc3Q2lBZ0lDQjlDZ29nSUNBZ1oyVjBJRnREVDB4TVNWTkpUMDVmVkZsUVJWTXVZbTk0UTI5dWRtVjRYU2dwSUhzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVltOTRRMjl1ZG1WNE93b2dJQ0FnZlFvS0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG5Od2FHVnlaVWhsYVdkb2RHWnBaV3hrWFNncElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM0JvWlhKbFNHVnBaMmgwWm1sbGJHUTdDaUFnSUNCOUNnb2dJQ0FnWjJWMElGdERUMHhNU1ZOSlQwNWZWRmxRUlZNdVltOTRTR1ZwWjJoMFptbGxiR1JkS0NrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWliM2hJWldsbmFIUm1hV1ZzWkRzS0lDQWdJSDBLQ2lBZ0lDQm5aWFFnVzBOUFRFeEpVMGxQVGw5VVdWQkZVeTVqYjI1MlpYaElaV2xuYUhSbWFXVnNaRjBvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnZiblpsZUVobGFXZG9kR1pwWld4a093b2dJQ0FnZlFvS0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG5Od2FHVnlaVkJoY25ScFkyeGxYU2dwSUhzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzQm9aWEpsVUdGeWRHbGpiR1U3Q2lBZ0lDQjlDZ29nSUNBZ1oyVjBJRnREVDB4TVNWTkpUMDVmVkZsUVJWTXVjR3hoYm1WUVlYSjBhV05zWlYwb0tTQjdDaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJzWVc1bFVHRnlkR2xqYkdVN0NpQWdJQ0I5Q2dvZ0lDQWdaMlYwSUZ0RFQweE1TVk5KVDA1ZlZGbFFSVk11WW05NFVHRnlkR2xqYkdWZEtDa2dld29nSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVpYjNoUVlYSjBhV05zWlRzS0lDQWdJSDBLQ2lBZ0lDQm5aWFFnVzBOUFRFeEpVMGxQVGw5VVdWQkZVeTVqYjI1MlpYaFFZWEowYVdOc1pWMG9LU0I3Q2lBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJuWmxlRkJoY25ScFkyeGxPd29nSUNBZ2ZRb0tJQ0FnSUdkbGRDQmJRMDlNVEVsVFNVOU9YMVJaVUVWVExtTjViR2x1WkdWeVEzbHNhVzVrWlhKZEtDa2dld29nSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYjI1MlpYaERiMjUyWlhnN0NpQWdJQ0I5Q2dvZ0lDQWdaMlYwSUZ0RFQweE1TVk5KVDA1ZlZGbFFSVk11YzNCb1pYSmxRM2xzYVc1a1pYSmRLQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emNHaGxjbVZEYjI1MlpYZzdDaUFnSUNCOUNnb2dJQ0FnWjJWMElGdERUMHhNU1ZOSlQwNWZWRmxRUlZNdWNHeGhibVZEZVd4cGJtUmxjbDBvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnNZVzVsUTI5dWRtVjRPd29nSUNBZ2ZRb0tJQ0FnSUdkbGRDQmJRMDlNVEVsVFNVOU9YMVJaVUVWVExtSnZlRU41YkdsdVpHVnlYU2dwSUhzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVltOTRRMjl1ZG1WNE93b2dJQ0FnZlFvS0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG1OdmJuWmxlRU41YkdsdVpHVnlYU2dwSUhzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVkbVY0UTI5dWRtVjRPd29nSUNBZ2ZRb0tJQ0FnSUdkbGRDQmJRMDlNVEVsVFNVOU9YMVJaVUVWVExtaGxhV2RvZEdacFpXeGtRM2xzYVc1a1pYSmRLQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1b1pXbG5hSFJtYVdWc1pFTjViR2x1WkdWeU93b2dJQ0FnZlFvS0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG5CaGNuUnBZMnhsUTNsc2FXNWtaWEpkS0NrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXdZWEowYVdOc1pVTjViR2x1WkdWeU93b2dJQ0FnZlFvS0lDQWdJR2RsZENCYlEwOU1URWxUU1U5T1gxUlpVRVZUTG5Od2FHVnlaVlJ5YVcxbGMyaGRLQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emNHaGxjbVZVY21sdFpYTm9Pd29nSUNBZ2ZRb0tJQ0FnSUdkbGRDQmJRMDlNVEVsVFNVOU9YMVJaVUVWVExuQnNZVzVsVkhKcGJXVnphRjBvS1NCN0NpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnNZVzVsVkhKcGJXVnphRHNLSUNBZ0lIMGdMeThnWjJWMElGdERUMHhNU1ZOSlQwNWZWRmxRUlZNdVkyOXVkbVY0VkhKcGJXVnphRjBvS1NCN0NpQWdJQ0F2THlBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Ym5abGVGUnlhVzFsYzJnS0lDQWdJQzh2SUgwS0Nnb2dJQ0FnWTI5dWMzUnlkV04wYjNJb2QyOXliR1FwSUhzS0lDQWdJQ0FnZEdocGN5NWpiMjUwWVdOMFVHOXBiblJRYjI5c0lEMGdXMTA3Q2lBZ0lDQWdJSFJvYVhNdVpuSnBZM1JwYjI1RmNYVmhkR2x2YmxCdmIyd2dQU0JiWFRzS0lDQWdJQ0FnZEdocGN5NXlaWE4xYkhRZ1BTQmJYVHNLSUNBZ0lDQWdkR2hwY3k1bWNtbGpkR2x2YmxKbGMzVnNkQ0E5SUZ0ZE93b2dJQ0FnSUNCMGFHbHpMbll6Y0c5dmJDQTlJRzVsZHlCV1pXTXpVRzl2YkNncE93b2dJQ0FnSUNCMGFHbHpMbmR2Y214a0lEMGdkMjl5YkdRN0NpQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRFTnZiblJoWTNSTllYUmxjbWxoYkNBOUlIZHZjbXhrTG1SbFptRjFiSFJEYjI1MFlXTjBUV0YwWlhKcFlXdzdDaUFnSUNBZ0lIUm9hWE11Wlc1aFlteGxSbkpwWTNScGIyNVNaV1IxWTNScGIyNGdQU0JtWVd4elpUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVFdGclpTQmhJR052Ym5SaFkzUWdiMkpxWldOMExDQmllU0IxYzJsdVp5QjBhR1VnYVc1MFpYSnVZV3dnY0c5dmJDQnZjaUJqY21WaGRHbHVaeUJoSUc1bGR5QnZibVV1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdZM0psWVhSbFEyOXVkR0ZqZEVWeGRXRjBhVzl1S0dKcExDQmlhaXdnYzJrc0lITnFMQ0J2ZG1WeWNtbGtaVk5vWVhCbFFTd2diM1psY25KcFpHVlRhR0Z3WlVJcElIc0tJQ0FnSUNBZ2JHVjBJR003Q2dvZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYjI1MFlXTjBVRzlwYm5SUWIyOXNMbXhsYm1kMGFDa2dld29nSUNBZ0lDQWdJR01nUFNCMGFHbHpMbU52Ym5SaFkzUlFiMmx1ZEZCdmIyd3VjRzl3S0NrN0NpQWdJQ0FnSUNBZ1l5NWlhU0E5SUdKcE93b2dJQ0FnSUNBZ0lHTXVZbW9nUFNCaWFqc0tJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCaklEMGdibVYzSUVOdmJuUmhZM1JGY1hWaGRHbHZiaWhpYVN3Z1ltb3BPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpMbVZ1WVdKc1pXUWdQU0JpYVM1amIyeHNhWE5wYjI1U1pYTndiMjV6WlNBbUppQmlhaTVqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaU0FtSmlCemFTNWpiMnhzYVhOcGIyNVNaWE53YjI1elpTQW1KaUJ6YWk1amIyeHNhWE5wYjI1U1pYTndiMjV6WlRzS0lDQWdJQ0FnWTI5dWMzUWdZMjBnUFNCMGFHbHpMbU4xY25KbGJuUkRiMjUwWVdOMFRXRjBaWEpwWVd3N0NpQWdJQ0FnSUdNdWNtVnpkR2wwZFhScGIyNGdQU0JqYlM1eVpYTjBhWFIxZEdsdmJqc0tJQ0FnSUNBZ1l5NXpaWFJUY0c5dmExQmhjbUZ0Y3loamJTNWpiMjUwWVdOMFJYRjFZWFJwYjI1VGRHbG1abTVsYzNNc0lHTnRMbU52Ym5SaFkzUkZjWFZoZEdsdmJsSmxiR0Y0WVhScGIyNHNJSFJvYVhNdWQyOXliR1F1WkhRcE93b2dJQ0FnSUNCamIyNXpkQ0J0WVhSQklEMGdjMmt1YldGMFpYSnBZV3dnZkh3Z1lta3ViV0YwWlhKcFlXdzdDaUFnSUNBZ0lHTnZibk4wSUcxaGRFSWdQU0J6YWk1dFlYUmxjbWxoYkNCOGZDQmlhaTV0WVhSbGNtbGhiRHNLQ2lBZ0lDQWdJR2xtSUNodFlYUkJJQ1ltSUcxaGRFSWdKaVlnYldGMFFTNXlaWE4wYVhSMWRHbHZiaUErUFNBd0lDWW1JRzFoZEVJdWNtVnpkR2wwZFhScGIyNGdQajBnTUNrZ2V3b2dJQ0FnSUNBZ0lHTXVjbVZ6ZEdsMGRYUnBiMjRnUFNCdFlYUkJMbkpsYzNScGRIVjBhVzl1SUNvZ2JXRjBRaTV5WlhOMGFYUjFkR2x2YmpzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnWXk1emFTQTlJRzkyWlhKeWFXUmxVMmhoY0dWQklIeDhJSE5wT3dvZ0lDQWdJQ0JqTG5OcUlEMGdiM1psY25KcFpHVlRhR0Z3WlVJZ2ZId2djMm83Q2lBZ0lDQWdJSEpsZEhWeWJpQmpPd29nSUNBZ2ZRb0tJQ0FnSUdOeVpXRjBaVVp5YVdOMGFXOXVSWEYxWVhScGIyNXpSbkp2YlVOdmJuUmhZM1FvWTI5dWRHRmpkRVZ4ZFdGMGFXOXVMQ0J2ZFhSQmNuSmhlU2tnZXdvZ0lDQWdJQ0JqYjI1emRDQmliMlI1UVNBOUlHTnZiblJoWTNSRmNYVmhkR2x2Ymk1aWFUc0tJQ0FnSUNBZ1kyOXVjM1FnWW05a2VVSWdQU0JqYjI1MFlXTjBSWEYxWVhScGIyNHVZbW83Q2lBZ0lDQWdJR052Ym5OMElITm9ZWEJsUVNBOUlHTnZiblJoWTNSRmNYVmhkR2x2Ymk1emFUc0tJQ0FnSUNBZ1kyOXVjM1FnYzJoaGNHVkNJRDBnWTI5dWRHRmpkRVZ4ZFdGMGFXOXVMbk5xT3dvZ0lDQWdJQ0JqYjI1emRDQjNiM0pzWkNBOUlIUm9hWE11ZDI5eWJHUTdDaUFnSUNBZ0lHTnZibk4wSUdOdElEMGdkR2hwY3k1amRYSnlaVzUwUTI5dWRHRmpkRTFoZEdWeWFXRnNPeUF2THlCSlppQm1jbWxqZEdsdmJpQnZjaUJ5WlhOMGFYUjFkR2x2YmlCM1pYSmxJSE53WldOcFptbGxaQ0JwYmlCMGFHVWdiV0YwWlhKcFlXd3NJSFZ6WlNCMGFHVnRDZ29nSUNBZ0lDQnNaWFFnWm5KcFkzUnBiMjRnUFNCamJTNW1jbWxqZEdsdmJqc0tJQ0FnSUNBZ1kyOXVjM1FnYldGMFFTQTlJSE5vWVhCbFFTNXRZWFJsY21saGJDQjhmQ0JpYjJSNVFTNXRZWFJsY21saGJEc0tJQ0FnSUNBZ1kyOXVjM1FnYldGMFFpQTlJSE5vWVhCbFFpNXRZWFJsY21saGJDQjhmQ0JpYjJSNVFpNXRZWFJsY21saGJEc0tDaUFnSUNBZ0lHbG1JQ2h0WVhSQklDWW1JRzFoZEVJZ0ppWWdiV0YwUVM1bWNtbGpkR2x2YmlBK1BTQXdJQ1ltSUcxaGRFSXVabkpwWTNScGIyNGdQajBnTUNrZ2V3b2dJQ0FnSUNBZ0lHWnlhV04wYVc5dUlEMGdiV0YwUVM1bWNtbGpkR2x2YmlBcUlHMWhkRUl1Wm5KcFkzUnBiMjQ3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNobWNtbGpkR2x2YmlBK0lEQXBJSHNLSUNBZ0lDQWdJQ0F2THlCRGNtVmhkR1VnTWlCMFlXNW5aVzUwSUdWeGRXRjBhVzl1Y3dvZ0lDQWdJQ0FnSUM4dklGVnpaWEp6SUcxaGVTQndjbTkyYVdSbElHRWdabTl5WTJVZ1pHbG1abVZ5Wlc1MElHWnliMjBnWjJ4dlltRnNJR2R5WVhacGRIa2dkRzhnZFhObElIZG9aVzRnWTI5dGNIVjBhVzVuSUdOdmJuUmhZM1FnWm5KcFkzUnBiMjR1Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdiWFZuSUQwZ1puSnBZM1JwYjI0Z0tpQW9kMjl5YkdRdVpuSnBZM1JwYjI1SGNtRjJhWFI1SUh4OElIZHZjbXhrTG1keVlYWnBkSGtwTG14bGJtZDBhQ2dwT3dvZ0lDQWdJQ0FnSUd4bGRDQnlaV1IxWTJWa1RXRnpjeUE5SUdKdlpIbEJMbWx1ZGsxaGMzTWdLeUJpYjJSNVFpNXBiblpOWVhOek93b0tJQ0FnSUNBZ0lDQnBaaUFvY21Wa2RXTmxaRTFoYzNNZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNCeVpXUjFZMlZrVFdGemN5QTlJREVnTHlCeVpXUjFZMlZrVFdGemN6c0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR052Ym5OMElIQnZiMndnUFNCMGFHbHpMbVp5YVdOMGFXOXVSWEYxWVhScGIyNVFiMjlzT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJR014SUQwZ2NHOXZiQzVzWlc1bmRHZ2dQeUJ3YjI5c0xuQnZjQ2dwSURvZ2JtVjNJRVp5YVdOMGFXOXVSWEYxWVhScGIyNG9ZbTlrZVVFc0lHSnZaSGxDTENCdGRXY2dLaUJ5WldSMVkyVmtUV0Z6Y3lrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWXpJZ1BTQndiMjlzTG14bGJtZDBhQ0EvSUhCdmIyd3VjRzl3S0NrZ09pQnVaWGNnUm5KcFkzUnBiMjVGY1hWaGRHbHZiaWhpYjJSNVFTd2dZbTlrZVVJc0lHMTFaeUFxSUhKbFpIVmpaV1JOWVhOektUc0tJQ0FnSUNBZ0lDQmpNUzVpYVNBOUlHTXlMbUpwSUQwZ1ltOWtlVUU3Q2lBZ0lDQWdJQ0FnWXpFdVltb2dQU0JqTWk1aWFpQTlJR0p2WkhsQ093b2dJQ0FnSUNBZ0lHTXhMbTFwYmtadmNtTmxJRDBnWXpJdWJXbHVSbTl5WTJVZ1BTQXRiWFZuSUNvZ2NtVmtkV05sWkUxaGMzTTdDaUFnSUNBZ0lDQWdZekV1YldGNFJtOXlZMlVnUFNCak1pNXRZWGhHYjNKalpTQTlJRzExWnlBcUlISmxaSFZqWldSTllYTnpPeUF2THlCRGIzQjVJRzkyWlhJZ2RHaGxJSEpsYkdGMGFYWmxJSFpsWTNSdmNuTUtDaUFnSUNBZ0lDQWdZekV1Y21rdVkyOXdlU2hqYjI1MFlXTjBSWEYxWVhScGIyNHVjbWtwT3dvZ0lDQWdJQ0FnSUdNeExuSnFMbU52Y0hrb1kyOXVkR0ZqZEVWeGRXRjBhVzl1TG5KcUtUc0tJQ0FnSUNBZ0lDQmpNaTV5YVM1amIzQjVLR052Ym5SaFkzUkZjWFZoZEdsdmJpNXlhU2s3Q2lBZ0lDQWdJQ0FnWXpJdWNtb3VZMjl3ZVNoamIyNTBZV04wUlhGMVlYUnBiMjR1Y21vcE95QXZMeUJEYjI1emRISjFZM1FnZEdGdVoyVnVkSE1LQ2lBZ0lDQWdJQ0FnWTI5dWRHRmpkRVZ4ZFdGMGFXOXVMbTVwTG5SaGJtZGxiblJ6S0dNeExuUXNJR015TG5RcE95QXZMeUJUWlhRZ2MzQnZiMnNnY0dGeVlXMXpDZ29nSUNBZ0lDQWdJR014TG5ObGRGTndiMjlyVUdGeVlXMXpLR050TG1aeWFXTjBhVzl1UlhGMVlYUnBiMjVUZEdsbVptNWxjM01zSUdOdExtWnlhV04wYVc5dVJYRjFZWFJwYjI1U1pXeGhlR0YwYVc5dUxDQjNiM0pzWkM1a2RDazdDaUFnSUNBZ0lDQWdZekl1YzJWMFUzQnZiMnRRWVhKaGJYTW9ZMjB1Wm5KcFkzUnBiMjVGY1hWaGRHbHZibE4wYVdabWJtVnpjeXdnWTIwdVpuSnBZM1JwYjI1RmNYVmhkR2x2YmxKbGJHRjRZWFJwYjI0c0lIZHZjbXhrTG1SMEtUc0tJQ0FnSUNBZ0lDQmpNUzVsYm1GaWJHVmtJRDBnWXpJdVpXNWhZbXhsWkNBOUlHTnZiblJoWTNSRmNYVmhkR2x2Ymk1bGJtRmliR1ZrT3dvZ0lDQWdJQ0FnSUc5MWRFRnljbUY1TG5CMWMyZ29ZekVzSUdNeUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlVZV3RsSUhSb1pTQmhkbVZ5WVdkbElFNGdiR0YwWlhOMElHTnZiblJoWTNRZ2NHOXBiblFnYjI0Z2RHaGxJSEJzWVc1bExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdOeVpXRjBaVVp5YVdOMGFXOXVSbkp2YlVGMlpYSmhaMlVvYm5WdFEyOXVkR0ZqZEhNcElIc0tJQ0FnSUNBZ0x5OGdWR2hsSUd4aGMzUWdZMjl1ZEdGamRFVnhkV0YwYVc5dUNpQWdJQ0FnSUd4bGRDQmpJRDBnZEdocGN5NXlaWE4xYkhSYmRHaHBjeTV5WlhOMWJIUXViR1Z1WjNSb0lDMGdNVjA3SUM4dklFTnlaV0YwWlNCMGFHVWdjbVZ6ZFd4ME9pQjBkMjhnSW1GMlpYSmhaMlVpSUdaeWFXTjBhVzl1SUdWeGRXRjBhVzl1Y3dvS0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1OeVpXRjBaVVp5YVdOMGFXOXVSWEYxWVhScGIyNXpSbkp2YlVOdmJuUmhZM1FvWXl3Z2RHaHBjeTVtY21samRHbHZibEpsYzNWc2RDa2dmSHdnYm5WdFEyOXVkR0ZqZEhNZ1BUMDlJREVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHWXhJRDBnZEdocGN5NW1jbWxqZEdsdmJsSmxjM1ZzZEZ0MGFHbHpMbVp5YVdOMGFXOXVVbVZ6ZFd4MExteGxibWQwYUNBdElESmRPd29nSUNBZ0lDQmpiMjV6ZENCbU1pQTlJSFJvYVhNdVpuSnBZM1JwYjI1U1pYTjFiSFJiZEdocGN5NW1jbWxqZEdsdmJsSmxjM1ZzZEM1c1pXNW5kR2dnTFNBeFhUc0tJQ0FnSUNBZ1lYWmxjbUZuWlU1dmNtMWhiQzV6WlhSYVpYSnZLQ2s3Q2lBZ0lDQWdJR0YyWlhKaFoyVkRiMjUwWVdOMFVHOXBiblJCTG5ObGRGcGxjbThvS1RzS0lDQWdJQ0FnWVhabGNtRm5aVU52Ym5SaFkzUlFiMmx1ZEVJdWMyVjBXbVZ5YnlncE93b2dJQ0FnSUNCamIyNXpkQ0JpYjJSNVFTQTlJR011WW1rN0NpQWdJQ0FnSUdNdVltbzdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQWhQVDBnYm5WdFEyOXVkR0ZqZEhNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdNZ1BTQjBhR2x6TG5KbGMzVnNkRnQwYUdsekxuSmxjM1ZzZEM1c1pXNW5kR2dnTFNBeElDMGdhVjA3Q2dvZ0lDQWdJQ0FnSUdsbUlDaGpMbUpwSUNFOVBTQmliMlI1UVNrZ2V3b2dJQ0FnSUNBZ0lDQWdZWFpsY21GblpVNXZjbTFoYkM1MllXUmtLR011Ym1rc0lHRjJaWEpoWjJWT2IzSnRZV3dwT3dvZ0lDQWdJQ0FnSUNBZ1lYWmxjbUZuWlVOdmJuUmhZM1JRYjJsdWRFRXVkbUZrWkNoakxuSnBMQ0JoZG1WeVlXZGxRMjl1ZEdGamRGQnZhVzUwUVNrN0NpQWdJQ0FnSUNBZ0lDQmhkbVZ5WVdkbFEyOXVkR0ZqZEZCdmFXNTBRaTUyWVdSa0tHTXVjbW9zSUdGMlpYSmhaMlZEYjI1MFlXTjBVRzlwYm5SQ0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdZWFpsY21GblpVNXZjbTFoYkM1MmMzVmlLR011Ym1rc0lHRjJaWEpoWjJWT2IzSnRZV3dwT3dvZ0lDQWdJQ0FnSUNBZ1lYWmxjbUZuWlVOdmJuUmhZM1JRYjJsdWRFRXVkbUZrWkNoakxuSnFMQ0JoZG1WeVlXZGxRMjl1ZEdGamRGQnZhVzUwUVNrN0NpQWdJQ0FnSUNBZ0lDQmhkbVZ5WVdkbFEyOXVkR0ZqZEZCdmFXNTBRaTUyWVdSa0tHTXVjbWtzSUdGMlpYSmhaMlZEYjI1MFlXTjBVRzlwYm5SQ0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHTnZibk4wSUdsdWRrNTFiVU52Ym5SaFkzUnpJRDBnTVNBdklHNTFiVU52Ym5SaFkzUnpPd29nSUNBZ0lDQmhkbVZ5WVdkbFEyOXVkR0ZqZEZCdmFXNTBRUzV6WTJGc1pTaHBiblpPZFcxRGIyNTBZV04wY3l3Z1pqRXVjbWtwT3dvZ0lDQWdJQ0JoZG1WeVlXZGxRMjl1ZEdGamRGQnZhVzUwUWk1elkyRnNaU2hwYm5aT2RXMURiMjUwWVdOMGN5d2daakV1Y21vcE93b2dJQ0FnSUNCbU1pNXlhUzVqYjNCNUtHWXhMbkpwS1RzZ0x5OGdVMmh2ZFd4a0lHSmxJSFJvWlNCellXMWxDZ29nSUNBZ0lDQm1NaTV5YWk1amIzQjVLR1l4TG5KcUtUc0tJQ0FnSUNBZ1lYWmxjbUZuWlU1dmNtMWhiQzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnWVhabGNtRm5aVTV2Y20xaGJDNTBZVzVuWlc1MGN5aG1NUzUwTENCbU1pNTBLVHNnTHk4Z2NtVjBkWEp1SUdWeE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJIWlc1bGNtRjBaU0JoYkd3Z1kyOXVkR0ZqZEhNZ1ltVjBkMlZsYmlCaElHeHBjM1FnYjJZZ1ltOWtlU0J3WVdseWN3b2dJQ0FnSUNvZ1FIQmhjbUZ0SUhBeElFRnljbUY1SUc5bUlHSnZaSGtnYVc1a2FXTmxjd29nSUNBZ0lDb2dRSEJoY21GdElIQXlJRUZ5Y21GNUlHOW1JR0p2WkhrZ2FXNWthV05sY3dvZ0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNWc2RDQkJjbkpoZVNCMGJ5QnpkRzl5WlNCblpXNWxjbUYwWldRZ1kyOXVkR0ZqZEhNS0lDQWdJQ0FxSUVCd1lYSmhiU0J2YkdSamIyNTBZV04wY3lCUGNIUnBiMjVoYkM0Z1FYSnlZWGtnYjJZZ2NtVjFjMkZpYkdVZ1kyOXVkR0ZqZENCdlltcGxZM1J6Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdaMlYwUTI5dWRHRmpkSE1vY0RFc0lIQXlMQ0IzYjNKc1pDd2djbVZ6ZFd4MExDQnZiR1JqYjI1MFlXTjBjeXdnWm5KcFkzUnBiMjVTWlhOMWJIUXNJR1p5YVdOMGFXOXVVRzl2YkNrZ2V3b2dJQ0FnSUNBdkx5QlRZWFpsSUc5c1pDQmpiMjUwWVdOMElHOWlhbVZqZEhNS0lDQWdJQ0FnZEdocGN5NWpiMjUwWVdOMFVHOXBiblJRYjI5c0lEMGdiMnhrWTI5dWRHRmpkSE03Q2lBZ0lDQWdJSFJvYVhNdVpuSnBZM1JwYjI1RmNYVmhkR2x2YmxCdmIyd2dQU0JtY21samRHbHZibEJ2YjJ3N0NpQWdJQ0FnSUhSb2FYTXVjbVZ6ZFd4MElEMGdjbVZ6ZFd4ME93b2dJQ0FnSUNCMGFHbHpMbVp5YVdOMGFXOXVVbVZ6ZFd4MElEMGdabkpwWTNScGIyNVNaWE4xYkhRN0NpQWdJQ0FnSUdOdmJuTjBJSEZwSUQwZ2RHMXdVWFZoZERFN0NpQWdJQ0FnSUdOdmJuTjBJSEZxSUQwZ2RHMXdVWFZoZERJN0NpQWdJQ0FnSUdOdmJuTjBJSGhwSUQwZ2RHMXdWbVZqTVRzS0lDQWdJQ0FnWTI5dWMzUWdlR29nUFNCMGJYQldaV015T3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYXlBOUlEQXNJRTRnUFNCd01TNXNaVzVuZEdnN0lHc2dJVDA5SUU0N0lHc3JLeWtnZXdvZ0lDQWdJQ0FnSUM4dklFZGxkQ0JqZFhKeVpXNTBJR052Ykd4cGMybHZiaUJpYjJScFpYTUtJQ0FnSUNBZ0lDQmpiMjV6ZENCaWFTQTlJSEF4VzJ0ZE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdKcUlEMGdjREpiYTEwN0lDOHZJRWRsZENCamIyNTBZV04wSUcxaGRHVnlhV0ZzQ2dvZ0lDQWdJQ0FnSUd4bGRDQmliMlI1UTI5dWRHRmpkRTFoZEdWeWFXRnNJRDBnYm5Wc2JEc0tDaUFnSUNBZ0lDQWdhV1lnS0dKcExtMWhkR1Z5YVdGc0lDWW1JR0pxTG0xaGRHVnlhV0ZzS1NCN0NpQWdJQ0FnSUNBZ0lDQmliMlI1UTI5dWRHRmpkRTFoZEdWeWFXRnNJRDBnZDI5eWJHUXVaMlYwUTI5dWRHRmpkRTFoZEdWeWFXRnNLR0pwTG0xaGRHVnlhV0ZzTENCaWFpNXRZWFJsY21saGJDa2dmSHdnYm5Wc2JEc0tJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJR052Ym5OMElHcDFjM1JVWlhOMElEMGdZbWt1ZEhsd1pTQW1JRUp2WkhrdVMwbE9SVTFCVkVsRElDWW1JR0pxTG5SNWNHVWdKaUJDYjJSNUxsTlVRVlJKUXlCOGZDQmlhUzUwZVhCbElDWWdRbTlrZVM1VFZFRlVTVU1nSmlZZ1ltb3VkSGx3WlNBbUlFSnZaSGt1UzBsT1JVMUJWRWxESUh4OElHSnBMblI1Y0dVZ0ppQkNiMlI1TGt0SlRrVk5RVlJKUXlBbUppQmlhaTUwZVhCbElDWWdRbTlrZVM1TFNVNUZUVUZVU1VNN0Nnb2dJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZbWt1YzJoaGNHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ0lDQmlhUzV4ZFdGMFpYSnVhVzl1TG0xMWJIUW9ZbWt1YzJoaGNHVlBjbWxsYm5SaGRHbHZibk5iYVYwc0lIRnBLVHNLSUNBZ0lDQWdJQ0FnSUdKcExuRjFZWFJsY201cGIyNHVkbTExYkhRb1lta3VjMmhoY0dWUFptWnpaWFJ6VzJsZExDQjRhU2s3Q2lBZ0lDQWdJQ0FnSUNCNGFTNTJZV1JrS0dKcExuQnZjMmwwYVc5dUxDQjRhU2s3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J6YVNBOUlHSnBMbk5vWVhCbGMxdHBYVHNLQ2lBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdNRHNnYWlBOElHSnFMbk5vWVhCbGN5NXNaVzVuZEdnN0lHb3JLeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYjIxd2RYUmxJSGR2Y214a0lIUnlZVzV6Wm05eWJTQnZaaUJ6YUdGd1pYTUtJQ0FnSUNBZ0lDQWdJQ0FnWW1vdWNYVmhkR1Z5Ym1sdmJpNXRkV3gwS0dKcUxuTm9ZWEJsVDNKcFpXNTBZWFJwYjI1elcycGRMQ0J4YWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR0pxTG5GMVlYUmxjbTVwYjI0dWRtMTFiSFFvWW1vdWMyaGhjR1ZQWm1aelpYUnpXMnBkTENCNGFpazdDaUFnSUNBZ0lDQWdJQ0FnSUhocUxuWmhaR1FvWW1vdWNHOXphWFJwYjI0c0lIaHFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJvZ1BTQmlhaTV6YUdGd1pYTmJhbDA3Q2dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVNoemFTNWpiMnhzYVhOcGIyNUdhV3gwWlhKTllYTnJJQ1lnYzJvdVkyOXNiR2x6YVc5dVJtbHNkR1Z5UjNKdmRYQWdKaVlnYzJvdVkyOXNiR2x6YVc5dVJtbHNkR1Z5VFdGemF5QW1JSE5wTG1OdmJHeHBjMmx2YmtacGJIUmxja2R5YjNWd0tTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZUdrdVpHbHpkR0Z1WTJWVWJ5aDRhaWtnUGlCemFTNWliM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeUFySUhOcUxtSnZkVzVrYVc1blUzQm9aWEpsVW1Ga2FYVnpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ0x5OGdSMlYwSUdOdmJHeHBjMmx2YmlCdFlYUmxjbWxoYkFvS0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCemFHRndaVU52Ym5SaFkzUk5ZWFJsY21saGJDQTlJRzUxYkd3N0Nnb2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2Mya3ViV0YwWlhKcFlXd2dKaVlnYzJvdWJXRjBaWEpwWVd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRndaVU52Ym5SaFkzUk5ZWFJsY21saGJDQTlJSGR2Y214a0xtZGxkRU52Ym5SaFkzUk5ZWFJsY21saGJDaHphUzV0WVhSbGNtbGhiQ3dnYzJvdWJXRjBaWEpwWVd3cElIeDhJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRU52Ym5SaFkzUk5ZWFJsY21saGJDQTlJSE5vWVhCbFEyOXVkR0ZqZEUxaGRHVnlhV0ZzSUh4OElHSnZaSGxEYjI1MFlXTjBUV0YwWlhKcFlXd2dmSHdnZDI5eWJHUXVaR1ZtWVhWc2RFTnZiblJoWTNSTllYUmxjbWxoYkRzZ0x5OGdSMlYwSUdOdmJuUmhZM1J6Q2dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTnZiSFpsY2tsdVpHVjRJRDBnYzJrdWRIbHdaU0I4SUhOcUxuUjVjR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMyOXNkbVZ5SUQwZ2RHaHBjMXR5WlhOdmJIWmxja2x1WkdWNFhUc0tDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE52YkhabGNpa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhSMllXd2dQU0JtWVd4elpUc2dMeThnVkU4Z1JFODZJR2x1ZG1WemRHbG5ZWFJsSUhkb2VTQnpjR2hsY21WUVlYSjBhV05zWlNCaGJtUWdZMjl1ZG1WNFVHRnlkR2xqYkdVS0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCeVpYTnZiSFpsY25NZ1pYaHdaV04wSUhOcElHRnVaQ0J6YWlCemFHRndaWE1nZEc4Z1ltVWdhVzRnY21WMlpYSnpaU0J2Y21SbGNnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDaHBMbVV1SUd4aGNtZGxjaUJwYm5SbFoyVnlJSFpoYkhWbElIUjVjR1VnWm1seWMzUWdhVzV6ZEdWaFpDQnZaaUJ6YldGc2JHVnlJR1pwY25OMEtRb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMmt1ZEhsd1pTQThJSE5xTG5SNWNHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhaaGJDQTlJSEpsYzI5c2RtVnlMbU5oYkd3b2RHaHBjeXdnYzJrc0lITnFMQ0I0YVN3Z2VHb3NJSEZwTENCeGFpd2dZbWtzSUdKcUxDQnphU3dnYzJvc0lHcDFjM1JVWlhOMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRtRnNJRDBnY21WemIyeDJaWEl1WTJGc2JDaDBhR2x6TENCemFpd2djMmtzSUhocUxDQjRhU3dnY1dvc0lIRnBMQ0JpYWl3Z1lta3NJSE5wTENCemFpd2dhblZ6ZEZSbGMzUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsZEhaaGJDQW1KaUJxZFhOMFZHVnpkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1VtVm5hWE4wWlhJZ2IzWmxjbXhoY0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDI5eWJHUXVjMmhoY0dWUGRtVnliR0Z3UzJWbGNHVnlMbk5sZENoemFTNXBaQ3dnYzJvdWFXUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMjl5YkdRdVltOWtlVTkyWlhKc1lYQkxaV1Z3WlhJdWMyVjBLR0pwTG1sa0xDQmlhaTVwWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5Q2lBZ0lDQjlDZ29nSUNBZ2MzQm9aWEpsVTNCb1pYSmxLSE5wTENCemFpd2dlR2tzSUhocUxDQnhhU3dnY1dvc0lHSnBMQ0JpYWl3Z2NuTnBMQ0J5YzJvc0lHcDFjM1JVWlhOMEtTQjdDaUFnSUNBZ0lHbG1JQ2hxZFhOMFZHVnpkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUI0YVM1a2FYTjBZVzVqWlZOeGRXRnlaV1FvZUdvcElEd2dLSE5wTG5KaFpHbDFjeUFySUhOcUxuSmhaR2wxY3lrZ0tpb2dNanNLSUNBZ0lDQWdmU0F2THlCWFpTQjNhV3hzSUdoaGRtVWdiMjVzZVNCdmJtVWdZMjl1ZEdGamRDQnBiaUIwYUdseklHTmhjMlVLQ2dvZ0lDQWdJQ0JqYjI1emRDQmpiMjUwWVdOMFJYRWdQU0IwYUdsekxtTnlaV0YwWlVOdmJuUmhZM1JGY1hWaGRHbHZiaWhpYVN3Z1ltb3NJSE5wTENCemFpd2djbk5wTENCeWMyb3BPeUF2THlCRGIyNTBZV04wSUc1dmNtMWhiQW9LSUNBZ0lDQWdlR291ZG5OMVlpaDRhU3dnWTI5dWRHRmpkRVZ4TG01cEtUc0tJQ0FnSUNBZ1kyOXVkR0ZqZEVWeExtNXBMbTV2Y20xaGJHbDZaU2dwT3lBdkx5QkRiMjUwWVdOMElIQnZhVzUwSUd4dlkyRjBhVzl1Y3dvS0lDQWdJQ0FnWTI5dWRHRmpkRVZ4TG5KcExtTnZjSGtvWTI5dWRHRmpkRVZ4TG01cEtUc0tJQ0FnSUNBZ1kyOXVkR0ZqZEVWeExuSnFMbU52Y0hrb1kyOXVkR0ZqZEVWeExtNXBLVHNLSUNBZ0lDQWdZMjl1ZEdGamRFVnhMbkpwTG5OallXeGxLSE5wTG5KaFpHbDFjeXdnWTI5dWRHRmpkRVZ4TG5KcEtUc0tJQ0FnSUNBZ1kyOXVkR0ZqZEVWeExuSnFMbk5qWVd4bEtDMXphaTV5WVdScGRYTXNJR052Ym5SaFkzUkZjUzV5YWlrN0NpQWdJQ0FnSUdOdmJuUmhZM1JGY1M1eWFTNTJZV1JrS0hocExDQmpiMjUwWVdOMFJYRXVjbWtwT3dvZ0lDQWdJQ0JqYjI1MFlXTjBSWEV1Y21rdWRuTjFZaWhpYVM1d2IzTnBkR2x2Yml3Z1kyOXVkR0ZqZEVWeExuSnBLVHNLSUNBZ0lDQWdZMjl1ZEdGamRFVnhMbkpxTG5aaFpHUW9lR29zSUdOdmJuUmhZM1JGY1M1eWFpazdDaUFnSUNBZ0lHTnZiblJoWTNSRmNTNXlhaTUyYzNWaUtHSnFMbkJ2YzJsMGFXOXVMQ0JqYjI1MFlXTjBSWEV1Y21vcE93b2dJQ0FnSUNCMGFHbHpMbkpsYzNWc2RDNXdkWE5vS0dOdmJuUmhZM1JGY1NrN0NpQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFJuSnBZM1JwYjI1RmNYVmhkR2x2Ym5OR2NtOXRRMjl1ZEdGamRDaGpiMjUwWVdOMFJYRXNJSFJvYVhNdVpuSnBZM1JwYjI1U1pYTjFiSFFwT3dvZ0lDQWdmUW9LSUNBZ0lITndhR1Z5WlZCc1lXNWxLSE5wTENCemFpd2dlR2tzSUhocUxDQnhhU3dnY1dvc0lHSnBMQ0JpYWl3Z2NuTnBMQ0J5YzJvc0lHcDFjM1JVWlhOMEtTQjdDaUFnSUNBZ0lDOHZJRmRsSUhkcGJHd2dhR0YyWlNCdmJtVWdZMjl1ZEdGamRDQnBiaUIwYUdseklHTmhjMlVLSUNBZ0lDQWdZMjl1YzNRZ2NpQTlJSFJvYVhNdVkzSmxZWFJsUTI5dWRHRmpkRVZ4ZFdGMGFXOXVLR0pwTENCaWFpd2djMmtzSUhOcUxDQnljMmtzSUhKemFpazdJQzh2SUVOdmJuUmhZM1FnYm05eWJXRnNDZ29nSUNBZ0lDQnlMbTVwTG5ObGRDZ3dMQ0F3TENBeEtUc0tJQ0FnSUNBZ2NXb3VkbTExYkhRb2NpNXVhU3dnY2k1dWFTazdDaUFnSUNBZ0lISXVibWt1Ym1WbllYUmxLSEl1Ym1rcE95QXZMeUJpYjJSNUlHa2dhWE1nZEdobElITndhR1Z5WlN3Z1pteHBjQ0J1YjNKdFlXd0tDaUFnSUNBZ0lISXVibWt1Ym05eWJXRnNhWHBsS0NrN0lDOHZJRTVsWldSbFpEOEtJQ0FnSUNBZ0x5OGdWbVZqZEc5eUlHWnliMjBnYzNCb1pYSmxJR05sYm5SbGNpQjBieUJqYjI1MFlXTjBJSEJ2YVc1MENnb2dJQ0FnSUNCeUxtNXBMbk5qWVd4bEtITnBMbkpoWkdsMWN5d2djaTV5YVNrN0lDOHZJRkJ5YjJwbFkzUWdaRzkzYmlCemNHaGxjbVVnYjI0Z2NHeGhibVVLQ2lBZ0lDQWdJSGhwTG5aemRXSW9lR29zSUhCdmFXNTBYMjl1WDNCc1lXNWxYM1J2WDNOd2FHVnlaU2s3Q2lBZ0lDQWdJSEl1Ym1rdWMyTmhiR1VvY2k1dWFTNWtiM1FvY0c5cGJuUmZiMjVmY0d4aGJtVmZkRzlmYzNCb1pYSmxLU3dnY0d4aGJtVmZkRzlmYzNCb1pYSmxYMjl5ZEdodktUc0tJQ0FnSUNBZ2NHOXBiblJmYjI1ZmNHeGhibVZmZEc5ZmMzQm9aWEpsTG5aemRXSW9jR3hoYm1WZmRHOWZjM0JvWlhKbFgyOXlkR2h2TENCeUxuSnFLVHNnTHk4Z1ZHaGxJSE53YUdWeVpTQndiM05wZEdsdmJpQndjbTlxWldOMFpXUWdkRzhnY0d4aGJtVUtDaUFnSUNBZ0lHbG1JQ2d0Y0c5cGJuUmZiMjVmY0d4aGJtVmZkRzlmYzNCb1pYSmxMbVJ2ZENoeUxtNXBLU0E4UFNCemFTNXlZV1JwZFhNcElIc0tJQ0FnSUNBZ0lDQnBaaUFvYW5WemRGUmxjM1FwSUhzS0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPd29nSUNBZ0lDQWdJSDBnTHk4Z1RXRnJaU0JwZENCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnWW05a2VRb0tDaUFnSUNBZ0lDQWdZMjl1YzNRZ2Nta2dQU0J5TG5KcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhKcUlEMGdjaTV5YWpzS0lDQWdJQ0FnSUNCeWFTNTJZV1JrS0hocExDQnlhU2s3Q2lBZ0lDQWdJQ0FnY21rdWRuTjFZaWhpYVM1d2IzTnBkR2x2Yml3Z2Nta3BPd29nSUNBZ0lDQWdJSEpxTG5aaFpHUW9lR29zSUhKcUtUc0tJQ0FnSUNBZ0lDQnlhaTUyYzNWaUtHSnFMbkJ2YzJsMGFXOXVMQ0J5YWlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOMWJIUXVjSFZ6YUNoeUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVVp5YVdOMGFXOXVSWEYxWVhScGIyNXpSbkp2YlVOdmJuUmhZM1FvY2l3Z2RHaHBjeTVtY21samRHbHZibEpsYzNWc2RDazdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdJQ0JpYjNoQ2IzZ29jMmtzSUhOcUxDQjRhU3dnZUdvc0lIRnBMQ0J4YWl3Z1lta3NJR0pxTENCeWMya3NJSEp6YWl3Z2FuVnpkRlJsYzNRcElIc0tJQ0FnSUNBZ2Mya3VZMjl1ZG1WNFVHOXNlV2hsWkhKdmJsSmxjSEpsYzJWdWRHRjBhVzl1TG0xaGRHVnlhV0ZzSUQwZ2Mya3ViV0YwWlhKcFlXdzdDaUFnSUNBZ0lITnFMbU52Ym5abGVGQnZiSGxvWldSeWIyNVNaWEJ5WlhObGJuUmhkR2x2Ymk1dFlYUmxjbWxoYkNBOUlITnFMbTFoZEdWeWFXRnNPd29nSUNBZ0lDQnphUzVqYjI1MlpYaFFiMng1YUdWa2NtOXVVbVZ3Y21WelpXNTBZWFJwYjI0dVkyOXNiR2x6YVc5dVVtVnpjRzl1YzJVZ1BTQnphUzVqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaVHNLSUNBZ0lDQWdjMm91WTI5dWRtVjRVRzlzZVdobFpISnZibEpsY0hKbGMyVnVkR0YwYVc5dUxtTnZiR3hwYzJsdmJsSmxjM0J2Ym5ObElEMGdjMm91WTI5c2JHbHphVzl1VW1WemNHOXVjMlU3Q2lBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJuWmxlRU52Ym5abGVDaHphUzVqYjI1MlpYaFFiMng1YUdWa2NtOXVVbVZ3Y21WelpXNTBZWFJwYjI0c0lITnFMbU52Ym5abGVGQnZiSGxvWldSeWIyNVNaWEJ5WlhObGJuUmhkR2x2Yml3Z2VHa3NJSGhxTENCeGFTd2djV29zSUdKcExDQmlhaXdnYzJrc0lITnFMQ0JxZFhOMFZHVnpkQ2s3Q2lBZ0lDQjlDZ29nSUNBZ2MzQm9aWEpsUW05NEtITnBMQ0J6YWl3Z2VHa3NJSGhxTENCeGFTd2djV29zSUdKcExDQmlhaXdnY25OcExDQnljMm9zSUdwMWMzUlVaWE4wS1NCN0NpQWdJQ0FnSUdOdmJuTjBJSFl6Y0c5dmJDQTlJSFJvYVhNdWRqTndiMjlzT3lBdkx5QjNaU0J5WldabGNpQjBieUIwYUdVZ1ltOTRJR0Z6SUdKdlpIa2dhZ29LSUNBZ0lDQWdZMjl1YzNRZ2MybGtaWE1nUFNCemNHaGxjbVZDYjNoZmMybGtaWE03Q2lBZ0lDQWdJSGhwTG5aemRXSW9lR29zSUdKdmVGOTBiMTl6Y0dobGNtVXBPd29nSUNBZ0lDQnphaTVuWlhSVGFXUmxUbTl5YldGc2N5aHphV1JsY3l3Z2NXb3BPd29nSUNBZ0lDQmpiMjV6ZENCU0lEMGdjMmt1Y21Ga2FYVnpPd29LSUNBZ0lDQWdiR1YwSUdadmRXNWtJRDBnWm1Gc2MyVTdJQzh2SUZOMGIzSmxJSFJvWlNCeVpYTjFiSFJwYm1jZ2MybGtaU0J3Wlc1bGRISmhkR2x2YmlCcGJtWnZDZ29nSUNBZ0lDQmpiMjV6ZENCemFXUmxYMjV6SUQwZ2MzQm9aWEpsUW05NFgzTnBaR1ZmYm5NN0NpQWdJQ0FnSUdOdmJuTjBJSE5wWkdWZmJuTXhJRDBnYzNCb1pYSmxRbTk0WDNOcFpHVmZibk14T3dvZ0lDQWdJQ0JqYjI1emRDQnphV1JsWDI1ek1pQTlJSE53YUdWeVpVSnZlRjl6YVdSbFgyNXpNanNLSUNBZ0lDQWdiR1YwSUhOcFpHVmZhQ0E5SUc1MWJHdzdDaUFnSUNBZ0lHeGxkQ0J6YVdSbFgzQmxibVYwY21GMGFXOXVjeUE5SURBN0NpQWdJQ0FnSUd4bGRDQnphV1JsWDJSdmRERWdQU0F3T3dvZ0lDQWdJQ0JzWlhRZ2MybGtaVjlrYjNReUlEMGdNRHNLSUNBZ0lDQWdiR1YwSUhOcFpHVmZaR2x6ZEdGdVkyVWdQU0J1ZFd4c093b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXUjRJRDBnTUN3Z2JuTnBaR1Z6SUQwZ2MybGtaWE11YkdWdVozUm9PeUJwWkhnZ0lUMDlJRzV6YVdSbGN5QW1KaUJtYjNWdVpDQTlQVDBnWm1Gc2MyVTdJR2xrZUNzcktTQjdDaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J3YkdGdVpTQnphV1JsSUc1dmNtMWhiQ0FvYm5NcENpQWdJQ0FnSUNBZ1kyOXVjM1FnYm5NZ1BTQnpjR2hsY21WQ2IzaGZibk03Q2lBZ0lDQWdJQ0FnYm5NdVkyOXdlU2h6YVdSbGMxdHBaSGhkS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0JvSUQwZ2JuTXViR1Z1WjNSb0tDazdDaUFnSUNBZ0lDQWdibk11Ym05eWJXRnNhWHBsS0NrN0lDOHZJRlJvWlNCdWIzSnRZV3d2WkdsemRHRnVZMlVnWkc5MElIQnliMlIxWTNRZ2RHVnNiSE1nZDJocFkyZ2djMmxrWlNCdlppQjBhR1VnY0d4aGJtVWdkMlVnWVhKbENnb2dJQ0FnSUNBZ0lHTnZibk4wSUdSdmRDQTlJR0p2ZUY5MGIxOXpjR2hsY21VdVpHOTBLRzV6S1RzS0NpQWdJQ0FnSUNBZ2FXWWdLR1J2ZENBOElHZ2dLeUJTSUNZbUlHUnZkQ0ErSURBcElIc0tJQ0FnSUNBZ0lDQWdJQzh2SUVsdWRHVnljMlZqZEhNZ2NHeGhibVV1SUU1dmR5QmphR1ZqYXlCMGFHVWdiM1JvWlhJZ2RIZHZJR1JwYldWdWMybHZibk1LSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzV6TVNBOUlITndhR1Z5WlVKdmVGOXVjekU3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1Y3pJZ1BTQnpjR2hsY21WQ2IzaGZibk15T3dvZ0lDQWdJQ0FnSUNBZ2JuTXhMbU52Y0hrb2MybGtaWE5iS0dsa2VDQXJJREVwSUNVZ00xMHBPd29nSUNBZ0lDQWdJQ0FnYm5NeUxtTnZjSGtvYzJsa1pYTmJLR2xrZUNBcklESXBJQ1VnTTEwcE93b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2FERWdQU0J1Y3pFdWJHVnVaM1JvS0NrN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCb01pQTlJRzV6TWk1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNBZ0lHNXpNUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lHNXpNaTV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSdmRERWdQU0JpYjNoZmRHOWZjM0JvWlhKbExtUnZkQ2h1Y3pFcE93b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHOTBNaUE5SUdKdmVGOTBiMTl6Y0dobGNtVXVaRzkwS0c1ek1pazdDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tHUnZkREVnUENCb01TQW1KaUJrYjNReElENGdMV2d4SUNZbUlHUnZkRElnUENCb01pQW1KaUJrYjNReUlENGdMV2d5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUnBjM1FnUFNCTllYUm9MbUZpY3loa2IzUWdMU0JvSUMwZ1VpazdDZ29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMmxrWlY5a2FYTjBZVzVqWlNBOVBUMGdiblZzYkNCOGZDQmthWE4wSUR3Z2MybGtaVjlrYVhOMFlXNWpaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5wWkdWZlpHbHpkR0Z1WTJVZ1BTQmthWE4wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5wWkdWZlpHOTBNU0E5SUdSdmRERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MybGtaVjlrYjNReUlEMGdaRzkwTWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVdSbFgyZ2dQU0JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5wWkdWZmJuTXVZMjl3ZVNodWN5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MybGtaVjl1Y3pFdVkyOXdlU2h1Y3pFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhOcFpHVmZibk15TG1OdmNIa29ibk15S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVdSbFgzQmxibVYwY21GMGFXOXVjeXNyT3dvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FuVnpkRlJsYzNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLSE5wWkdWZmNHVnVaWFJ5WVhScGIyNXpLU0I3Q2lBZ0lDQWdJQ0FnWm05MWJtUWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhJZ1BTQjBhR2x6TG1OeVpXRjBaVU52Ym5SaFkzUkZjWFZoZEdsdmJpaGlhU3dnWW1vc0lITnBMQ0J6YWl3Z2NuTnBMQ0J5YzJvcE93b2dJQ0FnSUNBZ0lITnBaR1ZmYm5NdWMyTmhiR1VvTFZJc0lISXVjbWtwT3lBdkx5QlRjR2hsY21VZ2Nnb0tJQ0FnSUNBZ0lDQnlMbTVwTG1OdmNIa29jMmxrWlY5dWN5azdDaUFnSUNBZ0lDQWdjaTV1YVM1dVpXZGhkR1VvY2k1dWFTazdJQzh2SUU1dmNtMWhiQ0J6YUc5MWJHUWdZbVVnYjNWMElHOW1JSE53YUdWeVpRb0tJQ0FnSUNBZ0lDQnphV1JsWDI1ekxuTmpZV3hsS0hOcFpHVmZhQ3dnYzJsa1pWOXVjeWs3Q2lBZ0lDQWdJQ0FnYzJsa1pWOXVjekV1YzJOaGJHVW9jMmxrWlY5a2IzUXhMQ0J6YVdSbFgyNXpNU2s3Q2lBZ0lDQWdJQ0FnYzJsa1pWOXVjeTUyWVdSa0tITnBaR1ZmYm5NeExDQnphV1JsWDI1ektUc0tJQ0FnSUNBZ0lDQnphV1JsWDI1ek1pNXpZMkZzWlNoemFXUmxYMlJ2ZERJc0lITnBaR1ZmYm5NeUtUc0tJQ0FnSUNBZ0lDQnphV1JsWDI1ekxuWmhaR1FvYzJsa1pWOXVjeklzSUhJdWNtb3BPeUF2THlCTllXdGxJSEpsYkdGMGFYWmxJSFJ2SUdKdlpHbGxjd29LSUNBZ0lDQWdJQ0J5TG5KcExuWmhaR1FvZUdrc0lISXVjbWtwT3dvZ0lDQWdJQ0FnSUhJdWNta3Vkbk4xWWloaWFTNXdiM05wZEdsdmJpd2djaTV5YVNrN0NpQWdJQ0FnSUNBZ2NpNXlhaTUyWVdSa0tIaHFMQ0J5TG5KcUtUc0tJQ0FnSUNBZ0lDQnlMbkpxTG5aemRXSW9ZbW91Y0c5emFYUnBiMjRzSUhJdWNtb3BPd29nSUNBZ0lDQWdJSFJvYVhNdWNtVnpkV3gwTG5CMWMyZ29jaWs3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWR2NtbGpkR2x2YmtWeGRXRjBhVzl1YzBaeWIyMURiMjUwWVdOMEtISXNJSFJvYVhNdVpuSnBZM1JwYjI1U1pYTjFiSFFwT3dvZ0lDQWdJQ0I5SUM4dklFTm9aV05ySUdOdmNtNWxjbk1LQ2dvZ0lDQWdJQ0JzWlhRZ2Ntb2dQU0IyTTNCdmIyd3VaMlYwS0NrN0NpQWdJQ0FnSUdOdmJuTjBJSE53YUdWeVpWOTBiMTlqYjNKdVpYSWdQU0J6Y0dobGNtVkNiM2hmYzNCb1pYSmxYM1J2WDJOdmNtNWxjanNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJQ0U5UFNBeUlDWW1JQ0ZtYjNWdVpEc2dhaXNyS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2F5QTlJREE3SUdzZ0lUMDlJRElnSmlZZ0lXWnZkVzVrT3lCckt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUd3Z1BTQXdPeUJzSUNFOVBTQXlJQ1ltSUNGbWIzVnVaRHNnYkNzcktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKcUxuTmxkQ2d3TENBd0xDQXdLVHNLQ2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hxS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21vdWRtRmtaQ2h6YVdSbGMxc3dYU3dnY21vcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lISnFMblp6ZFdJb2MybGtaWE5iTUYwc0lISnFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHc3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlhaTUyWVdSa0tITnBaR1Z6V3pGZExDQnlhaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21vdWRuTjFZaWh6YVdSbGMxc3hYU3dnY21vcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhKcUxuWmhaR1FvYzJsa1pYTmJNbDBzSUhKcUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlhaTUyYzNWaUtITnBaR1Z6V3pKZExDQnlhaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdMeThnVjI5eWJHUWdjRzl6YVhScGIyNGdiMllnWTI5eWJtVnlDZ29LSUNBZ0lDQWdJQ0FnSUNBZ2VHb3VkbUZrWkNoeWFpd2djM0JvWlhKbFgzUnZYMk52Y201bGNpazdDaUFnSUNBZ0lDQWdJQ0FnSUhOd2FHVnlaVjkwYjE5amIzSnVaWEl1ZG5OMVlpaDRhU3dnYzNCb1pYSmxYM1J2WDJOdmNtNWxjaWs3Q2dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNCb1pYSmxYM1J2WDJOdmNtNWxjaTVzWlc1bmRHaFRjWFZoY21Wa0tDa2dQQ0JTSUNvZ1Vpa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hxZFhOMFZHVnpkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpDQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjaUE5SUhSb2FYTXVZM0psWVhSbFEyOXVkR0ZqZEVWeGRXRjBhVzl1S0dKcExDQmlhaXdnYzJrc0lITnFMQ0J5YzJrc0lISnphaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdjaTV5YVM1amIzQjVLSE53YUdWeVpWOTBiMTlqYjNKdVpYSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lISXVjbWt1Ym05eWJXRnNhWHBsS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnY2k1dWFTNWpiM0I1S0hJdWNta3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lISXVjbWt1YzJOaGJHVW9VaXdnY2k1eWFTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NpNXlhaTVqYjNCNUtISnFLVHNnTHk4Z1RXRnJaU0J5Wld4aGRHbDJaU0IwYnlCaWIyUnBaWE1LQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdjaTV5YVM1MllXUmtLSGhwTENCeUxuSnBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlMbkpwTG5aemRXSW9ZbWt1Y0c5emFYUnBiMjRzSUhJdWNta3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lISXVjbW91ZG1Ga1pDaDRhaXdnY2k1eWFpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NpNXlhaTUyYzNWaUtHSnFMbkJ2YzJsMGFXOXVMQ0J5TG5KcUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzNWc2RDNXdkWE5vS0hJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFJuSnBZM1JwYjI1RmNYVmhkR2x2Ym5OR2NtOXRRMjl1ZEdGamRDaHlMQ0IwYUdsekxtWnlhV04wYVc5dVVtVnpkV3gwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZGpOd2IyOXNMbkpsYkdWaGMyVW9jbW9wT3dvZ0lDQWdJQ0J5YWlBOUlHNTFiR3c3SUM4dklFTm9aV05ySUdWa1oyVnpDZ29nSUNBZ0lDQmpiMjV6ZENCbFpHZGxWR0Z1WjJWdWRDQTlJSFl6Y0c5dmJDNW5aWFFvS1RzS0lDQWdJQ0FnWTI5dWMzUWdaV1JuWlVObGJuUmxjaUE5SUhZemNHOXZiQzVuWlhRb0tUc0tJQ0FnSUNBZ1kyOXVjM1FnY2lBOUlIWXpjRzl2YkM1blpYUW9LVHNnTHk4Z2NpQTlJR1ZrWjJVZ1kyVnVkR1Z5SUhSdklITndhR1Z5WlNCalpXNTBaWElLQ2lBZ0lDQWdJR052Ym5OMElHOXlkR2h2WjI5dVlXd2dQU0IyTTNCdmIyd3VaMlYwS0NrN0NpQWdJQ0FnSUdOdmJuTjBJR1JwYzNRZ1BTQjJNM0J2YjJ3dVoyVjBLQ2s3Q2lBZ0lDQWdJR052Ym5OMElFNXphV1JsY3lBOUlITnBaR1Z6TG14bGJtZDBhRHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJQ0U5UFNCT2MybGtaWE1nSmlZZ0lXWnZkVzVrT3lCcUt5c3BJSHNLSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JySUQwZ01Ec2dheUFoUFQwZ1RuTnBaR1Z6SUNZbUlDRm1iM1Z1WkRzZ2F5c3JLU0I3Q2lBZ0lDQWdJQ0FnSUNCcFppQW9haUFsSURNZ0lUMDlJR3NnSlNBektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUM4dklFZGxkQ0JsWkdkbElIUmhibWRsYm5RS0lDQWdJQ0FnSUNBZ0lDQWdjMmxrWlhOYmExMHVZM0p2YzNNb2MybGtaWE5iYWwwc0lHVmtaMlZVWVc1blpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXUm5aVlJoYm1kbGJuUXVibTl5YldGc2FYcGxLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lITnBaR1Z6VzJwZExuWmhaR1FvYzJsa1pYTmJhMTBzSUdWa1oyVkRaVzUwWlhJcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5TG1OdmNIa29lR2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlMblp6ZFdJb1pXUm5aVU5sYm5SbGNpd2djaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lISXVkbk4xWWloNGFpd2djaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5eWRHaHZibTl5YlNBOUlISXVaRzkwS0dWa1oyVlVZVzVuWlc1MEtUc2dMeThnWkdsemRHRnVZMlVnWm5KdmJTQmxaR2RsSUdObGJuUmxjaUIwYnlCemNHaGxjbVVnWTJWdWRHVnlJR2x1SUhSb1pTQjBZVzVuWlc1MElHUnBjbVZqZEdsdmJnb0tJQ0FnSUNBZ0lDQWdJQ0FnWldSblpWUmhibWRsYm5RdWMyTmhiR1VvYjNKMGFHOXViM0p0TENCdmNuUm9iMmR2Ym1Gc0tUc2dMeThnVm1WamRHOXlJR1p5YjIwZ1pXUm5aU0JqWlc1MFpYSWdkRzhnYzNCb1pYSmxJR05sYm5SbGNpQnBiaUIwYUdVZ2RHRnVaMlZ1ZENCa2FYSmxZM1JwYjI0S0lDQWdJQ0FnSUNBZ0lDQWdMeThnUm1sdVpDQjBhR1VnZEdocGNtUWdjMmxrWlNCdmNuUm9iMmR2Ym1Gc0lIUnZJSFJvYVhNZ2IyNWxDZ29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SURBN0Nnb2dJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9iQ0E5UFQwZ2FpQWxJRE1nZkh3Z2JDQTlQVDBnYXlBbElETXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNLeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdMeThnZG1WaklHWnliMjBnWldSblpTQmpaVzUwWlhJZ2RHOGdjM0JvWlhKbElIQnliMnBsWTNSbFpDQjBieUIwYUdVZ2NHeGhibVVnYjNKMGFHOW5iMjVoYkNCMGJ5QjBhR1VnWldSblpTQjBZVzVuWlc1MENnb0tJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRDNWpiM0I1S0hocEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRDNTJjM1ZpS0c5eWRHaHZaMjl1WVd3c0lHUnBjM1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wTG5aemRXSW9aV1JuWlVObGJuUmxjaXdnWkdsemRDazdDaUFnSUNBZ0lDQWdJQ0FnSUdScGMzUXVkbk4xWWloNGFpd2daR2x6ZENrN0lDOHZJRVJwYzNSaGJtTmxjeUJwYmlCMFlXNW5aVzUwSUdScGNtVmpkR2x2YmlCaGJtUWdaR2x6ZEdGdVkyVWdhVzRnZEdobElIQnNZVzVsSUc5eWRHaHZaMjl1WVd3Z2RHOGdhWFFLQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSa2FYTjBJRDBnVFdGMGFDNWhZbk1vYjNKMGFHOXViM0p0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtUnBjM1FnUFNCa2FYTjBMbXhsYm1kMGFDZ3BPd29LSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJrYVhOMElEd2djMmxrWlhOYmJGMHViR1Z1WjNSb0tDa2dKaVlnYm1ScGMzUWdQQ0JTS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHcDFjM1JVWlhOMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZkVzVrSUQwZ2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTWdQU0IwYUdsekxtTnlaV0YwWlVOdmJuUmhZM1JGY1hWaGRHbHZiaWhpYVN3Z1ltb3NJSE5wTENCemFpd2djbk5wTENCeWMyb3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lHVmtaMlZEWlc1MFpYSXVkbUZrWkNodmNuUm9iMmR2Ym1Gc0xDQnlaWE11Y21vcE95QXZMeUJpYjNnZ2Ntb0tDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpMbkpxTG1OdmNIa29jbVZ6TG5KcUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBMbTVsWjJGMFpTaHlaWE11Ym1rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5NXVhUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhNdWNta3VZMjl3ZVNoeVpYTXVjbW9wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1eWFTNTJZV1JrS0hocUxDQnlaWE11Y21rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5NXlhUzUyYzNWaUtIaHBMQ0J5WlhNdWNta3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjeTV5YVM1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTXVjbWt1YzJOaGJHVW9VaXdnY21WekxuSnBLVHNnTHk4Z1RXRnJaU0J5Wld4aGRHbDJaU0IwYnlCaWIyUnBaWE1LQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6TG5KcExuWmhaR1FvZUdrc0lISmxjeTV5YVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WekxuSnBMblp6ZFdJb1lta3VjRzl6YVhScGIyNHNJSEpsY3k1eWFTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpMbkpxTG5aaFpHUW9lR29zSUhKbGN5NXlhaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6TG5KcUxuWnpkV0lvWW1vdWNHOXphWFJwYjI0c0lISmxjeTV5YWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaWE4xYkhRdWNIVnphQ2h5WlhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFJuSnBZM1JwYjI1RmNYVmhkR2x2Ym5OR2NtOXRRMjl1ZEdGamRDaHlaWE1zSUhSb2FYTXVabkpwWTNScGIyNVNaWE4xYkhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMk0zQnZiMnd1Y21Wc1pXRnpaU2hsWkdkbFZHRnVaMlZ1ZEN3Z1pXUm5aVU5sYm5SbGNpd2djaXdnYjNKMGFHOW5iMjVoYkN3Z1pHbHpkQ2s3Q2lBZ0lDQjlDZ29nSUNBZ2NHeGhibVZDYjNnb2Mya3NJSE5xTENCNGFTd2dlR29zSUhGcExDQnhhaXdnWW1rc0lHSnFMQ0J5YzJrc0lISnphaXdnYW5WemRGUmxjM1FwSUhzS0lDQWdJQ0FnYzJvdVkyOXVkbVY0VUc5c2VXaGxaSEp2YmxKbGNISmxjMlZ1ZEdGMGFXOXVMbTFoZEdWeWFXRnNJRDBnYzJvdWJXRjBaWEpwWVd3N0NpQWdJQ0FnSUhOcUxtTnZiblpsZUZCdmJIbG9aV1J5YjI1U1pYQnlaWE5sYm5SaGRHbHZiaTVqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaU0E5SUhOcUxtTnZiR3hwYzJsdmJsSmxjM0J2Ym5ObE93b2dJQ0FnSUNCemFpNWpiMjUyWlhoUWIyeDVhR1ZrY205dVVtVndjbVZ6Wlc1MFlYUnBiMjR1YVdRZ1BTQnphaTVwWkRzS0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHeGhibVZEYjI1MlpYZ29jMmtzSUhOcUxtTnZiblpsZUZCdmJIbG9aV1J5YjI1U1pYQnlaWE5sYm5SaGRHbHZiaXdnZUdrc0lIaHFMQ0J4YVN3Z2NXb3NJR0pwTENCaWFpd2djMmtzSUhOcUxDQnFkWE4wVkdWemRDazdDaUFnSUNCOUNnb2dJQ0FnWTI5dWRtVjRRMjl1ZG1WNEtITnBMQ0J6YWl3Z2VHa3NJSGhxTENCeGFTd2djV29zSUdKcExDQmlhaXdnY25OcExDQnljMm9zSUdwMWMzUlVaWE4wTENCbVlXTmxUR2x6ZEVFc0lHWmhZMlZNYVhOMFFpa2dld29nSUNBZ0lDQmpiMjV6ZENCelpYQkJlR2x6SUQwZ1kyOXVkbVY0UTI5dWRtVjRYM05sY0VGNGFYTTdDZ29nSUNBZ0lDQnBaaUFvZUdrdVpHbHpkR0Z1WTJWVWJ5aDRhaWtnUGlCemFTNWliM1Z1WkdsdVoxTndhR1Z5WlZKaFpHbDFjeUFySUhOcUxtSnZkVzVrYVc1blUzQm9aWEpsVW1Ga2FYVnpLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvYzJrdVptbHVaRk5sY0dGeVlYUnBibWRCZUdsektITnFMQ0I0YVN3Z2NXa3NJSGhxTENCeGFpd2djMlZ3UVhocGN5d2dabUZqWlV4cGMzUkJMQ0JtWVdObFRHbHpkRUlwS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjU0E5SUdOdmJuWmxlRU52Ym5abGVGOXhPd29nSUNBZ0lDQWdJSE5wTG1Oc2FYQkJaMkZwYm5OMFNIVnNiQ2g0YVN3Z2NXa3NJSE5xTENCNGFpd2djV29zSUhObGNFRjRhWE1zSUMweE1EQXNJREV3TUN3Z2NtVnpLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JuVnRRMjl1ZEdGamRITWdQU0F3T3dvS0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdNRHNnYWlBaFBUMGdjbVZ6TG14bGJtZDBhRHNnYWlzcktTQjdDaUFnSUNBZ0lDQWdJQ0JwWmlBb2FuVnpkRlJsYzNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjaUE5SUhSb2FYTXVZM0psWVhSbFEyOXVkR0ZqZEVWeGRXRjBhVzl1S0dKcExDQmlhaXdnYzJrc0lITnFMQ0J5YzJrc0lISnphaWs3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5YVNBOUlISXVjbWs3Q2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5YWlBOUlISXVjbW83Q2lBZ0lDQWdJQ0FnSUNCelpYQkJlR2x6TG01bFoyRjBaU2h5TG01cEtUc0tJQ0FnSUNBZ0lDQWdJSEpsYzF0cVhTNXViM0p0WVd3dWJtVm5ZWFJsS0hFcE93b2dJQ0FnSUNBZ0lDQWdjUzV6WTJGc1pTaHlaWE5iYWwwdVpHVndkR2dzSUhFcE93b2dJQ0FnSUNBZ0lDQWdjbVZ6VzJwZExuQnZhVzUwTG5aaFpHUW9jU3dnY21rcE93b2dJQ0FnSUNBZ0lDQWdjbW91WTI5d2VTaHlaWE5iYWwwdWNHOXBiblFwT3lBdkx5QkRiMjUwWVdOMElIQnZhVzUwY3lCaGNtVWdhVzRnZDI5eWJHUWdZMjl2Y21ScGJtRjBaWE11SUZSeVlXNXpabTl5YlNCaVlXTnJJSFJ2SUhKbGJHRjBhWFpsQ2dvZ0lDQWdJQ0FnSUNBZ2Nta3Vkbk4xWWloNGFTd2djbWtwT3dvZ0lDQWdJQ0FnSUNBZ2Ntb3Vkbk4xWWloNGFpd2djbW9wT3lBdkx5Qk5ZV3RsSUhKbGJHRjBhWFpsSUhSdklHSnZaR2xsY3dvS0lDQWdJQ0FnSUNBZ0lISnBMblpoWkdRb2VHa3NJSEpwS1RzS0lDQWdJQ0FnSUNBZ0lISnBMblp6ZFdJb1lta3VjRzl6YVhScGIyNHNJSEpwS1RzS0lDQWdJQ0FnSUNBZ0lISnFMblpoWkdRb2VHb3NJSEpxS1RzS0lDQWdJQ0FnSUNBZ0lISnFMblp6ZFdJb1ltb3VjRzl6YVhScGIyNHNJSEpxS1RzS0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WemRXeDBMbkIxYzJnb2NpazdDaUFnSUNBZ0lDQWdJQ0J1ZFcxRGIyNTBZV04wY3lzck93b0tJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVsYm1GaWJHVkdjbWxqZEdsdmJsSmxaSFZqZEdsdmJpa2dld29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVWnlhV04wYVc5dVJYRjFZWFJwYjI1elJuSnZiVU52Ym5SaFkzUW9jaXdnZEdocGN5NW1jbWxqZEdsdmJsSmxjM1ZzZENrN0NpQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVsYm1GaWJHVkdjbWxqZEdsdmJsSmxaSFZqZEdsdmJpQW1KaUJ1ZFcxRGIyNTBZV04wY3lrZ2V3b2dJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZHY21samRHbHZia1p5YjIxQmRtVnlZV2RsS0c1MWJVTnZiblJoWTNSektUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdJQ0J6Y0dobGNtVkRiMjUyWlhnb2Mya3NJSE5xTENCNGFTd2dlR29zSUhGcExDQnhhaXdnWW1rc0lHSnFMQ0J5YzJrc0lISnphaXdnYW5WemRGUmxjM1FwSUhzS0lDQWdJQ0FnWTI5dWMzUWdkak53YjI5c0lEMGdkR2hwY3k1Mk0zQnZiMnc3Q2lBZ0lDQWdJSGhwTG5aemRXSW9lR29zSUdOdmJuWmxlRjkwYjE5emNHaGxjbVVwT3dvZ0lDQWdJQ0JqYjI1emRDQnViM0p0WVd4eklEMGdjMm91Wm1GalpVNXZjbTFoYkhNN0NpQWdJQ0FnSUdOdmJuTjBJR1poWTJWeklEMGdjMm91Wm1GalpYTTdDaUFnSUNBZ0lHTnZibk4wSUhabGNuUnpJRDBnYzJvdWRtVnlkR2xqWlhNN0NpQWdJQ0FnSUdOdmJuTjBJRklnUFNCemFTNXlZV1JwZFhNN0NpQWdJQ0FnSUM4dklDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDOHZJSDBLQ2lBZ0lDQWdJR3hsZENCbWIzVnVaQ0E5SUdaaGJITmxPeUF2THlCRGFHVmpheUJqYjNKdVpYSnpDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQWhQVDBnZG1WeWRITXViR1Z1WjNSb095QnBLeXNwSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0IySUQwZ2RtVnlkSE5iYVYwN0lDOHZJRmR2Y214a0lIQnZjMmwwYVc5dUlHOW1JR052Y201bGNnb0tJQ0FnSUNBZ0lDQmpiMjV6ZENCM2IzSnNaRU52Y201bGNpQTlJSE53YUdWeVpVTnZiblpsZUY5M2IzSnNaRU52Y201bGNqc0tJQ0FnSUNBZ0lDQnhhaTUyYlhWc2RDaDJMQ0IzYjNKc1pFTnZjbTVsY2lrN0NpQWdJQ0FnSUNBZ2VHb3VkbUZrWkNoM2IzSnNaRU52Y201bGNpd2dkMjl5YkdSRGIzSnVaWElwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSE53YUdWeVpWOTBiMTlqYjNKdVpYSWdQU0J6Y0dobGNtVkRiMjUyWlhoZmMzQm9aWEpsVkc5RGIzSnVaWEk3Q2lBZ0lDQWdJQ0FnZDI5eWJHUkRiM0p1WlhJdWRuTjFZaWg0YVN3Z2MzQm9aWEpsWDNSdlgyTnZjbTVsY2lrN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2h6Y0dobGNtVmZkRzlmWTI5eWJtVnlMbXhsYm1kMGFGTnhkV0Z5WldRb0tTQThJRklnS2lCU0tTQjdDaUFnSUNBZ0lDQWdJQ0JwWmlBb2FuVnpkRlJsYzNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnWm05MWJtUWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NpQTlJSFJvYVhNdVkzSmxZWFJsUTI5dWRHRmpkRVZ4ZFdGMGFXOXVLR0pwTENCaWFpd2djMmtzSUhOcUxDQnljMmtzSUhKemFpazdDaUFnSUNBZ0lDQWdJQ0J5TG5KcExtTnZjSGtvYzNCb1pYSmxYM1J2WDJOdmNtNWxjaWs3Q2lBZ0lDQWdJQ0FnSUNCeUxuSnBMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdJQ0FnSUNBZ2NpNXVhUzVqYjNCNUtISXVjbWtwT3dvZ0lDQWdJQ0FnSUNBZ2NpNXlhUzV6WTJGc1pTaFNMQ0J5TG5KcEtUc0tJQ0FnSUNBZ0lDQWdJSGR2Y214a1EyOXlibVZ5TG5aemRXSW9lR29zSUhJdWNtb3BPeUF2THlCVGFHOTFiR1FnWW1VZ2NtVnNZWFJwZG1VZ2RHOGdkR2hsSUdKdlpIa3VDZ29nSUNBZ0lDQWdJQ0FnY2k1eWFTNTJZV1JrS0hocExDQnlMbkpwS1RzS0lDQWdJQ0FnSUNBZ0lISXVjbWt1ZG5OMVlpaGlhUzV3YjNOcGRHbHZiaXdnY2k1eWFTazdJQzh2SUZOb2IzVnNaQ0JpWlNCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnWW05a2VTNEtDaUFnSUNBZ0lDQWdJQ0J5TG5KcUxuWmhaR1FvZUdvc0lISXVjbW9wT3dvZ0lDQWdJQ0FnSUNBZ2NpNXlhaTUyYzNWaUtHSnFMbkJ2YzJsMGFXOXVMQ0J5TG5KcUtUc0tJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnpkV3gwTG5CMWMyZ29jaWs3Q2lBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVWnlhV04wYVc5dVJYRjFZWFJwYjI1elJuSnZiVU52Ym5SaFkzUW9jaXdnZEdocGN5NW1jbWxqZEdsdmJsSmxjM1ZzZENrN0NpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlDOHZJRU5vWldOcklITnBaR1VnS0hCc1lXNWxLU0JwYm5SbGNuTmxZM1JwYjI1ekNnb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUc1bVlXTmxjeUE5SUdaaFkyVnpMbXhsYm1kMGFEc2dhU0FoUFQwZ2JtWmhZMlZ6SUNZbUlHWnZkVzVrSUQwOVBTQm1ZV3h6WlRzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc0lEMGdibTl5YldGc2MxdHBYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQm1ZV05sSUQwZ1ptRmpaWE5iYVYwN0lDOHZJRWRsZENCM2IzSnNaQzEwY21GdWMyWnZjbTFsWkNCdWIzSnRZV3dnYjJZZ2RHaGxJR1poWTJVS0NpQWdJQ0FnSUNBZ1kyOXVjM1FnZDI5eWJHUk9iM0p0WVd3Z1BTQnpjR2hsY21WRGIyNTJaWGhmZDI5eWJHUk9iM0p0WVd3N0NpQWdJQ0FnSUNBZ2NXb3VkbTExYkhRb2JtOXliV0ZzTENCM2IzSnNaRTV2Y20xaGJDazdJQzh2SUVkbGRDQmhJSGR2Y214a0lIWmxjblJsZUNCbWNtOXRJSFJvWlNCbVlXTmxDZ29nSUNBZ0lDQWdJR052Ym5OMElIZHZjbXhrVUc5cGJuUWdQU0J6Y0dobGNtVkRiMjUyWlhoZmQyOXliR1JRYjJsdWREc0tJQ0FnSUNBZ0lDQnhhaTUyYlhWc2RDaDJaWEowYzF0bVlXTmxXekJkWFN3Z2QyOXliR1JRYjJsdWRDazdDaUFnSUNBZ0lDQWdkMjl5YkdSUWIybHVkQzUyWVdSa0tIaHFMQ0IzYjNKc1pGQnZhVzUwS1RzZ0x5OGdSMlYwSUdFZ2NHOXBiblFnYjI0Z2RHaGxJSE53YUdWeVpTd2dZMnh2YzJWemRDQjBieUIwYUdVZ1ptRmpaU0J1YjNKdFlXd0tDaUFnSUNBZ0lDQWdZMjl1YzNRZ2QyOXliR1JUY0dobGNtVlFiMmx1ZEVOc2IzTmxjM1JVYjFCc1lXNWxJRDBnYzNCb1pYSmxRMjl1ZG1WNFgzZHZjbXhrVTNCb1pYSmxVRzlwYm5SRGJHOXpaWE4wVkc5UWJHRnVaVHNLSUNBZ0lDQWdJQ0IzYjNKc1pFNXZjbTFoYkM1elkyRnNaU2d0VWl3Z2QyOXliR1JUY0dobGNtVlFiMmx1ZEVOc2IzTmxjM1JVYjFCc1lXNWxLVHNLSUNBZ0lDQWdJQ0I0YVM1MllXUmtLSGR2Y214a1UzQm9aWEpsVUc5cGJuUkRiRzl6WlhOMFZHOVFiR0Z1WlN3Z2QyOXliR1JUY0dobGNtVlFiMmx1ZEVOc2IzTmxjM1JVYjFCc1lXNWxLVHNnTHk4Z1ZtVmpkRzl5SUdaeWIyMGdZU0JtWVdObElIQnZhVzUwSUhSdklIUm9aU0JqYkc5elpYTjBJSEJ2YVc1MElHOXVJSFJvWlNCemNHaGxjbVVLQ2lBZ0lDQWdJQ0FnWTI5dWMzUWdjR1Z1WlhSeVlYUnBiMjVXWldNZ1BTQnpjR2hsY21WRGIyNTJaWGhmY0dWdVpYUnlZWFJwYjI1V1pXTTdDaUFnSUNBZ0lDQWdkMjl5YkdSVGNHaGxjbVZRYjJsdWRFTnNiM05sYzNSVWIxQnNZVzVsTG5aemRXSW9kMjl5YkdSUWIybHVkQ3dnY0dWdVpYUnlZWFJwYjI1V1pXTXBPeUF2THlCVWFHVWdjR1Z1WlhSeVlYUnBiMjR1SUU1bFoyRjBhWFpsSUhaaGJIVmxJRzFsWVc1eklHOTJaWEpzWVhBdUNnb2dJQ0FnSUNBZ0lHTnZibk4wSUhCbGJtVjBjbUYwYVc5dUlEMGdjR1Z1WlhSeVlYUnBiMjVXWldNdVpHOTBLSGR2Y214a1RtOXliV0ZzS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0IzYjNKc1pGQnZhVzUwVkc5VGNHaGxjbVVnUFNCemNHaGxjbVZEYjI1MlpYaGZjM0JvWlhKbFZHOVhiM0pzWkZCdmFXNTBPd29nSUNBZ0lDQWdJSGhwTG5aemRXSW9kMjl5YkdSUWIybHVkQ3dnZDI5eWJHUlFiMmx1ZEZSdlUzQm9aWEpsS1RzS0NpQWdJQ0FnSUNBZ2FXWWdLSEJsYm1WMGNtRjBhVzl1SUR3Z01DQW1KaUIzYjNKc1pGQnZhVzUwVkc5VGNHaGxjbVV1Wkc5MEtIZHZjbXhrVG05eWJXRnNLU0ErSURBcElIc0tJQ0FnSUNBZ0lDQWdJQzh2SUVsdWRHVnljMlZqZEhNZ2NHeGhibVV1SUU1dmR5QmphR1ZqYXlCcFppQjBhR1VnYzNCb1pYSmxJR2x6SUdsdWMybGtaU0IwYUdVZ1ptRmpaU0J3YjJ4NVoyOXVDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQm1ZV05sVm1WeWRITWdQU0JiWFRzZ0x5OGdSbUZqWlNCMlpYSjBhV05sY3l3Z2FXNGdkMjl5YkdRZ1kyOXZjbVJ6Q2dvZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREFzSUU1MlpYSjBjeUE5SUdaaFkyVXViR1Z1WjNSb095QnFJQ0U5UFNCT2RtVnlkSE03SUdvckt5a2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IzYjNKc1pGWmxjblJsZUNBOUlIWXpjRzl2YkM1blpYUW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NXb3VkbTExYkhRb2RtVnlkSE5iWm1GalpWdHFYVjBzSUhkdmNteGtWbVZ5ZEdWNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZUdvdWRtRmtaQ2gzYjNKc1pGWmxjblJsZUN3Z2QyOXliR1JXWlhKMFpYZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCbVlXTmxWbVZ5ZEhNdWNIVnphQ2gzYjNKc1pGWmxjblJsZUNrN0NpQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tIQnZhVzUwU1c1UWIyeDVaMjl1S0daaFkyVldaWEowY3l3Z2QyOXliR1JPYjNKdFlXd3NJSGhwS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0F2THlCSmN5QjBhR1VnYzNCb1pYSmxJR05sYm5SbGNpQnBiaUIwYUdVZ1ptRmpaU0J3YjJ4NVoyOXVQd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hblZ6ZEZSbGMzUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJQ0FnWm05MWJtUWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlJRDBnZEdocGN5NWpjbVZoZEdWRGIyNTBZV04wUlhGMVlYUnBiMjRvWW1rc0lHSnFMQ0J6YVN3Z2Myb3NJSEp6YVN3Z2NuTnFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2QyOXliR1JPYjNKdFlXd3VjMk5oYkdVb0xWSXNJSEl1Y21rcE95QXZMeUJEYjI1MFlXTjBJRzltWm5ObGRDd2dabkp2YlNCemNHaGxjbVVnWTJWdWRHVnlJSFJ2SUdOdmJuUmhZM1FLQ2lBZ0lDQWdJQ0FnSUNBZ0lIZHZjbXhrVG05eWJXRnNMbTVsWjJGMFpTaHlMbTVwS1RzZ0x5OGdUbTl5YldGc0lIQnZhVzUwYVc1bklHOTFkQ0J2WmlCemNHaGxjbVVLQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCbGJtVjBjbUYwYVc5dVZtVmpNaUE5SUhZemNHOXZiQzVuWlhRb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZDI5eWJHUk9iM0p0WVd3dWMyTmhiR1VvTFhCbGJtVjBjbUYwYVc5dUxDQndaVzVsZEhKaGRHbHZibFpsWXpJcE93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndaVzVsZEhKaGRHbHZibE53YUdWeVpWQnZhVzUwSUQwZ2RqTndiMjlzTG1kbGRDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCM2IzSnNaRTV2Y20xaGJDNXpZMkZzWlNndFVpd2djR1Z1WlhSeVlYUnBiMjVUY0dobGNtVlFiMmx1ZENrN0lDOHZlR2t1ZG5OMVlpaDRhaWt1ZG1Ga1pDaHdaVzVsZEhKaGRHbHZibE53YUdWeVpWQnZhVzUwS1M1MllXUmtLSEJsYm1WMGNtRjBhVzl1Vm1Wak1pQXNJSEl1Y21vcE93b0tJQ0FnSUNBZ0lDQWdJQ0FnZUdrdWRuTjFZaWg0YWl3Z2NpNXlhaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lISXVjbW91ZG1Ga1pDaHdaVzVsZEhKaGRHbHZibE53YUdWeVpWQnZhVzUwTENCeUxuSnFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpNXlhaTUyWVdSa0tIQmxibVYwY21GMGFXOXVWbVZqTWl3Z2NpNXlhaWs3SUM4dklGTm9iM1ZzWkNCaVpTQnlaV3hoZEdsMlpTQjBieUIwYUdVZ1ltOWtlUzRLQ2lBZ0lDQWdJQ0FnSUNBZ0lISXVjbW91ZG1Ga1pDaDRhaXdnY2k1eWFpazdDaUFnSUNBZ0lDQWdJQ0FnSUhJdWNtb3Vkbk4xWWloaWFpNXdiM05wZEdsdmJpd2djaTV5YWlrN0lDOHZJRk5vYjNWc1pDQmlaU0J5Wld4aGRHbDJaU0IwYnlCMGFHVWdZbTlrZVM0S0NpQWdJQ0FnSUNBZ0lDQWdJSEl1Y21rdWRtRmtaQ2g0YVN3Z2NpNXlhU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISXVjbWt1ZG5OMVlpaGlhUzV3YjNOcGRHbHZiaXdnY2k1eWFTazdDaUFnSUNBZ0lDQWdJQ0FnSUhZemNHOXZiQzV5Wld4bFlYTmxLSEJsYm1WMGNtRjBhVzl1Vm1Wak1pazdDaUFnSUNBZ0lDQWdJQ0FnSUhZemNHOXZiQzV5Wld4bFlYTmxLSEJsYm1WMGNtRjBhVzl1VTNCb1pYSmxVRzlwYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjM1ZzZEM1d2RYTm9LSElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVVp5YVdOMGFXOXVSWEYxWVhScGIyNXpSbkp2YlVOdmJuUmhZM1FvY2l3Z2RHaHBjeTVtY21samRHbHZibEpsYzNWc2RDazdJQzh2SUZKbGJHVmhjMlVnZDI5eWJHUWdkbVZ5ZEdsalpYTUtDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQXdMQ0JPWm1GalpYWmxjblJ6SUQwZ1ptRmpaVlpsY25SekxteGxibWQwYURzZ2FpQWhQVDBnVG1aaFkyVjJaWEowY3pzZ2Fpc3JLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdkak53YjI5c0xuSmxiR1ZoYzJVb1ptRmpaVlpsY25SelcycGRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPeUF2THlCWFpTQnZibXg1SUdWNGNHVmpkQ0FxYjI1bEtpQm1ZV05sSUdOdmJuUmhZM1FLSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVZrWjJVL0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJQ0U5UFNCbVlXTmxMbXhsYm1kMGFEc2dhaXNyS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1IyVjBJSFIzYnlCM2IzSnNaQ0IwY21GdWMyWnZjbTFsWkNCMlpYSjBhV05sY3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIWXhJRDBnZGpOd2IyOXNMbWRsZENncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFl5SUQwZ2RqTndiMjlzTG1kbGRDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIRnFMblp0ZFd4MEtIWmxjblJ6VzJaaFkyVmJLR29nS3lBeEtTQWxJR1poWTJVdWJHVnVaM1JvWFYwc0lIWXhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQnhhaTUyYlhWc2RDaDJaWEowYzF0bVlXTmxXeWhxSUNzZ01pa2dKU0JtWVdObExteGxibWQwYUYxZExDQjJNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdlR291ZG1Ga1pDaDJNU3dnZGpFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUhocUxuWmhaR1FvZGpJc0lIWXlLVHNnTHk4Z1EyOXVjM1J5ZFdOMElHVmtaMlVnZG1WamRHOXlDZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdWa1oyVWdQU0J6Y0dobGNtVkRiMjUyWlhoZlpXUm5aVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJNaTUyYzNWaUtIWXhMQ0JsWkdkbEtUc2dMeThnUTI5dWMzUnlkV04wSUhSb1pTQnpZVzFsSUhabFkzUnZjaXdnWW5WMElHNXZjbTFoYkdsNlpXUUtDaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWldSblpWVnVhWFFnUFNCemNHaGxjbVZEYjI1MlpYaGZaV1JuWlZWdWFYUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pXUm5aUzUxYm1sMEtHVmtaMlZWYm1sMEtUc2dMeThnY0NCcGN5QjRhU0J3Y205cVpXTjBaV1FnYjI1MGJ5QjBhR1VnWldSblpRb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3SUQwZ2RqTndiMjlzTG1kbGRDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhZeFgzUnZYM2hwSUQwZ2RqTndiMjlzTG1kbGRDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIaHBMblp6ZFdJb2RqRXNJSFl4WDNSdlgzaHBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa2IzUWdQU0IyTVY5MGIxOTRhUzVrYjNRb1pXUm5aVlZ1YVhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUdWa1oyVlZibWwwTG5OallXeGxLR1J2ZEN3Z2NDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NDNTJZV1JrS0hZeExDQndLVHNnTHk4Z1EyOXRjSFYwWlNCaElIWmxZM1J2Y2lCbWNtOXRJSEFnZEc4Z2RHaGxJR05sYm5SbGNpQnZaaUIwYUdVZ2MzQm9aWEpsQ2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIaHBYM1J2WDNBZ1BTQjJNM0J2YjJ3dVoyVjBLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdjQzUyYzNWaUtIaHBMQ0I0YVY5MGIxOXdLVHNnTHk4Z1EyOXNiR2x6YVc5dUlHbG1JSFJvWlNCbFpHZGxMWE53YUdWeVpTQmthWE4wWVc1alpTQnBjeUJzWlhOeklIUm9ZVzRnZEdobElISmhaR2wxY3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVGT1JDQnBaaUJ3SUdseklHbHVJR0psZEhkbFpXNGdkakVnWVc1a0lIWXlDZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrYjNRZ1BpQXdJQ1ltSUdSdmRDQXFJR1J2ZENBOElHVmtaMlV1YkdWdVozUm9VM0YxWVhKbFpDZ3BJQ1ltSUhocFgzUnZYM0F1YkdWdVozUm9VM0YxWVhKbFpDZ3BJRHdnVWlBcUlGSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOdmJHeHBjMmx2YmlCcFppQjBhR1VnWldSblpTMXpjR2hsY21VZ1pHbHpkR0Z1WTJVZ2FYTWdiR1Z6Y3lCMGFHRnVJSFJvWlNCeVlXUnBkWE1LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVWa1oyVWdZMjl1ZEdGamRDRUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hxZFhOMFZHVnpkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeUlEMGdkR2hwY3k1amNtVmhkR1ZEYjI1MFlXTjBSWEYxWVhScGIyNG9ZbWtzSUdKcUxDQnphU3dnYzJvc0lISnphU3dnY25OcUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQXVkbk4xWWloNGFpd2djaTV5YWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd0xuWnpkV0lvZUdrc0lISXVibWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2k1dWFTNXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEl1Ym1rdWMyTmhiR1VvVWl3Z2NpNXlhU2s3SUM4dklGTm9iM1ZzWkNCaVpTQnlaV3hoZEdsMlpTQjBieUIwYUdVZ1ltOWtlUzRLQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5TG5KcUxuWmhaR1FvZUdvc0lISXVjbW9wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2k1eWFpNTJjM1ZpS0dKcUxuQnZjMmwwYVc5dUxDQnlMbkpxS1RzZ0x5OGdVMmh2ZFd4a0lHSmxJSEpsYkdGMGFYWmxJSFJ2SUhSb1pTQmliMlI1TGdvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJdWNta3VkbUZrWkNoNGFTd2djaTV5YVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUxuSnBMblp6ZFdJb1lta3VjRzl6YVhScGIyNHNJSEl1Y21rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOMWJIUXVjSFZ6YUNoeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxSbkpwWTNScGIyNUZjWFZoZEdsdmJuTkdjbTl0UTI5dWRHRmpkQ2h5TENCMGFHbHpMbVp5YVdOMGFXOXVVbVZ6ZFd4MEtUc2dMeThnVW1Wc1pXRnpaU0IzYjNKc1pDQjJaWEowYVdObGN3b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHb2dQU0F3TENCT1ptRmpaWFpsY25SeklEMGdabUZqWlZabGNuUnpMbXhsYm1kMGFEc2dhaUFoUFQwZ1RtWmhZMlYyWlhKMGN6c2dhaXNyS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWXpjRzl2YkM1eVpXeGxZWE5sS0daaFkyVldaWEowYzF0cVhTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkak53YjI5c0xuSmxiR1ZoYzJVb2RqRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkak53YjI5c0xuSmxiR1ZoYzJVb2RqSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkak53YjI5c0xuSmxiR1ZoYzJVb2NDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJNM0J2YjJ3dWNtVnNaV0Z6WlNoNGFWOTBiMTl3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZemNHOXZiQzV5Wld4bFlYTmxLSFl4WDNSdlgzaHBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUhZemNHOXZiQzV5Wld4bFlYTmxLSFl4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyTTNCdmIyd3VjbVZzWldGelpTaDJNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdkak53YjI5c0xuSmxiR1ZoYzJVb2NDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RqTndiMjlzTG5KbGJHVmhjMlVvZUdsZmRHOWZjQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdkak53YjI5c0xuSmxiR1ZoYzJVb2RqRmZkRzlmZUdrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNCOUlDOHZJRkpsYkdWaGMyVWdkMjl5YkdRZ2RtVnlkR2xqWlhNS0Nnb2dJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhaUE5SURBc0lFNW1ZV05sZG1WeWRITWdQU0JtWVdObFZtVnlkSE11YkdWdVozUm9PeUJxSUNFOVBTQk9abUZqWlhabGNuUnpPeUJxS3lzcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZGpOd2IyOXNMbkpsYkdWaGMyVW9abUZqWlZabGNuUnpXMnBkS1RzS0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdJQ0J3YkdGdVpVTnZiblpsZUNod2JHRnVaVk5vWVhCbExDQmpiMjUyWlhoVGFHRndaU3dnY0d4aGJtVlFiM05wZEdsdmJpd2dZMjl1ZG1WNFVHOXphWFJwYjI0c0lIQnNZVzVsVVhWaGRDd2dZMjl1ZG1WNFVYVmhkQ3dnY0d4aGJtVkNiMlI1TENCamIyNTJaWGhDYjJSNUxDQnphU3dnYzJvc0lHcDFjM1JVWlhOMEtTQjdDaUFnSUNBZ0lDOHZJRk5wYlhCc2VTQnlaWFIxY200Z2RHaGxJSEJ2YVc1MGN5QmlaV2hwYm1RZ2RHaGxJSEJzWVc1bExnb2dJQ0FnSUNCamIyNXpkQ0IzYjNKc1pGWmxjblJsZUNBOUlIQnNZVzVsUTI5dWRtVjRYM1k3Q2lBZ0lDQWdJR052Ym5OMElIZHZjbXhrVG05eWJXRnNJRDBnY0d4aGJtVkRiMjUyWlhoZmJtOXliV0ZzT3dvZ0lDQWdJQ0IzYjNKc1pFNXZjbTFoYkM1elpYUW9NQ3dnTUN3Z01TazdDaUFnSUNBZ0lIQnNZVzVsVVhWaGRDNTJiWFZzZENoM2IzSnNaRTV2Y20xaGJDd2dkMjl5YkdST2IzSnRZV3dwT3lBdkx5QlVkWEp1SUc1dmNtMWhiQ0JoWTJOdmNtUnBibWNnZEc4Z2NHeGhibVVnYjNKcFpXNTBZWFJwYjI0S0NpQWdJQ0FnSUd4bGRDQnVkVzFEYjI1MFlXTjBjeUE5SURBN0NpQWdJQ0FnSUdOdmJuTjBJSEpsYkhCdmN5QTlJSEJzWVc1bFEyOXVkbVY0WDNKbGJIQnZjenNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJQ0U5UFNCamIyNTJaWGhUYUdGd1pTNTJaWEowYVdObGN5NXNaVzVuZEdnN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUM4dklFZGxkQ0IzYjNKc1pDQmpiMjUyWlhnZ2RtVnlkR1Y0Q2lBZ0lDQWdJQ0FnZDI5eWJHUldaWEowWlhndVkyOXdlU2hqYjI1MlpYaFRhR0Z3WlM1MlpYSjBhV05sYzF0cFhTazdDaUFnSUNBZ0lDQWdZMjl1ZG1WNFVYVmhkQzUyYlhWc2RDaDNiM0pzWkZabGNuUmxlQ3dnZDI5eWJHUldaWEowWlhncE93b2dJQ0FnSUNBZ0lHTnZiblpsZUZCdmMybDBhVzl1TG5aaFpHUW9kMjl5YkdSV1pYSjBaWGdzSUhkdmNteGtWbVZ5ZEdWNEtUc0tJQ0FnSUNBZ0lDQjNiM0pzWkZabGNuUmxlQzUyYzNWaUtIQnNZVzVsVUc5emFYUnBiMjRzSUhKbGJIQnZjeWs3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdaRzkwSUQwZ2QyOXliR1JPYjNKdFlXd3VaRzkwS0hKbGJIQnZjeWs3Q2dvZ0lDQWdJQ0FnSUdsbUlDaGtiM1FnUEQwZ01DNHdLU0I3Q2lBZ0lDQWdJQ0FnSUNCcFppQW9hblZ6ZEZSbGMzUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdDaUFnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY2lBOUlIUm9hWE11WTNKbFlYUmxRMjl1ZEdGamRFVnhkV0YwYVc5dUtIQnNZVzVsUW05a2VTd2dZMjl1ZG1WNFFtOWtlU3dnY0d4aGJtVlRhR0Z3WlN3Z1kyOXVkbVY0VTJoaGNHVXNJSE5wTENCemFpazdJQzh2SUVkbGRDQjJaWEowWlhnZ2NHOXphWFJwYjI0Z2NISnZhbVZqZEdWa0lHOXVJSEJzWVc1bENnb2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISnZhbVZqZEdWa0lEMGdjR3hoYm1WRGIyNTJaWGhmY0hKdmFtVmpkR1ZrT3dvZ0lDQWdJQ0FnSUNBZ2QyOXliR1JPYjNKdFlXd3VjMk5oYkdVb2QyOXliR1JPYjNKdFlXd3VaRzkwS0hKbGJIQnZjeWtzSUhCeWIycGxZM1JsWkNrN0NpQWdJQ0FnSUNBZ0lDQjNiM0pzWkZabGNuUmxlQzUyYzNWaUtIQnliMnBsWTNSbFpDd2djSEp2YW1WamRHVmtLVHNLSUNBZ0lDQWdJQ0FnSUhCeWIycGxZM1JsWkM1MmMzVmlLSEJzWVc1bFVHOXphWFJwYjI0c0lISXVjbWtwT3lBdkx5QkdjbTl0SUhCc1lXNWxJSFJ2SUhabGNuUmxlQ0J3Y205cVpXTjBaV1FnYjI0Z2NHeGhibVVLQ2lBZ0lDQWdJQ0FnSUNCeUxtNXBMbU52Y0hrb2QyOXliR1JPYjNKdFlXd3BPeUF2THlCRGIyNTBZV04wSUc1dmNtMWhiQ0JwY3lCMGFHVWdjR3hoYm1VZ2JtOXliV0ZzSUc5MWRDQm1jbTl0SUhCc1lXNWxDaUFnSUNBZ0lDQWdJQ0F2THlCeWFpQnBjeUJ1YjNjZ2FuVnpkQ0IwYUdVZ2RtVmpkRzl5SUdaeWIyMGdkR2hsSUdOdmJuWmxlQ0JqWlc1MFpYSWdkRzhnZEdobElIWmxjblJsZUFvS0lDQWdJQ0FnSUNBZ0lIZHZjbXhrVm1WeWRHVjRMblp6ZFdJb1kyOXVkbVY0VUc5emFYUnBiMjRzSUhJdWNtb3BPeUF2THlCTllXdGxJR2wwSUhKbGJHRjBhWFpsSUhSdklIUm9aU0JpYjJSNUNnb2dJQ0FnSUNBZ0lDQWdjaTV5YVM1MllXUmtLSEJzWVc1bFVHOXphWFJwYjI0c0lISXVjbWtwT3dvZ0lDQWdJQ0FnSUNBZ2NpNXlhUzUyYzNWaUtIQnNZVzVsUW05a2VTNXdiM05wZEdsdmJpd2djaTV5YVNrN0NpQWdJQ0FnSUNBZ0lDQnlMbkpxTG5aaFpHUW9ZMjl1ZG1WNFVHOXphWFJwYjI0c0lISXVjbW9wT3dvZ0lDQWdJQ0FnSUNBZ2NpNXlhaTUyYzNWaUtHTnZiblpsZUVKdlpIa3VjRzl6YVhScGIyNHNJSEl1Y21vcE93b2dJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYTjFiSFF1Y0hWemFDaHlLVHNLSUNBZ0lDQWdJQ0FnSUc1MWJVTnZiblJoWTNSekt5czdDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1WdVlXSnNaVVp5YVdOMGFXOXVVbVZrZFdOMGFXOXVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxSbkpwWTNScGIyNUZjWFZoZEdsdmJuTkdjbTl0UTI5dWRHRmpkQ2h5TENCMGFHbHpMbVp5YVdOMGFXOXVVbVZ6ZFd4MEtUc0tJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ1WVdKc1pVWnlhV04wYVc5dVVtVmtkV04wYVc5dUlDWW1JRzUxYlVOdmJuUmhZM1J6S1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVkdjbWxqZEdsdmJrWnliMjFCZG1WeVlXZGxLRzUxYlVOdmJuUmhZM1J6S1RzS0lDQWdJQ0FnZlFvZ0lDQWdmUW9LSUNBZ0lHSnZlRU52Ym5abGVDaHphU3dnYzJvc0lIaHBMQ0I0YWl3Z2NXa3NJSEZxTENCaWFTd2dZbW9zSUhKemFTd2djbk5xTENCcWRYTjBWR1Z6ZENrZ2V3b2dJQ0FnSUNCemFTNWpiMjUyWlhoUWIyeDVhR1ZrY205dVVtVndjbVZ6Wlc1MFlYUnBiMjR1YldGMFpYSnBZV3dnUFNCemFTNXRZWFJsY21saGJEc0tJQ0FnSUNBZ2Mya3VZMjl1ZG1WNFVHOXNlV2hsWkhKdmJsSmxjSEpsYzJWdWRHRjBhVzl1TG1OdmJHeHBjMmx2YmxKbGMzQnZibk5sSUQwZ2Mya3VZMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVTdDaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Ym5abGVFTnZiblpsZUNoemFTNWpiMjUyWlhoUWIyeDVhR1ZrY205dVVtVndjbVZ6Wlc1MFlYUnBiMjRzSUhOcUxDQjRhU3dnZUdvc0lIRnBMQ0J4YWl3Z1lta3NJR0pxTENCemFTd2djMm9zSUdwMWMzUlVaWE4wS1RzS0lDQWdJSDBLQ2lBZ0lDQnpjR2hsY21WSVpXbG5hSFJtYVdWc1pDaHpjR2hsY21WVGFHRndaU3dnYUdaVGFHRndaU3dnYzNCb1pYSmxVRzl6TENCb1psQnZjeXdnYzNCb1pYSmxVWFZoZEN3Z2FHWlJkV0YwTENCemNHaGxjbVZDYjJSNUxDQm9aa0p2Wkhrc0lISnphU3dnY25OcUxDQnFkWE4wVkdWemRDa2dld29nSUNBZ0lDQmpiMjV6ZENCa1lYUmhJRDBnYUdaVGFHRndaUzVrWVhSaE93b2dJQ0FnSUNCamIyNXpkQ0J5WVdScGRYTWdQU0J6Y0dobGNtVlRhR0Z3WlM1eVlXUnBkWE03Q2lBZ0lDQWdJR052Ym5OMElIY2dQU0JvWmxOb1lYQmxMbVZzWlcxbGJuUlRhWHBsT3dvZ0lDQWdJQ0JqYjI1emRDQjNiM0pzWkZCcGJHeGhjazltWm5ObGRDQTlJSE53YUdWeVpVaGxhV2RvZEdacFpXeGtYM1J0Y0RJN0lDOHZJRWRsZENCemNHaGxjbVVnY0c5emFYUnBiMjRnZEc4Z2FHVnBaMmgwWm1sbGJHUWdiRzlqWVd3aENnb2dJQ0FnSUNCamIyNXpkQ0JzYjJOaGJGTndhR1Z5WlZCdmN5QTlJSE53YUdWeVpVaGxhV2RvZEdacFpXeGtYM1J0Y0RFN0NpQWdJQ0FnSUZSeVlXNXpabTl5YlM1d2IybHVkRlJ2VEc5allXeEdjbUZ0WlNob1psQnZjeXdnYUdaUmRXRjBMQ0J6Y0dobGNtVlFiM01zSUd4dlkyRnNVM0JvWlhKbFVHOXpLVHNnTHk4Z1IyVjBJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdaR0YwWVNCd2IybHVkSE1nZEc4Z2RHVnpkQ0JoWjJGcGJuTjBDZ29nSUNBZ0lDQnNaWFFnYVUxcGJsZ2dQU0JOWVhSb0xtWnNiMjl5S0Noc2IyTmhiRk53YUdWeVpWQnZjeTU0SUMwZ2NtRmthWFZ6S1NBdklIY3BJQzBnTVRzS0lDQWdJQ0FnYkdWMElHbE5ZWGhZSUQwZ1RXRjBhQzVqWldsc0tDaHNiMk5oYkZOd2FHVnlaVkJ2Y3k1NElDc2djbUZrYVhWektTQXZJSGNwSUNzZ01Uc0tJQ0FnSUNBZ2JHVjBJR2xOYVc1WklEMGdUV0YwYUM1bWJHOXZjaWdvYkc5allXeFRjR2hsY21WUWIzTXVlU0F0SUhKaFpHbDFjeWtnTHlCM0tTQXRJREU3Q2lBZ0lDQWdJR3hsZENCcFRXRjRXU0E5SUUxaGRHZ3VZMlZwYkNnb2JHOWpZV3hUY0dobGNtVlFiM011ZVNBcklISmhaR2wxY3lrZ0x5QjNLU0FySURFN0lDOHZJRUpoYVd3Z2IzVjBJR2xtSUhkbElHRnlaU0J2ZFhRZ2IyWWdkR2hsSUhSbGNuSmhhVzRLQ2lBZ0lDQWdJR2xtSUNocFRXRjRXQ0E4SURBZ2ZId2dhVTFoZUZrZ1BDQXdJSHg4SUdsTmFXNVlJRDRnWkdGMFlTNXNaVzVuZEdnZ2ZId2dhVTFwYmxrZ1BpQmtZWFJoV3pCZExteGxibWQwYUNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnZlNBdkx5QkRiR0Z0Y0NCcGJtUmxlQ0IwYnlCbFpHZGxjd29LQ2lBZ0lDQWdJR2xtSUNocFRXbHVXQ0E4SURBcElIc0tJQ0FnSUNBZ0lDQnBUV2x1V0NBOUlEQTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2hwVFdGNFdDQThJREFwSUhzS0lDQWdJQ0FnSUNCcFRXRjRXQ0E5SURBN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaHBUV2x1V1NBOElEQXBJSHNLSUNBZ0lDQWdJQ0JwVFdsdVdTQTlJREE3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNocFRXRjRXU0E4SURBcElIc0tJQ0FnSUNBZ0lDQnBUV0Y0V1NBOUlEQTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2hwVFdsdVdDQStQU0JrWVhSaExteGxibWQwYUNrZ2V3b2dJQ0FnSUNBZ0lHbE5hVzVZSUQwZ1pHRjBZUzVzWlc1bmRHZ2dMU0F4T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2FVMWhlRmdnUGowZ1pHRjBZUzVzWlc1bmRHZ3BJSHNLSUNBZ0lDQWdJQ0JwVFdGNFdDQTlJR1JoZEdFdWJHVnVaM1JvSUMwZ01Uc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLR2xOWVhoWklENDlJR1JoZEdGYk1GMHViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdhVTFoZUZrZ1BTQmtZWFJoV3pCZExteGxibWQwYUNBdElERTdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHbG1JQ2hwVFdsdVdTQStQU0JrWVhSaFd6QmRMbXhsYm1kMGFDa2dld29nSUNBZ0lDQWdJR2xOYVc1WklEMGdaR0YwWVZzd1hTNXNaVzVuZEdnZ0xTQXhPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCdGFXNU5ZWGdnUFNCYlhUc0tJQ0FnSUNBZ2FHWlRhR0Z3WlM1blpYUlNaV04wVFdsdVRXRjRLR2xOYVc1WUxDQnBUV2x1V1N3Z2FVMWhlRmdzSUdsTllYaFpMQ0J0YVc1TllYZ3BPd29nSUNBZ0lDQmpiMjV6ZENCdGFXNGdQU0J0YVc1TllYaGJNRjA3Q2lBZ0lDQWdJR052Ym5OMElHMWhlQ0E5SUcxcGJrMWhlRnN4WFRzZ0x5OGdRbUZwYkNCdmRYUWdhV1lnZDJVZ1kyRnVKM1FnZEc5MVkyZ2dkR2hsSUdKdmRXNWthVzVuSUdobGFXZG9kQ0JpYjNnS0NpQWdJQ0FnSUdsbUlDaHNiMk5oYkZOd2FHVnlaVkJ2Y3k1NklDMGdjbUZrYVhWeklENGdiV0Y0SUh4OElHeHZZMkZzVTNCb1pYSmxVRzl6TG5vZ0t5QnlZV1JwZFhNZ1BDQnRhVzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElISmxjM1ZzZENBOUlIUm9hWE11Y21WemRXeDBPd29LSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SUdsTmFXNVlPeUJwSUR3Z2FVMWhlRmc3SUdrckt5a2dld29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNCcFRXbHVXVHNnYWlBOElHbE5ZWGhaT3lCcUt5c3BJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzUxYlVOdmJuUmhZM1J6UW1WbWIzSmxJRDBnY21WemRXeDBMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJR3hsZENCcGJuUmxjbk5sWTNScGJtY2dQU0JtWVd4elpUc2dMeThnVEc5M1pYSWdkSEpwWVc1bmJHVUtDaUFnSUNBZ0lDQWdJQ0JvWmxOb1lYQmxMbWRsZEVOdmJuWmxlRlJ5YVdGdVoyeGxVR2xzYkdGeUtHa3NJR29zSUdaaGJITmxLVHNLSUNBZ0lDQWdJQ0FnSUZSeVlXNXpabTl5YlM1d2IybHVkRlJ2VjI5eWJHUkdjbUZ0WlNob1psQnZjeXdnYUdaUmRXRjBMQ0JvWmxOb1lYQmxMbkJwYkd4aGNrOW1abk5sZEN3Z2QyOXliR1JRYVd4c1lYSlBabVp6WlhRcE93b0tJQ0FnSUNBZ0lDQWdJR2xtSUNoemNHaGxjbVZRYjNNdVpHbHpkR0Z1WTJWVWJ5aDNiM0pzWkZCcGJHeGhjazltWm5ObGRDa2dQQ0JvWmxOb1lYQmxMbkJwYkd4aGNrTnZiblpsZUM1aWIzVnVaR2x1WjFOd2FHVnlaVkpoWkdsMWN5QXJJSE53YUdWeVpWTm9ZWEJsTG1KdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsdWRHVnljMlZqZEdsdVp5QTlJSFJvYVhNdWMzQm9aWEpsUTI5dWRtVjRLSE53YUdWeVpWTm9ZWEJsTENCb1psTm9ZWEJsTG5CcGJHeGhja052Ym5abGVDd2djM0JvWlhKbFVHOXpMQ0IzYjNKc1pGQnBiR3hoY2s5bVpuTmxkQ3dnYzNCb1pYSmxVWFZoZEN3Z2FHWlJkV0YwTENCemNHaGxjbVZDYjJSNUxDQm9aa0p2Wkhrc0lITndhR1Z5WlZOb1lYQmxMQ0JvWmxOb1lYQmxMQ0JxZFhOMFZHVnpkQ2s3Q2lBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdhV1lnS0dwMWMzUlVaWE4wSUNZbUlHbHVkR1Z5YzJWamRHbHVaeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUgwZ0x5OGdWWEJ3WlhJZ2RISnBZVzVuYkdVS0Nnb2dJQ0FnSUNBZ0lDQWdhR1pUYUdGd1pTNW5aWFJEYjI1MlpYaFVjbWxoYm1kc1pWQnBiR3hoY2locExDQnFMQ0IwY25WbEtUc0tJQ0FnSUNBZ0lDQWdJRlJ5WVc1elptOXliUzV3YjJsdWRGUnZWMjl5YkdSR2NtRnRaU2hvWmxCdmN5d2dhR1pSZFdGMExDQm9abE5vWVhCbExuQnBiR3hoY2s5bVpuTmxkQ3dnZDI5eWJHUlFhV3hzWVhKUFptWnpaWFFwT3dvS0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Y0dobGNtVlFiM011WkdsemRHRnVZMlZVYnloM2IzSnNaRkJwYkd4aGNrOW1abk5sZENrZ1BDQm9abE5vWVhCbExuQnBiR3hoY2tOdmJuWmxlQzVpYjNWdVpHbHVaMU53YUdWeVpWSmhaR2wxY3lBcklITndhR1Z5WlZOb1lYQmxMbUp2ZFc1a2FXNW5VM0JvWlhKbFVtRmthWFZ6S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2x1ZEdWeWMyVmpkR2x1WnlBOUlIUm9hWE11YzNCb1pYSmxRMjl1ZG1WNEtITndhR1Z5WlZOb1lYQmxMQ0JvWmxOb1lYQmxMbkJwYkd4aGNrTnZiblpsZUN3Z2MzQm9aWEpsVUc5ekxDQjNiM0pzWkZCcGJHeGhjazltWm5ObGRDd2djM0JvWlhKbFVYVmhkQ3dnYUdaUmRXRjBMQ0J6Y0dobGNtVkNiMlI1TENCb1prSnZaSGtzSUhOd2FHVnlaVk5vWVhCbExDQm9abE5vWVhCbExDQnFkWE4wVkdWemRDazdDaUFnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUNBZ2FXWWdLR3AxYzNSVVpYTjBJQ1ltSUdsdWRHVnljMlZqZEdsdVp5a2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1ZFcxRGIyNTBZV04wY3lBOUlISmxjM1ZzZEM1c1pXNW5kR2dnTFNCdWRXMURiMjUwWVdOMGMwSmxabTl5WlRzS0NpQWdJQ0FnSUNBZ0lDQnBaaUFvYm5WdFEyOXVkR0ZqZEhNZ1BpQXlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQzhxQ2lBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5yYVhBZ1lXeHNJR0oxZENBeENpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR3NnUFNBd095QnJJRHdnYm5WdFEyOXVkR0ZqZEhNZ0xTQXhPeUJyS3lzcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1d2IzQW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdLaThLQ2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5Q2lBZ0lDQjlDZ29nSUNBZ1ltOTRTR1ZwWjJoMFptbGxiR1FvYzJrc0lITnFMQ0I0YVN3Z2VHb3NJSEZwTENCeGFpd2dZbWtzSUdKcUxDQnljMmtzSUhKemFpd2dhblZ6ZEZSbGMzUXBJSHNLSUNBZ0lDQWdjMmt1WTI5dWRtVjRVRzlzZVdobFpISnZibEpsY0hKbGMyVnVkR0YwYVc5dUxtMWhkR1Z5YVdGc0lEMGdjMmt1YldGMFpYSnBZV3c3Q2lBZ0lDQWdJSE5wTG1OdmJuWmxlRkJ2Ykhsb1pXUnliMjVTWlhCeVpYTmxiblJoZEdsdmJpNWpiMnhzYVhOcGIyNVNaWE53YjI1elpTQTlJSE5wTG1OdmJHeHBjMmx2YmxKbGMzQnZibk5sT3dvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNTJaWGhJWldsbmFIUm1hV1ZzWkNoemFTNWpiMjUyWlhoUWIyeDVhR1ZrY205dVVtVndjbVZ6Wlc1MFlYUnBiMjRzSUhOcUxDQjRhU3dnZUdvc0lIRnBMQ0J4YWl3Z1lta3NJR0pxTENCemFTd2djMm9zSUdwMWMzUlVaWE4wS1RzS0lDQWdJSDBLQ2lBZ0lDQmpiMjUyWlhoSVpXbG5hSFJtYVdWc1pDaGpiMjUyWlhoVGFHRndaU3dnYUdaVGFHRndaU3dnWTI5dWRtVjRVRzl6TENCb1psQnZjeXdnWTI5dWRtVjRVWFZoZEN3Z2FHWlJkV0YwTENCamIyNTJaWGhDYjJSNUxDQm9aa0p2Wkhrc0lISnphU3dnY25OcUxDQnFkWE4wVkdWemRDa2dld29nSUNBZ0lDQmpiMjV6ZENCa1lYUmhJRDBnYUdaVGFHRndaUzVrWVhSaE93b2dJQ0FnSUNCamIyNXpkQ0IzSUQwZ2FHWlRhR0Z3WlM1bGJHVnRaVzUwVTJsNlpUc0tJQ0FnSUNBZ1kyOXVjM1FnY21Ga2FYVnpJRDBnWTI5dWRtVjRVMmhoY0dVdVltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTTdDaUFnSUNBZ0lHTnZibk4wSUhkdmNteGtVR2xzYkdGeVQyWm1jMlYwSUQwZ1kyOXVkbVY0U0dWcFoyaDBabWxsYkdSZmRHMXdNanNLSUNBZ0lDQWdZMjl1YzNRZ1ptRmpaVXhwYzNRZ1BTQmpiMjUyWlhoSVpXbG5hSFJtYVdWc1pGOW1ZV05sVEdsemREc2dMeThnUjJWMElITndhR1Z5WlNCd2IzTnBkR2x2YmlCMGJ5Qm9aV2xuYUhSbWFXVnNaQ0JzYjJOaGJDRUtDaUFnSUNBZ0lHTnZibk4wSUd4dlkyRnNRMjl1ZG1WNFVHOXpJRDBnWTI5dWRtVjRTR1ZwWjJoMFptbGxiR1JmZEcxd01Uc0tJQ0FnSUNBZ1ZISmhibk5tYjNKdExuQnZhVzUwVkc5TWIyTmhiRVp5WVcxbEtHaG1VRzl6TENCb1psRjFZWFFzSUdOdmJuWmxlRkJ2Y3l3Z2JHOWpZV3hEYjI1MlpYaFFiM01wT3lBdkx5QkhaWFFnZEdobElHbHVaR1Y0SUc5bUlIUm9aU0JrWVhSaElIQnZhVzUwY3lCMGJ5QjBaWE4wSUdGbllXbHVjM1FLQ2lBZ0lDQWdJR3hsZENCcFRXbHVXQ0E5SUUxaGRHZ3VabXh2YjNJb0tHeHZZMkZzUTI5dWRtVjRVRzl6TG5nZ0xTQnlZV1JwZFhNcElDOGdkeWtnTFNBeE93b2dJQ0FnSUNCc1pYUWdhVTFoZUZnZ1BTQk5ZWFJvTG1ObGFXd29LR3h2WTJGc1EyOXVkbVY0VUc5ekxuZ2dLeUJ5WVdScGRYTXBJQzhnZHlrZ0t5QXhPd29nSUNBZ0lDQnNaWFFnYVUxcGJsa2dQU0JOWVhSb0xtWnNiMjl5S0Noc2IyTmhiRU52Ym5abGVGQnZjeTU1SUMwZ2NtRmthWFZ6S1NBdklIY3BJQzBnTVRzS0lDQWdJQ0FnYkdWMElHbE5ZWGhaSUQwZ1RXRjBhQzVqWldsc0tDaHNiMk5oYkVOdmJuWmxlRkJ2Y3k1NUlDc2djbUZrYVhWektTQXZJSGNwSUNzZ01Uc2dMeThnUW1GcGJDQnZkWFFnYVdZZ2QyVWdZWEpsSUc5MWRDQnZaaUIwYUdVZ2RHVnljbUZwYmdvS0lDQWdJQ0FnYVdZZ0tHbE5ZWGhZSUR3Z01DQjhmQ0JwVFdGNFdTQThJREFnZkh3Z2FVMXBibGdnUGlCa1lYUmhMbXhsYm1kMGFDQjhmQ0JwVFdsdVdTQStJR1JoZEdGYk1GMHViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNCOUlDOHZJRU5zWVcxd0lHbHVaR1Y0SUhSdklHVmtaMlZ6Q2dvS0lDQWdJQ0FnYVdZZ0tHbE5hVzVZSUR3Z01Da2dld29nSUNBZ0lDQWdJR2xOYVc1WUlEMGdNRHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0dsTllYaFlJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lHbE5ZWGhZSUQwZ01Ec0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2FXWWdLR2xOYVc1WklEd2dNQ2tnZXdvZ0lDQWdJQ0FnSUdsTmFXNVpJRDBnTURzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tHbE5ZWGhaSUR3Z01Da2dld29nSUNBZ0lDQWdJR2xOWVhoWklEMGdNRHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0dsTmFXNVlJRDQ5SUdSaGRHRXViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdhVTFwYmxnZ1BTQmtZWFJoTG14bGJtZDBhQ0F0SURFN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdsbUlDaHBUV0Y0V0NBK1BTQmtZWFJoTG14bGJtZDBhQ2tnZXdvZ0lDQWdJQ0FnSUdsTllYaFlJRDBnWkdGMFlTNXNaVzVuZEdnZ0xTQXhPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvYVUxaGVGa2dQajBnWkdGMFlWc3dYUzVzWlc1bmRHZ3BJSHNLSUNBZ0lDQWdJQ0JwVFdGNFdTQTlJR1JoZEdGYk1GMHViR1Z1WjNSb0lDMGdNVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0dsTmFXNVpJRDQ5SUdSaGRHRmJNRjB1YkdWdVozUm9LU0I3Q2lBZ0lDQWdJQ0FnYVUxcGJsa2dQU0JrWVhSaFd6QmRMbXhsYm1kMGFDQXRJREU3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHMXBiazFoZUNBOUlGdGRPd29nSUNBZ0lDQm9abE5vWVhCbExtZGxkRkpsWTNSTmFXNU5ZWGdvYVUxcGJsZ3NJR2xOYVc1WkxDQnBUV0Y0V0N3Z2FVMWhlRmtzSUcxcGJrMWhlQ2s3Q2lBZ0lDQWdJR052Ym5OMElHMXBiaUE5SUcxcGJrMWhlRnN3WFRzS0lDQWdJQ0FnWTI5dWMzUWdiV0Y0SUQwZ2JXbHVUV0Y0V3pGZE95QXZMeUJDWVdsc0lHOTFkQ0JwWmlCM1pTZHlaU0JqWVc1MElIUnZkV05vSUhSb1pTQmliM1Z1WkdsdVp5Qm9aV2xuYUhRZ1ltOTRDZ29nSUNBZ0lDQnBaaUFvYkc5allXeERiMjUyWlhoUWIzTXVlaUF0SUhKaFpHbDFjeUErSUcxaGVDQjhmQ0JzYjJOaGJFTnZiblpsZUZCdmN5NTZJQ3NnY21Ga2FYVnpJRHdnYldsdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdhVTFwYmxnN0lHa2dQQ0JwVFdGNFdEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJR2xOYVc1Wk95QnFJRHdnYVUxaGVGazdJR29yS3lrZ2V3b2dJQ0FnSUNBZ0lDQWdiR1YwSUdsdWRHVnljMlZqZEdsdVp5QTlJR1poYkhObE95QXZMeUJNYjNkbGNpQjBjbWxoYm1kc1pRb0tJQ0FnSUNBZ0lDQWdJR2htVTJoaGNHVXVaMlYwUTI5dWRtVjRWSEpwWVc1bmJHVlFhV3hzWVhJb2FTd2dhaXdnWm1Gc2MyVXBPd29nSUNBZ0lDQWdJQ0FnVkhKaGJuTm1iM0p0TG5CdmFXNTBWRzlYYjNKc1pFWnlZVzFsS0dobVVHOXpMQ0JvWmxGMVlYUXNJR2htVTJoaGNHVXVjR2xzYkdGeVQyWm1jMlYwTENCM2IzSnNaRkJwYkd4aGNrOW1abk5sZENrN0Nnb2dJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJuWmxlRkJ2Y3k1a2FYTjBZVzVqWlZSdktIZHZjbXhrVUdsc2JHRnlUMlptYzJWMEtTQThJR2htVTJoaGNHVXVjR2xzYkdGeVEyOXVkbVY0TG1KdmRXNWthVzVuVTNCb1pYSmxVbUZrYVhWeklDc2dZMjl1ZG1WNFUyaGhjR1V1WW05MWJtUnBibWRUY0dobGNtVlNZV1JwZFhNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVc1MFpYSnpaV04wYVc1bklEMGdkR2hwY3k1amIyNTJaWGhEYjI1MlpYZ29ZMjl1ZG1WNFUyaGhjR1VzSUdobVUyaGhjR1V1Y0dsc2JHRnlRMjl1ZG1WNExDQmpiMjUyWlhoUWIzTXNJSGR2Y214a1VHbHNiR0Z5VDJabWMyVjBMQ0JqYjI1MlpYaFJkV0YwTENCb1psRjFZWFFzSUdOdmJuWmxlRUp2Wkhrc0lHaG1RbTlrZVN3Z2JuVnNiQ3dnYm5Wc2JDd2dhblZ6ZEZSbGMzUXNJR1poWTJWTWFYTjBMQ0J1ZFd4c0tUc0tJQ0FnSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9hblZ6ZEZSbGMzUWdKaVlnYVc1MFpYSnpaV04wYVc1bktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE93b2dJQ0FnSUNBZ0lDQWdmU0F2THlCVmNIQmxjaUIwY21saGJtZHNaUW9LQ2lBZ0lDQWdJQ0FnSUNCb1psTm9ZWEJsTG1kbGRFTnZiblpsZUZSeWFXRnVaMnhsVUdsc2JHRnlLR2tzSUdvc0lIUnlkV1VwT3dvZ0lDQWdJQ0FnSUNBZ1ZISmhibk5tYjNKdExuQnZhVzUwVkc5WGIzSnNaRVp5WVcxbEtHaG1VRzl6TENCb1psRjFZWFFzSUdobVUyaGhjR1V1Y0dsc2JHRnlUMlptYzJWMExDQjNiM0pzWkZCcGJHeGhjazltWm5ObGRDazdDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiblpsZUZCdmN5NWthWE4wWVc1alpWUnZLSGR2Y214a1VHbHNiR0Z5VDJabWMyVjBLU0E4SUdobVUyaGhjR1V1Y0dsc2JHRnlRMjl1ZG1WNExtSnZkVzVrYVc1blUzQm9aWEpsVW1Ga2FYVnpJQ3NnWTI5dWRtVjRVMmhoY0dVdVltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXNTBaWEp6WldOMGFXNW5JRDBnZEdocGN5NWpiMjUyWlhoRGIyNTJaWGdvWTI5dWRtVjRVMmhoY0dVc0lHaG1VMmhoY0dVdWNHbHNiR0Z5UTI5dWRtVjRMQ0JqYjI1MlpYaFFiM01zSUhkdmNteGtVR2xzYkdGeVQyWm1jMlYwTENCamIyNTJaWGhSZFdGMExDQm9abEYxWVhRc0lHTnZiblpsZUVKdlpIa3NJR2htUW05a2VTd2diblZzYkN3Z2JuVnNiQ3dnYW5WemRGUmxjM1FzSUdaaFkyVk1hWE4wTENCdWRXeHNLVHNLSUNBZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ0lDQnBaaUFvYW5WemRGUmxjM1FnSmlZZ2FXNTBaWEp6WldOMGFXNW5LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvZ0lDQWdmUW9LSUNBZ0lITndhR1Z5WlZCaGNuUnBZMnhsS0hOcUxDQnphU3dnZUdvc0lIaHBMQ0J4YWl3Z2NXa3NJR0pxTENCaWFTd2djbk5wTENCeWMyb3NJR3AxYzNSVVpYTjBLU0I3Q2lBZ0lDQWdJQzh2SUZSb1pTQnViM0p0WVd3Z2FYTWdkR2hsSUhWdWFYUWdkbVZqZEc5eUlHWnliMjBnYzNCb1pYSmxJR05sYm5SbGNpQjBieUJ3WVhKMGFXTnNaU0JqWlc1MFpYSUtJQ0FnSUNBZ1kyOXVjM1FnYm05eWJXRnNJRDBnY0dGeWRHbGpiR1ZUY0dobGNtVmZibTl5YldGc093b2dJQ0FnSUNCdWIzSnRZV3d1YzJWMEtEQXNJREFzSURFcE93b2dJQ0FnSUNCNGFTNTJjM1ZpS0hocUxDQnViM0p0WVd3cE93b2dJQ0FnSUNCamIyNXpkQ0JzWlc1bmRHaFRjWFZoY21Wa0lEMGdibTl5YldGc0xteGxibWQwYUZOeGRXRnlaV1FvS1RzS0NpQWdJQ0FnSUdsbUlDaHNaVzVuZEdoVGNYVmhjbVZrSUR3OUlITnFMbkpoWkdsMWN5QXFJSE5xTG5KaFpHbDFjeWtnZXdvZ0lDQWdJQ0FnSUdsbUlDaHFkWE4wVkdWemRDa2dld29nSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQmpiMjV6ZENCeUlEMGdkR2hwY3k1amNtVmhkR1ZEYjI1MFlXTjBSWEYxWVhScGIyNG9ZbWtzSUdKcUxDQnphU3dnYzJvc0lISnphU3dnY25OcUtUc0tJQ0FnSUNBZ0lDQnViM0p0WVd3dWJtOXliV0ZzYVhwbEtDazdDaUFnSUNBZ0lDQWdjaTV5YWk1amIzQjVLRzV2Y20xaGJDazdDaUFnSUNBZ0lDQWdjaTV5YWk1elkyRnNaU2h6YWk1eVlXUnBkWE1zSUhJdWNtb3BPd29nSUNBZ0lDQWdJSEl1Ym1rdVkyOXdlU2h1YjNKdFlXd3BPeUF2THlCRGIyNTBZV04wSUc1dmNtMWhiQW9LSUNBZ0lDQWdJQ0J5TG01cExtNWxaMkYwWlNoeUxtNXBLVHNLSUNBZ0lDQWdJQ0J5TG5KcExuTmxkQ2d3TENBd0xDQXdLVHNnTHk4Z1EyVnVkR1Z5SUc5bUlIQmhjblJwWTJ4bENnb2dJQ0FnSUNBZ0lIUm9hWE11Y21WemRXeDBMbkIxYzJnb2NpazdDaUFnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZHY21samRHbHZia1Z4ZFdGMGFXOXVjMFp5YjIxRGIyNTBZV04wS0hJc0lIUm9hWE11Wm5KcFkzUnBiMjVTWlhOMWJIUXBPd29nSUNBZ0lDQjlDaUFnSUNCOUNnb2dJQ0FnY0d4aGJtVlFZWEowYVdOc1pTaHphaXdnYzJrc0lIaHFMQ0I0YVN3Z2NXb3NJSEZwTENCaWFpd2dZbWtzSUhKemFTd2djbk5xTENCcWRYTjBWR1Z6ZENrZ2V3b2dJQ0FnSUNCamIyNXpkQ0J1YjNKdFlXd2dQU0J3WVhKMGFXTnNaVkJzWVc1bFgyNXZjbTFoYkRzS0lDQWdJQ0FnYm05eWJXRnNMbk5sZENnd0xDQXdMQ0F4S1RzS0lDQWdJQ0FnWW1vdWNYVmhkR1Z5Ym1sdmJpNTJiWFZzZENodWIzSnRZV3dzSUc1dmNtMWhiQ2s3SUM4dklGUjFjbTRnYm05eWJXRnNJR0ZqWTI5eVpHbHVaeUIwYnlCd2JHRnVaU0J2Y21sbGJuUmhkR2x2YmdvS0lDQWdJQ0FnWTI5dWMzUWdjbVZzY0c5eklEMGdjR0Z5ZEdsamJHVlFiR0Z1WlY5eVpXeHdiM003Q2lBZ0lDQWdJSGhwTG5aemRXSW9ZbW91Y0c5emFYUnBiMjRzSUhKbGJIQnZjeWs3Q2lBZ0lDQWdJR052Ym5OMElHUnZkQ0E5SUc1dmNtMWhiQzVrYjNRb2NtVnNjRzl6S1RzS0NpQWdJQ0FnSUdsbUlDaGtiM1FnUEQwZ01DNHdLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHcDFjM1JVWlhOMEtTQjdDaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlRzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lHTnZibk4wSUhJZ1BTQjBhR2x6TG1OeVpXRjBaVU52Ym5SaFkzUkZjWFZoZEdsdmJpaGlhU3dnWW1vc0lITnBMQ0J6YWl3Z2NuTnBMQ0J5YzJvcE93b2dJQ0FnSUNBZ0lISXVibWt1WTI5d2VTaHViM0p0WVd3cE95QXZMeUJEYjI1MFlXTjBJRzV2Y20xaGJDQnBjeUIwYUdVZ2NHeGhibVVnYm05eWJXRnNDZ29nSUNBZ0lDQWdJSEl1Ym1rdWJtVm5ZWFJsS0hJdWJta3BPd29nSUNBZ0lDQWdJSEl1Y21rdWMyVjBLREFzSURBc0lEQXBPeUF2THlCRFpXNTBaWElnYjJZZ2NHRnlkR2xqYkdVS0lDQWdJQ0FnSUNBdkx5QkhaWFFnY0dGeWRHbGpiR1VnY0c5emFYUnBiMjRnY0hKdmFtVmpkR1ZrSUc5dUlIQnNZVzVsQ2dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5YjJwbFkzUmxaQ0E5SUhCaGNuUnBZMnhsVUd4aGJtVmZjSEp2YW1WamRHVmtPd29nSUNBZ0lDQWdJRzV2Y20xaGJDNXpZMkZzWlNodWIzSnRZV3d1Wkc5MEtIaHBLU3dnY0hKdmFtVmpkR1ZrS1RzS0lDQWdJQ0FnSUNCNGFTNTJjM1ZpS0hCeWIycGxZM1JsWkN3Z2NISnZhbVZqZEdWa0tUc2dMeTl3Y205cVpXTjBaV1F1ZG1Ga1pDaGlhaTV3YjNOcGRHbHZiaXh3Y205cVpXTjBaV1FwT3dvZ0lDQWdJQ0FnSUM4dklISnFJR2x6SUc1dmR5QjBhR1VnY0hKdmFtVmpkR1ZrSUhkdmNteGtJSEJ2YzJsMGFXOXVJRzFwYm5WeklIQnNZVzVsSUhCdmMybDBhVzl1Q2dvZ0lDQWdJQ0FnSUhJdWNtb3VZMjl3ZVNod2NtOXFaV04wWldRcE93b2dJQ0FnSUNBZ0lIUm9hWE11Y21WemRXeDBMbkIxYzJnb2NpazdDaUFnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZHY21samRHbHZia1Z4ZFdGMGFXOXVjMFp5YjIxRGIyNTBZV04wS0hJc0lIUm9hWE11Wm5KcFkzUnBiMjVTWlhOMWJIUXBPd29nSUNBZ0lDQjlDaUFnSUNCOUNnb2dJQ0FnWW05NFVHRnlkR2xqYkdVb2Mya3NJSE5xTENCNGFTd2dlR29zSUhGcExDQnhhaXdnWW1rc0lHSnFMQ0J5YzJrc0lISnphaXdnYW5WemRGUmxjM1FwSUhzS0lDQWdJQ0FnYzJrdVkyOXVkbVY0VUc5c2VXaGxaSEp2YmxKbGNISmxjMlZ1ZEdGMGFXOXVMbTFoZEdWeWFXRnNJRDBnYzJrdWJXRjBaWEpwWVd3N0NpQWdJQ0FnSUhOcExtTnZiblpsZUZCdmJIbG9aV1J5YjI1U1pYQnlaWE5sYm5SaGRHbHZiaTVqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaU0E5SUhOcExtTnZiR3hwYzJsdmJsSmxjM0J2Ym5ObE93b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjUyWlhoUVlYSjBhV05zWlNoemFTNWpiMjUyWlhoUWIyeDVhR1ZrY205dVVtVndjbVZ6Wlc1MFlYUnBiMjRzSUhOcUxDQjRhU3dnZUdvc0lIRnBMQ0J4YWl3Z1lta3NJR0pxTENCemFTd2djMm9zSUdwMWMzUlVaWE4wS1RzS0lDQWdJSDBLQ2lBZ0lDQmpiMjUyWlhoUVlYSjBhV05zWlNoemFpd2djMmtzSUhocUxDQjRhU3dnY1dvc0lIRnBMQ0JpYWl3Z1lta3NJSEp6YVN3Z2NuTnFMQ0JxZFhOMFZHVnpkQ2tnZXdvZ0lDQWdJQ0JzWlhRZ2NHVnVaWFJ5WVhSbFpFWmhZMlZKYm1SbGVDQTlJQzB4T3dvZ0lDQWdJQ0JqYjI1emRDQndaVzVsZEhKaGRHVmtSbUZqWlU1dmNtMWhiQ0E5SUdOdmJuWmxlRkJoY25ScFkyeGxYM0JsYm1WMGNtRjBaV1JHWVdObFRtOXliV0ZzT3dvZ0lDQWdJQ0JqYjI1emRDQjNiM0pzWkZCbGJtVjBjbUYwYVc5dVZtVmpJRDBnWTI5dWRtVjRVR0Z5ZEdsamJHVmZkMjl5YkdSUVpXNWxkSEpoZEdsdmJsWmxZenNLSUNBZ0lDQWdiR1YwSUcxcGJsQmxibVYwY21GMGFXOXVJRDBnYm5Wc2JEc0tDaUFnSUNBZ0lHTnZibk4wSUd4dlkyRnNJRDBnWTI5dWRtVjRVR0Z5ZEdsamJHVmZiRzlqWVd3N0NpQWdJQ0FnSUd4dlkyRnNMbU52Y0hrb2VHa3BPd29nSUNBZ0lDQnNiMk5oYkM1MmMzVmlLSGhxTENCc2IyTmhiQ2s3SUM4dklFTnZiblpsY25RZ2NHOXphWFJwYjI0Z2RHOGdjbVZzWVhScGRtVWdkR2hsSUdOdmJuWmxlQ0J2Y21sbmFXNEtDaUFnSUNBZ0lIRnFMbU52Ym1wMVoyRjBaU2hqY1dvcE93b2dJQ0FnSUNCamNXb3VkbTExYkhRb2JHOWpZV3dzSUd4dlkyRnNLVHNLQ2lBZ0lDQWdJR2xtSUNoemFpNXdiMmx1ZEVselNXNXphV1JsS0d4dlkyRnNLU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaHphaTUzYjNKc1pGWmxjblJwWTJWelRtVmxaSE5WY0dSaGRHVXBJSHNLSUNBZ0lDQWdJQ0FnSUhOcUxtTnZiWEIxZEdWWGIzSnNaRlpsY25ScFkyVnpLSGhxTENCeGFpazdDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0JwWmlBb2Myb3VkMjl5YkdSR1lXTmxUbTl5YldGc2MwNWxaV1J6VlhCa1lYUmxLU0I3Q2lBZ0lDQWdJQ0FnSUNCemFpNWpiMjF3ZFhSbFYyOXliR1JHWVdObFRtOXliV0ZzY3loeGFpazdDaUFnSUNBZ0lDQWdmU0F2THlCR2IzSWdaV0ZqYUNCM2IzSnNaQ0J3YjJ4NVoyOXVJR2x1SUhSb1pTQndiMng1YUdWa2NtRUtDZ29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnVabUZqWlhNZ1BTQnphaTVtWVdObGN5NXNaVzVuZEdnN0lHa2dJVDA5SUc1bVlXTmxjenNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0F2THlCRGIyNXpkSEoxWTNRZ2QyOXliR1FnWm1GalpTQjJaWEowYVdObGN3b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RtVnlkSE1nUFNCYmMyb3VkMjl5YkdSV1pYSjBhV05sYzF0emFpNW1ZV05sYzF0cFhWc3dYVjFkT3dvZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm05eWJXRnNJRDBnYzJvdWQyOXliR1JHWVdObFRtOXliV0ZzYzF0cFhUc2dMeThnUTJobFkyc2dhRzkzSUcxMVkyZ2dkR2hsSUhCaGNuUnBZMnhsSUhCbGJtVjBjbUYwWlhNZ2RHaGxJSEJ2YkhsbmIyNGdjR3hoYm1VdUNnb2dJQ0FnSUNBZ0lDQWdlR2t1ZG5OMVlpaDJaWEowYzFzd1hTd2dZMjl1ZG1WNFVHRnlkR2xqYkdWZmRtVnlkR1Y0Vkc5UVlYSjBhV05zWlNrN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd1pXNWxkSEpoZEdsdmJpQTlJQzF1YjNKdFlXd3VaRzkwS0dOdmJuWmxlRkJoY25ScFkyeGxYM1psY25SbGVGUnZVR0Z5ZEdsamJHVXBPd29LSUNBZ0lDQWdJQ0FnSUdsbUlDaHRhVzVRWlc1bGRISmhkR2x2YmlBOVBUMGdiblZzYkNCOGZDQk5ZWFJvTG1GaWN5aHdaVzVsZEhKaGRHbHZiaWtnUENCTllYUm9MbUZpY3lodGFXNVFaVzVsZEhKaGRHbHZiaWtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dwMWMzUlVaWE4wS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnSUNBZ0lHMXBibEJsYm1WMGNtRjBhVzl1SUQwZ2NHVnVaWFJ5WVhScGIyNDdDaUFnSUNBZ0lDQWdJQ0FnSUhCbGJtVjBjbUYwWldSR1lXTmxTVzVrWlhnZ1BTQnBPd29nSUNBZ0lDQWdJQ0FnSUNCd1pXNWxkSEpoZEdWa1JtRmpaVTV2Y20xaGJDNWpiM0I1S0c1dmNtMWhiQ2s3Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQnBaaUFvY0dWdVpYUnlZWFJsWkVaaFkyVkpibVJsZUNBaFBUMGdMVEVwSUhzS0lDQWdJQ0FnSUNBZ0lDOHZJRk5sZEhWd0lHTnZiblJoWTNRS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhJZ1BTQjBhR2x6TG1OeVpXRjBaVU52Ym5SaFkzUkZjWFZoZEdsdmJpaGlhU3dnWW1vc0lITnBMQ0J6YWl3Z2NuTnBMQ0J5YzJvcE93b2dJQ0FnSUNBZ0lDQWdjR1Z1WlhSeVlYUmxaRVpoWTJWT2IzSnRZV3d1YzJOaGJHVW9iV2x1VUdWdVpYUnlZWFJwYjI0c0lIZHZjbXhrVUdWdVpYUnlZWFJwYjI1V1pXTXBPeUF2THlCeWFpQnBjeUIwYUdVZ2NHRnlkR2xqYkdVZ2NHOXphWFJwYjI0Z2NISnZhbVZqZEdWa0lIUnZJSFJvWlNCbVlXTmxDZ29nSUNBZ0lDQWdJQ0FnZDI5eWJHUlFaVzVsZEhKaGRHbHZibFpsWXk1MllXUmtLSGhwTENCM2IzSnNaRkJsYm1WMGNtRjBhVzl1Vm1WaktUc0tJQ0FnSUNBZ0lDQWdJSGR2Y214a1VHVnVaWFJ5WVhScGIyNVdaV011ZG5OMVlpaDRhaXdnZDI5eWJHUlFaVzVsZEhKaGRHbHZibFpsWXlrN0NpQWdJQ0FnSUNBZ0lDQnlMbkpxTG1OdmNIa29kMjl5YkdSUVpXNWxkSEpoZEdsdmJsWmxZeWs3SUM4dlkyOXVjM1FnY0hKdmFtVmpkR1ZrVkc5R1lXTmxJRDBnZUdrdWRuTjFZaWg0YWlrdWRtRmtaQ2gzYjNKc1pGQmxibVYwY21GMGFXOXVWbVZqS1RzS0lDQWdJQ0FnSUNBZ0lDOHZjSEp2YW1WamRHVmtWRzlHWVdObExtTnZjSGtvY2k1eWFpazdDaUFnSUNBZ0lDQWdJQ0F2TDNGcUxuWnRkV3gwS0hJdWNtb3NjaTV5YWlrN0Nnb2dJQ0FnSUNBZ0lDQWdjR1Z1WlhSeVlYUmxaRVpoWTJWT2IzSnRZV3d1Ym1WbllYUmxLSEl1Ym1rcE95QXZMeUJEYjI1MFlXTjBJRzV2Y20xaGJBb0tJQ0FnSUNBZ0lDQWdJSEl1Y21rdWMyVjBLREFzSURBc0lEQXBPeUF2THlCRFpXNTBaWElnYjJZZ2NHRnlkR2xqYkdVS0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeWFTQTlJSEl1Y21rN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeWFpQTlJSEl1Y21vN0lDOHZJRTFoYTJVZ2NtVnNZWFJwZG1VZ2RHOGdZbTlrYVdWekNnb2dJQ0FnSUNBZ0lDQWdjbWt1ZG1Ga1pDaDRhU3dnY21rcE93b2dJQ0FnSUNBZ0lDQWdjbWt1ZG5OMVlpaGlhUzV3YjNOcGRHbHZiaXdnY21rcE93b2dJQ0FnSUNBZ0lDQWdjbW91ZG1Ga1pDaDRhaXdnY21vcE93b2dJQ0FnSUNBZ0lDQWdjbW91ZG5OMVlpaGlhaTV3YjNOcGRHbHZiaXdnY21vcE93b2dJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYTjFiSFF1Y0hWemFDaHlLVHNLSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFJuSnBZM1JwYjI1RmNYVmhkR2x2Ym5OR2NtOXRRMjl1ZEdGamRDaHlMQ0IwYUdsekxtWnlhV04wYVc5dVVtVnpkV3gwS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RRYjJsdWRDQm1iM1Z1WkNCcGJuTnBaR1VnWTI5dWRtVjRMQ0JpZFhRZ1pHbGtJRzV2ZENCbWFXNWtJSEJsYm1WMGNtRjBhVzVuSUdaaFkyVWhKeWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5Q2lBZ0lDQjlDZ29nSUNBZ2FHVnBaMmgwWm1sbGJHUkRlV3hwYm1SbGNpaG9abE5vWVhCbExDQmpiMjUyWlhoVGFHRndaU3dnYUdaUWIzTXNJR052Ym5abGVGQnZjeXdnYUdaUmRXRjBMQ0JqYjI1MlpYaFJkV0YwTENCb1prSnZaSGtzSUdOdmJuWmxlRUp2Wkhrc0lISnphU3dnY25OcUxDQnFkWE4wVkdWemRDa2dld29nSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYjI1MlpYaElaV2xuYUhSbWFXVnNaQ2hqYjI1MlpYaFRhR0Z3WlN3Z2FHWlRhR0Z3WlN3Z1kyOXVkbVY0VUc5ekxDQm9abEJ2Y3l3Z1kyOXVkbVY0VVhWaGRDd2dhR1pSZFdGMExDQmpiMjUyWlhoQ2IyUjVMQ0JvWmtKdlpIa3NJSEp6YVN3Z2NuTnFMQ0JxZFhOMFZHVnpkQ2s3Q2lBZ0lDQjlDZ29nSUNBZ2NHRnlkR2xqYkdWRGVXeHBibVJsY2loemFTd2djMm9zSUhocExDQjRhaXdnY1drc0lIRnFMQ0JpYVN3Z1ltb3NJSEp6YVN3Z2NuTnFMQ0JxZFhOMFZHVnpkQ2tnZXdvZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNTJaWGhRWVhKMGFXTnNaU2h6YWl3Z2Mya3NJSGhxTENCNGFTd2djV29zSUhGcExDQmlhaXdnWW1rc0lISnphU3dnY25OcUxDQnFkWE4wVkdWemRDazdDaUFnSUNCOUNnb2dJQ0FnYzNCb1pYSmxWSEpwYldWemFDaHpjR2hsY21WVGFHRndaU3dnZEhKcGJXVnphRk5vWVhCbExDQnpjR2hsY21WUWIzTXNJSFJ5YVcxbGMyaFFiM01zSUhOd2FHVnlaVkYxWVhRc0lIUnlhVzFsYzJoUmRXRjBMQ0J6Y0dobGNtVkNiMlI1TENCMGNtbHRaWE5vUW05a2VTd2djbk5wTENCeWMyb3NJR3AxYzNSVVpYTjBLU0I3Q2lBZ0lDQWdJR052Ym5OMElHVmtaMlZXWlhKMFpYaEJJRDBnYzNCb1pYSmxWSEpwYldWemFGOWxaR2RsVm1WeWRHVjRRVHNLSUNBZ0lDQWdZMjl1YzNRZ1pXUm5aVlpsY25SbGVFSWdQU0J6Y0dobGNtVlVjbWx0WlhOb1gyVmtaMlZXWlhKMFpYaENPd29nSUNBZ0lDQmpiMjV6ZENCbFpHZGxWbVZqZEc5eUlEMGdjM0JvWlhKbFZISnBiV1Z6YUY5bFpHZGxWbVZqZEc5eU93b2dJQ0FnSUNCamIyNXpkQ0JsWkdkbFZtVmpkRzl5Vlc1cGRDQTlJSE53YUdWeVpWUnlhVzFsYzJoZlpXUm5aVlpsWTNSdmNsVnVhWFE3Q2lBZ0lDQWdJR052Ym5OMElHeHZZMkZzVTNCb1pYSmxVRzl6SUQwZ2MzQm9aWEpsVkhKcGJXVnphRjlzYjJOaGJGTndhR1Z5WlZCdmN6c0tJQ0FnSUNBZ1kyOXVjM1FnZEcxd0lEMGdjM0JvWlhKbFZISnBiV1Z6YUY5MGJYQTdDaUFnSUNBZ0lHTnZibk4wSUd4dlkyRnNVM0JvWlhKbFFVRkNRaUE5SUhOd2FHVnlaVlJ5YVcxbGMyaGZiRzlqWVd4VGNHaGxjbVZCUVVKQ093b2dJQ0FnSUNCamIyNXpkQ0IyTWlBOUlITndhR1Z5WlZSeWFXMWxjMmhmZGpJN0NpQWdJQ0FnSUdOdmJuTjBJSEpsYkhCdmN5QTlJSE53YUdWeVpWUnlhVzFsYzJoZmNtVnNjRzl6T3dvZ0lDQWdJQ0JqYjI1emRDQjBjbWxoYm1kc1pYTWdQU0J6Y0dobGNtVlVjbWx0WlhOb1gzUnlhV0Z1WjJ4bGN6c2dMeThnUTI5dWRtVnlkQ0J6Y0dobGNtVWdjRzl6YVhScGIyNGdkRzhnYkc5allXd2dhVzRnZEdobElIUnlhVzFsYzJnS0NpQWdJQ0FnSUZSeVlXNXpabTl5YlM1d2IybHVkRlJ2VEc5allXeEdjbUZ0WlNoMGNtbHRaWE5vVUc5ekxDQjBjbWx0WlhOb1VYVmhkQ3dnYzNCb1pYSmxVRzl6TENCc2IyTmhiRk53YUdWeVpWQnZjeWs3SUM4dklFZGxkQ0IwYUdVZ1lXRmlZaUJ2WmlCMGFHVWdjM0JvWlhKbElHeHZZMkZzYkhrZ2FXNGdkR2hsSUhSeWFXMWxjMmdLQ2lBZ0lDQWdJR052Ym5OMElITndhR1Z5WlZKaFpHbDFjeUE5SUhOd2FHVnlaVk5vWVhCbExuSmhaR2wxY3pzS0lDQWdJQ0FnYkc5allXeFRjR2hsY21WQlFVSkNMbXh2ZDJWeVFtOTFibVF1YzJWMEtHeHZZMkZzVTNCb1pYSmxVRzl6TG5nZ0xTQnpjR2hsY21WU1lXUnBkWE1zSUd4dlkyRnNVM0JvWlhKbFVHOXpMbmtnTFNCemNHaGxjbVZTWVdScGRYTXNJR3h2WTJGc1UzQm9aWEpsVUc5ekxub2dMU0J6Y0dobGNtVlNZV1JwZFhNcE93b2dJQ0FnSUNCc2IyTmhiRk53YUdWeVpVRkJRa0l1ZFhCd1pYSkNiM1Z1WkM1elpYUW9iRzlqWVd4VGNHaGxjbVZRYjNNdWVDQXJJSE53YUdWeVpWSmhaR2wxY3l3Z2JHOWpZV3hUY0dobGNtVlFiM011ZVNBcklITndhR1Z5WlZKaFpHbDFjeXdnYkc5allXeFRjR2hsY21WUWIzTXVlaUFySUhOd2FHVnlaVkpoWkdsMWN5azdDaUFnSUNBZ0lIUnlhVzFsYzJoVGFHRndaUzVuWlhSVWNtbGhibWRzWlhOSmJrRkJRa0lvYkc5allXeFRjR2hsY21WQlFVSkNMQ0IwY21saGJtZHNaWE1wT3lBdkwyWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkSEpwYldWemFGTm9ZWEJsTG1sdVpHbGpaWE11YkdWdVozUm9JQzhnTXpzZ2FTc3JLU0IwY21saGJtZHNaWE11Y0hWemFDaHBLVHNnTHk4Z1FXeHNDaUFnSUNBZ0lDOHZJRlpsY25ScFkyVnpDZ29nSUNBZ0lDQmpiMjV6ZENCMklEMGdjM0JvWlhKbFZISnBiV1Z6YUY5Mk93b2dJQ0FnSUNCamIyNXpkQ0J5WVdScGRYTlRjWFZoY21Wa0lEMGdjM0JvWlhKbFUyaGhjR1V1Y21Ga2FYVnpJQ29nYzNCb1pYSmxVMmhoY0dVdWNtRmthWFZ6T3dvS0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMGNtbGhibWRzWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Ec2dhaUE4SURNN0lHb3JLeWtnZXdvZ0lDQWdJQ0FnSUNBZ2RISnBiV1Z6YUZOb1lYQmxMbWRsZEZabGNuUmxlQ2gwY21sdFpYTm9VMmhoY0dVdWFXNWthV05sYzF0MGNtbGhibWRzWlhOYmFWMGdLaUF6SUNzZ2FsMHNJSFlwT3lBdkx5QkRhR1ZqYXlCMlpYSjBaWGdnYjNabGNteGhjQ0JwYmlCemNHaGxjbVVLQ2lBZ0lDQWdJQ0FnSUNCMkxuWnpkV0lvYkc5allXeFRjR2hsY21WUWIzTXNJSEpsYkhCdmN5azdDZ29nSUNBZ0lDQWdJQ0FnYVdZZ0tISmxiSEJ2Y3k1c1pXNW5kR2hUY1hWaGNtVmtLQ2tnUEQwZ2NtRmthWFZ6VTNGMVlYSmxaQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWVdabElIVndDaUFnSUNBZ0lDQWdJQ0FnSUhZeUxtTnZjSGtvZGlrN0NpQWdJQ0FnSUNBZ0lDQWdJRlJ5WVc1elptOXliUzV3YjJsdWRGUnZWMjl5YkdSR2NtRnRaU2gwY21sdFpYTm9VRzl6TENCMGNtbHRaWE5vVVhWaGRDd2dkaklzSUhZcE93b2dJQ0FnSUNBZ0lDQWdJQ0IyTG5aemRXSW9jM0JvWlhKbFVHOXpMQ0J5Wld4d2IzTXBPd29LSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3AxYzNSVVpYTjBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEdocGN5NWpjbVZoZEdWRGIyNTBZV04wUlhGMVlYUnBiMjRvYzNCb1pYSmxRbTlrZVN3Z2RISnBiV1Z6YUVKdlpIa3NJSE53YUdWeVpWTm9ZWEJsTENCMGNtbHRaWE5vVTJoaGNHVXNJSEp6YVN3Z2NuTnFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpNXVhUzVqYjNCNUtISmxiSEJ2Y3lrN0NpQWdJQ0FnSUNBZ0lDQWdJSEl1Ym1rdWJtOXliV0ZzYVhwbEtDazdJQzh2SUhKcElHbHpJSFJvWlNCMlpXTjBiM0lnWm5KdmJTQnpjR2hsY21VZ1kyVnVkR1Z5SUhSdklIUm9aU0J6Y0dobGNtVWdjM1Z5Wm1GalpRb0tJQ0FnSUNBZ0lDQWdJQ0FnY2k1eWFTNWpiM0I1S0hJdWJta3BPd29nSUNBZ0lDQWdJQ0FnSUNCeUxuSnBMbk5qWVd4bEtITndhR1Z5WlZOb1lYQmxMbkpoWkdsMWN5d2djaTV5YVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEl1Y21rdWRtRmtaQ2h6Y0dobGNtVlFiM01zSUhJdWNta3BPd29nSUNBZ0lDQWdJQ0FnSUNCeUxuSnBMblp6ZFdJb2MzQm9aWEpsUW05a2VTNXdiM05wZEdsdmJpd2djaTV5YVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEl1Y21vdVkyOXdlU2gyS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjaTV5YWk1MmMzVmlLSFJ5YVcxbGMyaENiMlI1TG5CdmMybDBhVzl1TENCeUxuSnFLVHNnTHk4Z1UzUnZjbVVnY21WemRXeDBDZ29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzNWc2RDNXdkWE5vS0hJcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlVaeWFXTjBhVzl1UlhGMVlYUnBiMjV6Um5KdmJVTnZiblJoWTNRb2Npd2dkR2hwY3k1bWNtbGpkR2x2YmxKbGMzVnNkQ2s3Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlDOHZJRU5vWldOcklHRnNiQ0JsWkdkbGN3b0tDaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkSEpwWVc1bmJHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ1BDQXpPeUJxS3lzcElIc0tJQ0FnSUNBZ0lDQWdJSFJ5YVcxbGMyaFRhR0Z3WlM1blpYUldaWEowWlhnb2RISnBiV1Z6YUZOb1lYQmxMbWx1WkdsalpYTmJkSEpwWVc1bmJHVnpXMmxkSUNvZ015QXJJR3BkTENCbFpHZGxWbVZ5ZEdWNFFTazdDaUFnSUNBZ0lDQWdJQ0IwY21sdFpYTm9VMmhoY0dVdVoyVjBWbVZ5ZEdWNEtIUnlhVzFsYzJoVGFHRndaUzVwYm1ScFkyVnpXM1J5YVdGdVoyeGxjMXRwWFNBcUlETWdLeUFvYWlBcklERXBJQ1VnTTEwc0lHVmtaMlZXWlhKMFpYaENLVHNLSUNBZ0lDQWdJQ0FnSUdWa1oyVldaWEowWlhoQ0xuWnpkV0lvWldSblpWWmxjblJsZUVFc0lHVmtaMlZXWldOMGIzSXBPeUF2THlCUWNtOXFaV04wSUhOd2FHVnlaU0J3YjNOcGRHbHZiaUIwYnlCMGFHVWdaV1JuWlFvS0lDQWdJQ0FnSUNBZ0lHeHZZMkZzVTNCb1pYSmxVRzl6TG5aemRXSW9aV1JuWlZabGNuUmxlRUlzSUhSdGNDazdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQndiM05wZEdsdmJrRnNiMjVuUldSblpVSWdQU0IwYlhBdVpHOTBLR1ZrWjJWV1pXTjBiM0lwT3dvZ0lDQWdJQ0FnSUNBZ2JHOWpZV3hUY0dobGNtVlFiM011ZG5OMVlpaGxaR2RsVm1WeWRHVjRRU3dnZEcxd0tUc0tJQ0FnSUNBZ0lDQWdJR3hsZENCd2IzTnBkR2x2YmtGc2IyNW5SV1JuWlVFZ1BTQjBiWEF1Wkc5MEtHVmtaMlZXWldOMGIzSXBPd29LSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiM05wZEdsdmJrRnNiMjVuUldSblpVRWdQaUF3SUNZbUlIQnZjMmwwYVc5dVFXeHZibWRGWkdkbFFpQThJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdMeThnVG05M0lHTm9aV05ySUhSb1pTQnZjblJvYjJkdmJtRnNJR1JwYzNSaGJtTmxJR1p5YjIwZ1pXUm5aU0IwYnlCemNHaGxjbVVnWTJWdWRHVnlDaUFnSUNBZ0lDQWdJQ0FnSUd4dlkyRnNVM0JvWlhKbFVHOXpMblp6ZFdJb1pXUm5aVlpsY25SbGVFRXNJSFJ0Y0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZrWjJWV1pXTjBiM0pWYm1sMExtTnZjSGtvWldSblpWWmxZM1J2Y2lrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZrWjJWV1pXTjBiM0pWYm1sMExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmtGc2IyNW5SV1JuWlVFZ1BTQjBiWEF1Wkc5MEtHVmtaMlZXWldOMGIzSlZibWwwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV1JuWlZabFkzUnZjbFZ1YVhRdWMyTmhiR1VvY0c5emFYUnBiMjVCYkc5dVowVmtaMlZCTENCMGJYQXBPd29nSUNBZ0lDQWdJQ0FnSUNCMGJYQXVkbUZrWkNobFpHZGxWbVZ5ZEdWNFFTd2dkRzF3S1RzZ0x5OGdkRzF3SUdseklHNXZkeUIwYUdVZ2MzQm9aWEpsSUdObGJuUmxjaUJ3YjNOcGRHbHZiaUJ3Y205cVpXTjBaV1FnZEc4Z2RHaGxJR1ZrWjJVc0lHUmxabWx1WldRZ2JHOWpZV3hzZVNCcGJpQjBhR1VnZEhKcGJXVnphQ0JtY21GdFpRb0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR2x6ZENBOUlIUnRjQzVrYVhOMFlXNWpaVlJ2S0d4dlkyRnNVM0JvWlhKbFVHOXpLVHNLQ2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrYVhOMElEd2djM0JvWlhKbFUyaGhjR1V1Y21Ga2FYVnpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dwMWMzUlVaWE4wS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSElnUFNCMGFHbHpMbU55WldGMFpVTnZiblJoWTNSRmNYVmhkR2x2YmloemNHaGxjbVZDYjJSNUxDQjBjbWx0WlhOb1FtOWtlU3dnYzNCb1pYSmxVMmhoY0dVc0lIUnlhVzFsYzJoVGFHRndaU3dnY25OcExDQnljMm9wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ0Y0M1MmMzVmlLR3h2WTJGc1UzQm9aWEpsVUc5ekxDQnlMbTVwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5TG01cExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lISXVibWt1YzJOaGJHVW9jM0JvWlhKbFUyaGhjR1V1Y21Ga2FYVnpMQ0J5TG5KcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUxuSnBMblpoWkdRb2MzQm9aWEpsVUc5ekxDQnlMbkpwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5TG5KcExuWnpkV0lvYzNCb1pYSmxRbTlrZVM1d2IzTnBkR2x2Yml3Z2NpNXlhU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdWSEpoYm5ObWIzSnRMbkJ2YVc1MFZHOVhiM0pzWkVaeVlXMWxLSFJ5YVcxbGMyaFFiM01zSUhSeWFXMWxjMmhSZFdGMExDQjBiWEFzSUhSdGNDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHMXdMblp6ZFdJb2RISnBiV1Z6YUVKdlpIa3VjRzl6YVhScGIyNHNJSEl1Y21vcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUZSeVlXNXpabTl5YlM1MlpXTjBiM0pVYjFkdmNteGtSbkpoYldVb2RISnBiV1Z6YUZGMVlYUXNJSEl1Ym1rc0lISXVibWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJRlJ5WVc1elptOXliUzUyWldOMGIzSlViMWR2Y214a1JuSmhiV1VvZEhKcGJXVnphRkYxWVhRc0lISXVjbWtzSUhJdWNta3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WemRXeDBMbkIxYzJnb2NpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVkdjbWxqZEdsdmJrVnhkV0YwYVc5dWMwWnliMjFEYjI1MFlXTjBLSElzSUhSb2FYTXVabkpwWTNScGIyNVNaWE4xYkhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlDOHZJRlJ5YVdGdVoyeGxJR1poWTJWekNnb0tJQ0FnSUNBZ1kyOXVjM1FnZG1FZ1BTQnpjR2hsY21WVWNtbHRaWE5vWDNaaE93b2dJQ0FnSUNCamIyNXpkQ0IyWWlBOUlITndhR1Z5WlZSeWFXMWxjMmhmZG1JN0NpQWdJQ0FnSUdOdmJuTjBJSFpqSUQwZ2MzQm9aWEpsVkhKcGJXVnphRjkyWXpzS0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc0lEMGdjM0JvWlhKbFZISnBiV1Z6YUY5dWIzSnRZV3c3Q2dvZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2dUaUE5SUhSeWFXRnVaMnhsY3k1c1pXNW5kR2c3SUdrZ0lUMDlJRTQ3SUdrckt5a2dld29nSUNBZ0lDQWdJSFJ5YVcxbGMyaFRhR0Z3WlM1blpYUlVjbWxoYm1kc1pWWmxjblJwWTJWektIUnlhV0Z1WjJ4bGMxdHBYU3dnZG1Fc0lIWmlMQ0IyWXlrN0NpQWdJQ0FnSUNBZ2RISnBiV1Z6YUZOb1lYQmxMbWRsZEU1dmNtMWhiQ2gwY21saGJtZHNaWE5iYVYwc0lHNXZjbTFoYkNrN0NpQWdJQ0FnSUNBZ2JHOWpZV3hUY0dobGNtVlFiM011ZG5OMVlpaDJZU3dnZEcxd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnWkdsemRDQTlJSFJ0Y0M1a2IzUW9ibTl5YldGc0tUc0tJQ0FnSUNBZ0lDQnViM0p0WVd3dWMyTmhiR1VvWkdsemRDd2dkRzF3S1RzS0lDQWdJQ0FnSUNCc2IyTmhiRk53YUdWeVpWQnZjeTUyYzNWaUtIUnRjQ3dnZEcxd0tUc2dMeThnZEcxd0lHbHpJRzV2ZHlCMGFHVWdjM0JvWlhKbElIQnZjMmwwYVc5dUlIQnliMnBsWTNSbFpDQjBieUIwYUdVZ2RISnBZVzVuYkdVZ2NHeGhibVVLQ2lBZ0lDQWdJQ0FnWkdsemRDQTlJSFJ0Y0M1a2FYTjBZVzVqWlZSdktHeHZZMkZzVTNCb1pYSmxVRzl6S1RzS0NpQWdJQ0FnSUNBZ2FXWWdLRkpoZVM1d2IybHVkRWx1VkhKcFlXNW5iR1VvZEcxd0xDQjJZU3dnZG1Jc0lIWmpLU0FtSmlCa2FYTjBJRHdnYzNCb1pYSmxVMmhoY0dVdWNtRmthWFZ6S1NCN0NpQWdJQ0FnSUNBZ0lDQnBaaUFvYW5WemRGUmxjM1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBhR2x6TG1OeVpXRjBaVU52Ym5SaFkzUkZjWFZoZEdsdmJpaHpjR2hsY21WQ2IyUjVMQ0IwY21sdFpYTm9RbTlrZVN3Z2MzQm9aWEpsVTJoaGNHVXNJSFJ5YVcxbGMyaFRhR0Z3WlN3Z2NuTnBMQ0J5YzJvcE93b2dJQ0FnSUNBZ0lDQWdkRzF3TG5aemRXSW9iRzlqWVd4VGNHaGxjbVZRYjNNc0lISXVibWtwT3dvZ0lDQWdJQ0FnSUNBZ2NpNXVhUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lISXVibWt1YzJOaGJHVW9jM0JvWlhKbFUyaGhjR1V1Y21Ga2FYVnpMQ0J5TG5KcEtUc0tJQ0FnSUNBZ0lDQWdJSEl1Y21rdWRtRmtaQ2h6Y0dobGNtVlFiM01zSUhJdWNta3BPd29nSUNBZ0lDQWdJQ0FnY2k1eWFTNTJjM1ZpS0hOd2FHVnlaVUp2WkhrdWNHOXphWFJwYjI0c0lISXVjbWtwT3dvZ0lDQWdJQ0FnSUNBZ1ZISmhibk5tYjNKdExuQnZhVzUwVkc5WGIzSnNaRVp5WVcxbEtIUnlhVzFsYzJoUWIzTXNJSFJ5YVcxbGMyaFJkV0YwTENCMGJYQXNJSFJ0Y0NrN0NpQWdJQ0FnSUNBZ0lDQjBiWEF1ZG5OMVlpaDBjbWx0WlhOb1FtOWtlUzV3YjNOcGRHbHZiaXdnY2k1eWFpazdDaUFnSUNBZ0lDQWdJQ0JVY21GdWMyWnZjbTB1ZG1WamRHOXlWRzlYYjNKc1pFWnlZVzFsS0hSeWFXMWxjMmhSZFdGMExDQnlMbTVwTENCeUxtNXBLVHNLSUNBZ0lDQWdJQ0FnSUZSeVlXNXpabTl5YlM1MlpXTjBiM0pVYjFkdmNteGtSbkpoYldVb2RISnBiV1Z6YUZGMVlYUXNJSEl1Y21rc0lISXVjbWtwT3dvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOMWJIUXVjSFZ6YUNoeUtUc0tJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsUm5KcFkzUnBiMjVGY1hWaGRHbHZibk5HY205dFEyOXVkR0ZqZENoeUxDQjBhR2x6TG1aeWFXTjBhVzl1VW1WemRXeDBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJSFJ5YVdGdVoyeGxjeTVzWlc1bmRHZ2dQU0F3T3dvZ0lDQWdmUW9LSUNBZ0lIQnNZVzVsVkhKcGJXVnphQ2h3YkdGdVpWTm9ZWEJsTENCMGNtbHRaWE5vVTJoaGNHVXNJSEJzWVc1bFVHOXpMQ0IwY21sdFpYTm9VRzl6TENCd2JHRnVaVkYxWVhRc0lIUnlhVzFsYzJoUmRXRjBMQ0J3YkdGdVpVSnZaSGtzSUhSeWFXMWxjMmhDYjJSNUxDQnljMmtzSUhKemFpd2dhblZ6ZEZSbGMzUXBJSHNLSUNBZ0lDQWdMeThnVFdGclpTQmpiMjUwWVdOMGN5RUtJQ0FnSUNBZ1kyOXVjM1FnZGlBOUlHNWxkeUJXWldNektDazdDaUFnSUNBZ0lHTnZibk4wSUc1dmNtMWhiQ0E5SUhCc1lXNWxWSEpwYldWemFGOXViM0p0WVd3N0NpQWdJQ0FnSUc1dmNtMWhiQzV6WlhRb01Dd2dNQ3dnTVNrN0NpQWdJQ0FnSUhCc1lXNWxVWFZoZEM1MmJYVnNkQ2h1YjNKdFlXd3NJRzV2Y20xaGJDazdJQzh2SUZSMWNtNGdibTl5YldGc0lHRmpZMjl5WkdsdVp5QjBieUJ3YkdGdVpRb0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjBjbWx0WlhOb1UyaGhjR1V1ZG1WeWRHbGpaWE11YkdWdVozUm9JQzhnTXpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnTHk4Z1IyVjBJSGR2Y214a0lIWmxjblJsZUNCbWNtOXRJSFJ5YVcxbGMyZ0tJQ0FnSUNBZ0lDQjBjbWx0WlhOb1UyaGhjR1V1WjJWMFZtVnlkR1Y0S0drc0lIWXBPeUF2THlCVFlXWmxJSFZ3Q2dvZ0lDQWdJQ0FnSUdOdmJuTjBJSFl5SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUNBZ0lDQjJNaTVqYjNCNUtIWXBPd29nSUNBZ0lDQWdJRlJ5WVc1elptOXliUzV3YjJsdWRGUnZWMjl5YkdSR2NtRnRaU2gwY21sdFpYTm9VRzl6TENCMGNtbHRaWE5vVVhWaGRDd2dkaklzSUhZcE95QXZMeUJEYUdWamF5QndiR0Z1WlNCemFXUmxDZ29nSUNBZ0lDQWdJR052Ym5OMElISmxiSEJ2Y3lBOUlIQnNZVzVsVkhKcGJXVnphRjl5Wld4d2IzTTdDaUFnSUNBZ0lDQWdkaTUyYzNWaUtIQnNZVzVsVUc5ekxDQnlaV3h3YjNNcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdSdmRDQTlJRzV2Y20xaGJDNWtiM1FvY21Wc2NHOXpLVHNLQ2lBZ0lDQWdJQ0FnYVdZZ0tHUnZkQ0E4UFNBd0xqQXBJSHNLSUNBZ0lDQWdJQ0FnSUdsbUlDaHFkWE4wVkdWemRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5SUQwZ2RHaHBjeTVqY21WaGRHVkRiMjUwWVdOMFJYRjFZWFJwYjI0b2NHeGhibVZDYjJSNUxDQjBjbWx0WlhOb1FtOWtlU3dnY0d4aGJtVlRhR0Z3WlN3Z2RISnBiV1Z6YUZOb1lYQmxMQ0J5YzJrc0lISnphaWs3Q2lBZ0lDQWdJQ0FnSUNCeUxtNXBMbU52Y0hrb2JtOXliV0ZzS1RzZ0x5OGdRMjl1ZEdGamRDQnViM0p0WVd3Z2FYTWdkR2hsSUhCc1lXNWxJRzV2Y20xaGJBb2dJQ0FnSUNBZ0lDQWdMeThnUjJWMElIWmxjblJsZUNCd2IzTnBkR2x2YmlCd2NtOXFaV04wWldRZ2IyNGdjR3hoYm1VS0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtOXFaV04wWldRZ1BTQndiR0Z1WlZSeWFXMWxjMmhmY0hKdmFtVmpkR1ZrT3dvZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzTG5OallXeGxLSEpsYkhCdmN5NWtiM1FvYm05eWJXRnNLU3dnY0hKdmFtVmpkR1ZrS1RzS0lDQWdJQ0FnSUNBZ0lIWXVkbk4xWWlod2NtOXFaV04wWldRc0lIQnliMnBsWTNSbFpDazdJQzh2SUhKcElHbHpJSFJvWlNCd2NtOXFaV04wWldRZ2QyOXliR1FnY0c5emFYUnBiMjRnYldsdWRYTWdjR3hoYm1VZ2NHOXphWFJwYjI0S0NpQWdJQ0FnSUNBZ0lDQnlMbkpwTG1OdmNIa29jSEp2YW1WamRHVmtLVHNLSUNBZ0lDQWdJQ0FnSUhJdWNta3Vkbk4xWWlod2JHRnVaVUp2WkhrdWNHOXphWFJwYjI0c0lISXVjbWtwT3dvZ0lDQWdJQ0FnSUNBZ2NpNXlhaTVqYjNCNUtIWXBPd29nSUNBZ0lDQWdJQ0FnY2k1eWFpNTJjM1ZpS0hSeWFXMWxjMmhDYjJSNUxuQnZjMmwwYVc5dUxDQnlMbkpxS1RzZ0x5OGdVM1J2Y21VZ2NtVnpkV3gwQ2dvZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOMWJIUXVjSFZ6YUNoeUtUc0tJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsUm5KcFkzUnBiMjVGY1hWaGRHbHZibk5HY205dFEyOXVkR0ZqZENoeUxDQjBhR2x6TG1aeWFXTjBhVzl1VW1WemRXeDBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJSDBLSUNBZ0lIMGdMeThnWTI5dWRtVjRWSEpwYldWemFDZ0tJQ0FnSUM4dklDQWdjMms2SUVOdmJuWmxlRkJ2Ykhsb1pXUnliMjRzSUhOcU9pQlVjbWx0WlhOb0xDQjRhVG9nVm1Wak15d2dlR282SUZabFl6TXNJSEZwT2lCUmRXRjBaWEp1YVc5dUxDQnhham9nVVhWaGRHVnlibWx2Yml3S0lDQWdJQzh2SUNBZ1ltazZJRUp2Wkhrc0lHSnFPaUJDYjJSNUxDQnljMmsvT2lCVGFHRndaU0I4SUc1MWJHd3NJSEp6YWo4NklGTm9ZWEJsSUh3Z2JuVnNiQ3dLSUNBZ0lDOHZJQ0FnWm1GalpVeHBjM1JCUHpvZ2JuVnRZbVZ5VzEwZ2ZDQnVkV3hzTENCbVlXTmxUR2x6ZEVJL09pQnVkVzFpWlhKYlhTQjhJRzUxYkd3c0NpQWdJQ0F2THlBcElIc0tJQ0FnSUM4dklDQWdZMjl1YzNRZ2MyVndRWGhwY3lBOUlHTnZiblpsZUVOdmJuWmxlRjl6WlhCQmVHbHpPd29nSUNBZ0x5OGdJQ0JwWmloNGFTNWthWE4wWVc1alpWUnZLSGhxS1NBK0lITnBMbUp2ZFc1a2FXNW5VM0JvWlhKbFVtRmthWFZ6SUNzZ2Myb3VZbTkxYm1ScGJtZFRjR2hsY21WU1lXUnBkWE1wZXdvZ0lDQWdMeThnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnTHk4Z0lDQjlDaUFnSUNBdkx5QWdJQzh2SUVOdmJuTjBjblZqZENCaElIUmxiWEFnYUhWc2JDQm1iM0lnWldGamFDQjBjbWxoYm1kc1pRb2dJQ0FnTHk4Z0lDQmpiMjV6ZENCb2RXeHNRaUE5SUc1bGR5QkRiMjUyWlhoUWIyeDVhR1ZrY205dUtDazdDaUFnSUNBdkx5QWdJR2gxYkd4Q0xtWmhZMlZ6SUQwZ1cxc3dMREVzTWwxZE93b2dJQ0FnTHk4Z0lDQmpiMjV6ZENCMllTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQXZMeUFnSUdOdmJuTjBJSFppSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0FnSUM4dklDQWdZMjl1YzNRZ2RtTWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lDQWdMeThnSUNCb2RXeHNRaTUyWlhKMGFXTmxjeUE5SUZzS0lDQWdJQzh2SUNBZ0lDQWdJSFpoTEFvZ0lDQWdMeThnSUNBZ0lDQWdkbUlzQ2lBZ0lDQXZMeUFnSUNBZ0lDQjJZd29nSUNBZ0x5OGdJQ0JkT3dvZ0lDQWdMeThnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElITnFMbWx1WkdsalpYTXViR1Z1WjNSb0lDOGdNenNnYVNzcktTQjdDaUFnSUNBdkx5QWdJQ0FnSUNCamIyNXpkQ0IwY21saGJtZHNaVTV2Y20xaGJDQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ0lDQXZMeUFnSUNBZ0lDQnphaTVuWlhST2IzSnRZV3dvYVN3Z2RISnBZVzVuYkdWT2IzSnRZV3dwT3dvZ0lDQWdMeThnSUNBZ0lDQWdhSFZzYkVJdVptRmpaVTV2Y20xaGJITWdQU0JiZEhKcFlXNW5iR1ZPYjNKdFlXeGRPd29nSUNBZ0x5OGdJQ0FnSUNBZ2Myb3VaMlYwVkhKcFlXNW5iR1ZXWlhKMGFXTmxjeWhwTENCMllTd2dkbUlzSUhaaktUc0tJQ0FnSUM4dklDQWdJQ0FnSUd4bGRDQmtJRDBnYzJrdWRHVnpkRk5sY0VGNGFYTW9kSEpwWVc1bmJHVk9iM0p0WVd3c0lHaDFiR3hDTENCNGFTd2djV2tzSUhocUxDQnhhaWs3Q2lBZ0lDQXZMeUFnSUNBZ0lDQnBaaWdoWkNsN0NpQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ2RISnBZVzVuYkdWT2IzSnRZV3d1YzJOaGJHVW9MVEVzSUhSeWFXRnVaMnhsVG05eWJXRnNLVHNLSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0JrSUQwZ2Mya3VkR1Z6ZEZObGNFRjRhWE1vZEhKcFlXNW5iR1ZPYjNKdFlXd3NJR2gxYkd4Q0xDQjRhU3dnY1drc0lIaHFMQ0J4YWlrN0NpQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ2FXWW9JV1FwZXdvZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUc0tJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBdkx5QWdJQ0FnSUNCOUNpQWdJQ0F2THlBZ0lDQWdJQ0JqYjI1emRDQnlaWE02SUVOdmJuWmxlRkJ2Ykhsb1pXUnliMjVEYjI1MFlXTjBVRzlwYm5SYlhTQTlJRnRkT3dvZ0lDQWdMeThnSUNBZ0lDQWdZMjl1YzNRZ2NTQTlJR052Ym5abGVFTnZiblpsZUY5eE93b2dJQ0FnTHk4Z0lDQWdJQ0FnYzJrdVkyeHBjRUZuWVdsdWMzUklkV3hzS0hocExIRnBMR2gxYkd4Q0xIaHFMSEZxTEhSeWFXRnVaMnhsVG05eWJXRnNMQzB4TURBc01UQXdMSEpsY3lrN0NpQWdJQ0F2THlBZ0lDQWdJQ0JtYjNJb2JHVjBJR29nUFNBd095QnFJQ0U5UFNCeVpYTXViR1Z1WjNSb095QnFLeXNwZXdvZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSElnUFNCMGFHbHpMbU55WldGMFpVTnZiblJoWTNSRmNYVmhkR2x2YmloaWFTeGlhaXh6YVN4emFpeHljMmtzY25OcUtTd0tJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21rZ1BTQnlMbkpwTEFvZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlhaUE5SUhJdWNtbzdDaUFnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdjaTV1YVM1amIzQjVLSFJ5YVdGdVoyeGxUbTl5YldGc0tUc0tJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQnlMbTVwTG01bFoyRjBaU2h5TG01cEtUc0tJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQnlaWE5iYWwwdWJtOXliV0ZzTG01bFoyRjBaU2h4S1RzS0lDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNCeExtMTFiSFFvY21WelcycGRMbVJsY0hSb0xDQnhLVHNLSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0J5WlhOYmFsMHVjRzlwYm5RdWRtRmtaQ2h4TENCeWFTazdDaUFnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdjbW91WTI5d2VTaHlaWE5iYWwwdWNHOXBiblFwT3dvZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUM4dklFTnZiblJoWTNRZ2NHOXBiblJ6SUdGeVpTQnBiaUIzYjNKc1pDQmpiMjl5WkdsdVlYUmxjeTRnVkhKaGJuTm1iM0p0SUdKaFkyc2dkRzhnY21Wc1lYUnBkbVVLSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0J5YVM1MmMzVmlLSGhwTEhKcEtUc0tJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQnlhaTUyYzNWaUtIaHFMSEpxS1RzS0lDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhKbGJHRjBhWFpsSUhSdklHSnZaR2xsY3dvZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUhKcExuWmhaR1FvZUdrc0lISnBLVHNLSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0J5YVM1MmMzVmlLR0pwTG5CdmMybDBhVzl1TENCeWFTazdDaUFnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdjbW91ZG1Ga1pDaDRhaXdnY21vcE93b2dJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lISnFMblp6ZFdJb1ltb3VjRzl6YVhScGIyNHNJSEpxS1RzS0lDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaHlLVHNLSUNBZ0lDOHZJQ0FnSUNBZ0lIMEtJQ0FnSUM4dklDQWdmUW9nSUNBZ0x5OGdmUW9LQ2lBZ2ZRb2dJR052Ym5OMElHRjJaWEpoWjJWT2IzSnRZV3dnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElHRjJaWEpoWjJWRGIyNTBZV04wVUc5cGJuUkJJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCaGRtVnlZV2RsUTI5dWRHRmpkRkJ2YVc1MFFpQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnZEcxd1ZtVmpNU0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2RHMXdWbVZqTWlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdkRzF3VVhWaGRERWdQU0J1WlhjZ1VYVmhkR1Z5Ym1sdmJpZ3BPd29nSUdOdmJuTjBJSFJ0Y0ZGMVlYUXlJRDBnYm1WM0lGRjFZWFJsY201cGIyNG9LVHNLQ2lBZ1kyOXVjM1FnY0d4aGJtVlVjbWx0WlhOb1gyNXZjbTFoYkNBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjR3hoYm1WVWNtbHRaWE5vWDNKbGJIQnZjeUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2NHeGhibVZVY21sdFpYTm9YM0J5YjJwbFkzUmxaQ0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2MzQm9aWEpsVkhKcGJXVnphRjl1YjNKdFlXd2dQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUhOd2FHVnlaVlJ5YVcxbGMyaGZjbVZzY0c5eklEMGdibVYzSUZabFl6TW9LVHNLSUNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElITndhR1Z5WlZSeWFXMWxjMmhmZGlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFZISnBiV1Z6YUY5Mk1pQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnYzNCb1pYSmxWSEpwYldWemFGOWxaR2RsVm1WeWRHVjRRU0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2MzQm9aWEpsVkhKcGJXVnphRjlsWkdkbFZtVnlkR1Y0UWlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFZISnBiV1Z6YUY5bFpHZGxWbVZqZEc5eUlEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J6Y0dobGNtVlVjbWx0WlhOb1gyVmtaMlZXWldOMGIzSlZibWwwSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQnpjR2hsY21WVWNtbHRaWE5vWDJ4dlkyRnNVM0JvWlhKbFVHOXpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCemNHaGxjbVZVY21sdFpYTm9YM1J0Y0NBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFZISnBiV1Z6YUY5MllTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnYzNCb1pYSmxWSEpwYldWemFGOTJZaUE5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2MzQm9aWEpsVkhKcGJXVnphRjkyWXlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFZISnBiV1Z6YUY5c2IyTmhiRk53YUdWeVpVRkJRa0lnUFNCdVpYY2dRVUZDUWlncE93b2dJR052Ym5OMElITndhR1Z5WlZSeWFXMWxjMmhmZEhKcFlXNW5iR1Z6SUQwZ1cxMDdDaUFnWTI5dWMzUWdjRzlwYm5SZmIyNWZjR3hoYm1WZmRHOWZjM0JvWlhKbElEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J3YkdGdVpWOTBiMTl6Y0dobGNtVmZiM0owYUc4Z1BTQnVaWGNnVm1Wak15Z3BPeUF2THlCVFpXVWdhSFIwY0RvdkwySjFiR3hsZEhCb2VYTnBZM011WTI5dEwwSjFiR3hsZEM5Q2RXeHNaWFJHZFd4c0wxTndhR1Z5WlZSeWFXRnVaMnhsUkdWMFpXTjBiM0pmT0dOd2NGOXpiM1Z5WTJVdWFIUnRiQW9LSUNCamIyNXpkQ0J3YjJsdWRFbHVVRzlzZVdkdmJsOWxaR2RsSUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQndiMmx1ZEVsdVVHOXNlV2R2Ymw5bFpHZGxYM2hmYm05eWJXRnNJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCd2IybHVkRWx1VUc5c2VXZHZibDkyZEhBZ1BTQnVaWGNnVm1Wak15Z3BPd29LSUNCbWRXNWpkR2x2YmlCd2IybHVkRWx1VUc5c2VXZHZiaWgyWlhKMGN5d2dibTl5YldGc0xDQndLU0I3Q2lBZ0lDQnNaWFFnY0c5emFYUnBkbVZTWlhOMWJIUWdQU0J1ZFd4c093b2dJQ0FnWTI5dWMzUWdUaUE5SUhabGNuUnpMbXhsYm1kMGFEc0tDaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBaFBUMGdUanNnYVNzcktTQjdDaUFnSUNBZ0lHTnZibk4wSUhZZ1BTQjJaWEowYzF0cFhUc2dMeThnUjJWMElHVmtaMlVnZEc4Z2RHaGxJRzVsZUhRZ2RtVnlkR1Y0Q2dvZ0lDQWdJQ0JqYjI1emRDQmxaR2RsSUQwZ2NHOXBiblJKYmxCdmJIbG5iMjVmWldSblpUc0tJQ0FnSUNBZ2RtVnlkSE5iS0drZ0t5QXhLU0FsSUU1ZExuWnpkV0lvZGl3Z1pXUm5aU2s3SUM4dklFZGxkQ0JqY205emN5QndjbTlrZFdOMElHSmxkSGRsWlc0Z2NHOXNlV2R2YmlCdWIzSnRZV3dnWVc1a0lIUm9aU0JsWkdkbENnb2dJQ0FnSUNCamIyNXpkQ0JsWkdkbFgzaGZibTl5YldGc0lEMGdjRzlwYm5SSmJsQnZiSGxuYjI1ZlpXUm5aVjk0WDI1dmNtMWhiRHNnTHk5amIyNXpkQ0JsWkdkbFgzaGZibTl5YldGc0lEMGdibVYzSUZabFl6TW9LVHNLQ2lBZ0lDQWdJR1ZrWjJVdVkzSnZjM01vYm05eWJXRnNMQ0JsWkdkbFgzaGZibTl5YldGc0tUc2dMeThnUjJWMElIWmxZM1J2Y2lCaVpYUjNaV1Z1SUhCdmFXNTBJR0Z1WkNCamRYSnlaVzUwSUhabGNuUmxlQW9LSUNBZ0lDQWdZMjl1YzNRZ2RtVnlkR1Y0WDNSdlgzQWdQU0J3YjJsdWRFbHVVRzlzZVdkdmJsOTJkSEE3Q2lBZ0lDQWdJSEF1ZG5OMVlpaDJMQ0IyWlhKMFpYaGZkRzlmY0NrN0lDOHZJRlJvYVhNZ1pHOTBJSEJ5YjJSMVkzUWdaR1YwWlhKdGFXNWxjeUIzYUdsamFDQnphV1JsSUc5bUlIUm9aU0JsWkdkbElIUm9aU0J3YjJsdWRDQnBjd29LSUNBZ0lDQWdZMjl1YzNRZ2NpQTlJR1ZrWjJWZmVGOXViM0p0WVd3dVpHOTBLSFpsY25SbGVGOTBiMTl3S1RzZ0x5OGdTV1lnWVd4c0lITjFZMmdnWkc5MElIQnliMlIxWTNSeklHaGhkbVVnYzJGdFpTQnphV2R1TENCM1pTQmhjbVVnYVc1emFXUmxJSFJvWlNCd2IyeDVaMjl1TGdvS0lDQWdJQ0FnYVdZZ0tIQnZjMmwwYVhabFVtVnpkV3gwSUQwOVBTQnVkV3hzSUh4OElISWdQaUF3SUNZbUlIQnZjMmwwYVhabFVtVnpkV3gwSUQwOVBTQjBjblZsSUh4OElISWdQRDBnTUNBbUppQndiM05wZEdsMlpWSmxjM1ZzZENBOVBUMGdabUZzYzJVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvY0c5emFYUnBkbVZTWlhOMWJIUWdQVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUhCdmMybDBhWFpsVW1WemRXeDBJRDBnY2lBK0lEQTdDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3SUM4dklFVnVZMjkxYm5SbGNtVmtJSE52YldVZ2IzUm9aWElnYzJsbmJpNGdSWGhwZEM0S0lDQWdJQ0FnZlFvZ0lDQWdmU0F2THlCSlppQjNaU0JuYjNRZ2FHVnlaU3dnWVd4c0lHUnZkQ0J3Y205a2RXTjBjeUIzWlhKbElHOW1JSFJvWlNCellXMWxJSE5wWjI0dUNnb0tJQ0FnSUhKbGRIVnliaUIwY25WbE93b2dJSDBLQ2lBZ1kyOXVjM1FnWW05NFgzUnZYM053YUdWeVpTQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnYzNCb1pYSmxRbTk0WDI1eklEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J6Y0dobGNtVkNiM2hmYm5NeElEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J6Y0dobGNtVkNiM2hmYm5NeUlEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J6Y0dobGNtVkNiM2hmYzJsa1pYTWdQU0JiYm1WM0lGWmxZek1vS1N3Z2JtVjNJRlpsWXpNb0tTd2dibVYzSUZabFl6TW9LU3dnYm1WM0lGWmxZek1vS1N3Z2JtVjNJRlpsWXpNb0tTd2dibVYzSUZabFl6TW9LVjA3Q2lBZ1kyOXVjM1FnYzNCb1pYSmxRbTk0WDNOd2FHVnlaVjkwYjE5amIzSnVaWElnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElITndhR1Z5WlVKdmVGOXphV1JsWDI1eklEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J6Y0dobGNtVkNiM2hmYzJsa1pWOXVjekVnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElITndhR1Z5WlVKdmVGOXphV1JsWDI1ek1pQTlJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWTI5dWRtVjRYM1J2WDNOd2FHVnlaU0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2MzQm9aWEpsUTI5dWRtVjRYMlZrWjJVZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSE53YUdWeVpVTnZiblpsZUY5bFpHZGxWVzVwZENBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFEyOXVkbVY0WDNOd2FHVnlaVlJ2UTI5eWJtVnlJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCemNHaGxjbVZEYjI1MlpYaGZkMjl5YkdSRGIzSnVaWElnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElITndhR1Z5WlVOdmJuWmxlRjkzYjNKc1pFNXZjbTFoYkNBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFEyOXVkbVY0WDNkdmNteGtVRzlwYm5RZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSE53YUdWeVpVTnZiblpsZUY5M2IzSnNaRk53YUdWeVpWQnZhVzUwUTJ4dmMyVnpkRlJ2VUd4aGJtVWdQU0J1WlhjZ1ZtVmpNeWdwT3dvZ0lHTnZibk4wSUhOd2FHVnlaVU52Ym5abGVGOXdaVzVsZEhKaGRHbHZibFpsWXlBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjM0JvWlhKbFEyOXVkbVY0WDNOd2FHVnlaVlJ2VjI5eWJHUlFiMmx1ZENBOUlHNWxkeUJXWldNektDazdDaUFnYm1WM0lGWmxZek1vS1RzS0lDQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSEJzWVc1bFEyOXVkbVY0WDNZZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJSEJzWVc1bFEyOXVkbVY0WDI1dmNtMWhiQ0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2NHeGhibVZEYjI1MlpYaGZjbVZzY0c5eklEMGdibVYzSUZabFl6TW9LVHNLSUNCamIyNXpkQ0J3YkdGdVpVTnZiblpsZUY5d2NtOXFaV04wWldRZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJR052Ym5abGVFTnZiblpsZUY5elpYQkJlR2x6SUQwZ2JtVjNJRlpsWXpNb0tUc0tJQ0JqYjI1emRDQmpiMjUyWlhoRGIyNTJaWGhmY1NBOUlHNWxkeUJXWldNektDazdDaUFnWTI5dWMzUWdjR0Z5ZEdsamJHVlFiR0Z1WlY5dWIzSnRZV3dnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElIQmhjblJwWTJ4bFVHeGhibVZmY21Wc2NHOXpJRDBnYm1WM0lGWmxZek1vS1RzS0lDQmpiMjV6ZENCd1lYSjBhV05zWlZCc1lXNWxYM0J5YjJwbFkzUmxaQ0E5SUc1bGR5QldaV016S0NrN0NpQWdZMjl1YzNRZ2NHRnlkR2xqYkdWVGNHaGxjbVZmYm05eWJXRnNJRDBnYm1WM0lGWmxZek1vS1RzZ0x5OGdWMGxRQ2dvZ0lHTnZibk4wSUdOeGFpQTlJRzVsZHlCUmRXRjBaWEp1YVc5dUtDazdDaUFnWTI5dWMzUWdZMjl1ZG1WNFVHRnlkR2xqYkdWZmJHOWpZV3dnUFNCdVpYY2dWbVZqTXlncE93b2dJRzVsZHlCV1pXTXpLQ2s3Q2lBZ1kyOXVjM1FnWTI5dWRtVjRVR0Z5ZEdsamJHVmZjR1Z1WlhSeVlYUmxaRVpoWTJWT2IzSnRZV3dnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElHTnZiblpsZUZCaGNuUnBZMnhsWDNabGNuUmxlRlJ2VUdGeWRHbGpiR1VnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElHTnZiblpsZUZCaGNuUnBZMnhsWDNkdmNteGtVR1Z1WlhSeVlYUnBiMjVXWldNZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJR052Ym5abGVFaGxhV2RvZEdacFpXeGtYM1J0Y0RFZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJR052Ym5abGVFaGxhV2RvZEdacFpXeGtYM1J0Y0RJZ1BTQnVaWGNnVm1Wak15Z3BPd29nSUdOdmJuTjBJR052Ym5abGVFaGxhV2RvZEdacFpXeGtYMlpoWTJWTWFYTjBJRDBnV3pCZE93b2dJR052Ym5OMElITndhR1Z5WlVobGFXZG9kR1pwWld4a1gzUnRjREVnUFNCdVpYY2dWbVZqTXlncE93b2dJR052Ym5OMElITndhR1Z5WlVobGFXZG9kR1pwWld4a1gzUnRjRElnUFNCdVpYY2dWbVZqTXlncE93b0tJQ0JqYkdGemN5QlBkbVZ5YkdGd1MyVmxjR1Z5SUhzS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUUhSdlpHOGdVbVZ0YjNabElIVnpaV3hsYzNNZ1kyOXVjM1J5ZFdOMGIzSUtJQ0FnSUNBcUx3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdDaUFnSUNBZ0lIUm9hWE11WTNWeWNtVnVkQ0E5SUZ0ZE93b2dJQ0FnSUNCMGFHbHpMbkJ5WlhacGIzVnpJRDBnVzEwN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJR2RsZEV0bGVRb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRFdGxlU2hwTENCcUtTQjdDaUFnSUNBZ0lHbG1JQ2hxSUR3Z2FTa2dld29nSUNBZ0lDQWdJR052Ym5OMElIUmxiWEFnUFNCcU93b2dJQ0FnSUNBZ0lHb2dQU0JwT3dvZ0lDQWdJQ0FnSUdrZ1BTQjBaVzF3T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J5WlhSMWNtNGdhU0E4UENBeE5pQjhJR283Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlITmxkQW9nSUNBZ0lDb3ZDZ29LSUNBZ0lITmxkQ2hwTENCcUtTQjdDaUFnSUNBZ0lDOHZJRWx1YzJWeWRHbHZiaUJ6YjNKMExpQlVhR2x6SUhkaGVTQjBhR1VnWkdsbVppQjNhV3hzSUdoaGRtVWdiR2x1WldGeUlHTnZiWEJzWlhocGRIa3VDaUFnSUNBZ0lHTnZibk4wSUd0bGVTQTlJSFJvYVhNdVoyVjBTMlY1S0drc0lHb3BPd29nSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwSUQwZ2RHaHBjeTVqZFhKeVpXNTBPd29nSUNBZ0lDQnNaWFFnYVc1a1pYZ2dQU0F3T3dvS0lDQWdJQ0FnZDJocGJHVWdLR3RsZVNBK0lHTjFjbkpsYm5SYmFXNWtaWGhkS1NCN0NpQWdJQ0FnSUNBZ2FXNWtaWGdyS3pzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYVdZZ0tHdGxlU0E5UFQwZ1kzVnljbVZ1ZEZ0cGJtUmxlRjBwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3SUM4dklGQmhhWElnZDJGeklHRnNjbVZoWkhrZ1lXUmtaV1FLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdabTl5SUNoc1pYUWdhaUE5SUdOMWNuSmxiblF1YkdWdVozUm9JQzBnTVRzZ2FpQStQU0JwYm1SbGVEc2dhaTB0S1NCN0NpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZ0cUlDc2dNVjBnUFNCamRYSnlaVzUwVzJwZE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCamRYSnlaVzUwVzJsdVpHVjRYU0E5SUd0bGVUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nZEdsamF3b2dJQ0FnSUNvdkNnb0tJQ0FnSUhScFkyc29LU0I3Q2lBZ0lDQWdJR052Ym5OMElIUnRjQ0E5SUhSb2FYTXVZM1Z5Y21WdWREc0tJQ0FnSUNBZ2RHaHBjeTVqZFhKeVpXNTBJRDBnZEdocGN5NXdjbVYyYVc5MWN6c0tJQ0FnSUNBZ2RHaHBjeTV3Y21WMmFXOTFjeUE5SUhSdGNEc0tJQ0FnSUNBZ2RHaHBjeTVqZFhKeVpXNTBMbXhsYm1kMGFDQTlJREE3Q2lBZ0lDQjlDaUFnSUNBdktpb0tJQ0FnSUNBcUlHZGxkRVJwWm1ZS0lDQWdJQ0FxTHdvS0NpQWdJQ0JuWlhSRWFXWm1LR0ZrWkdsMGFXOXVjeXdnY21WdGIzWmhiSE1wSUhzS0lDQWdJQ0FnWTI5dWMzUWdZU0E5SUhSb2FYTXVZM1Z5Y21WdWREc0tJQ0FnSUNBZ1kyOXVjM1FnWWlBOUlIUm9hWE11Y0hKbGRtbHZkWE03Q2lBZ0lDQWdJR052Ym5OMElHRnNJRDBnWVM1c1pXNW5kR2c3Q2lBZ0lDQWdJR052Ym5OMElHSnNJRDBnWWk1c1pXNW5kR2c3Q2lBZ0lDQWdJR3hsZENCcUlEMGdNRHNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWVd3N0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQm1iM1Z1WkNBOUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVVFZ1BTQmhXMmxkT3dvS0lDQWdJQ0FnSUNCM2FHbHNaU0FvYTJWNVFTQStJR0piYWwwcElIc0tJQ0FnSUNBZ0lDQWdJR29yS3pzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lHWnZkVzVrSUQwZ2EyVjVRU0E5UFQwZ1lsdHFYVHNLQ2lBZ0lDQWdJQ0FnYVdZZ0tDRm1iM1Z1WkNrZ2V3b2dJQ0FnSUNBZ0lDQWdkVzV3WVdOclFXNWtVSFZ6YUNoaFpHUnBkR2x2Ym5Nc0lHdGxlVUVwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnYWlBOUlEQTdDZ29nSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR0pzT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1ptOTFibVFnUFNCbVlXeHpaVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnJaWGxDSUQwZ1lsdHBYVHNLQ2lBZ0lDQWdJQ0FnZDJocGJHVWdLR3RsZVVJZ1BpQmhXMnBkS1NCN0NpQWdJQ0FnSUNBZ0lDQnFLeXM3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCbWIzVnVaQ0E5SUdGYmFsMGdQVDA5SUd0bGVVSTdDZ29nSUNBZ0lDQWdJR2xtSUNnaFptOTFibVFwSUhzS0lDQWdJQ0FnSUNBZ0lIVnVjR0ZqYTBGdVpGQjFjMmdvY21WdGIzWmhiSE1zSUd0bGVVSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdmUW9nSUNBZ2ZRb0tJQ0I5Q2dvZ0lHWjFibU4wYVc5dUlIVnVjR0ZqYTBGdVpGQjFjMmdvWVhKeVlYa3NJR3RsZVNrZ2V3b2dJQ0FnWVhKeVlYa3VjSFZ6YUNnb2EyVjVJQ1lnTUhobVptWm1NREF3TUNrZ1BqNGdNVFlzSUd0bGVTQW1JREI0TURBd01HWm1abVlwT3dvZ0lIMEtDaUFnWTI5dWMzUWdaMlYwUzJWNUlEMGdLR2tzSUdvcElEMCtJR2tnUENCcUlEOGdZQ1I3YVgwdEpIdHFmV0FnT2lCZ0pIdHFmUzBrZTJsOVlEc0tJQ0F2S2lvS0lDQWdLaUJVZFhCc1pVUnBZM1JwYjI1aGNua0tJQ0FnS2k4S0Nnb2dJR05zWVhOeklGUjFjR3hsUkdsamRHbHZibUZ5ZVNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIc0tJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdld29nSUNBZ0lDQWdJR3RsZVhNNklGdGRDaUFnSUNBZ0lIMDdDaUFnSUNCOUNnb2dJQ0FnTHlvcUlHZGxkQ0FxTHdvZ0lDQWdaMlYwS0drc0lHb3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ2EyVjVJRDBnWjJWMFMyVjVLR2tzSUdvcE93b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtZWFJoVzJ0bGVWMDdDaUFnSUNCOUNpQWdJQ0F2S2lvZ2MyVjBJQ292Q2dvS0lDQWdJSE5sZENocExDQnFMQ0IyWVd4MVpTa2dld29nSUNBZ0lDQmpiMjV6ZENCclpYa2dQU0JuWlhSTFpYa29hU3dnYWlrN0lDOHZJRU5vWldOcklHbG1JR3RsZVNCaGJISmxZV1I1SUdWNGFYTjBjd29LSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbWRsZENocExDQnFLU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVM1clpYbHpMbkIxYzJnb2EyVjVLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkR2hwY3k1a1lYUmhXMnRsZVYwZ1BTQjJZV3gxWlRzS0lDQWdJSDBLSUNBZ0lDOHFLaUJrWld4bGRHVWdLaThLQ2dvZ0lDQWdaR1ZzWlhSbEtHa3NJR29wSUhzS0lDQWdJQ0FnWTI5dWMzUWdhMlY1SUQwZ1oyVjBTMlY1S0drc0lHb3BPd29nSUNBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUhSb2FYTXVaR0YwWVM1clpYbHpMbWx1WkdWNFQyWW9hMlY1S1RzS0NpQWdJQ0FnSUdsbUlDaHBibVJsZUNBaFBUMGdMVEVwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJoZEdFdWEyVjVjeTV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVrWVhSaFcydGxlVjA3Q2lBZ0lDQjlDaUFnSUNBdktpb2djbVZ6WlhRZ0tpOEtDZ29nSUNBZ2NtVnpaWFFvS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR1JoZEdFZ1BTQjBhR2x6TG1SaGRHRTdDaUFnSUNBZ0lHTnZibk4wSUd0bGVYTWdQU0JrWVhSaExtdGxlWE03Q2dvZ0lDQWdJQ0IzYUdsc1pTQW9hMlY1Y3k1c1pXNW5kR2dnUGlBd0tTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2EyVjVJRDBnYTJWNWN5NXdiM0FvS1RzS0lDQWdJQ0FnSUNCa1pXeGxkR1VnWkdGMFlWdHJaWGxkT3dvZ0lDQWdJQ0I5Q2lBZ0lDQjlDZ29nSUgwS0NpQWdMeW9xQ2lBZ0lDb2dWR2hsSUhCb2VYTnBZM01nZDI5eWJHUUtJQ0FnS2k4S0lDQmpiR0Z6Y3lCWGIzSnNaQ0JsZUhSbGJtUnpJRVYyWlc1MFZHRnlaMlYwSUhzS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUTNWeWNtVnVkR3g1SUM4Z2JHRnpkQ0IxYzJWa0lIUnBiV1Z6ZEdWd0xpQkpjeUJ6WlhRZ2RHOGdMVEVnYVdZZ2JtOTBJR0YyWVdsc1lXSnNaUzRnVkdocGN5QjJZV3gxWlNCcGN5QjFjR1JoZEdWa0lHSmxabTl5WlNCbFlXTm9JR2x1ZEdWeWJtRnNJSE4wWlhBc0lIZG9hV05vSUcxbFlXNXpJSFJvWVhRZ2FYUWdhWE1nSW1aeVpYTm9JaUJwYm5OcFpHVWdaWFpsYm5RZ1kyRnNiR0poWTJ0ekxnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCTllXdGxjeUJpYjJScFpYTWdaMjhnZEc4Z2MyeGxaWEFnZDJobGJpQjBhR1Y1SjNabElHSmxaVzRnYVc1aFkzUnBkbVV1Q2lBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpRb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQmJHd2dkR2hsSUdOMWNuSmxiblFnWTI5dWRHRmpkSE1nS0dsdWMzUmhibU5sY3lCdlppQkRiMjUwWVdOMFJYRjFZWFJwYjI0cElHbHVJSFJvWlNCM2IzSnNaQzRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dTRzkzSUc5bWRHVnVJSFJ2SUc1dmNtMWhiR2w2WlNCeGRXRjBaWEp1YVc5dWN5NGdVMlYwSUhSdklEQWdabTl5SUdWMlpYSjVJSE4wWlhBc0lERWdabTl5SUdWMlpYSjVJSE5sWTI5dVpDQmxkR011TGlCQklHeGhjbWRsY2lCMllXeDFaU0JwYm1OeVpXRnpaWE1nY0dWeVptOXliV0Z1WTJVdUlFbG1JR0p2WkdsbGN5QjBaVzVrSUhSdklHVjRjR3h2WkdVc0lITmxkQ0IwYnlCaElITnRZV3hzWlhJZ2RtRnNkV1VnS0hwbGNtOGdkRzhnWW1VZ2MzVnlaU0J1YjNSb2FXNW5JR05oYmlCbmJ5QjNjbTl1WnlrdUNpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd0NpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZObGRDQjBieUIwY25WbElIUnZJSFZ6WlNCbVlYTjBJSEYxWVhSbGNtNXBiMjRnYm05eWJXRnNhWHBoZEdsdmJpNGdTWFFnYVhNZ2IyWjBaVzRnWlc1dmRXZG9JR0ZqWTNWeVlYUmxJSFJ2SUhWelpTNEtJQ0FnSUNBcUlFbG1JR0p2WkdsbGN5QjBaVzVrSUhSdklHVjRjR3h2WkdVc0lITmxkQ0IwYnlCbVlXeHpaUzRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJR1poYkhObENpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSb1pTQjNZV3hzTFdOc2IyTnJJSFJwYldVZ2MybHVZMlVnYzJsdGRXeGhkR2x2YmlCemRHRnlkQzRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dUblZ0WW1WeUlHOW1JSFJwYldWemRHVndjeUIwWVd0bGJpQnphVzVqWlNCemRHRnlkQzRLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dSR1ZtWVhWc2RDQmhibVFnYkdGemRDQjBhVzFsYzNSbGNDQnphWHBsY3k0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVkdobElHZHlZWFpwZEhrZ2IyWWdkR2hsSUhkdmNteGtMZ29nSUNBZ0lDb3ZDZ29nSUNBZ0x5b3FDaUFnSUNBZ0tpQkhjbUYyYVhSNUlIUnZJSFZ6WlNCM2FHVnVJR0Z3Y0hKdmVHbHRZWFJwYm1jZ2RHaGxJR1p5YVdOMGFXOXVJRzFoZUNCbWIzSmpaU0FvYlhVcWJXRnpjeXBuY21GMmFYUjVLUzRLSUNBZ0lDQXFJRWxtSUhWdVpHVm1hVzVsWkN3Z1oyeHZZbUZzSUdkeVlYWnBkSGtnZDJsc2JDQmlaU0IxYzJWa0xnb2dJQ0FnSUNvZ1ZYTmxJSFJ2SUdWdVlXSnNaU0JtY21samRHbHZiaUJwYmlCaElGZHZjbXhrSUhkcGRHZ2dZU0J1ZFd4c0lHZHlZWFpwZEhrZ2RtVmpkRzl5SUNodWJ5Qm5jbUYyYVhSNUtTNEtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1ZHaGxJR0p5YjJGa2NHaGhjMlVnWVd4bmIzSnBkR2h0SUhSdklIVnpaUzRLSUNBZ0lDQXFJRUJrWldaaGRXeDBJRTVoYVhabFFuSnZZV1J3YUdGelpRb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCQmJHd2dZbTlrYVdWeklHbHVJSFJvYVhNZ2QyOXliR1FLSUNBZ0lDQXFMd29LSUNBZ0lDOHFLZ29nSUNBZ0lDb2dWSEoxWlNCcFppQmhibmtnWW05a2FXVnpJR0Z5WlNCdWIzUWdjMnhsWlhCcGJtY3NJR1poYkhObElHbG1JR1YyWlhKNUlHSnZaSGtnYVhNZ2MyeGxaWEJwYm1jdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZSb1pTQnpiMngyWlhJZ1lXeG5iM0pwZEdodElIUnZJSFZ6WlM0S0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUVkVFUyOXNkbVZ5Q2lBZ0lDQWdLaThLQ2lBZ0lDQXZLaW9LSUNBZ0lDQXFJR052Ykd4cGMybHZiazFoZEhKcGVBb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCRGIyeHNhWE5wYjI1TllYUnlhWGdnWm5KdmJTQjBhR1VnY0hKbGRtbHZkWE1nYzNSbGNDNEtJQ0FnSUNBcUx3b0tJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1FXeHNJR0ZrWkdWa0lHTnZiblJoWTNSdFlYUmxjbWxoYkhNdUNpQWdJQ0FnS2k4S0NpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZWelpXUWdkRzhnYkc5dmF5QjFjQ0JoSUVOdmJuUmhZM1JOWVhSbGNtbGhiQ0JuYVhabGJpQjBkMjhnYVc1emRHRnVZMlZ6SUc5bUlFMWhkR1Z5YVdGc0xnb2dJQ0FnSUNvdkNnb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVWFHVWdaR1ZtWVhWc2RDQnRZWFJsY21saGJDQnZaaUIwYUdVZ1ltOWthV1Z6TGdvZ0lDQWdJQ292Q2dvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJVYUdseklHTnZiblJoWTNRZ2JXRjBaWEpwWVd3Z2FYTWdkWE5sWkNCcFppQnVieUJ6ZFdsMFlXSnNaU0JqYjI1MFlXTjBiV0YwWlhKcFlXd2dhWE1nWm05MWJtUWdabTl5SUdFZ1kyOXVkR0ZqZEM0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nVkdsdFpTQmhZMk4xYlhWc1lYUnZjaUJtYjNJZ2FXNTBaWEp3YjJ4aGRHbHZiaTRLSUNBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5bllXWm1aWEp2Ym1kaGJXVnpMbU52YlM5bllXMWxMWEJvZVhOcFkzTXZabWw0TFhsdmRYSXRkR2x0WlhOMFpYQXZDaUFnSUNBZ0tpOEtDaUFnSUNBdktpb0tJQ0FnSUNBcUlFUnBjM0JoZEdOb1pXUWdZV1owWlhJZ1lTQmliMlI1SUdoaGN5QmlaV1Z1SUdGa1pHVmtJSFJ2SUhSb1pTQjNiM0pzWkM0S0lDQWdJQ0FxTHdvS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUkdsemNHRjBZMmhsWkNCaFpuUmxjaUJoSUdKdlpIa2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDQm1jbTl0SUhSb1pTQjNiM0pzWkM0S0lDQWdJQ0FxTHdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjeWtnZXdvZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5T3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQjBhR2x6TG1SMElEMGdMVEU3Q2lBZ0lDQWdJSFJvYVhNdVlXeHNiM2RUYkdWbGNDQTlJQ0VoYjNCMGFXOXVjeTVoYkd4dmQxTnNaV1Z3T3dvZ0lDQWdJQ0IwYUdsekxtTnZiblJoWTNSeklEMGdXMTA3Q2lBZ0lDQWdJSFJvYVhNdVpuSnBZM1JwYjI1RmNYVmhkR2x2Ym5NZ1BTQmJYVHNLSUNBZ0lDQWdkR2hwY3k1eGRXRjBUbTl5YldGc2FYcGxVMnRwY0NBOUlHOXdkR2x2Ym5NdWNYVmhkRTV2Y20xaGJHbDZaVk5yYVhBZ0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUc5d2RHbHZibk11Y1hWaGRFNXZjbTFoYkdsNlpWTnJhWEFnT2lBd093b2dJQ0FnSUNCMGFHbHpMbkYxWVhST2IzSnRZV3hwZW1WR1lYTjBJRDBnYjNCMGFXOXVjeTV4ZFdGMFRtOXliV0ZzYVhwbFJtRnpkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdiM0IwYVc5dWN5NXhkV0YwVG05eWJXRnNhWHBsUm1GemRDQTZJR1poYkhObE93b2dJQ0FnSUNCMGFHbHpMblJwYldVZ1BTQXdMakE3Q2lBZ0lDQWdJSFJvYVhNdWMzUmxjRzUxYldKbGNpQTlJREE3Q2lBZ0lDQWdJSFJvYVhNdVpHVm1ZWFZzZEY5a2RDQTlJREVnTHlBMk1Ec0tJQ0FnSUNBZ2RHaHBjeTV1WlhoMFNXUWdQU0F3T3dvZ0lDQWdJQ0IwYUdsekxtZHlZWFpwZEhrZ1BTQnVaWGNnVm1Wak15Z3BPd29LSUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WjNKaGRtbDBlU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaM0poZG1sMGVTNWpiM0I1S0c5d2RHbHZibk11WjNKaGRtbDBlU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG1aeWFXTjBhVzl1UjNKaGRtbDBlU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVabkpwWTNScGIyNUhjbUYyYVhSNUlEMGdibVYzSUZabFl6TW9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxtWnlhV04wYVc5dVIzSmhkbWwwZVM1amIzQjVLRzl3ZEdsdmJuTXVabkpwWTNScGIyNUhjbUYyYVhSNUtUc0tJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2RHaHBjeTVpY205aFpIQm9ZWE5sSUQwZ2IzQjBhVzl1Y3k1aWNtOWhaSEJvWVhObElDRTlQU0IxYm1SbFptbHVaV1FnUHlCdmNIUnBiMjV6TG1KeWIyRmtjR2hoYzJVZ09pQnVaWGNnVG1GcGRtVkNjbTloWkhCb1lYTmxLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVltOWthV1Z6SUQwZ1cxMDdDaUFnSUNBZ0lIUm9hWE11YUdGelFXTjBhWFpsUW05a2FXVnpJRDBnWm1Gc2MyVTdDaUFnSUNBZ0lIUm9hWE11YzI5c2RtVnlJRDBnYjNCMGFXOXVjeTV6YjJ4MlpYSWdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHOXdkR2x2Ym5NdWMyOXNkbVZ5SURvZ2JtVjNJRWRUVTI5c2RtVnlLQ2s3Q2lBZ0lDQWdJSFJvYVhNdVkyOXVjM1J5WVdsdWRITWdQU0JiWFRzS0lDQWdJQ0FnZEdocGN5NXVZWEp5YjNkd2FHRnpaU0E5SUc1bGR5Qk9ZWEp5YjNkd2FHRnpaU2gwYUdsektUc0tJQ0FnSUNBZ2RHaHBjeTVqYjJ4c2FYTnBiMjVOWVhSeWFYZ2dQU0J1WlhjZ1FYSnlZWGxEYjJ4c2FYTnBiMjVOWVhSeWFYZ29LVHNLSUNBZ0lDQWdkR2hwY3k1amIyeHNhWE5wYjI1TllYUnlhWGhRY21WMmFXOTFjeUE5SUc1bGR5QkJjbkpoZVVOdmJHeHBjMmx2YmsxaGRISnBlQ2dwT3dvZ0lDQWdJQ0IwYUdsekxtSnZaSGxQZG1WeWJHRndTMlZsY0dWeUlEMGdibVYzSUU5MlpYSnNZWEJMWldWd1pYSW9LVHNLSUNBZ0lDQWdkR2hwY3k1emFHRndaVTkyWlhKc1lYQkxaV1Z3WlhJZ1BTQnVaWGNnVDNabGNteGhjRXRsWlhCbGNpZ3BPd29nSUNBZ0lDQjBhR2x6TG1OdmJuUmhZM1J0WVhSbGNtbGhiSE1nUFNCYlhUc0tJQ0FnSUNBZ2RHaHBjeTVqYjI1MFlXTjBUV0YwWlhKcFlXeFVZV0pzWlNBOUlHNWxkeUJVZFhCc1pVUnBZM1JwYjI1aGNua29LVHNLSUNBZ0lDQWdkR2hwY3k1a1pXWmhkV3gwVFdGMFpYSnBZV3dnUFNCdVpYY2dUV0YwWlhKcFlXd29KMlJsWm1GMWJIUW5LVHNLSUNBZ0lDQWdkR2hwY3k1a1pXWmhkV3gwUTI5dWRHRmpkRTFoZEdWeWFXRnNJRDBnYm1WM0lFTnZiblJoWTNSTllYUmxjbWxoYkNoMGFHbHpMbVJsWm1GMWJIUk5ZWFJsY21saGJDd2dkR2hwY3k1a1pXWmhkV3gwVFdGMFpYSnBZV3dzSUhzS0lDQWdJQ0FnSUNCbWNtbGpkR2x2YmpvZ01DNHpMQW9nSUNBZ0lDQWdJSEpsYzNScGRIVjBhVzl1T2lBd0xqQUtJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lIUm9hWE11Wkc5UWNtOW1hV3hwYm1jZ1BTQm1ZV3h6WlRzS0lDQWdJQ0FnZEdocGN5NXdjbTltYVd4bElEMGdld29nSUNBZ0lDQWdJSE52YkhabE9pQXdMQW9nSUNBZ0lDQWdJRzFoYTJWRGIyNTBZV04wUTI5dWMzUnlZV2x1ZEhNNklEQXNDaUFnSUNBZ0lDQWdZbkp2WVdSd2FHRnpaVG9nTUN3S0lDQWdJQ0FnSUNCcGJuUmxaM0poZEdVNklEQXNDaUFnSUNBZ0lDQWdibUZ5Y205M2NHaGhjMlU2SURBS0lDQWdJQ0FnZlRzS0lDQWdJQ0FnZEdocGN5NWhZMk4xYlhWc1lYUnZjaUE5SURBN0NpQWdJQ0FnSUhSb2FYTXVjM1ZpYzNsemRHVnRjeUE5SUZ0ZE93b2dJQ0FnSUNCMGFHbHpMbUZrWkVKdlpIbEZkbVZ1ZENBOUlIc0tJQ0FnSUNBZ0lDQjBlWEJsT2lBbllXUmtRbTlrZVNjc0NpQWdJQ0FnSUNBZ1ltOWtlVG9nYm5Wc2JBb2dJQ0FnSUNCOU93b2dJQ0FnSUNCMGFHbHpMbkpsYlc5MlpVSnZaSGxGZG1WdWRDQTlJSHNLSUNBZ0lDQWdJQ0IwZVhCbE9pQW5jbVZ0YjNabFFtOWtlU2NzQ2lBZ0lDQWdJQ0FnWW05a2VUb2diblZzYkFvZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0IwYUdsekxtbGtWRzlDYjJSNVRXRndJRDBnZTMwN0NpQWdJQ0FnSUhSb2FYTXVZbkp2WVdSd2FHRnpaUzV6WlhSWGIzSnNaQ2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJQzhxS2dvZ0lDQWdJQ29nUjJWMElIUm9aU0JqYjI1MFlXTjBJRzFoZEdWeWFXRnNJR0psZEhkbFpXNGdiV0YwWlhKcFlXeHpJRzB4SUdGdVpDQnRNZ29nSUNBZ0lDb2dRSEpsZEhWeWJpQlVhR1VnWTI5dWRHRmpkQ0J0WVhSbGNtbGhiQ0JwWmlCcGRDQjNZWE1nWm05MWJtUXVDaUFnSUNBZ0tpOEtDZ29nSUNBZ1oyVjBRMjl1ZEdGamRFMWhkR1Z5YVdGc0tHMHhMQ0J0TWlrZ2V3b2dJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjUwWVdOMFRXRjBaWEpwWVd4VVlXSnNaUzVuWlhRb2JURXVhV1FzSUcweUxtbGtLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1UzUnZjbVVnYjJ4a0lHTnZiR3hwYzJsdmJpQnpkR0YwWlNCcGJtWnZDaUFnSUNBZ0tpOEtDZ29nSUNBZ1kyOXNiR2x6YVc5dVRXRjBjbWw0VkdsamF5Z3BJSHNLSUNBZ0lDQWdZMjl1YzNRZ2RHVnRjQ0E5SUhSb2FYTXVZMjlzYkdsemFXOXVUV0YwY21sNFVISmxkbWx2ZFhNN0NpQWdJQ0FnSUhSb2FYTXVZMjlzYkdsemFXOXVUV0YwY21sNFVISmxkbWx2ZFhNZ1BTQjBhR2x6TG1OdmJHeHBjMmx2YmsxaGRISnBlRHNLSUNBZ0lDQWdkR2hwY3k1amIyeHNhWE5wYjI1TllYUnlhWGdnUFNCMFpXMXdPd29nSUNBZ0lDQjBhR2x6TG1OdmJHeHBjMmx2YmsxaGRISnBlQzV5WlhObGRDZ3BPd29nSUNBZ0lDQjBhR2x6TG1KdlpIbFBkbVZ5YkdGd1MyVmxjR1Z5TG5ScFkyc29LVHNLSUNBZ0lDQWdkR2hwY3k1emFHRndaVTkyWlhKc1lYQkxaV1Z3WlhJdWRHbGpheWdwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkJaR1FnWVNCamIyNXpkSEpoYVc1MElIUnZJSFJvWlNCemFXMTFiR0YwYVc5dUxnb2dJQ0FnSUNvdkNnb0tJQ0FnSUdGa1pFTnZibk4wY21GcGJuUW9ZeWtnZXdvZ0lDQWdJQ0IwYUdsekxtTnZibk4wY21GcGJuUnpMbkIxYzJnb1l5azdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUZKbGJXOTJaWE1nWVNCamIyNXpkSEpoYVc1MENpQWdJQ0FnS2k4S0Nnb2dJQ0FnY21WdGIzWmxRMjl1YzNSeVlXbHVkQ2hqS1NCN0NpQWdJQ0FnSUdOdmJuTjBJR2xrZUNBOUlIUm9hWE11WTI5dWMzUnlZV2x1ZEhNdWFXNWtaWGhQWmloaktUc0tDaUFnSUNBZ0lHbG1JQ2hwWkhnZ0lUMDlJQzB4S1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1emRISmhhVzUwY3k1emNHeHBZMlVvYVdSNExDQXhLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCU1lYbGpZWE4wSUhSbGMzUUtJQ0FnSUNBcUlFQmtaWEJ5WldOaGRHVmtJRlZ6WlNBdWNtRjVZMkZ6ZEVGc2JDd2dMbkpoZVdOaGMzUkRiRzl6WlhOMElHOXlJQzV5WVhsallYTjBRVzU1SUdsdWMzUmxZV1F1Q2lBZ0lDQWdLaThLQ2dvZ0lDQWdjbUY1VkdWemRDaG1jbTl0TENCMGJ5d2djbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdhVzV6ZEdGdVkyVnZaaUJTWVhsallYTjBVbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lDQWdMeThnUkc4Z2NtRjVZMkZ6ZEVOc2IzTmxjM1FLSUNBZ0lDQWdJQ0IwYUdsekxuSmhlV05oYzNSRGJHOXpaWE4wS0daeWIyMHNJSFJ2TENCN0NpQWdJQ0FnSUNBZ0lDQnphMmx3UW1GamEyWmhZMlZ6T2lCMGNuVmxDaUFnSUNBZ0lDQWdmU3dnY21WemRXeDBLVHNLSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQXZMeUJFYnlCeVlYbGpZWE4wUVd4c0NpQWdJQ0FnSUNBZ2RHaHBjeTV5WVhsallYTjBRV3hzS0daeWIyMHNJSFJ2TENCN0NpQWdJQ0FnSUNBZ0lDQnphMmx3UW1GamEyWmhZMlZ6T2lCMGNuVmxDaUFnSUNBZ0lDQWdmU3dnY21WemRXeDBLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCU1lYa2dZMkZ6ZENCaFoyRnBibk4wSUdGc2JDQmliMlJwWlhNdUlGUm9aU0J3Y205MmFXUmxaQ0JqWVd4c1ltRmpheUIzYVd4c0lHSmxJR1Y0WldOMWRHVmtJR1p2Y2lCbFlXTm9JR2hwZENCM2FYUm9JR0VnVW1GNVkyRnpkRkpsYzNWc2RDQmhjeUJ6YVc1bmJHVWdZWEpuZFcxbGJuUXVDaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUnlkV1VnYVdZZ1lXNTVJR0p2WkhrZ2QyRnpJR2hwZEM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0J5WVhsallYTjBRV3hzS0daeWIyMHNJSFJ2TENCdmNIUnBiMjV6TENCallXeHNZbUZqYXlrZ2V3b2dJQ0FnSUNCcFppQW9iM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUh0OU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCdmNIUnBiMjV6TG0xdlpHVWdQU0JTWVhrdVFVeE1Pd29nSUNBZ0lDQnZjSFJwYjI1ekxtWnliMjBnUFNCbWNtOXRPd29nSUNBZ0lDQnZjSFJwYjI1ekxuUnZJRDBnZEc4N0NpQWdJQ0FnSUc5d2RHbHZibk11WTJGc2JHSmhZMnNnUFNCallXeHNZbUZqYXpzS0lDQWdJQ0FnY21WMGRYSnVJSFJ0Y0ZKaGVTNXBiblJsY25ObFkzUlhiM0pzWkNoMGFHbHpMQ0J2Y0hScGIyNXpLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1VtRjVJR05oYzNRc0lHRnVaQ0J6ZEc5d0lHRjBJSFJvWlNCbWFYSnpkQ0J5WlhOMWJIUXVJRTV2ZEdVZ2RHaGhkQ0IwYUdVZ2IzSmtaWElnYVhNZ2NtRnVaRzl0SUMwZ1luVjBJSFJvWlNCdFpYUm9iMlFnYVhNZ1ptRnpkQzRLSUNBZ0lDQXFJRUJ5WlhSMWNtNGdWSEoxWlNCcFppQmhibmtnWW05a2VTQjNZWE1nYUdsMExnb2dJQ0FnSUNvdkNnb0tJQ0FnSUhKaGVXTmhjM1JCYm5rb1puSnZiU3dnZEc4c0lHOXdkR2x2Ym5Nc0lISmxjM1ZzZENrZ2V3b2dJQ0FnSUNCcFppQW9iM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUh0OU93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCdmNIUnBiMjV6TG0xdlpHVWdQU0JTWVhrdVFVNVpPd29nSUNBZ0lDQnZjSFJwYjI1ekxtWnliMjBnUFNCbWNtOXRPd29nSUNBZ0lDQnZjSFJwYjI1ekxuUnZJRDBnZEc4N0NpQWdJQ0FnSUc5d2RHbHZibk11Y21WemRXeDBJRDBnY21WemRXeDBPd29nSUNBZ0lDQnlaWFIxY200Z2RHMXdVbUY1TG1sdWRHVnljMlZqZEZkdmNteGtLSFJvYVhNc0lHOXdkR2x2Ym5NcE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJTWVhrZ1kyRnpkQ3dnWVc1a0lISmxkSFZ5YmlCcGJtWnZjbTFoZEdsdmJpQnZaaUIwYUdVZ1kyeHZjMlZ6ZENCb2FYUXVDaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUnlkV1VnYVdZZ1lXNTVJR0p2WkhrZ2QyRnpJR2hwZEM0S0lDQWdJQ0FxTHdvS0NpQWdJQ0J5WVhsallYTjBRMnh2YzJWemRDaG1jbTl0TENCMGJ5d2diM0IwYVc5dWN5d2djbVZ6ZFd4MEtTQjdDaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UzMDdDaUFnSUNBZ0lIMEtDaUFnSUNBZ0lHOXdkR2x2Ym5NdWJXOWtaU0E5SUZKaGVTNURURTlUUlZOVU93b2dJQ0FnSUNCdmNIUnBiMjV6TG1aeWIyMGdQU0JtY205dE93b2dJQ0FnSUNCdmNIUnBiMjV6TG5SdklEMGdkRzg3Q2lBZ0lDQWdJRzl3ZEdsdmJuTXVjbVZ6ZFd4MElEMGdjbVZ6ZFd4ME93b2dJQ0FnSUNCeVpYUjFjbTRnZEcxd1VtRjVMbWx1ZEdWeWMyVmpkRmR2Y214a0tIUm9hWE1zSUc5d2RHbHZibk1wT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQkJaR1FnWVNCeWFXZHBaQ0JpYjJSNUlIUnZJSFJvWlNCemFXMTFiR0YwYVc5dUxnb2dJQ0FnSUNvZ1FIUnZaRzhnU1dZZ2RHaGxJSE5wYlhWc1lYUnBiMjRnYUdGeklHNXZkQ0I1WlhRZ2MzUmhjblJsWkN3Z2QyaDVJSEpsWTNKbGRHVWdZVzVrSUdOdmNIa2dZWEp5WVhseklHWnZjaUJsWVdOb0lHSnZaSGsvSUVGalkzVnRkV3hoZEdVZ2FXNGdaSGx1WVcxcFl5QmhjbkpoZVhNZ2FXNGdkR2hwY3lCallYTmxMZ29nSUNBZ0lDb2dRSFJ2Wkc4Z1FXUmthVzVuSUdGdUlHRnljbUY1SUc5bUlHSnZaR2xsY3lCemFHOTFiR1FnWW1VZ2NHOXpjMmxpYkdVdUlGUm9hWE1nZDI5MWJHUWdjMkYyWlNCemIyMWxJR3h2YjNCeklIUnZid29nSUNBZ0lDb3ZDZ29LSUNBZ0lHRmtaRUp2Wkhrb1ltOWtlU2tnZXdvZ0lDQWdJQ0JwWmlBb2RHaHBjeTVpYjJScFpYTXVhVzVqYkhWa1pYTW9ZbTlrZVNrcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUdKdlpIa3VhVzVrWlhnZ1BTQjBhR2x6TG1KdlpHbGxjeTVzWlc1bmRHZzdDaUFnSUNBZ0lIUm9hWE11WW05a2FXVnpMbkIxYzJnb1ltOWtlU2s3Q2lBZ0lDQWdJR0p2WkhrdWQyOXliR1FnUFNCMGFHbHpPd29nSUNBZ0lDQmliMlI1TG1sdWFYUlFiM05wZEdsdmJpNWpiM0I1S0dKdlpIa3VjRzl6YVhScGIyNHBPd29nSUNBZ0lDQmliMlI1TG1sdWFYUldaV3h2WTJsMGVTNWpiM0I1S0dKdlpIa3VkbVZzYjJOcGRIa3BPd29nSUNBZ0lDQmliMlI1TG5ScGJXVk1ZWE4wVTJ4bFpYQjVJRDBnZEdocGN5NTBhVzFsT3dvS0lDQWdJQ0FnYVdZZ0tHSnZaSGtnYVc1emRHRnVZMlZ2WmlCQ2IyUjVLU0I3Q2lBZ0lDQWdJQ0FnWW05a2VTNXBibWwwUVc1bmRXeGhjbFpsYkc5amFYUjVMbU52Y0hrb1ltOWtlUzVoYm1kMWJHRnlWbVZzYjJOcGRIa3BPd29nSUNBZ0lDQWdJR0p2WkhrdWFXNXBkRkYxWVhSbGNtNXBiMjR1WTI5d2VTaGliMlI1TG5GMVlYUmxjbTVwYjI0cE93b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCMGFHbHpMbU52Ykd4cGMybHZiazFoZEhKcGVDNXpaWFJPZFcxUFltcGxZM1J6S0hSb2FYTXVZbTlrYVdWekxteGxibWQwYUNrN0NpQWdJQ0FnSUhSb2FYTXVZV1JrUW05a2VVVjJaVzUwTG1KdlpIa2dQU0JpYjJSNU93b2dJQ0FnSUNCMGFHbHpMbWxrVkc5Q2IyUjVUV0Z3VzJKdlpIa3VhV1JkSUQwZ1ltOWtlVHNLSUNBZ0lDQWdkR2hwY3k1a2FYTndZWFJqYUVWMlpXNTBLSFJvYVhNdVlXUmtRbTlrZVVWMlpXNTBLVHNLSUNBZ0lIMEtJQ0FnSUM4cUtnb2dJQ0FnSUNvZ1VtVnRiM1psSUdFZ2NtbG5hV1FnWW05a2VTQm1jbTl0SUhSb1pTQnphVzExYkdGMGFXOXVMZ29nSUNBZ0lDb3ZDZ29LSUNBZ0lISmxiVzkyWlVKdlpIa29ZbTlrZVNrZ2V3b2dJQ0FnSUNCaWIyUjVMbmR2Y214a0lEMGdiblZzYkRzS0lDQWdJQ0FnWTI5dWMzUWdiaUE5SUhSb2FYTXVZbTlrYVdWekxteGxibWQwYUNBdElERTdDaUFnSUNBZ0lHTnZibk4wSUdKdlpHbGxjeUE5SUhSb2FYTXVZbTlrYVdWek93b2dJQ0FnSUNCamIyNXpkQ0JwWkhnZ1BTQmliMlJwWlhNdWFXNWtaWGhQWmloaWIyUjVLVHNLQ2lBZ0lDQWdJR2xtSUNocFpIZ2dJVDA5SUMweEtTQjdDaUFnSUNBZ0lDQWdZbTlrYVdWekxuTndiR2xqWlNocFpIZ3NJREVwT3lBdkx5QlViMlJ2T2lCemFHOTFiR1FnZFhObElHRWdaMkZ5WW1GblpTQm1jbVZsSUcxbGRHaHZaQW9nSUNBZ0lDQWdJQzh2SUZKbFkyOXRjSFYwWlNCcGJtUmxlQW9LSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0FoUFQwZ1ltOWthV1Z6TG14bGJtZDBhRHNnYVNzcktTQjdDaUFnSUNBZ0lDQWdJQ0JpYjJScFpYTmJhVjB1YVc1a1pYZ2dQU0JwT3dvZ0lDQWdJQ0FnSUgwS0NpQWdJQ0FnSUNBZ2RHaHBjeTVqYjJ4c2FYTnBiMjVOWVhSeWFYZ3VjMlYwVG5WdFQySnFaV04wY3lodUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJXOTJaVUp2WkhsRmRtVnVkQzVpYjJSNUlEMGdZbTlrZVRzS0lDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NXBaRlJ2UW05a2VVMWhjRnRpYjJSNUxtbGtYVHNLSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvZEdocGN5NXlaVzF2ZG1WQ2IyUjVSWFpsYm5RcE93b2dJQ0FnSUNCOUNpQWdJQ0I5Q2dvZ0lDQWdaMlYwUW05a2VVSjVTV1FvYVdRcElIc0tJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhV1JVYjBKdlpIbE5ZWEJiYVdSZE93b2dJQ0FnZlFvZ0lDQWdMeW9xQ2lBZ0lDQWdLaUJBZEc5a2J5Qk5ZV3RsSUdFZ1ptRnpkR1Z5SUcxaGNBb2dJQ0FnSUNvdkNnb0tJQ0FnSUdkbGRGTm9ZWEJsUW5sSlpDaHBaQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQmliMlJwWlhNZ1BTQjBhR2x6TG1KdlpHbGxjenNLQ2lBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWW05a2FXVnpMbXhsYm1kMGFEc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJoaGNHVnpJRDBnWW05a2FXVnpXMmxkTG5Ob1lYQmxjenNLQ2lBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYWlBOUlEQTdJR29nUENCemFHRndaWE11YkdWdVozUm9PeUJxS3lzcElIc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElITm9ZWEJsSUQwZ2MyaGhjR1Z6VzJwZE93b0tJQ0FnSUNBZ0lDQWdJR2xtSUNoemFHRndaUzVwWkNBOVBUMGdhV1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITm9ZWEJsT3dvZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNCOUNpQWdJQ0F2S2lvS0lDQWdJQ0FxSUVGa1pITWdZU0JqYjI1MFlXTjBJRzFoZEdWeWFXRnNJSFJ2SUhSb1pTQlhiM0pzWkFvZ0lDQWdJQ292Q2dvS0lDQWdJR0ZrWkVOdmJuUmhZM1JOWVhSbGNtbGhiQ2hqYldGMEtTQjdDaUFnSUNBZ0lDOHZJRUZrWkNCamIyNTBZV04wSUcxaGRHVnlhV0ZzQ2lBZ0lDQWdJSFJvYVhNdVkyOXVkR0ZqZEcxaGRHVnlhV0ZzY3k1d2RYTm9LR050WVhRcE95QXZMeUJCWkdRZ1kzVnljbVZ1ZENCamIyNTBZV04wSUcxaGRHVnlhV0ZzSUhSdklIUm9aU0J0WVhSbGNtbGhiQ0IwWVdKc1pRb0tJQ0FnSUNBZ2RHaHBjeTVqYjI1MFlXTjBUV0YwWlhKcFlXeFVZV0pzWlM1elpYUW9ZMjFoZEM1dFlYUmxjbWxoYkhOYk1GMHVhV1FzSUdOdFlYUXViV0YwWlhKcFlXeHpXekZkTG1sa0xDQmpiV0YwS1RzS0lDQWdJSDBLSUNBZ0lDOHFLZ29nSUNBZ0lDb2dVbVZ0YjNabGN5QmhJR052Ym5SaFkzUWdiV0YwWlhKcFlXd2dabkp2YlNCMGFHVWdWMjl5YkdRdUNpQWdJQ0FnS2k4S0Nnb2dJQ0FnY21WdGIzWmxRMjl1ZEdGamRFMWhkR1Z5YVdGc0tHTnRZWFFwSUhzS0lDQWdJQ0FnWTI5dWMzUWdhV1I0SUQwZ2RHaHBjeTVqYjI1MFlXTjBiV0YwWlhKcFlXeHpMbWx1WkdWNFQyWW9ZMjFoZENrN0Nnb2dJQ0FnSUNCcFppQW9hV1I0SUQwOVBTQXRNU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkR2hwY3k1amIyNTBZV04wYldGMFpYSnBZV3h6TG5Od2JHbGpaU2hwWkhnc0lERXBPd29nSUNBZ0lDQjBhR2x6TG1OdmJuUmhZM1JOWVhSbGNtbGhiRlJoWW14bExtUmxiR1YwWlNoamJXRjBMbTFoZEdWeWFXRnNjMXN3WFM1cFpDd2dZMjFoZEM1dFlYUmxjbWxoYkhOYk1WMHVhV1FwT3dvZ0lDQWdmUW9nSUNBZ0x5b3FDaUFnSUNBZ0tpQlRkR1Z3SUhSb1pTQnphVzExYkdGMGFXOXVJR1p2Y25kaGNtUWdhMlZsY0dsdVp5QjBjbUZqYXlCdlppQnNZWE4wSUdOaGJHeGxaQ0IwYVcxbENpQWdJQ0FnS2lCMGJ5QmlaU0JoWW14bElIUnZJSE4wWlhBZ2RHaGxJSGR2Y214a0lHRjBJR0VnWm1sNFpXUWdjbUYwWlN3Z2FXNWtaWEJsYm1SbGJuUnNlU0J2WmlCbWNtRnRaWEpoZEdVdUNpQWdJQ0FnS2dvZ0lDQWdJQ29nUUhCaGNtRnRJR1IwSUZSb1pTQm1hWGhsWkNCMGFXMWxJSE4wWlhBZ2MybDZaU0IwYnlCMWMyVWdLR1JsWm1GMWJIUTZJREVnTHlBMk1Da3VDaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXRjRVM1ZpVTNSbGNITWdUV0Y0YVcxMWJTQnVkVzFpWlhJZ2IyWWdabWw0WldRZ2MzUmxjSE1nZEc4Z2RHRnJaU0J3WlhJZ1puVnVZM1JwYjI0Z1kyRnNiQ0FvWkdWbVlYVnNkRG9nTVRBcExnb2dJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMmRoWm1abGNtOXVaMkZ0WlhNdVkyOXRMM0J2YzNRdlptbDRYM2x2ZFhKZmRHbHRaWE4wWlhBdkNpQWdJQ0FnS2lCQVpYaGhiWEJzWlFvZ0lDQWdJQ29nSUNBZ0lDOHZJRkoxYmlCMGFHVWdjMmx0ZFd4aGRHbHZiaUJwYm1SbGNHVnVaR1Z1ZEd4NUlHOW1JR1p5WVcxbGNtRjBaU0JsZG1WeWVTQXhJQzhnTmpBZ2JYTUtJQ0FnSUNBcUlDQWdJQ0IzYjNKc1pDNW1hWGhsWkZOMFpYQW9LUW9nSUNBZ0lDb3ZDZ29LSUNBZ0lHWnBlR1ZrVTNSbGNDaGtkQ3dnYldGNFUzVmlVM1JsY0hNcElIc0tJQ0FnSUNBZ2FXWWdLR1IwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQmtkQ0E5SURFZ0x5QTJNRHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0cxaGVGTjFZbE4wWlhCeklEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0J0WVhoVGRXSlRkR1Z3Y3lBOUlERXdPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQmpiMjV6ZENCMGFXMWxJRDBnY0dWeVptOXliV0Z1WTJVdWJtOTNLQ2tnTHlBeE1EQXdPeUF2THlCelpXTnZibVJ6Q2dvZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YkdGemRFTmhiR3hVYVcxbEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1emRHVndLR1IwTENCMWJtUmxabWx1WldRc0lHMWhlRk4xWWxOMFpYQnpLVHNLSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCMGFXMWxVMmx1WTJWTVlYTjBRMkZzYkdWa0lEMGdkR2x0WlNBdElIUm9hWE11YkdGemRFTmhiR3hVYVcxbE93b2dJQ0FnSUNBZ0lIUm9hWE11YzNSbGNDaGtkQ3dnZEdsdFpWTnBibU5sVEdGemRFTmhiR3hsWkN3Z2JXRjRVM1ZpVTNSbGNITXBPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG14aGMzUkRZV3hzVkdsdFpTQTlJSFJwYldVN0NpQWdJQ0I5Q2lBZ0lDQXZLaW9LSUNBZ0lDQXFJRk4wWlhBZ2RHaGxJSEJvZVhOcFkzTWdkMjl5YkdRZ1ptOXlkMkZ5WkNCcGJpQjBhVzFsTGdvZ0lDQWdJQ29LSUNBZ0lDQXFJRlJvWlhKbElHRnlaU0IwZDI4Z2JXOWtaWE11SUZSb1pTQnphVzF3YkdVZ2JXOWtaU0JwY3lCbWFYaGxaQ0IwYVcxbGMzUmxjSEJwYm1jZ2QybDBhRzkxZENCcGJuUmxjbkJ2YkdGMGFXOXVMaUJKYmlCMGFHbHpJR05oYzJVZ2VXOTFJRzl1YkhrZ2RYTmxJSFJvWlNCbWFYSnpkQ0JoY21kMWJXVnVkQzRnVkdobElITmxZMjl1WkNCallYTmxJSFZ6WlhNZ2FXNTBaWEp3YjJ4aGRHbHZiaTRnU1c0Z2RHaGhkQ0I1YjNVZ1lXeHpieUJ3Y205MmFXUmxJSFJvWlNCMGFXMWxJSE5wYm1ObElIUm9aU0JtZFc1amRHbHZiaUIzWVhNZ2JHRnpkQ0IxYzJWa0xDQmhjeUIzWld4c0lHRnpJSFJvWlNCdFlYaHBiWFZ0SUdacGVHVmtJSFJwYldWemRHVndjeUIwYnlCMFlXdGxMZ29nSUNBZ0lDb0tJQ0FnSUNBcUlFQndZWEpoYlNCa2RDQlVhR1VnWm1sNFpXUWdkR2x0WlNCemRHVndJSE5wZW1VZ2RHOGdkWE5sTGdvZ0lDQWdJQ29nUUhCaGNtRnRJSFJwYldWVGFXNWpaVXhoYzNSRFlXeHNaV1FnVkdobElIUnBiV1VnWld4aGNITmxaQ0J6YVc1alpTQjBhR1VnWm5WdVkzUnBiMjRnZDJGeklHeGhjM1FnWTJGc2JHVmtMZ29nSUNBZ0lDb2dRSEJoY21GdElHMWhlRk4xWWxOMFpYQnpJRTFoZUdsdGRXMGdiblZ0WW1WeUlHOW1JR1pwZUdWa0lITjBaWEJ6SUhSdklIUmhhMlVnY0dWeUlHWjFibU4wYVc5dUlHTmhiR3dnS0dSbFptRjFiSFE2SURFd0tTNEtJQ0FnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTkzWldJdVlYSmphR2wyWlM1dmNtY3ZkMlZpTHpJd01UZ3dOREkyTVRVME5UTXhMMmgwZEhBNkx5OWlkV3hzWlhSd2FIbHphV056TG05eVp5OXRaV1JwWVhkcGEya3RNUzQxTGpndmFXNWtaWGd1Y0dod0wxTjBaWEJ3YVc1blgxUm9aVjlYYjNKc1pDTlhhR0YwWDJSdlgzUm9aVjl3WVhKaGJXVjBaWEp6WDNSdlgySjBSSGx1WVcxcFkzTlhiM0pzWkRvNmMzUmxjRk5wYlhWc1lYUnBiMjVmYldWaGJpNHpSZ29nSUNBZ0lDb2dRR1Y0WVcxd2JHVUtJQ0FnSUNBcUlDQWdJQ0F2THlCbWFYaGxaQ0IwYVcxbGMzUmxjSEJwYm1jZ2QybDBhRzkxZENCcGJuUmxjbkJ2YkdGMGFXOXVDaUFnSUNBZ0tpQWdJQ0FnZDI5eWJHUXVjM1JsY0NneElDOGdOakFwQ2lBZ0lDQWdLaThLQ2dvZ0lDQWdjM1JsY0Noa2RDd2dkR2x0WlZOcGJtTmxUR0Z6ZEVOaGJHeGxaQ3dnYldGNFUzVmlVM1JsY0hNcElIc0tJQ0FnSUNBZ2FXWWdLRzFoZUZOMVlsTjBaWEJ6SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnRZWGhUZFdKVGRHVndjeUE5SURFd093b2dJQ0FnSUNCOUNnb2dJQ0FnSUNCcFppQW9kR2x0WlZOcGJtTmxUR0Z6ZEVOaGJHeGxaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdDaUFnSUNBZ0lDQWdMeThnUm1sNFpXUXNJSE5wYlhCc1pTQnpkR1Z3Y0dsdVp3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1MFpYSnVZV3hUZEdWd0tHUjBLVHNnTHk4Z1NXNWpjbVZ0Wlc1MElIUnBiV1VLQ2lBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsSUNzOUlHUjBPd29nSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WVdOamRXMTFiR0YwYjNJZ0t6MGdkR2x0WlZOcGJtTmxUR0Z6ZEVOaGJHeGxaRHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjBNQ0E5SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwT3dvZ0lDQWdJQ0FnSUd4bGRDQnpkV0p6ZEdWd2N5QTlJREE3Q2dvZ0lDQWdJQ0FnSUhkb2FXeGxJQ2gwYUdsekxtRmpZM1Z0ZFd4aGRHOXlJRDQ5SUdSMElDWW1JSE4xWW5OMFpYQnpJRHdnYldGNFUzVmlVM1JsY0hNcElIc0tJQ0FnSUNBZ0lDQWdJQzh2SUVSdklHWnBlR1ZrSUhOMFpYQnpJSFJ2SUdOaGRHTm9JSFZ3Q2lBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1ZEdWeWJtRnNVM1JsY0Noa2RDazdDaUFnSUNBZ0lDQWdJQ0IwYUdsekxtRmpZM1Z0ZFd4aGRHOXlJQzA5SUdSME93b2dJQ0FnSUNBZ0lDQWdjM1ZpYzNSbGNITXJLenNLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9jR1Z5Wm05eWJXRnVZMlV1Ym05M0tDa2dMU0IwTUNBK0lHUjBJQ29nTVRBd01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnWm5KaGJXVnlZWFJsSUdseklHNXZkQ0JwYm5SbGNtRmpkR2wyWlNCaGJubHRiM0psTGdvZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJYWlNCaGNtVWdZbVZzYjNjZ2RHaGxJSFJoY21kbGRDQm1jbUZ0WlhKaGRHVXVDaUFnSUNBZ0lDQWdJQ0FnSUM4dklFSmxkSFJsY2lCaVlXbHNJRzkxZEM0S0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU0F2THlCU1pXMXZkbVVnZEdobElHVjRZMlZ6Y3lCaFkyTjFiWFZzWVhSdmNpd2djMmx1WTJVZ2QyVWdiV0Y1SUc1dmRBb2dJQ0FnSUNBZ0lDOHZJR2hoZG1VZ2FHRmtJR1Z1YjNWbmFDQnpkV0p6ZEdWd2N5QmhkbUZwYkdGaWJHVWdkRzhnWTJGMFkyZ2dkWEFLQ2dvZ0lDQWdJQ0FnSUhSb2FYTXVZV05qZFcxMWJHRjBiM0lnUFNCMGFHbHpMbUZqWTNWdGRXeGhkRzl5SUNVZ1pIUTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2RDQTlJSFJvYVhNdVlXTmpkVzExYkdGMGIzSWdMeUJrZERzS0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ0lUMDlJSFJvYVhNdVltOWthV1Z6TG14bGJtZDBhRHNnYWlzcktTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmlJRDBnZEdocGN5NWliMlJwWlhOYmFsMDdDaUFnSUNBZ0lDQWdJQ0JpTG5CeVpYWnBiM1Z6VUc5emFYUnBiMjR1YkdWeWNDaGlMbkJ2YzJsMGFXOXVMQ0IwTENCaUxtbHVkR1Z5Y0c5c1lYUmxaRkJ2YzJsMGFXOXVLVHNLSUNBZ0lDQWdJQ0FnSUdJdWNISmxkbWx2ZFhOUmRXRjBaWEp1YVc5dUxuTnNaWEp3S0dJdWNYVmhkR1Z5Ym1sdmJpd2dkQ3dnWWk1cGJuUmxjbkJ2YkdGMFpXUlJkV0YwWlhKdWFXOXVLVHNLSUNBZ0lDQWdJQ0FnSUdJdWNISmxkbWx2ZFhOUmRXRjBaWEp1YVc5dUxtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsSUNzOUlIUnBiV1ZUYVc1alpVeGhjM1JEWVd4c1pXUTdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdJQ0JwYm5SbGNtNWhiRk4wWlhBb1pIUXBJSHNLSUNBZ0lDQWdkR2hwY3k1a2RDQTlJR1IwT3dvZ0lDQWdJQ0JqYjI1emRDQmpiMjUwWVdOMGN5QTlJSFJvYVhNdVkyOXVkR0ZqZEhNN0NpQWdJQ0FnSUdOdmJuTjBJSEF4SUQwZ1YyOXliR1JmYzNSbGNGOXdNVHNLSUNBZ0lDQWdZMjl1YzNRZ2NESWdQU0JYYjNKc1pGOXpkR1Z3WDNBeU93b2dJQ0FnSUNCamIyNXpkQ0JPSUQwZ2RHaHBjeTVpYjJScFpYTXViR1Z1WjNSb093b2dJQ0FnSUNCamIyNXpkQ0JpYjJScFpYTWdQU0IwYUdsekxtSnZaR2xsY3pzS0lDQWdJQ0FnWTI5dWMzUWdjMjlzZG1WeUlEMGdkR2hwY3k1emIyeDJaWEk3Q2lBZ0lDQWdJR052Ym5OMElHZHlZWFpwZEhrZ1BTQjBhR2x6TG1keVlYWnBkSGs3Q2lBZ0lDQWdJR052Ym5OMElHUnZVSEp2Wm1sc2FXNW5JRDBnZEdocGN5NWtiMUJ5YjJacGJHbHVaenNLSUNBZ0lDQWdZMjl1YzNRZ2NISnZabWxzWlNBOUlIUm9hWE11Y0hKdlptbHNaVHNLSUNBZ0lDQWdZMjl1YzNRZ1JGbE9RVTFKUXlBOUlFSnZaSGt1UkZsT1FVMUpRenNLSUNBZ0lDQWdiR1YwSUhCeWIyWnBiR2x1WjFOMFlYSjBJRDBnTFVsdVptbHVhWFI1T3dvZ0lDQWdJQ0JqYjI1emRDQmpiMjV6ZEhKaGFXNTBjeUE5SUhSb2FYTXVZMjl1YzNSeVlXbHVkSE03Q2lBZ0lDQWdJR052Ym5OMElHWnlhV04wYVc5dVJYRjFZWFJwYjI1UWIyOXNJRDBnVjI5eWJHUmZjM1JsY0Y5bWNtbGpkR2x2YmtWeGRXRjBhVzl1VUc5dmJEc0tJQ0FnSUNBZ1ozSmhkbWwwZVM1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnWTI5dWMzUWdaM2dnUFNCbmNtRjJhWFI1TG5nN0NpQWdJQ0FnSUdOdmJuTjBJR2Q1SUQwZ1ozSmhkbWwwZVM1NU93b2dJQ0FnSUNCamIyNXpkQ0JuZWlBOUlHZHlZWFpwZEhrdWVqc0tJQ0FnSUNBZ2JHVjBJR2tnUFNBd093b0tJQ0FnSUNBZ2FXWWdLR1J2VUhKdlptbHNhVzVuS1NCN0NpQWdJQ0FnSUNBZ2NISnZabWxzYVc1blUzUmhjblFnUFNCd1pYSm1iM0p0WVc1alpTNXViM2NvS1RzS0lDQWdJQ0FnZlNBdkx5QkJaR1FnWjNKaGRtbDBlU0IwYnlCaGJHd2diMkpxWldOMGN3b0tDaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnSVQwOUlFNDdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdKcElEMGdZbTlrYVdWelcybGRPd29LSUNBZ0lDQWdJQ0JwWmlBb1lta3VkSGx3WlNBOVBUMGdSRmxPUVUxSlF5a2dld29nSUNBZ0lDQWdJQ0FnTHk4Z1QyNXNlU0JtYjNJZ1pIbHVZVzFwWXlCaWIyUnBaWE1LSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1lnUFNCaWFTNW1iM0pqWlRzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcwZ1BTQmlhUzV0WVhOek93b2dJQ0FnSUNBZ0lDQWdaaTU0SUNzOUlHMGdLaUJuZURzS0lDQWdJQ0FnSUNBZ0lHWXVlU0FyUFNCdElDb2daM2s3Q2lBZ0lDQWdJQ0FnSUNCbUxub2dLejBnYlNBcUlHZDZPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdmU0F2THlCVmNHUmhkR1VnYzNWaWMzbHpkR1Z0Y3dvS0NpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JPYzNWaWMzbHpkR1Z0Y3lBOUlIUm9hWE11YzNWaWMzbHpkR1Z0Y3k1c1pXNW5kR2c3SUdrZ0lUMDlJRTV6ZFdKemVYTjBaVzF6T3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuTjFZbk41YzNSbGJYTmJhVjB1ZFhCa1lYUmxLQ2s3Q2lBZ0lDQWdJSDBnTHk4Z1EyOXNiR2x6YVc5dUlHUmxkR1ZqZEdsdmJnb0tDaUFnSUNBZ0lHbG1JQ2hrYjFCeWIyWnBiR2x1WnlrZ2V3b2dJQ0FnSUNBZ0lIQnliMlpwYkdsdVoxTjBZWEowSUQwZ2NHVnlabTl5YldGdVkyVXVibTkzS0NrN0NpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhBeExteGxibWQwYUNBOUlEQTdJQzh2SUVOc1pXRnVJSFZ3SUhCaGFYSWdZWEp5WVhseklHWnliMjBnYkdGemRDQnpkR1Z3Q2dvZ0lDQWdJQ0J3TWk1c1pXNW5kR2dnUFNBd093b2dJQ0FnSUNCMGFHbHpMbUp5YjJGa2NHaGhjMlV1WTI5c2JHbHphVzl1VUdGcGNuTW9kR2hwY3l3Z2NERXNJSEF5S1RzS0NpQWdJQ0FnSUdsbUlDaGtiMUJ5YjJacGJHbHVaeWtnZXdvZ0lDQWdJQ0FnSUhCeWIyWnBiR1V1WW5KdllXUndhR0Z6WlNBOUlIQmxjbVp2Y20xaGJtTmxMbTV2ZHlncElDMGdjSEp2Wm1sc2FXNW5VM1JoY25RN0NpQWdJQ0FnSUgwZ0x5OGdVbVZ0YjNabElHTnZibk4wY21GcGJtVmtJSEJoYVhKeklIZHBkR2dnWTI5c2JHbGtaVU52Ym01bFkzUmxaQ0E5UFNCbVlXeHpaUW9LQ2lBZ0lDQWdJR3hsZENCT1kyOXVjM1J5WVdsdWRITWdQU0JqYjI1emRISmhhVzUwY3k1c1pXNW5kR2c3Q2dvZ0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElDRTlQU0JPWTI5dWMzUnlZV2x1ZEhNN0lHa3JLeWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJR01nUFNCamIyNXpkSEpoYVc1MGMxdHBYVHNLQ2lBZ0lDQWdJQ0FnYVdZZ0tDRmpMbU52Ykd4cFpHVkRiMjV1WldOMFpXUXBJSHNLSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQndNUzVzWlc1bmRHZ2dMU0F4T3lCcUlENDlJREE3SUdvZ0xUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXk1aWIyUjVRU0E5UFQwZ2NERmJhbDBnSmlZZ1l5NWliMlI1UWlBOVBUMGdjREpiYWwwZ2ZId2dZeTVpYjJSNVFpQTlQVDBnY0RGYmFsMGdKaVlnWXk1aWIyUjVRU0E5UFQwZ2NESmJhbDBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TVM1emNHeHBZMlVvYWl3Z01TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NESXVjM0JzYVdObEtHb3NJREVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxtTnZiR3hwYzJsdmJrMWhkSEpwZUZScFkyc29LVHNnTHk4Z1IyVnVaWEpoZEdVZ1kyOXVkR0ZqZEhNS0NpQWdJQ0FnSUdsbUlDaGtiMUJ5YjJacGJHbHVaeWtnZXdvZ0lDQWdJQ0FnSUhCeWIyWnBiR2x1WjFOMFlYSjBJRDBnY0dWeVptOXliV0Z1WTJVdWJtOTNLQ2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHOXNaR052Ym5SaFkzUnpJRDBnVjI5eWJHUmZjM1JsY0Y5dmJHUkRiMjUwWVdOMGN6c0tJQ0FnSUNBZ1kyOXVjM1FnVG05c1pFTnZiblJoWTNSeklEMGdZMjl1ZEdGamRITXViR1Z1WjNSb093b0tJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0FoUFQwZ1RtOXNaRU52Ym5SaFkzUnpPeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQnZiR1JqYjI1MFlXTjBjeTV3ZFhOb0tHTnZiblJoWTNSelcybGRLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdZMjl1ZEdGamRITXViR1Z1WjNSb0lEMGdNRHNnTHk4Z1ZISmhibk5tWlhJZ1JuSnBZM1JwYjI1RmNYVmhkR2x2YmlCbWNtOXRJR04xY25KbGJuUWdiR2x6ZENCMGJ5QjBhR1VnY0c5dmJDQm1iM0lnY21WMWMyVUtDaUFnSUNBZ0lHTnZibk4wSUU1dmJHUkdjbWxqZEdsdmJrVnhkV0YwYVc5dWN5QTlJSFJvYVhNdVpuSnBZM1JwYjI1RmNYVmhkR2x2Ym5NdWJHVnVaM1JvT3dvS0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQWhQVDBnVG05c1pFWnlhV04wYVc5dVJYRjFZWFJwYjI1ek95QnBLeXNwSUhzS0lDQWdJQ0FnSUNCbWNtbGpkR2x2YmtWeGRXRjBhVzl1VUc5dmJDNXdkWE5vS0hSb2FYTXVabkpwWTNScGIyNUZjWFZoZEdsdmJuTmJhVjBwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0IwYUdsekxtWnlhV04wYVc5dVJYRjFZWFJwYjI1ekxteGxibWQwYUNBOUlEQTdDaUFnSUNBZ0lIUm9hWE11Ym1GeWNtOTNjR2hoYzJVdVoyVjBRMjl1ZEdGamRITW9jREVzSUhBeUxDQjBhR2x6TENCamIyNTBZV04wY3l3Z2IyeGtZMjl1ZEdGamRITXNJQzh2SUZSdklHSmxJSEpsZFhObFpBb2dJQ0FnSUNCMGFHbHpMbVp5YVdOMGFXOXVSWEYxWVhScGIyNXpMQ0JtY21samRHbHZia1Z4ZFdGMGFXOXVVRzl2YkNrN0Nnb2dJQ0FnSUNCcFppQW9aRzlRY205bWFXeHBibWNwSUhzS0lDQWdJQ0FnSUNCd2NtOW1hV3hsTG01aGNuSnZkM0JvWVhObElEMGdjR1Z5Wm05eWJXRnVZMlV1Ym05M0tDa2dMU0J3Y205bWFXeHBibWRUZEdGeWREc0tJQ0FnSUNBZ2ZTQXZMeUJNYjI5d0lHOTJaWElnWVd4c0lHTnZiR3hwYzJsdmJuTUtDZ29nSUNBZ0lDQnBaaUFvWkc5UWNtOW1hV3hwYm1jcElIc0tJQ0FnSUNBZ0lDQndjbTltYVd4cGJtZFRkR0Z5ZENBOUlIQmxjbVp2Y20xaGJtTmxMbTV2ZHlncE93b2dJQ0FnSUNCOUlDOHZJRUZrWkNCaGJHd2dabkpwWTNScGIyNGdaWEZ6Q2dvS0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSFJvYVhNdVpuSnBZM1JwYjI1RmNYVmhkR2x2Ym5NdWJHVnVaM1JvT3lCcEt5c3BJSHNLSUNBZ0lDQWdJQ0J6YjJ4MlpYSXVZV1JrUlhGMVlYUnBiMjRvZEdocGN5NW1jbWxqZEdsdmJrVnhkV0YwYVc5dWMxdHBYU2s3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR052Ym5OMElHNWpiMjUwWVdOMGN5QTlJR052Ym5SaFkzUnpMbXhsYm1kMGFEc0tDaUFnSUNBZ0lHWnZjaUFvYkdWMElHc2dQU0F3T3lCcklDRTlQU0J1WTI5dWRHRmpkSE03SUdzckt5a2dld29nSUNBZ0lDQWdJQzh2SUVOMWNuSmxiblFnWTI5dWRHRmpkQW9nSUNBZ0lDQWdJR052Ym5OMElHTWdQU0JqYjI1MFlXTjBjMXRyWFRzZ0x5OGdSMlYwSUdOMWNuSmxiblFnWTI5c2JHbHphVzl1SUdsdVpHVmpaWE1LQ2lBZ0lDQWdJQ0FnWTI5dWMzUWdZbWtnUFNCakxtSnBPd29nSUNBZ0lDQWdJR052Ym5OMElHSnFJRDBnWXk1aWFqc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCemFTQTlJR011YzJrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJvZ1BTQmpMbk5xT3lBdkx5QkhaWFFnWTI5c2JHbHphVzl1SUhCeWIzQmxjblJwWlhNS0NpQWdJQ0FnSUNBZ2JHVjBJR050T3dvS0lDQWdJQ0FnSUNCcFppQW9ZbWt1YldGMFpYSnBZV3dnSmlZZ1ltb3ViV0YwWlhKcFlXd3BJSHNLSUNBZ0lDQWdJQ0FnSUdOdElEMGdkR2hwY3k1blpYUkRiMjUwWVdOMFRXRjBaWEpwWVd3b1lta3ViV0YwWlhKcFlXd3NJR0pxTG0xaGRHVnlhV0ZzS1NCOGZDQjBhR2x6TG1SbFptRjFiSFJEYjI1MFlXTjBUV0YwWlhKcFlXdzdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJR050SUQwZ2RHaHBjeTVrWldaaGRXeDBRMjl1ZEdGamRFMWhkR1Z5YVdGc093b2dJQ0FnSUNBZ0lIMGdMeThnWXk1bGJtRmliR1ZrSUQwZ1lta3VZMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVWdKaVlnWW1vdVkyOXNiR2x6YVc5dVVtVnpjRzl1YzJVZ0ppWWdjMmt1WTI5c2JHbHphVzl1VW1WemNHOXVjMlVnSmlZZ2Myb3VZMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVTdDZ29LSUNBZ0lDQWdJQ0JqYlM1bWNtbGpkR2x2YmpzZ0x5OGdZeTV5WlhOMGFYUjFkR2x2YmlBOUlHTnRMbkpsYzNScGRIVjBhVzl1T3dvZ0lDQWdJQ0FnSUM4dklFbG1JR1p5YVdOMGFXOXVJRzl5SUhKbGMzUnBkSFYwYVc5dUlIZGxjbVVnYzNCbFkybG1hV1ZrSUdsdUlIUm9aU0J0WVhSbGNtbGhiQ3dnZFhObElIUm9aVzBLQ2lBZ0lDQWdJQ0FnYVdZZ0tHSnBMbTFoZEdWeWFXRnNJQ1ltSUdKcUxtMWhkR1Z5YVdGc0tTQjdDaUFnSUNBZ0lDQWdJQ0JwWmlBb1lta3ViV0YwWlhKcFlXd3VabkpwWTNScGIyNGdQajBnTUNBbUppQmlhaTV0WVhSbGNtbGhiQzVtY21samRHbHZiaUErUFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdKcExtMWhkR1Z5YVdGc0xtWnlhV04wYVc5dUlDb2dZbW91YldGMFpYSnBZV3d1Wm5KcFkzUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lDQWdhV1lnS0dKcExtMWhkR1Z5YVdGc0xuSmxjM1JwZEhWMGFXOXVJRDQ5SURBZ0ppWWdZbW91YldGMFpYSnBZV3d1Y21WemRHbDBkWFJwYjI0Z1BqMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpMbkpsYzNScGRIVjBhVzl1SUQwZ1lta3ViV0YwWlhKcFlXd3VjbVZ6ZEdsMGRYUnBiMjRnS2lCaWFpNXRZWFJsY21saGJDNXlaWE4wYVhSMWRHbHZianNLSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUlDOHZJR011YzJWMFUzQnZiMnRRWVhKaGJYTW9DaUFnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUdOdExtTnZiblJoWTNSRmNYVmhkR2x2YmxOMGFXWm1ibVZ6Y3l3S0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdZMjB1WTI5dWRHRmpkRVZ4ZFdGMGFXOXVVbVZzWVhoaGRHbHZiaXdLSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ1pIUUtJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQXBPd29LQ2lBZ0lDQWdJQ0FnYzI5c2RtVnlMbUZrWkVWeGRXRjBhVzl1S0dNcE95QXZMeUF2THlCQlpHUWdabkpwWTNScGIyNGdZMjl1YzNSeVlXbHVkQ0JsY1hWaGRHbHZiZ29nSUNBZ0lDQWdJQzh2SUdsbUtHMTFJRDRnTUNsN0NpQWdJQ0FnSUNBZ0x5OGdDUzh2SUVOeVpXRjBaU0F5SUhSaGJtZGxiblFnWlhGMVlYUnBiMjV6Q2lBZ0lDQWdJQ0FnTHk4Z0NXTnZibk4wSUcxMVp5QTlJRzExSUNvZ1oyNXZjbTA3Q2lBZ0lDQWdJQ0FnTHk4Z0NXTnZibk4wSUhKbFpIVmpaV1JOWVhOeklEMGdLR0pwTG1sdWRrMWhjM01nS3lCaWFpNXBiblpOWVhOektUc0tJQ0FnSUNBZ0lDQXZMeUFKYVdZb2NtVmtkV05sWkUxaGMzTWdQaUF3S1hzS0lDQWdJQ0FnSUNBdkx5QUpDWEpsWkhWalpXUk5ZWE56SUQwZ01TOXlaV1IxWTJWa1RXRnpjenNLSUNBZ0lDQWdJQ0F2THlBSmZRb2dJQ0FnSUNBZ0lDOHZJQWxqYjI1emRDQndiMjlzSUQwZ1puSnBZM1JwYjI1RmNYVmhkR2x2YmxCdmIydzdDaUFnSUNBZ0lDQWdMeThnQ1dOdmJuTjBJR014SUQwZ2NHOXZiQzVzWlc1bmRHZ2dQeUJ3YjI5c0xuQnZjQ2dwSURvZ2JtVjNJRVp5YVdOMGFXOXVSWEYxWVhScGIyNG9ZbWtzWW1vc2JYVm5LbkpsWkhWalpXUk5ZWE56S1RzS0lDQWdJQ0FnSUNBdkx5QUpZMjl1YzNRZ1l6SWdQU0J3YjI5c0xteGxibWQwYUNBL0lIQnZiMnd1Y0c5d0tDa2dPaUJ1WlhjZ1JuSnBZM1JwYjI1RmNYVmhkR2x2YmloaWFTeGlhaXh0ZFdjcWNtVmtkV05sWkUxaGMzTXBPd29nSUNBZ0lDQWdJQzh2SUFsMGFHbHpMbVp5YVdOMGFXOXVSWEYxWVhScGIyNXpMbkIxYzJnb1l6RXNJR015S1RzS0lDQWdJQ0FnSUNBdkx5QUpZekV1WW1rZ1BTQmpNaTVpYVNBOUlHSnBPd29nSUNBZ0lDQWdJQzh2SUFsak1TNWlhaUE5SUdNeUxtSnFJRDBnWW1vN0NpQWdJQ0FnSUNBZ0x5OGdDV014TG0xcGJrWnZjbU5sSUQwZ1l6SXViV2x1Um05eVkyVWdQU0F0YlhWbktuSmxaSFZqWldSTllYTnpPd29nSUNBZ0lDQWdJQzh2SUFsak1TNXRZWGhHYjNKalpTQTlJR015TG0xaGVFWnZjbU5sSUQwZ2JYVm5LbkpsWkhWalpXUk5ZWE56T3dvZ0lDQWdJQ0FnSUM4dklBa3ZMeUJEYjNCNUlHOTJaWElnZEdobElISmxiR0YwYVhabElIWmxZM1J2Y25NS0lDQWdJQ0FnSUNBdkx5QUpZekV1Y21rdVkyOXdlU2hqTG5KcEtUc0tJQ0FnSUNBZ0lDQXZMeUFKWXpFdWNtb3VZMjl3ZVNoakxuSnFLVHNLSUNBZ0lDQWdJQ0F2THlBSll6SXVjbWt1WTI5d2VTaGpMbkpwS1RzS0lDQWdJQ0FnSUNBdkx5QUpZekl1Y21vdVkyOXdlU2hqTG5KcUtUc0tJQ0FnSUNBZ0lDQXZMeUFKTHk4Z1EyOXVjM1J5ZFdOMElIUmhibWRsYm5SekNpQWdJQ0FnSUNBZ0x5OGdDV011Ym1rdWRHRnVaMlZ1ZEhNb1l6RXVkQ3dnWXpJdWRDazdDaUFnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUM4dklGTmxkQ0J6Y0c5dmF5QndZWEpoYlhNS0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdZekV1YzJWMFUzQnZiMnRRWVhKaGJYTW9ZMjB1Wm5KcFkzUnBiMjVGY1hWaGRHbHZibE4wYVdabWJtVnpjeXdnWTIwdVpuSnBZM1JwYjI1RmNYVmhkR2x2YmxKbGJHRjRZWFJwYjI0c0lHUjBLVHNLSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ1l6SXVjMlYwVTNCdmIydFFZWEpoYlhNb1kyMHVabkpwWTNScGIyNUZjWFZoZEdsdmJsTjBhV1ptYm1WemN5d2dZMjB1Wm5KcFkzUnBiMjVGY1hWaGRHbHZibEpsYkdGNFlYUnBiMjRzSUdSMEtUc0tJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnWXpFdVpXNWhZbXhsWkNBOUlHTXlMbVZ1WVdKc1pXUWdQU0JqTG1WdVlXSnNaV1E3Q2lBZ0lDQWdJQ0FnTHk4Z0NTOHZJRUZrWkNCbGNYVmhkR2x2Ym5NZ2RHOGdjMjlzZG1WeUNpQWdJQ0FnSUNBZ0x5OGdDWE52YkhabGNpNWhaR1JGY1hWaGRHbHZiaWhqTVNrN0NpQWdJQ0FnSUNBZ0x5OGdDWE52YkhabGNpNWhaR1JGY1hWaGRHbHZiaWhqTWlrN0NpQWdJQ0FnSUNBZ0x5OGdmUW9LSUNBZ0lDQWdJQ0JwWmlBb1lta3VZV3hzYjNkVGJHVmxjQ0FtSmlCaWFTNTBlWEJsSUQwOVBTQkNiMlI1TGtSWlRrRk5TVU1nSmlZZ1lta3VjMnhsWlhCVGRHRjBaU0E5UFQwZ1FtOWtlUzVUVEVWRlVFbE9SeUFtSmlCaWFpNXpiR1ZsY0ZOMFlYUmxJRDA5UFNCQ2IyUjVMa0ZYUVV0RklDWW1JR0pxTG5SNWNHVWdJVDA5SUVKdlpIa3VVMVJCVkVsREtTQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnpjR1ZsWkZOeGRXRnlaV1JDSUQwZ1ltb3VkbVZzYjJOcGRIa3ViR1Z1WjNSb1UzRjFZWEpsWkNncElDc2dZbW91WVc1bmRXeGhjbFpsYkc5amFYUjVMbXhsYm1kMGFGTnhkV0Z5WldRb0tUc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElITndaV1ZrVEdsdGFYUlRjWFZoY21Wa1FpQTlJR0pxTG5Oc1pXVndVM0JsWldSTWFXMXBkQ0FxS2lBeU93b0tJQ0FnSUNBZ0lDQWdJR2xtSUNoemNHVmxaRk54ZFdGeVpXUkNJRDQ5SUhOd1pXVmtUR2x0YVhSVGNYVmhjbVZrUWlBcUlESXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1lta3VkMkZyWlZWd1FXWjBaWEpPWVhKeWIzZHdhR0Z6WlNBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQnBaaUFvWW1vdVlXeHNiM2RUYkdWbGNDQW1KaUJpYWk1MGVYQmxJRDA5UFNCQ2IyUjVMa1JaVGtGTlNVTWdKaVlnWW1vdWMyeGxaWEJUZEdGMFpTQTlQVDBnUW05a2VTNVRURVZGVUVsT1J5QW1KaUJpYVM1emJHVmxjRk4wWVhSbElEMDlQU0JDYjJSNUxrRlhRVXRGSUNZbUlHSnBMblI1Y0dVZ0lUMDlJRUp2WkhrdVUxUkJWRWxES1NCN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemNHVmxaRk54ZFdGeVpXUkJJRDBnWW1rdWRtVnNiMk5wZEhrdWJHVnVaM1JvVTNGMVlYSmxaQ2dwSUNzZ1lta3VZVzVuZFd4aGNsWmxiRzlqYVhSNUxteGxibWQwYUZOeGRXRnlaV1FvS1RzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOd1pXVmtUR2x0YVhSVGNYVmhjbVZrUVNBOUlHSnBMbk5zWldWd1UzQmxaV1JNYVcxcGRDQXFLaUF5T3dvS0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Y0dWbFpGTnhkV0Z5WldSQklENDlJSE53WldWa1RHbHRhWFJUY1hWaGNtVmtRU0FxSURJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWW1vdWQyRnJaVlZ3UVdaMFpYSk9ZWEp5YjNkd2FHRnpaU0E5SUhSeWRXVTdDaUFnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNBdkx5Qk9iM2NnZDJVZ2EyNXZkeUIwYUdGMElHa2dZVzVrSUdvZ1lYSmxJR2x1SUdOdmJuUmhZM1F1SUZObGRDQmpiMnhzYVhOcGIyNGdiV0YwY21sNElITjBZWFJsQ2dvS0lDQWdJQ0FnSUNCMGFHbHpMbU52Ykd4cGMybHZiazFoZEhKcGVDNXpaWFFvWW1rc0lHSnFMQ0IwY25WbEtUc0tDaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbU52Ykd4cGMybHZiazFoZEhKcGVGQnlaWFpwYjNWekxtZGxkQ2hpYVN3Z1ltb3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBdkx5QkdhWEp6ZENCamIyNTBZV04wSVFvZ0lDQWdJQ0FnSUNBZ0x5OGdWMlVnY21WMWMyVWdkR2hsSUdOdmJHeHBaR1ZGZG1WdWRDQnZZbXBsWTNRc0lHOTBhR1Z5ZDJselpTQjNaU0IzYVd4c0lHVnVaQ0IxY0NCamNtVmhkR2x1WnlCdVpYY2diMkpxWldOMGN5Qm1iM0lnWldGamFDQnVaWGNnWTI5dWRHRmpkQ3dnWlhabGJpQnBaaUIwYUdWeVpTZHpJRzV2SUdWMlpXNTBJR3hwYzNSbGJtVnlJR0YwZEdGamFHVmtMZ29nSUNBZ0lDQWdJQ0FnVjI5eWJHUmZjM1JsY0Y5amIyeHNhV1JsUlhabGJuUXVZbTlrZVNBOUlHSnFPd29nSUNBZ0lDQWdJQ0FnVjI5eWJHUmZjM1JsY0Y5amIyeHNhV1JsUlhabGJuUXVZMjl1ZEdGamRDQTlJR003Q2lBZ0lDQWdJQ0FnSUNCaWFTNWthWE53WVhSamFFVjJaVzUwS0ZkdmNteGtYM04wWlhCZlkyOXNiR2xrWlVWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUZkdmNteGtYM04wWlhCZlkyOXNiR2xrWlVWMlpXNTBMbUp2WkhrZ1BTQmlhVHNLSUNBZ0lDQWdJQ0FnSUdKcUxtUnBjM0JoZEdOb1JYWmxiblFvVjI5eWJHUmZjM1JsY0Y5amIyeHNhV1JsUlhabGJuUXBPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnZEdocGN5NWliMlI1VDNabGNteGhjRXRsWlhCbGNpNXpaWFFvWW1rdWFXUXNJR0pxTG1sa0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5Ob1lYQmxUM1psY214aGNFdGxaWEJsY2k1elpYUW9jMmt1YVdRc0lITnFMbWxrS1RzS0lDQWdJQ0FnZlFvS0lDQWdJQ0FnZEdocGN5NWxiV2wwUTI5dWRHRmpkRVYyWlc1MGN5Z3BPd29LSUNBZ0lDQWdhV1lnS0dSdlVISnZabWxzYVc1bktTQjdDaUFnSUNBZ0lDQWdjSEp2Wm1sc1pTNXRZV3RsUTI5dWRHRmpkRU52Ym5OMGNtRnBiblJ6SUQwZ2NHVnlabTl5YldGdVkyVXVibTkzS0NrZ0xTQndjbTltYVd4cGJtZFRkR0Z5ZERzS0lDQWdJQ0FnSUNCd2NtOW1hV3hwYm1kVGRHRnlkQ0E5SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwT3dvZ0lDQWdJQ0I5SUM4dklGZGhhMlVnZFhBZ1ltOWthV1Z6Q2dvS0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQWhQVDBnVGpzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZbWtnUFNCaWIyUnBaWE5iYVYwN0Nnb2dJQ0FnSUNBZ0lHbG1JQ2hpYVM1M1lXdGxWWEJCWm5SbGNrNWhjbkp2ZDNCb1lYTmxLU0I3Q2lBZ0lDQWdJQ0FnSUNCaWFTNTNZV3RsVlhBb0tUc0tJQ0FnSUNBZ0lDQWdJR0pwTG5kaGEyVlZjRUZtZEdWeVRtRnljbTkzY0doaGMyVWdQU0JtWVd4elpUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lIMGdMeThnUVdSa0lIVnpaWEl0WVdSa1pXUWdZMjl1YzNSeVlXbHVkSE1LQ2dvZ0lDQWdJQ0JPWTI5dWMzUnlZV2x1ZEhNZ1BTQmpiMjV6ZEhKaGFXNTBjeTVzWlc1bmRHZzdDZ29nSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUNFOVBTQk9ZMjl1YzNSeVlXbHVkSE03SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElHTWdQU0JqYjI1emRISmhhVzUwYzF0cFhUc0tJQ0FnSUNBZ0lDQmpMblZ3WkdGMFpTZ3BPd29LSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Dd2dUbVZ4SUQwZ1l5NWxjWFZoZEdsdmJuTXViR1Z1WjNSb095QnFJQ0U5UFNCT1pYRTdJR29yS3lrZ2V3b2dJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pYRWdQU0JqTG1WeGRXRjBhVzl1YzF0cVhUc0tJQ0FnSUNBZ0lDQWdJSE52YkhabGNpNWhaR1JGY1hWaGRHbHZiaWhsY1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOUlDOHZJRk52YkhabElIUm9aU0JqYjI1emRISmhhVzVsWkNCemVYTjBaVzBLQ2dvZ0lDQWdJQ0J6YjJ4MlpYSXVjMjlzZG1Vb1pIUXNJSFJvYVhNcE93b0tJQ0FnSUNBZ2FXWWdLR1J2VUhKdlptbHNhVzVuS1NCN0NpQWdJQ0FnSUNBZ2NISnZabWxzWlM1emIyeDJaU0E5SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwSUMwZ2NISnZabWxzYVc1blUzUmhjblE3Q2lBZ0lDQWdJSDBnTHk4Z1VtVnRiM1psSUdGc2JDQmpiMjUwWVdOMGN5Qm1jbTl0SUhOdmJIWmxjZ29LQ2lBZ0lDQWdJSE52YkhabGNpNXlaVzF2ZG1WQmJHeEZjWFZoZEdsdmJuTW9LVHNnTHk4Z1FYQndiSGtnWkdGdGNHbHVaeXdnYzJWbElHaDBkSEE2THk5amIyUmxMbWR2YjJkc1pTNWpiMjB2Y0M5aWRXeHNaWFF2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDAzTkNCbWIzSWdaR1YwWVdsc2N3b0tJQ0FnSUNBZ1kyOXVjM1FnY0c5M0lEMGdUV0YwYUM1d2IzYzdDZ29nSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUNFOVBTQk9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCaWFTQTlJR0p2WkdsbGMxdHBYVHNLQ2lBZ0lDQWdJQ0FnYVdZZ0tHSnBMblI1Y0dVZ0ppQkVXVTVCVFVsREtTQjdDaUFnSUNBZ0lDQWdJQ0F2THlCUGJteDVJR1p2Y2lCa2VXNWhiV2xqSUdKdlpHbGxjd29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiR1FnUFNCd2IzY29NUzR3SUMwZ1lta3ViR2x1WldGeVJHRnRjR2x1Wnl3Z1pIUXBPd29nSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkaUE5SUdKcExuWmxiRzlqYVhSNU93b2dJQ0FnSUNBZ0lDQWdkaTV6WTJGc1pTaHNaQ3dnZGlrN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGRpQTlJR0pwTG1GdVozVnNZWEpXWld4dlkybDBlVHNLQ2lBZ0lDQWdJQ0FnSUNCcFppQW9ZWFlwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lXUWdQU0J3YjNjb01TNHdJQzBnWW1rdVlXNW5kV3hoY2tSaGJYQnBibWNzSUdSMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWVhZdWMyTmhiR1VvWVdRc0lHRjJLVHNLSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUgwS0NpQWdJQ0FnSUhSb2FYTXVaR2x6Y0dGMFkyaEZkbVZ1ZENoWGIzSnNaRjl6ZEdWd1gzQnlaVk4wWlhCRmRtVnVkQ2s3SUM4dklFeGxZWEFnWm5Kdlp3b2dJQ0FnSUNBdkx5QjJibVYzSUQwZ2RpQXJJR2dxWmk5dENpQWdJQ0FnSUM4dklIaHVaWGNnUFNCNElDc2dhQ3AyYm1WM0Nnb2dJQ0FnSUNCcFppQW9aRzlRY205bWFXeHBibWNwSUhzS0lDQWdJQ0FnSUNCd2NtOW1hV3hwYm1kVGRHRnlkQ0E5SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JqYjI1emRDQnpkR1Z3Ym5WdFltVnlJRDBnZEdocGN5NXpkR1Z3Ym5WdFltVnlPd29nSUNBZ0lDQmpiMjV6ZENCeGRXRjBUbTl5YldGc2FYcGxJRDBnYzNSbGNHNTFiV0psY2lBbElDaDBhR2x6TG5GMVlYUk9iM0p0WVd4cGVtVlRhMmx3SUNzZ01Ta2dQVDA5SURBN0NpQWdJQ0FnSUdOdmJuTjBJSEYxWVhST2IzSnRZV3hwZW1WR1lYTjBJRDBnZEdocGN5NXhkV0YwVG05eWJXRnNhWHBsUm1GemREc0tDaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnSVQwOUlFNDdJR2tyS3lrZ2V3b2dJQ0FnSUNBZ0lHSnZaR2xsYzF0cFhTNXBiblJsWjNKaGRHVW9aSFFzSUhGMVlYUk9iM0p0WVd4cGVtVXNJSEYxWVhST2IzSnRZV3hwZW1WR1lYTjBLVHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdkR2hwY3k1amJHVmhja1p2Y21ObGN5Z3BPd29nSUNBZ0lDQjBhR2x6TG1KeWIyRmtjR2hoYzJVdVpHbHlkSGtnUFNCMGNuVmxPd29LSUNBZ0lDQWdhV1lnS0dSdlVISnZabWxzYVc1bktTQjdDaUFnSUNBZ0lDQWdjSEp2Wm1sc1pTNXBiblJsWjNKaGRHVWdQU0J3WlhKbWIzSnRZVzVqWlM1dWIzY29LU0F0SUhCeWIyWnBiR2x1WjFOMFlYSjBPd29nSUNBZ0lDQjlJQzh2SUZWd1pHRjBaU0J6ZEdWd0lHNTFiV0psY2dvS0NpQWdJQ0FnSUhSb2FYTXVjM1JsY0c1MWJXSmxjaUFyUFNBeE93b2dJQ0FnSUNCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb1YyOXliR1JmYzNSbGNGOXdiM04wVTNSbGNFVjJaVzUwS1RzZ0x5OGdVMnhsWlhCcGJtY2dkWEJrWVhSbENnb2dJQ0FnSUNCc1pYUWdhR0Z6UVdOMGFYWmxRbTlrYVdWeklEMGdkSEoxWlRzS0NpQWdJQ0FnSUdsbUlDaDBhR2x6TG1Gc2JHOTNVMnhsWlhBcElIc0tJQ0FnSUNBZ0lDQm9ZWE5CWTNScGRtVkNiMlJwWlhNZ1BTQm1ZV3h6WlRzS0NpQWdJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0FoUFQwZ1Rqc2dhU3NyS1NCN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaWFTQTlJR0p2WkdsbGMxdHBYVHNLSUNBZ0lDQWdJQ0FnSUdKcExuTnNaV1Z3VkdsamF5aDBhR2x6TG5ScGJXVXBPd29LSUNBZ0lDQWdJQ0FnSUdsbUlDaGlhUzV6YkdWbGNGTjBZWFJsSUNFOVBTQkNiMlI1TGxOTVJVVlFTVTVIS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2hoYzBGamRHbDJaVUp2WkdsbGN5QTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQjlDZ29nSUNBZ0lDQjBhR2x6TG1oaGMwRmpkR2wyWlVKdlpHbGxjeUE5SUdoaGMwRmpkR2wyWlVKdlpHbGxjenNLSUNBZ0lIMEtDaUFnSUNCbGJXbDBRMjl1ZEdGamRFVjJaVzUwY3lncElIc0tJQ0FnSUNBZ1kyOXVjM1FnYUdGelFtVm5hVzVEYjI1MFlXTjBJRDBnZEdocGN5NW9ZWE5CYm5sRmRtVnVkRXhwYzNSbGJtVnlLQ2RpWldkcGJrTnZiblJoWTNRbktUc0tJQ0FnSUNBZ1kyOXVjM1FnYUdGelJXNWtRMjl1ZEdGamRDQTlJSFJvYVhNdWFHRnpRVzU1UlhabGJuUk1hWE4wWlc1bGNpZ25aVzVrUTI5dWRHRmpkQ2NwT3dvS0lDQWdJQ0FnYVdZZ0tHaGhjMEpsWjJsdVEyOXVkR0ZqZENCOGZDQm9ZWE5GYm1SRGIyNTBZV04wS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVpYjJSNVQzWmxjbXhoY0V0bFpYQmxjaTVuWlhSRWFXWm1LR0ZrWkdsMGFXOXVjeXdnY21WdGIzWmhiSE1wT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2FHRnpRbVZuYVc1RGIyNTBZV04wS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQmhaR1JwZEdsdmJuTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTQXJQU0F5S1NCN0NpQWdJQ0FnSUNBZ0lDQmlaV2RwYmtOdmJuUmhZM1JGZG1WdWRDNWliMlI1UVNBOUlIUm9hWE11WjJWMFFtOWtlVUo1U1dRb1lXUmthWFJwYjI1elcybGRLVHNLSUNBZ0lDQWdJQ0FnSUdKbFoybHVRMjl1ZEdGamRFVjJaVzUwTG1KdlpIbENJRDBnZEdocGN5NW5aWFJDYjJSNVFubEpaQ2hoWkdScGRHbHZibk5iYVNBcklERmRLVHNLSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR2x6Y0dGMFkyaEZkbVZ1ZENoaVpXZHBia052Ym5SaFkzUkZkbVZ1ZENrN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQmlaV2RwYmtOdmJuUmhZM1JGZG1WdWRDNWliMlI1UVNBOUlHSmxaMmx1UTI5dWRHRmpkRVYyWlc1MExtSnZaSGxDSUQwZ2JuVnNiRHNLSUNBZ0lDQWdmUW9LSUNBZ0lDQWdhV1lnS0doaGMwVnVaRU52Ym5SaFkzUXBJSHNLSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diQ0E5SUhKbGJXOTJZV3h6TG14bGJtZDBhRHNnYVNBOElHdzdJR2tnS3owZ01pa2dld29nSUNBZ0lDQWdJQ0FnWlc1a1EyOXVkR0ZqZEVWMlpXNTBMbUp2WkhsQklEMGdkR2hwY3k1blpYUkNiMlI1UW5sSlpDaHlaVzF2ZG1Gc2MxdHBYU2s3Q2lBZ0lDQWdJQ0FnSUNCbGJtUkRiMjUwWVdOMFJYWmxiblF1WW05a2VVSWdQU0IwYUdsekxtZGxkRUp2WkhsQ2VVbGtLSEpsYlc5MllXeHpXMmtnS3lBeFhTazdDaUFnSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvWlc1a1EyOXVkR0ZqZEVWMlpXNTBLVHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUdWdVpFTnZiblJoWTNSRmRtVnVkQzVpYjJSNVFTQTlJR1Z1WkVOdmJuUmhZM1JGZG1WdWRDNWliMlI1UWlBOUlHNTFiR3c3Q2lBZ0lDQWdJSDBLQ2lBZ0lDQWdJR0ZrWkdsMGFXOXVjeTVzWlc1bmRHZ2dQU0J5WlcxdmRtRnNjeTVzWlc1bmRHZ2dQU0F3T3dvZ0lDQWdJQ0JqYjI1emRDQm9ZWE5DWldkcGJsTm9ZWEJsUTI5dWRHRmpkQ0E5SUhSb2FYTXVhR0Z6UVc1NVJYWmxiblJNYVhOMFpXNWxjaWduWW1WbmFXNVRhR0Z3WlVOdmJuUmhZM1FuS1RzS0lDQWdJQ0FnWTI5dWMzUWdhR0Z6Ulc1a1UyaGhjR1ZEYjI1MFlXTjBJRDBnZEdocGN5NW9ZWE5CYm5sRmRtVnVkRXhwYzNSbGJtVnlLQ2RsYm1SVGFHRndaVU52Ym5SaFkzUW5LVHNLQ2lBZ0lDQWdJR2xtSUNob1lYTkNaV2RwYmxOb1lYQmxRMjl1ZEdGamRDQjhmQ0JvWVhORmJtUlRhR0Z3WlVOdmJuUmhZM1FwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbk5vWVhCbFQzWmxjbXhoY0V0bFpYQmxjaTVuWlhSRWFXWm1LR0ZrWkdsMGFXOXVjeXdnY21WdGIzWmhiSE1wT3dvZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0JwWmlBb2FHRnpRbVZuYVc1VGFHRndaVU52Ym5SaFkzUXBJSHNLSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diQ0E5SUdGa1pHbDBhVzl1Y3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwSUNzOUlESXBJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE5vWVhCbFFTQTlJSFJvYVhNdVoyVjBVMmhoY0dWQ2VVbGtLR0ZrWkdsMGFXOXVjMXRwWFNrN0NpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemFHRndaVUlnUFNCMGFHbHpMbWRsZEZOb1lYQmxRbmxKWkNoaFpHUnBkR2x2Ym5OYmFTQXJJREZkS1RzS0lDQWdJQ0FnSUNBZ0lHSmxaMmx1VTJoaGNHVkRiMjUwWVdOMFJYWmxiblF1YzJoaGNHVkJJRDBnYzJoaGNHVkJPd29nSUNBZ0lDQWdJQ0FnWW1WbmFXNVRhR0Z3WlVOdmJuUmhZM1JGZG1WdWRDNXphR0Z3WlVJZ1BTQnphR0Z3WlVJN0NpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJoaGNHVkJLU0JpWldkcGJsTm9ZWEJsUTI5dWRHRmpkRVYyWlc1MExtSnZaSGxCSUQwZ2MyaGhjR1ZCTG1KdlpIazdDaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyaGhjR1ZDS1NCaVpXZHBibE5vWVhCbFEyOXVkR0ZqZEVWMlpXNTBMbUp2WkhsQ0lEMGdjMmhoY0dWQ0xtSnZaSGs3Q2lBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb1ltVm5hVzVUYUdGd1pVTnZiblJoWTNSRmRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCaVpXZHBibE5vWVhCbFEyOXVkR0ZqZEVWMlpXNTBMbUp2WkhsQklEMGdZbVZuYVc1VGFHRndaVU52Ym5SaFkzUkZkbVZ1ZEM1aWIyUjVRaUE5SUdKbFoybHVVMmhoY0dWRGIyNTBZV04wUlhabGJuUXVjMmhoY0dWQklEMGdZbVZuYVc1VGFHRndaVU52Ym5SaFkzUkZkbVZ1ZEM1emFHRndaVUlnUFNCdWRXeHNPd29nSUNBZ0lDQjlDZ29nSUNBZ0lDQnBaaUFvYUdGelJXNWtVMmhoY0dWRGIyNTBZV04wS1NCN0NpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQnlaVzF2ZG1Gc2N5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcElDczlJRElwSUhzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOb1lYQmxRU0E5SUhSb2FYTXVaMlYwVTJoaGNHVkNlVWxrS0hKbGJXOTJZV3h6VzJsZEtUc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElITm9ZWEJsUWlBOUlIUm9hWE11WjJWMFUyaGhjR1ZDZVVsa0tISmxiVzkyWVd4elcya2dLeUF4WFNrN0NpQWdJQ0FnSUNBZ0lDQmxibVJUYUdGd1pVTnZiblJoWTNSRmRtVnVkQzV6YUdGd1pVRWdQU0J6YUdGd1pVRTdDaUFnSUNBZ0lDQWdJQ0JsYm1SVGFHRndaVU52Ym5SaFkzUkZkbVZ1ZEM1emFHRndaVUlnUFNCemFHRndaVUk3Q2lBZ0lDQWdJQ0FnSUNCcFppQW9jMmhoY0dWQktTQmxibVJUYUdGd1pVTnZiblJoWTNSRmRtVnVkQzVpYjJSNVFTQTlJSE5vWVhCbFFTNWliMlI1T3dvZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5vWVhCbFFpa2daVzVrVTJoaGNHVkRiMjUwWVdOMFJYWmxiblF1WW05a2VVSWdQU0J6YUdGd1pVSXVZbTlrZVRzS0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdsemNHRjBZMmhGZG1WdWRDaGxibVJUYUdGd1pVTnZiblJoWTNSRmRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnZlFvS0lDQWdJQ0FnSUNCbGJtUlRhR0Z3WlVOdmJuUmhZM1JGZG1WdWRDNWliMlI1UVNBOUlHVnVaRk5vWVhCbFEyOXVkR0ZqZEVWMlpXNTBMbUp2WkhsQ0lEMGdaVzVrVTJoaGNHVkRiMjUwWVdOMFJYWmxiblF1YzJoaGNHVkJJRDBnWlc1a1UyaGhjR1ZEYjI1MFlXTjBSWFpsYm5RdWMyaGhjR1ZDSUQwZ2JuVnNiRHNLSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnTHlvcUNpQWdJQ0FnS2lCVFpYUnpJR0ZzYkNCaWIyUjVJR1p2Y21ObGN5QnBiaUIwYUdVZ2QyOXliR1FnZEc4Z2VtVnlieTRLSUNBZ0lDQXFMd29LQ2lBZ0lDQmpiR1ZoY2tadmNtTmxjeWdwSUhzS0lDQWdJQ0FnWTI5dWMzUWdZbTlrYVdWeklEMGdkR2hwY3k1aWIyUnBaWE03Q2lBZ0lDQWdJR052Ym5OMElFNGdQU0JpYjJScFpYTXViR1Z1WjNSb093b0tJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ0lUMDlJRTQ3SUdrckt5a2dld29nSUNBZ0lDQWdJR052Ym5OMElHSWdQU0JpYjJScFpYTmJhVjA3Q2lBZ0lDQWdJQ0FnWWk1bWIzSmpaVHNLSUNBZ0lDQWdJQ0JpTG5SdmNuRjFaVHNLSUNBZ0lDQWdJQ0JpTG1admNtTmxMbk5sZENnd0xDQXdMQ0F3S1RzS0lDQWdJQ0FnSUNCaUxuUnZjbkYxWlM1elpYUW9NQ3dnTUN3Z01DazdDaUFnSUNBZ0lIMEtJQ0FnSUgwS0NpQWdmU0F2THlCVVpXMXdJSE4wZFdabUNnb2dJRzVsZHlCQlFVSkNLQ2s3Q2lBZ1kyOXVjM1FnZEcxd1VtRjVJRDBnYm1WM0lGSmhlU2dwT3lBdkx5QndaWEptYjNKdFlXNWpaUzV1YjNjb0tTQm1ZV3hzWW1GamF5QnZiaUJFWVhSbExtNXZkeWdwQ2dvZ0lHTnZibk4wSUhCbGNtWnZjbTFoYm1ObElEMGdaMnh2WW1Gc1ZHaHBjeTV3WlhKbWIzSnRZVzVqWlNCOGZDQjdmVHNLQ2lBZ2FXWWdLQ0Z3WlhKbWIzSnRZVzVqWlM1dWIzY3BJSHNLSUNBZ0lHeGxkQ0J1YjNkUFptWnpaWFFnUFNCRVlYUmxMbTV2ZHlncE93b0tJQ0FnSUdsbUlDaHdaWEptYjNKdFlXNWpaUzUwYVcxcGJtY2dKaVlnY0dWeVptOXliV0Z1WTJVdWRHbHRhVzVuTG01aGRtbG5ZWFJwYjI1VGRHRnlkQ2tnZXdvZ0lDQWdJQ0J1YjNkUFptWnpaWFFnUFNCd1pYSm1iM0p0WVc1alpTNTBhVzFwYm1jdWJtRjJhV2RoZEdsdmJsTjBZWEowT3dvZ0lDQWdmUW9LSUNBZ0lIQmxjbVp2Y20xaGJtTmxMbTV2ZHlBOUlDZ3BJRDArSUVSaGRHVXVibTkzS0NrZ0xTQnViM2RQWm1aelpYUTdDaUFnZlFvS0lDQnVaWGNnVm1Wak15Z3BPeUF2THlCRWFYTndZWFJqYUdWa0lHRm1kR1Z5SUhSb1pTQjNiM0pzWkNCb1lYTWdjM1JsY0hCbFpDQm1iM0ozWVhKa0lHbHVJSFJwYldVdUNpQWdMeThnVW1WMWMyRmliR1VnWlhabGJuUWdiMkpxWldOMGN5QjBieUJ6WVhabElHMWxiVzl5ZVM0S0NpQWdZMjl1YzNRZ1YyOXliR1JmYzNSbGNGOXdiM04wVTNSbGNFVjJaVzUwSUQwZ2V3b2dJQ0FnZEhsd1pUb2dKM0J2YzNSVGRHVndKd29nSUgwN0lDOHZJRVJwYzNCaGRHTm9aV1FnWW1WbWIzSmxJSFJvWlNCM2IzSnNaQ0J6ZEdWd2N5Qm1iM0ozWVhKa0lHbHVJSFJwYldVdUNnb2dJR052Ym5OMElGZHZjbXhrWDNOMFpYQmZjSEpsVTNSbGNFVjJaVzUwSUQwZ2V3b2dJQ0FnZEhsd1pUb2dKM0J5WlZOMFpYQW5DaUFnZlRzS0lDQmpiMjV6ZENCWGIzSnNaRjl6ZEdWd1gyTnZiR3hwWkdWRmRtVnVkQ0E5SUhzS0lDQWdJSFI1Y0dVNklFSnZaSGt1UTA5TVRFbEVSVjlGVmtWT1ZGOU9RVTFGTEFvZ0lDQWdZbTlrZVRvZ2JuVnNiQ3dLSUNBZ0lHTnZiblJoWTNRNklHNTFiR3dLSUNCOU95QXZMeUJRYjI5c2N5Qm1iM0lnZFc1MWMyVmtJRzlpYW1WamRITUtDaUFnWTI5dWMzUWdWMjl5YkdSZmMzUmxjRjl2YkdSRGIyNTBZV04wY3lBOUlGdGRPd29nSUdOdmJuTjBJRmR2Y214a1gzTjBaWEJmWm5KcFkzUnBiMjVGY1hWaGRHbHZibEJ2YjJ3Z1BTQmJYVHNnTHk4Z1VtVjFjMkZpYkdVZ1lYSnlZWGx6SUdadmNpQmpiMnhzYVhOcGIyNGdjR0ZwY25NS0NpQWdZMjl1YzNRZ1YyOXliR1JmYzNSbGNGOXdNU0E5SUZ0ZE93b2dJR052Ym5OMElGZHZjbXhrWDNOMFpYQmZjRElnUFNCYlhUc2dMeThnVTNSMVptWWdabTl5SUdWdGFYUkRiMjUwWVdOMFJYWmxiblJ6Q2dvZ0lHTnZibk4wSUdGa1pHbDBhVzl1Y3lBOUlGdGRPd29nSUdOdmJuTjBJSEpsYlc5MllXeHpJRDBnVzEwN0NpQWdZMjl1YzNRZ1ltVm5hVzVEYjI1MFlXTjBSWFpsYm5RZ1BTQjdDaUFnSUNCMGVYQmxPaUFuWW1WbmFXNURiMjUwWVdOMEp5d0tJQ0FnSUdKdlpIbEJPaUJ1ZFd4c0xBb2dJQ0FnWW05a2VVSTZJRzUxYkd3S0lDQjlPd29nSUdOdmJuTjBJR1Z1WkVOdmJuUmhZM1JGZG1WdWRDQTlJSHNLSUNBZ0lIUjVjR1U2SUNkbGJtUkRiMjUwWVdOMEp5d0tJQ0FnSUdKdlpIbEJPaUJ1ZFd4c0xBb2dJQ0FnWW05a2VVSTZJRzUxYkd3S0lDQjlPd29nSUdOdmJuTjBJR0psWjJsdVUyaGhjR1ZEYjI1MFlXTjBSWFpsYm5RZ1BTQjdDaUFnSUNCMGVYQmxPaUFuWW1WbmFXNVRhR0Z3WlVOdmJuUmhZM1FuTEFvZ0lDQWdZbTlrZVVFNklHNTFiR3dzQ2lBZ0lDQmliMlI1UWpvZ2JuVnNiQ3dLSUNBZ0lITm9ZWEJsUVRvZ2JuVnNiQ3dLSUNBZ0lITm9ZWEJsUWpvZ2JuVnNiQW9nSUgwN0NpQWdZMjl1YzNRZ1pXNWtVMmhoY0dWRGIyNTBZV04wUlhabGJuUWdQU0I3Q2lBZ0lDQjBlWEJsT2lBblpXNWtVMmhoY0dWRGIyNTBZV04wSnl3S0lDQWdJR0p2WkhsQk9pQnVkV3hzTEFvZ0lDQWdZbTlrZVVJNklHNTFiR3dzQ2lBZ0lDQnphR0Z3WlVFNklHNTFiR3dzQ2lBZ0lDQnphR0Z3WlVJNklHNTFiR3dLSUNCOU93b0tJQ0JqYjI1emRDQmhaR1JEYjI1MFlXTjBUV0YwWlhKcFlXd2dQU0FvZDI5eWJHUXNJR055WldGMFpVMWhkR1Z5YVdGc0xDQmZjbVZtTENCMWRXbGtLU0E5UGlCN0NpQWdJQ0JzWlhRZ1cyMWhkR1Z5YVdGc1FTd2diV0YwWlhKcFlXeENMQ0J2Y0hScGIyNXpYU0E5SUY5eVpXWTdDaUFnSUNCamIyNXpkQ0J0WVhSQklEMGdZM0psWVhSbFRXRjBaWEpwWVd3b2JXRjBaWEpwWVd4QktUc0tJQ0FnSUdOdmJuTjBJRzFoZEVJZ1BTQmpjbVZoZEdWTllYUmxjbWxoYkNodFlYUmxjbWxoYkVJcE93b2dJQ0FnWTI5dWMzUWdZMjl1ZEdGamRFMWhkR1Z5YVdGc0lEMGdibVYzSUVOdmJuUmhZM1JOWVhSbGNtbGhiQ2h0WVhSQkxDQnRZWFJDTENCdmNIUnBiMjV6S1RzS0lDQWdJR052Ym5SaFkzUk5ZWFJsY21saGJDNTFkV2xrSUQwZ2RYVnBaRHNLSUNBZ0lIZHZjbXhrTG1Ga1pFTnZiblJoWTNSTllYUmxjbWxoYkNoamIyNTBZV04wVFdGMFpYSnBZV3dwT3dvZ0lIMDdDaUFnWTI5dWMzUWdjbVZ0YjNabFEyOXVkR0ZqZEUxaGRHVnlhV0ZzSUQwZ0tIZHZjbXhrTENCamJWVlZTVVFwSUQwK0lIc0tJQ0FnSUdOdmJuTjBJR2x1WkdWNElEMGdkMjl5YkdRdVkyOXVkR0ZqZEcxaGRHVnlhV0ZzY3k1bWFXNWtTVzVrWlhnb1gzSmxaaklnUFQ0Z2V3b2dJQ0FnSUNCc1pYUWdld29nSUNBZ0lDQWdJSFYxYVdRS0lDQWdJQ0FnZlNBOUlGOXlaV1l5T3dvZ0lDQWdJQ0J5WlhSMWNtNGdkWFZwWkNBOVBUMGdZMjFWVlVsRU93b2dJQ0FnZlNrN0NpQWdJQ0JqYjI1emRDQmJld29nSUNBZ0lDQnBaRG9nYVFvZ0lDQWdmU3dnZXdvZ0lDQWdJQ0JwWkRvZ2Fnb2dJQ0FnZlYwZ1BTQjNiM0pzWkM1amIyNTBZV04wYldGMFpYSnBZV3h6VzJsdVpHVjRYUzV0WVhSbGNtbGhiSE03Q2lBZ0lDQjNiM0pzWkM1amIyNTBZV04wYldGMFpYSnBZV3h6TG5Od2JHbGpaU2hwYm1SbGVDd2dNU2s3Q2lBZ0lDQmtaV3hsZEdVZ2QyOXliR1F1WTI5dWRHRmpkRTFoZEdWeWFXRnNWR0ZpYkdVdVpHRjBZVnRwSUR3Z2FpQS9JR0FrZTJsOUxTUjdhbjFnSURvZ1lDUjdhbjB0Skh0cGZXQmRPd29nSUgwN0Nnb2dJR3hsZENCdFlYUmxjbWxoYkVsa0lEMGdNRHNLSUNCamIyNXpkQ0JqY21WaGRHVk5ZWFJsY21saGJFWmhZM1J2Y25rZ1BTQnRZWFJsY21saGJITWdQVDRnWm5WdVkzUnBiMjRnS0c1aGJXVlBjazl3ZEdsdmJuTXBJSHNLSUNBZ0lHbG1JQ2h1WVcxbFQzSlBjSFJwYjI1eklEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdibUZ0WlU5eVQzQjBhVzl1Y3lBOUlIdDlPd29nSUNBZ2ZRb2dJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXeFBjSFJwYjI1eklEMGdkSGx3Wlc5bUlHNWhiV1ZQY2s5d2RHbHZibk1nUFQwOUlDZHpkSEpwYm1jbklEOGdld29nSUNBZ0lDQnVZVzFsT2lCdVlXMWxUM0pQY0hScGIyNXpDaUFnSUNCOUlEb2dld29nSUNBZ0lDQnVZVzFsT2lCVGVXMWliMnd1Wm05eUtHQk5ZWFJsY21saGJDUjdiV0YwWlhKcFlXeEpaQ3NyZldBcExBb2dJQ0FnSUNBdUxpNXVZVzFsVDNKUGNIUnBiMjV6Q2lBZ0lDQjlPd29nSUNBZ1kyOXVjM1FnZXdvZ0lDQWdJQ0J1WVcxbENpQWdJQ0I5SUQwZ2JXRjBaWEpwWVd4UGNIUnBiMjV6T3dvZ0lDQWdiV0YwWlhKcFlXeHpXMjVoYldWZElEMGdiV0YwWlhKcFlXeHpXMjVoYldWZElIeDhJRzVsZHlCTllYUmxjbWxoYkNodFlYUmxjbWxoYkU5d2RHbHZibk1wT3dvZ0lDQWdjbVYwZFhKdUlHMWhkR1Z5YVdGc2MxdHVZVzFsWFRzS0lDQjlPd29LSUNBdktpb0tJQ0FnS2lCQWRIbHdaV1JsWmlCN0lHbHRjRzl5ZENnblkyRnVibTl1TFdWekp5a3VUV0YwWlhKcFlXeFBjSFJwYjI1eklIMGdUV0YwWlhKcFlXeFBjSFJwYjI1ekNpQWdJQ292Q2dvZ0lHTnZibk4wSUcxaGEyVldaV016SUQwZ1gzSmxaaUE5UGlCN0NpQWdJQ0JzWlhRZ1czZ3NJSGtzSUhwZElEMGdYM0psWmpzS0lDQWdJSEpsZEhWeWJpQnVaWGNnVm1Wak15aDRMQ0I1TENCNktUc0tJQ0I5T3dvZ0lHTnZibk4wSUhCeVpYQmhjbVZUY0dobGNtVWdQU0JoY21keklEMCtJRUZ5Y21GNUxtbHpRWEp5WVhrb1lYSm5jeWtnUHlCaGNtZHpJRG9nVzJGeVozTmRPd29nSUdOdmJuTjBJSEJ5WlhCaGNtVkRiMjUyWlhoUWIyeDVhR1ZrY205dUlEMGdYM0psWmpJZ1BUNGdld29nSUNBZ2JHVjBJRnQyTENCbVlXTmxjeXdnYml3Z1lTd2dZbTkxYm1ScGJtZFRjR2hsY21WU1lXUnBkWE5kSUQwZ1gzSmxaakk3Q2lBZ0lDQnlaWFIxY200Z1czc0tJQ0FnSUNBZ1lYaGxjem9nWVNBL0lHRXViV0Z3S0cxaGEyVldaV016S1NBNklIVnVaR1ZtYVc1bFpDd0tJQ0FnSUNBZ1ltOTFibVJwYm1kVGNHaGxjbVZTWVdScGRYTXNDaUFnSUNBZ0lHWmhZMlZ6TEFvZ0lDQWdJQ0J1YjNKdFlXeHpPaUJ1SUQ4Z2JpNXRZWEFvYldGclpWWmxZek1wSURvZ2RXNWtaV1pwYm1Wa0xBb2dJQ0FnSUNCMlpYSjBhV05sY3pvZ2RpQS9JSFl1YldGd0tHMWhhMlZXWldNektTQTZJSFZ1WkdWbWFXNWxaQW9nSUNBZ2ZWMDdDaUFnZlRzS0lDQm1kVzVqZEdsdmJpQmpjbVZoZEdWVGFHRndaU2gwZVhCbExDQmhjbWR6S1NCN0NpQWdJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIc0tJQ0FnSUNBZ1kyRnpaU0FuUW05NEp6b0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRUp2ZUNodVpYY2dWbVZqTXlndUxpNWhjbWR6TG0xaGNDaDJJRDArSUhZZ0x5QXlLU2twT3dvZ0lDQWdJQ0F2THlCbGVIUmxiblJ6SUQwK0lHaGhiR1pGZUhSbGJuUnpDaUFnSUNBZ0lHTmhjMlVnSjBOdmJuWmxlRkJ2Ykhsb1pXUnliMjRuT2dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1EyOXVkbVY0VUc5c2VXaGxaSEp2YmlndUxpNXdjbVZ3WVhKbFEyOXVkbVY0VUc5c2VXaGxaSEp2YmloaGNtZHpLU2s3Q2lBZ0lDQWdJR05oYzJVZ0owTjViR2x1WkdWeUp6b0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRU41YkdsdVpHVnlLQzR1TG1GeVozTXBPd29nSUNBZ0lDQXZMeUJiSUhKaFpHbDFjMVJ2Y0N3Z2NtRmthWFZ6UW05MGRHOXRMQ0JvWldsbmFIUXNJRzUxYlZObFoyMWxiblJ6SUYwZ1BTQmhjbWR6Q2lBZ0lDQWdJR05oYzJVZ0owaGxhV2RvZEdacFpXeGtKem9LSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVobGFXZG9kR1pwWld4a0tDNHVMbUZ5WjNNcE93b2dJQ0FnSUNBdkx5QmJJRUZ5Y21GNUlHUmhkR0VzSUc5d2RHbHZibk02SUh0dGFXNVdZV3gxWlN3Z2JXRjRWbUZzZFdVc0lHVnNaVzFsYm5SVGFYcGxmU0FnWFNBOUlHRnlaM01LSUNBZ0lDQWdZMkZ6WlNBblVHRnlkR2xqYkdVbk9nb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVR0Z5ZEdsamJHVW9LVHNLSUNBZ0lDQWdMeThnYm04Z1lYSm5jd29nSUNBZ0lDQmpZWE5sSUNkUWJHRnVaU2M2Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWJHRnVaU2dwT3dvZ0lDQWdJQ0F2THlCdWJ5QmhjbWR6TENCcGJtWnBibWwwWlNCNElHRnVaQ0I1Q2lBZ0lDQWdJR05oYzJVZ0oxTndhR1Z5WlNjNkNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlRjR2hsY21Vb0xpNHVjSEpsY0dGeVpWTndhR1Z5WlNoaGNtZHpLU2s3Q2lBZ0lDQWdJQzh2SUhKaFpHbDFjeUE5SUdGeVozTUtJQ0FnSUNBZ1kyRnpaU0FuVkhKcGJXVnphQ2M2Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVWNtbHRaWE5vS0M0dUxtRnlaM01wT3dvZ0lDQWdJQ0F2THlCYmRtVnlkR2xqWlhNc0lHbHVaR2xqWlhOZElEMGdZWEpuY3dvZ0lDQWdmUW9nSUgwS0NpQWdMeW9xQ2lBZ0lDb2dRSEJoY21GdElIdFVTRkpGUlM1UmRXRjBaWEp1YVc5dWZTQjBZWEpuWlhRS0lDQWdLaUJBY0dGeVlXMGdlM3NnY205MFlYUnBiMjQvT2lCVVNGSkZSUzVXWldOMGIzSXpWSFZ3YkdVZ2NYVmhkR1Z5Ym1sdmJqODZJRlJJVWtWRkxsWmxZM1J2Y2pSVWRYQnNaU0I5ZlNCd2NtOXdjd29nSUNBcUlFQnlaWFIxY201eklIdFVTRkpGUlM1UmRXRjBaWEp1YVc5dWZRb2dJQ0FxTHdvZ0lHTnZibk4wSUhObGRGRjFZWFJsY201cGIyNGdQU0FvZEdGeVoyVjBMQ0JmY21WbU15a2dQVDRnZXdvZ0lDQWdiR1YwSUhzS0lDQWdJQ0FnY1hWaGRHVnlibWx2Yml3S0lDQWdJQ0FnY205MFlYUnBiMjRLSUNBZ0lIMGdQU0JmY21WbU16c0tJQ0FnSUdsbUlDaHhkV0YwWlhKdWFXOXVLU0I3Q2lBZ0lDQWdJSFJoY21kbGRDNXpaWFFvTGk0dWNYVmhkR1Z5Ym1sdmJpazdDaUFnSUNCOUlHVnNjMlVnYVdZZ0tISnZkR0YwYVc5dUtTQjdDaUFnSUNBZ0lIUmhjbWRsZEM1elpYUkdjbTl0UlhWc1pYSW9MaTR1Y205MFlYUnBiMjRwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRHNLSUNCOU93b0tJQ0F2S2lvS0lDQWdLaUJBWm5WdVkzUnBiMjRLSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3dvZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnZjSFJwYjI1ekxuVjFhV1FLSUNBZ0tpQkFjR0Z5WVcwZ2UwSnZaSGxRY205d2MzMGdiM0IwYVc5dWN5NXdjbTl3Y3dvZ0lDQXFJRUJ3WVhKaGJTQjdRbTlrZVZOb1lYQmxWSGx3WlgwZ2IzQjBhVzl1Y3k1MGVYQmxDaUFnSUNvZ1FIQmhjbUZ0SUhzb2JXRjBaWEpwWVd4UGNIUnBiMjV6T2lCTllYUmxjbWxoYkU5d2RHbHZibk1wSUQwK0lFMWhkR1Z5YVdGc0lEMTlJRzl3ZEdsdmJuTXVZM0psWVhSbFRXRjBaWEpwWVd3S0lDQWdLaUJBY21WMGRYSnVjeUI3UW05a2VYMEtJQ0FnS2k4S0lDQmpiMjV6ZENCd2NtOXdjMVJ2UW05a2VTQTlJRzl3ZEdsdmJuTWdQVDRnZXdvZ0lDQWdZMjl1YzNRZ2V3b2dJQ0FnSUNCMWRXbGtMQW9nSUNBZ0lDQndjbTl3Y3l3S0lDQWdJQ0FnZEhsd1pTd0tJQ0FnSUNBZ1kzSmxZWFJsVFdGMFpYSnBZV3dnUFNCdFlYUmxjbWxoYkU5d2RHbHZibk1nUFQ0Z2JtVjNJRTFoZEdWeWFXRnNLRzFoZEdWeWFXRnNUM0IwYVc5dWN5a0tJQ0FnSUgwZ1BTQnZjSFJwYjI1ek93b2dJQ0FnWTI5dWMzUWdld29nSUNBZ0lDQmhibWQxYkdGeVJtRmpkRzl5SUQwZ1d6RXNJREVzSURGZExBb2dJQ0FnSUNCaGJtZDFiR0Z5Vm1Wc2IyTnBkSGtnUFNCYk1Dd2dNQ3dnTUYwc0NpQWdJQ0FnSUdGeVozTWdQU0JiWFN3S0lDQWdJQ0FnWTI5c2JHbHphVzl1VW1WemNHOXVjMlVzQ2lBZ0lDQWdJR3hwYm1WaGNrWmhZM1J2Y2lBOUlGc3hMQ0F4TENBeFhTd0tJQ0FnSUNBZ2JXRnpjeXdLSUNBZ0lDQWdiV0YwWlhKcFlXd3NDaUFnSUNBZ0lHOXVRMjlzYkdsa1pTd0tJQ0FnSUNBZ2NHOXphWFJwYjI0Z1BTQmJNQ3dnTUN3Z01GMHNDaUFnSUNBZ0lISnZkR0YwYVc5dUxBb2dJQ0FnSUNCeGRXRjBaWEp1YVc5dUxBb2dJQ0FnSUNCemFHRndaWE1zQ2lBZ0lDQWdJSFI1Y0dVNklHSnZaSGxVZVhCbExBb2dJQ0FnSUNCMlpXeHZZMmwwZVNBOUlGc3dMQ0F3TENBd1hTd0tJQ0FnSUNBZ0xpNHVaWGgwY21FS0lDQWdJSDBnUFNCd2NtOXdjenNLSUNBZ0lHTnZibk4wSUdKdlpIa2dQU0J1WlhjZ1FtOWtlU2g3Q2lBZ0lDQWdJQzR1TG1WNGRISmhMQW9nSUNBZ0lDQnRZWE56T2lCaWIyUjVWSGx3WlNBOVBUMGdKMU4wWVhScFl5Y2dQeUF3SURvZ2JXRnpjeXdLSUNBZ0lDQWdiV0YwWlhKcFlXdzZJRzFoZEdWeWFXRnNJRDhnWTNKbFlYUmxUV0YwWlhKcFlXd29iV0YwWlhKcFlXd3BJRG9nZFc1a1pXWnBibVZrTEFvZ0lDQWdJQ0IwZVhCbE9pQmliMlI1Vkhsd1pTQS9JRUp2WkhsYlltOWtlVlI1Y0dVdWRHOVZjSEJsY2tOaGMyVW9LVjBnT2lCMWJtUmxabWx1WldRS0lDQWdJSDBwT3dvZ0lDQWdZbTlrZVM1MWRXbGtJRDBnZFhWcFpEc0tJQ0FnSUdsbUlDaGpiMnhzYVhOcGIyNVNaWE53YjI1elpTQWhQVDBnZFc1a1pXWnBibVZrS1NCN0NpQWdJQ0FnSUdKdlpIa3VZMjlzYkdsemFXOXVVbVZ6Y0c5dWMyVWdQU0JqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaVHNLSUNBZ0lIMEtJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQW5RMjl0Y0c5MWJtUW5LU0I3Q2lBZ0lDQWdJSE5vWVhCbGN5NW1iM0pGWVdOb0tGOXlaV1kwSUQwK0lIc0tJQ0FnSUNBZ0lDQnNaWFFnZXdvZ0lDQWdJQ0FnSUNBZ2RIbHdaU3dLSUNBZ0lDQWdJQ0FnSUdGeVozTXNDaUFnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiaXdLSUNBZ0lDQWdJQ0FnSUhKdmRHRjBhVzl1TEFvZ0lDQWdJQ0FnSUNBZ2NYVmhkR1Z5Ym1sdmJpd0tJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNMQW9nSUNBZ0lDQWdJQ0FnTGk0dVpYaDBjbUVLSUNBZ0lDQWdJQ0I5SUQwZ1gzSmxaalE3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjMmhoY0dWQ2IyUjVJRDBnWW05a2VTNWhaR1JUYUdGd1pTaGpjbVZoZEdWVGFHRndaU2gwZVhCbExDQmhjbWR6S1N3Z2NHOXphWFJwYjI0Z1B5QnVaWGNnVm1Wak15Z3VMaTV3YjNOcGRHbHZiaWtnT2lCMWJtUmxabWx1WldRc0lITmxkRkYxWVhSbGNtNXBiMjRvYm1WM0lGRjFZWFJsY201cGIyNG9NQ3dnTUN3Z01Dd2dNU2tzSUhzS0lDQWdJQ0FnSUNBZ0lIRjFZWFJsY201cGIyNHNDaUFnSUNBZ0lDQWdJQ0J5YjNSaGRHbHZiZ29nSUNBZ0lDQWdJSDBwS1RzS0lDQWdJQ0FnSUNCcFppQW9iV0YwWlhKcFlXd3BJSE5vWVhCbFFtOWtlUzV0WVhSbGNtbGhiQ0E5SUdOeVpXRjBaVTFoZEdWeWFXRnNLRzFoZEdWeWFXRnNLVHNLSUNBZ0lDQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtITm9ZWEJsUW05a2VTd2daWGgwY21FcE93b2dJQ0FnSUNCOUtUc0tJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJR0p2WkhrdVlXUmtVMmhoY0dVb1kzSmxZWFJsVTJoaGNHVW9kSGx3WlN3Z1lYSm5jeWtwT3dvZ0lDQWdmUW9nSUNBZ1ltOWtlUzV3YjNOcGRHbHZiaTV6WlhRb2NHOXphWFJwYjI1Yk1GMHNJSEJ2YzJsMGFXOXVXekZkTENCd2IzTnBkR2x2YmxzeVhTazdDaUFnSUNCaWIyUjVMblpsYkc5amFYUjVMbk5sZENoMlpXeHZZMmwwZVZzd1hTd2dkbVZzYjJOcGRIbGJNVjBzSUhabGJHOWphWFI1V3pKZEtUc0tJQ0FnSUdKdlpIa3VZVzVuZFd4aGNsWmxiRzlqYVhSNUxuTmxkQ2hoYm1kMWJHRnlWbVZzYjJOcGRIbGJNRjBzSUdGdVozVnNZWEpXWld4dlkybDBlVnN4WFN3Z1lXNW5kV3hoY2xabGJHOWphWFI1V3pKZEtUc0tJQ0FnSUdKdlpIa3ViR2x1WldGeVJtRmpkRzl5TG5ObGRDaHNhVzVsWVhKR1lXTjBiM0piTUYwc0lHeHBibVZoY2taaFkzUnZjbHN4WFN3Z2JHbHVaV0Z5Um1GamRHOXlXekpkS1RzS0lDQWdJR0p2WkhrdVlXNW5kV3hoY2taaFkzUnZjaTV6WlhRb1lXNW5kV3hoY2taaFkzUnZjbHN3WFN3Z1lXNW5kV3hoY2taaFkzUnZjbHN4WFN3Z1lXNW5kV3hoY2taaFkzUnZjbHN5WFNrN0NpQWdJQ0J6WlhSUmRXRjBaWEp1YVc5dUtHSnZaSGt1Y1hWaGRHVnlibWx2Yml3Z2V3b2dJQ0FnSUNCeGRXRjBaWEp1YVc5dUxBb2dJQ0FnSUNCeWIzUmhkR2x2YmdvZ0lDQWdmU2s3Q2lBZ0lDQnlaWFIxY200Z1ltOWtlVHNLSUNCOU93b0tJQ0JqYjI1emRDQmhaR1JDYjJScFpYTWdQU0FvYzNSaGRHVXNJR055WldGMFpVMWhkR1Z5YVdGc0xDQmZjbVZtS1NBOVBpQjdDaUFnSUNCc1pYUWdld29nSUNBZ0lDQndjbTl3Y3l3S0lDQWdJQ0FnZEhsd1pTd0tJQ0FnSUNBZ2RYVnBaQW9nSUNBZ2ZTQTlJRjl5WldZN0NpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhWMWFXUXViR1Z1WjNSb095QnBLeXNwSUhzS0lDQWdJQ0FnWTI5dWMzUWdZbTlrZVNBOUlIQnliM0J6Vkc5Q2IyUjVLSHNLSUNBZ0lDQWdJQ0JqY21WaGRHVk5ZWFJsY21saGJDd0tJQ0FnSUNBZ0lDQndjbTl3Y3pvZ2NISnZjSE5iYVYwc0NpQWdJQ0FnSUNBZ2RIbHdaU3dLSUNBZ0lDQWdJQ0IxZFdsa09pQjFkV2xrVzJsZENpQWdJQ0FnSUgwcE93b2dJQ0FnSUNCemRHRjBaUzUzYjNKc1pDNWhaR1JDYjJSNUtHSnZaSGtwT3dvZ0lDQWdJQ0JwWmlBb2NISnZjSE5iYVYwdWIyNURiMnhzYVdSbEtTQmliMlI1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOdmJHeHBaR1VuTENCZmNtVm1NaUE5UGlCN0NpQWdJQ0FnSUNBZ2JHVjBJSHNLSUNBZ0lDQWdJQ0FnSUhSNWNHVXNDaUFnSUNBZ0lDQWdJQ0JpYjJSNUxBb2dJQ0FnSUNBZ0lDQWdkR0Z5WjJWMExBb2dJQ0FnSUNBZ0lDQWdZMjl1ZEdGamRBb2dJQ0FnSUNBZ0lIMGdQU0JmY21WbU1qc0tJQ0FnSUNBZ0lDQnBaaUFvSVdKdlpIa3VkWFZwWkNCOGZDQWhkR0Z5WjJWMExuVjFhV1FwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JqYjI1emRDQjdDaUFnSUNBZ0lDQWdJQ0J1YVN3S0lDQWdJQ0FnSUNBZ0lISnBMQW9nSUNBZ0lDQWdJQ0FnY21vc0NpQWdJQ0FnSUNBZ0lDQmlhU3dLSUNBZ0lDQWdJQ0FnSUdKcUxBb2dJQ0FnSUNBZ0lDQWdhV1FLSUNBZ0lDQWdJQ0I5SUQwZ1kyOXVkR0ZqZERzS0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjI1MFlXTjBVRzlwYm5RZ1BTQmlhUzV3YjNOcGRHbHZiaTUyWVdSa0tISnBLVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjUwWVdOMFRtOXliV0ZzSUQwZ1lta2dQVDA5SUdKdlpIa2dQeUJ1YVNBNklHNXBMbk5qWVd4bEtDMHhLVHNLSUNBZ0lDQWdJQ0J6Wld4bUxuQnZjM1JOWlhOellXZGxLSHNLSUNBZ0lDQWdJQ0FnSUdKdlpIazZJR0p2WkhrdWRYVnBaQ3dLSUNBZ0lDQWdJQ0FnSUdOdmJHeHBjMmx2YmtacGJIUmxjbk02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVVacGJIUmxja2R5YjNWd09pQmliMlI1TG1OdmJHeHBjMmx2YmtacGJIUmxja2R5YjNWd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JpYjJSNVJtbHNkR1Z5VFdGemF6b2dZbTlrZVM1amIyeHNhWE5wYjI1R2FXeDBaWEpOWVhOckxBb2dJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUkdhV3gwWlhKSGNtOTFjRG9nZEdGeVoyVjBMbU52Ykd4cGMybHZia1pwYkhSbGNrZHliM1Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhSR2FXeDBaWEpOWVhOck9pQjBZWEpuWlhRdVkyOXNiR2x6YVc5dVJtbHNkR1Z5VFdGemF3b2dJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUdOdmJuUmhZM1E2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdMeThnUUhSekxXVjRjR1ZqZEMxbGNuSnZjaUJVVDBSUE9pQjFjMlVnYVdRZ2FXNXpkR1ZoWkNCdlppQjFkV2xrQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnBPaUJpYVM1MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNBdkx5QkFkSE10Wlhod1pXTjBMV1Z5Y205eUlGUlBSRTg2SUhWelpTQnBaQ0JwYm5OMFpXRmtJRzltSUhWMWFXUUtJQ0FnSUNBZ0lDQWdJQ0FnWW1vNklHSnFMblYxYVdRc0NpQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1dmNtMWhiQ0J2WmlCMGFHVWdZMjl1ZEdGamRDd2djbVZzWVhScGRtVWdkRzhnZEdobElHTnZiR3hwWkdsdVp5QmliMlI1Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJoWTNST2IzSnRZV3c2SUdOdmJuUmhZM1JPYjNKdFlXd3VkRzlCY25KaGVTZ3BMQW9nSUNBZ0lDQWdJQ0FnSUNBdkx5QlhiM0pzWkNCd2IzTnBkR2x2YmlCdlppQjBhR1VnWTI5dWRHRmpkQW9nSUNBZ0lDQWdJQ0FnSUNCamIyNTBZV04wVUc5cGJuUTZJR052Ym5SaFkzUlFiMmx1ZEM1MGIwRnljbUY1S0Nrc0NpQWdJQ0FnSUNBZ0lDQWdJR2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBiWEJoWTNSV1pXeHZZMmwwZVRvZ1kyOXVkR0ZqZEM1blpYUkpiWEJoWTNSV1pXeHZZMmwwZVVGc2IyNW5UbTl5YldGc0tDa3NDaUFnSUNBZ0lDQWdJQ0FnSUc1cE9pQnVhUzUwYjBGeWNtRjVLQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lISnBPaUJ5YVM1MGIwRnljbUY1S0Nrc0NpQWdJQ0FnSUNBZ0lDQWdJSEpxT2lCeWFpNTBiMEZ5Y21GNUtDa0tJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNCdmNEb2dKMlYyWlc1MEp5d0tJQ0FnSUNBZ0lDQWdJSFJoY21kbGREb2dkR0Z5WjJWMExuVjFhV1FzQ2lBZ0lDQWdJQ0FnSUNCMGVYQmxDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJSDBwT3dvZ0lDQWdmUW9nSUgwN0Nnb2dJR052Ym5OMElIUnlhWEJzWlhSVWIxWmxZek1nUFNCMElEMCtJSFFnUHlCdVpYY2dWbVZqTXlndUxpNTBLU0E2SUhWdVpHVm1hVzVsWkRzS0NpQWdZMjl1YzNRZ1lXUmtRMjl1YzNSeVlXbHVkQ0E5SUNoemRHRjBaU3dnWDNKbFppa2dQVDRnZXdvZ0lDQWdiR1YwSUhzS0lDQWdJQ0FnY0hKdmNITTZJRnRpYjJSNVFTd2dZbTlrZVVJc0lIc0tJQ0FnSUNBZ0lDQmhibWRzWlN3S0lDQWdJQ0FnSUNCaGVHbHpRU3dLSUNBZ0lDQWdJQ0JoZUdselFpd0tJQ0FnSUNBZ0lDQmpiMnhzYVdSbFEyOXVibVZqZEdWa0xBb2dJQ0FnSUNBZ0lHUnBjM1JoYm1ObExBb2dJQ0FnSUNBZ0lHMWhlRVp2Y21ObExBb2dJQ0FnSUNBZ0lHMWhlRTExYkhScGNHeHBaWElzQ2lBZ0lDQWdJQ0FnY0dsMmIzUkJMQW9nSUNBZ0lDQWdJSEJwZG05MFFpd0tJQ0FnSUNBZ0lDQjBkMmx6ZEVGdVoyeGxMQW9nSUNBZ0lDQWdJSGRoYTJWVmNFSnZaR2xsY3dvZ0lDQWdJQ0I5WFN3S0lDQWdJQ0FnZEhsd1pTd0tJQ0FnSUNBZ2RYVnBaQW9nSUNBZ2ZTQTlJRjl5WldZN0NpQWdJQ0JzWlhRZ1kyOXVjM1J5WVdsdWREc0tJQ0FnSUhOM2FYUmphQ0FvZEhsd1pTa2dld29nSUNBZ0lDQmpZWE5sSUNkUWIybHVkRlJ2VUc5cGJuUW5PZ29nSUNBZ0lDQWdJR052Ym5OMGNtRnBiblFnUFNCdVpYY2dVRzlwYm5SVWIxQnZhVzUwUTI5dWMzUnlZV2x1ZENoemRHRjBaUzVpYjJScFpYTmJZbTlrZVVGZExDQjBjbWx3YkdWMFZHOVdaV016S0hCcGRtOTBRU2tzSUhOMFlYUmxMbUp2WkdsbGMxdGliMlI1UWwwc0lIUnlhWEJzWlhSVWIxWmxZek1vY0dsMmIzUkNLU3dnYldGNFJtOXlZMlVwT3dvZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQmpZWE5sSUNkRGIyNWxWSGRwYzNRbk9nb2dJQ0FnSUNBZ0lHTnZibk4wY21GcGJuUWdQU0J1WlhjZ1EyOXVaVlIzYVhOMFEyOXVjM1J5WVdsdWRDaHpkR0YwWlM1aWIyUnBaWE5iWW05a2VVRmRMQ0J6ZEdGMFpTNWliMlJwWlhOYlltOWtlVUpkTENCN0NpQWdJQ0FnSUNBZ0lDQmhibWRzWlN3S0lDQWdJQ0FnSUNBZ0lHRjRhWE5CT2lCMGNtbHdiR1YwVkc5V1pXTXpLR0Y0YVhOQktTd0tJQ0FnSUNBZ0lDQWdJR0Y0YVhOQ09pQjBjbWx3YkdWMFZHOVdaV016S0dGNGFYTkNLU3dLSUNBZ0lDQWdJQ0FnSUdOdmJHeHBaR1ZEYjI1dVpXTjBaV1FzQ2lBZ0lDQWdJQ0FnSUNCdFlYaEdiM0pqWlN3S0lDQWdJQ0FnSUNBZ0lIQnBkbTkwUVRvZ2RISnBjR3hsZEZSdlZtVmpNeWh3YVhadmRFRXBMQW9nSUNBZ0lDQWdJQ0FnY0dsMmIzUkNPaUIwY21sd2JHVjBWRzlXWldNektIQnBkbTkwUWlrc0NpQWdJQ0FnSUNBZ0lDQjBkMmx6ZEVGdVoyeGxDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lHTmhjMlVnSjBocGJtZGxKem9LSUNBZ0lDQWdJQ0JqYjI1emRISmhhVzUwSUQwZ2JtVjNJRWhwYm1kbFEyOXVjM1J5WVdsdWRDaHpkR0YwWlM1aWIyUnBaWE5iWW05a2VVRmRMQ0J6ZEdGMFpTNWliMlJwWlhOYlltOWtlVUpkTENCN0NpQWdJQ0FnSUNBZ0lDQmhlR2x6UVRvZ2RISnBjR3hsZEZSdlZtVmpNeWhoZUdselFTa3NDaUFnSUNBZ0lDQWdJQ0JoZUdselFqb2dkSEpwY0d4bGRGUnZWbVZqTXloaGVHbHpRaWtzQ2lBZ0lDQWdJQ0FnSUNCamIyeHNhV1JsUTI5dWJtVmpkR1ZrTEFvZ0lDQWdJQ0FnSUNBZ2JXRjRSbTl5WTJVc0NpQWdJQ0FnSUNBZ0lDQndhWFp2ZEVFNklIUnlhWEJzWlhSVWIxWmxZek1vY0dsMmIzUkJLU3dLSUNBZ0lDQWdJQ0FnSUhCcGRtOTBRam9nZEhKcGNHeGxkRlJ2Vm1Wak15aHdhWFp2ZEVJcENpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUdOaGMyVWdKMFJwYzNSaGJtTmxKem9LSUNBZ0lDQWdJQ0JqYjI1emRISmhhVzUwSUQwZ2JtVjNJRVJwYzNSaGJtTmxRMjl1YzNSeVlXbHVkQ2h6ZEdGMFpTNWliMlJwWlhOYlltOWtlVUZkTENCemRHRjBaUzVpYjJScFpYTmJZbTlrZVVKZExDQmthWE4wWVc1alpTd2diV0Y0Um05eVkyVXBPd29nSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNCallYTmxJQ2RNYjJOckp6b0tJQ0FnSUNBZ0lDQmpiMjV6ZEhKaGFXNTBJRDBnYm1WM0lFeHZZMnREYjI1emRISmhhVzUwS0hOMFlYUmxMbUp2WkdsbGMxdGliMlI1UVYwc0lITjBZWFJsTG1KdlpHbGxjMXRpYjJSNVFsMHNJSHNLSUNBZ0lDQWdJQ0FnSUcxaGVFWnZjbU5sQ2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdZMjl1YzNSeVlXbHVkQ0E5SUc1bGR5QkRiMjV6ZEhKaGFXNTBLSE4wWVhSbExtSnZaR2xsYzF0aWIyUjVRVjBzSUhOMFlYUmxMbUp2WkdsbGMxdGliMlI1UWwwc0lIc0tJQ0FnSUNBZ0lDQWdJR052Ykd4cFpHVkRiMjV1WldOMFpXUXNDaUFnSUNBZ0lDQWdJQ0IzWVd0bFZYQkNiMlJwWlhNS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJSDBLSUNBZ0lHTnZibk4wY21GcGJuUXVkWFZwWkNBOUlIVjFhV1E3Q2lBZ0lDQnpkR0YwWlM1M2IzSnNaQzVoWkdSRGIyNXpkSEpoYVc1MEtHTnZibk4wY21GcGJuUXBPd29nSUNBZ2FXWWdLRzFoZUUxMWJIUnBjR3hwWlhJZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZXdvZ0lDQWdJQ0JqYjI1emRDQndiM04wVTNSbGNFTnZibk4wY21GcGJuUWdQU0FvS1NBOVBpQjdDaUFnSUNBZ0lDQWdMeThnVkdobElHMTFiSFJwY0d4cFpYSWdhWE1nY0hKdmNHOXlkR2x2Ym1Gc0lIUnZJR2h2ZHlCdGRXTm9JR1p2Y21ObElHbHpJR0ZrWkdWa0lIUnZJSFJvWlNCaWIyUnBaWE1nWW5rZ2RHaGxJR052Ym5OMGNtRnBiblF1Q2lBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hwY3lCbGVHTmxaV1J6SUdFZ2JHbHRhWFFnZEdobElHTnZibk4wY21GcGJuUWdhWE1nWkdsellXSnNaV1F1Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdiWFZzZEdsd2JHbGxjaUE5SUUxaGRHZ3VZV0p6S0dOdmJuTjBjbUZwYm5RdVpYRjFZWFJwYjI1eld6QmRMbTExYkhScGNHeHBaWElwT3dvZ0lDQWdJQ0FnSUdsbUlDaHRkV3gwYVhCc2FXVnlJRDRnYldGNFRYVnNkR2x3YkdsbGNpa2dld29nSUNBZ0lDQWdJQ0FnWTI5dWMzUnlZV2x1ZEM1a2FYTmhZbXhsS0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCOU93b2dJQ0FnSUNCemRHRjBaUzVqYjI1emRISmhhVzUwYzF0MWRXbGtYU0E5SUhCdmMzUlRkR1Z3UTI5dWMzUnlZV2x1ZERzS0lDQWdJQ0FnYzNSaGRHVXVkMjl5YkdRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmNHOXpkRk4wWlhBbkxDQnpkR0YwWlM1amIyNXpkSEpoYVc1MGMxdDFkV2xrWFNrN0NpQWdJQ0I5Q2lBZ2ZUc0tDaUFnWm5WdVkzUnBiMjRnZEc5VmNIQmxjbU5oYzJVb2MzUnlLU0I3Q2lBZ0lDQnlaWFIxY200Z2MzUnlMblJ2VlhCd1pYSkRZWE5sS0NrN0NpQWdmUW9nSUdOdmJuTjBJR0ZrWkZKaGVTQTlJQ2h6ZEdGMFpTd2dYM0psWmlrZ1BUNGdld29nSUNBZ2JHVjBJSHNLSUNBZ0lDQWdjSEp2Y0hNNklIc0tJQ0FnSUNBZ0lDQm1jbTl0TEFvZ0lDQWdJQ0FnSUcxdlpHVXNDaUFnSUNBZ0lDQWdkRzhzQ2lBZ0lDQWdJQ0FnTGk0dWNtRjVUM0IwYVc5dWN3b2dJQ0FnSUNCOUxBb2dJQ0FnSUNCMWRXbGtDaUFnSUNCOUlEMGdYM0psWmpzS0lDQWdJR052Ym5OMElISmhlU0E5SUc1bGR5QlNZWGtvZEhKcGNHeGxkRlJ2Vm1Wak15aG1jbTl0S1N3Z2RISnBjR3hsZEZSdlZtVmpNeWgwYnlrcE93b2dJQ0FnWTI5dWMzUWdiM0IwYVc5dWN5QTlJSHNLSUNBZ0lDQWdiVzlrWlRvZ1VrRlpYMDFQUkVWVFczUnZWWEJ3WlhKallYTmxLRzF2WkdVcFhTd0tJQ0FnSUNBZ2NtVnpkV3gwT2lCdVpYY2dVbUY1WTJGemRGSmxjM1ZzZENncExBb2dJQ0FnSUNBdUxpNXlZWGxQY0hScGIyNXpDaUFnSUNCOU93b2dJQ0FnYzNSaGRHVXVjbUY1YzF0MWRXbGtYU0E5SUNncElEMCtJSHNLSUNBZ0lDQWdjbUY1TG1sdWRHVnljMlZqZEZkdmNteGtLSE4wWVhSbExuZHZjbXhrTENCdmNIUnBiMjV6S1RzS0lDQWdJQ0FnYVdZZ0tDRnZjSFJwYjI1ekxuSmxjM1ZzZENCOGZDQWhiM0IwYVc5dWN5NXlaWE4xYkhRdVltOWtlU2tnY21WMGRYSnVPd29nSUNBZ0lDQmpiMjV6ZENCN0NpQWdJQ0FnSUNBZ1ltOWtlU3dLSUNBZ0lDQWdJQ0J6YUdGd1pTd0tJQ0FnSUNBZ0lDQnlZWGxHY205dFYyOXliR1FzQ2lBZ0lDQWdJQ0FnY21GNVZHOVhiM0pzWkN3S0lDQWdJQ0FnSUNCb2FYUk9iM0p0WVd4WGIzSnNaQ3dLSUNBZ0lDQWdJQ0JvYVhSUWIybHVkRmR2Y214a0xBb2dJQ0FnSUNBZ0lDNHVMbkpsYzNRS0lDQWdJQ0FnZlNBOUlHOXdkR2x2Ym5NdWNtVnpkV3gwT3dvZ0lDQWdJQ0JqYjI1emRDQmliMlI1VlZWSlJDQTlJR0p2WkhrdWRYVnBaRHNLSUNBZ0lDQWdhV1lnS0NGaWIyUjVWVlZKUkNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0J6Wld4bUxuQnZjM1JOWlhOellXZGxLSHNLSUNBZ0lDQWdJQ0JpYjJSNU9pQmliMlI1VlZWSlJDd0tJQ0FnSUNBZ0lDQm9hWFJPYjNKdFlXeFhiM0pzWkRvZ2FHbDBUbTl5YldGc1YyOXliR1F1ZEc5QmNuSmhlU2dwTEFvZ0lDQWdJQ0FnSUdocGRGQnZhVzUwVjI5eWJHUTZJR2hwZEZCdmFXNTBWMjl5YkdRdWRHOUJjbkpoZVNncExBb2dJQ0FnSUNBZ0lHOXdPaUFuWlhabGJuUW5MQW9nSUNBZ0lDQWdJSEpoZVRvZ2V3b2dJQ0FnSUNBZ0lDQWdZMjlzYkdsemFXOXVSbWxzZEdWeVIzSnZkWEE2SUhKaGVTNWpiMnhzYVhOcGIyNUdhV3gwWlhKSGNtOTFjQ3dLSUNBZ0lDQWdJQ0FnSUdOdmJHeHBjMmx2YmtacGJIUmxjazFoYzJzNklISmhlUzVqYjJ4c2FYTnBiMjVHYVd4MFpYSk5ZWE5yTEFvZ0lDQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dU9pQnlZWGt1WkdseVpXTjBhVzl1TG5SdlFYSnlZWGtvS1N3S0lDQWdJQ0FnSUNBZ0lHWnliMjBzQ2lBZ0lDQWdJQ0FnSUNCMGJ5d0tJQ0FnSUNBZ0lDQWdJSFYxYVdRS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lISmhlVVp5YjIxWGIzSnNaRG9nY21GNVJuSnZiVmR2Y214a0xuUnZRWEp5WVhrb0tTd0tJQ0FnSUNBZ0lDQnlZWGxVYjFkdmNteGtPaUJ5WVhsVWIxZHZjbXhrTG5SdlFYSnlZWGtvS1N3S0lDQWdJQ0FnSUNCemFHRndaVG9nYzJoaGNHVWdQeUI3Q2lBZ0lDQWdJQ0FnSUNBdUxpNXphR0Z3WlN3S0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUdKdlpIbFZWVWxFQ2lBZ0lDQWdJQ0FnZlNBNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnZEhsd1pUb2dKM0poZVdocGRDY3NDaUFnSUNBZ0lDQWdMaTR1Y21WemRBb2dJQ0FnSUNCOUtUc0tJQ0FnSUgwN0NpQWdJQ0J6ZEdGMFpTNTNiM0pzWkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nkd2NtVlRkR1Z3Snl3Z2MzUmhkR1V1Y21GNWMxdDFkV2xrWFNrN0NpQWdmVHNLQ2lBZ1kyOXVjM1FnWVdSa1VtRjVZMkZ6ZEZabGFHbGpiR1VnUFNBb2MzUmhkR1VzSUdSaGRHRXBJRDArSUhzS0lDQWdJR052Ym5OMElGdGphR0Z6YzJselFtOWtlU3dnZDJobFpXeHpMQ0IzYUdWbGJFbHVabTl6TENCcGJtUmxlRVp2Y25kaGNtUkJlR2x6TENCcGJtUmxlRkpwWjJoMFFYaHBjeXdnYVc1a1pYaFZjRUY0YVhOZElEMGdaR0YwWVM1d2NtOXdjenNLSUNBZ0lHTnZibk4wSUhabGFHbGpiR1VnUFNCdVpYY2dVbUY1WTJGemRGWmxhR2xqYkdVb2V3b2dJQ0FnSUNCamFHRnpjMmx6UW05a2VUb2djM1JoZEdVdVltOWthV1Z6VzJOb1lYTnphWE5DYjJSNVhTd0tJQ0FnSUNBZ2FXNWtaWGhHYjNKM1lYSmtRWGhwY3l3S0lDQWdJQ0FnYVc1a1pYaFNhV2RvZEVGNGFYTXNDaUFnSUNBZ0lHbHVaR1Y0VlhCQmVHbHpDaUFnSUNCOUtUc0tJQ0FnSUhabGFHbGpiR1V1ZDI5eWJHUWdQU0J6ZEdGMFpTNTNiM0pzWkRzS0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZDJobFpXeEpibVp2Y3k1c1pXNW5kR2c3SUdrckt5a2dld29nSUNBZ0lDQmpiMjV6ZENCN0NpQWdJQ0FnSUNBZ1lYaHNaVXh2WTJGc0xBb2dJQ0FnSUNBZ0lHTm9ZWE56YVhORGIyNXVaV04wYVc5dVVHOXBiblJNYjJOaGJDd0tJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNU1iMk5oYkN3S0lDQWdJQ0FnSUNBdUxpNXlaWE4wQ2lBZ0lDQWdJSDBnUFNCM2FHVmxiRWx1Wm05elcybGRPd29nSUNBZ0lDQjJaV2hwWTJ4bExtRmtaRmRvWldWc0tIc0tJQ0FnSUNBZ0lDQmhlR3hsVEc5allXdzZJSFJ5YVhCc1pYUlViMVpsWXpNb1lYaHNaVXh2WTJGc0tTd0tJQ0FnSUNBZ0lDQmphR0Z6YzJselEyOXVibVZqZEdsdmJsQnZhVzUwVEc5allXdzZJSFJ5YVhCc1pYUlViMVpsWXpNb1kyaGhjM05wYzBOdmJtNWxZM1JwYjI1UWIybHVkRXh2WTJGc0tTd0tJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNU1iMk5oYkRvZ2RISnBjR3hsZEZSdlZtVmpNeWhrYVhKbFkzUnBiMjVNYjJOaGJDa3NDaUFnSUNBZ0lDQWdMaTR1Y21WemRBb2dJQ0FnSUNCOUtUc0tJQ0FnSUgwS0lDQWdJR052Ym5OMElIQnlaVk4wWlhBZ1BTQW9LU0E5UGlCN0NpQWdJQ0FnSUhabGFHbGpiR1V1ZFhCa1lYUmxWbVZvYVdOc1pTaHpkR0YwWlM1M2IzSnNaQzVrZENrN0NpQWdJQ0I5T3dvZ0lDQWdZMjl1YzNRZ2NHOXpkRk4wWlhBZ1BTQW9LU0E5UGlCN0NpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RtVm9hV05zWlM1M2FHVmxiRWx1Wm05ekxteGxibWQwYURzZ2FTc3JLU0I3Q2lBZ0lDQWdJQ0FnZG1Wb2FXTnNaUzUxY0dSaGRHVlhhR1ZsYkZSeVlXNXpabTl5YlNocEtUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCMElEMGdkbVZvYVdOc1pTNTNhR1ZsYkVsdVptOXpXMmxkTG5kdmNteGtWSEpoYm5ObWIzSnRPd29nSUNBZ0lDQWdJR052Ym5OMElIZG9aV1ZzUW05a2VTQTlJSE4wWVhSbExtSnZaR2xsYzF0M2FHVmxiSE5iYVYxZE93b2dJQ0FnSUNBZ0lIZG9aV1ZzUW05a2VTNXdiM05wZEdsdmJpNWpiM0I1S0hRdWNHOXphWFJwYjI0cE93b2dJQ0FnSUNBZ0lIZG9aV1ZzUW05a2VTNXhkV0YwWlhKdWFXOXVMbU52Y0hrb2RDNXhkV0YwWlhKdWFXOXVLVHNLSUNBZ0lDQWdmUW9nSUNBZ2ZUc0tJQ0FnSUhOMFlYUmxMblpsYUdsamJHVnpXMlJoZEdFdWRYVnBaRjBnUFNCN0NpQWdJQ0FnSUhCdmMzUlRkR1Z3TEFvZ0lDQWdJQ0J3Y21WVGRHVndMQW9nSUNBZ0lDQjJaV2hwWTJ4bENpQWdJQ0I5T3dvZ0lDQWdjM1JoZEdVdWQyOXliR1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY0hKbFUzUmxjQ2NzSUhCeVpWTjBaWEFwT3dvZ0lDQWdjM1JoZEdVdWQyOXliR1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY0c5emRGTjBaWEFuTENCd2IzTjBVM1JsY0NrN0NpQWdmVHNLQ2lBZ1kyOXVjM1FnWVdSa1UzQnlhVzVuSUQwZ0tITjBZWFJsTENCZmNtVm1LU0E5UGlCN0NpQWdJQ0JzWlhRZ2V3b2dJQ0FnSUNCd2NtOXdjem9nVzJKdlpIbEJMQ0JpYjJSNVFpd2dld29nSUNBZ0lDQWdJR1JoYlhCcGJtY3NDaUFnSUNBZ0lDQWdiRzlqWVd4QmJtTm9iM0pCTEFvZ0lDQWdJQ0FnSUd4dlkyRnNRVzVqYUc5eVFpd0tJQ0FnSUNBZ0lDQnlaWE4wVEdWdVozUm9MQW9nSUNBZ0lDQWdJSE4wYVdabWJtVnpjeXdLSUNBZ0lDQWdJQ0IzYjNKc1pFRnVZMmh2Y2tFc0NpQWdJQ0FnSUNBZ2QyOXliR1JCYm1Ob2IzSkNDaUFnSUNBZ0lIMWRMQW9nSUNBZ0lDQjFkV2xrQ2lBZ0lDQjlJRDBnWDNKbFpqc0tJQ0FnSUdOdmJuTjBJSE53Y21sdVp5QTlJRzVsZHlCVGNISnBibWNvYzNSaGRHVXVZbTlrYVdWelcySnZaSGxCWFN3Z2MzUmhkR1V1WW05a2FXVnpXMkp2WkhsQ1hTd2dld29nSUNBZ0lDQmtZVzF3YVc1bkxBb2dJQ0FnSUNCc2IyTmhiRUZ1WTJodmNrRTZJSFJ5YVhCc1pYUlViMVpsWXpNb2JHOWpZV3hCYm1Ob2IzSkJLU3dLSUNBZ0lDQWdiRzlqWVd4QmJtTm9iM0pDT2lCMGNtbHdiR1YwVkc5V1pXTXpLR3h2WTJGc1FXNWphRzl5UWlrc0NpQWdJQ0FnSUhKbGMzUk1aVzVuZEdnc0NpQWdJQ0FnSUhOMGFXWm1ibVZ6Y3l3S0lDQWdJQ0FnZDI5eWJHUkJibU5vYjNKQk9pQjBjbWx3YkdWMFZHOVdaV016S0hkdmNteGtRVzVqYUc5eVFTa3NDaUFnSUNBZ0lIZHZjbXhrUVc1amFHOXlRam9nZEhKcGNHeGxkRlJ2Vm1Wak15aDNiM0pzWkVGdVkyaHZja0lwQ2lBZ0lDQjlLVHNLSUNBZ0lITndjbWx1Wnk1MWRXbGtJRDBnZFhWcFpEc0tJQ0FnSUdOdmJuTjBJSEJ2YzNSVGRHVndVM0J5YVc1bklEMGdLQ2tnUFQ0Z2MzQnlhVzVuTG1Gd2NHeDVSbTl5WTJVb0tUc0tJQ0FnSUhOMFlYUmxMbk53Y21sdVozTmJkWFZwWkYwZ1BTQndiM04wVTNSbGNGTndjbWx1WnpzS0lDQWdJSE4wWVhSbExuTndjbWx1WjBsdWMzUmhibU5sYzF0MWRXbGtYU0E5SUhOd2NtbHVaenNLQ2lBZ0lDQXZMeUJEYjIxd2RYUmxJSFJvWlNCbWIzSmpaU0JoWm5SbGNpQmxZV05vSUhOMFpYQUtJQ0FnSUhOMFlYUmxMbmR2Y214a0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozQnZjM1JUZEdWd0p5d2djM1JoZEdVdWMzQnlhVzVuYzF0MWRXbGtYU2s3Q2lBZ2ZUc0tDaUFnWm5WdVkzUnBiMjRnWlcxcGRFSmxaMmx1UTI5dWRHRmpkQ2hmY21WbUtTQjdDaUFnSUNCc1pYUWdld29nSUNBZ0lDQmliMlI1UVN3S0lDQWdJQ0FnWW05a2VVSUtJQ0FnSUgwZ1BTQmZjbVZtT3dvZ0lDQWdhV1lnS0NFb1ltOWtlVUVnSVQwZ2JuVnNiQ0FtSmlCaWIyUjVRUzUxZFdsa0tTQjhmQ0FoS0dKdlpIbENJQ0U5SUc1MWJHd2dKaVlnWW05a2VVSXVkWFZwWkNrcElISmxkSFZ5YmpzS0lDQWdJSE5sYkdZdWNHOXpkRTFsYzNOaFoyVW9ld29nSUNBZ0lDQmliMlI1UVRvZ1ltOWtlVUV1ZFhWcFpDd0tJQ0FnSUNBZ1ltOWtlVUk2SUdKdlpIbENMblYxYVdRc0NpQWdJQ0FnSUc5d09pQW5aWFpsYm5RbkxBb2dJQ0FnSUNCMGVYQmxPaUFuWTI5c2JHbGtaVUpsWjJsdUp3b2dJQ0FnZlNrN0NpQWdmUW9nSUdaMWJtTjBhVzl1SUdWdGFYUkZibVJEYjI1MFlXTjBLRjl5WldZeUtTQjdDaUFnSUNCc1pYUWdld29nSUNBZ0lDQmliMlI1UVN3S0lDQWdJQ0FnWW05a2VVSUtJQ0FnSUgwZ1BTQmZjbVZtTWpzS0lDQWdJR2xtSUNnaEtHSnZaSGxCSUNFOUlHNTFiR3dnSmlZZ1ltOWtlVUV1ZFhWcFpDa2dmSHdnSVNoaWIyUjVRaUFoUFNCdWRXeHNJQ1ltSUdKdlpIbENMblYxYVdRcEtTQnlaWFIxY200N0NpQWdJQ0J6Wld4bUxuQnZjM1JOWlhOellXZGxLSHNLSUNBZ0lDQWdZbTlrZVVFNklHSnZaSGxCTG5WMWFXUXNDaUFnSUNBZ0lHSnZaSGxDT2lCaWIyUjVRaTUxZFdsa0xBb2dJQ0FnSUNCdmNEb2dKMlYyWlc1MEp5d0tJQ0FnSUNBZ2RIbHdaVG9nSjJOdmJHeHBaR1ZGYm1RbkNpQWdJQ0I5S1RzS0lDQjlDaUFnWTI5dWMzUWdhVzVwZENBOUlDaDNiM0pzWkN3Z1gzSmxaak1wSUQwK0lIc0tJQ0FnSUd4bGRDQjdDaUFnSUNBZ0lHRnNiRzkzVTJ4bFpYQXNDaUFnSUNBZ0lHRjRhWE5KYm1SbGVDQTlJREFzQ2lBZ0lDQWdJR0p5YjJGa2NHaGhjMlVzQ2lBZ0lDQWdJR1JsWm1GMWJIUkRiMjUwWVdOMFRXRjBaWEpwWVd3c0NpQWdJQ0FnSUdaeWFXTjBhVzl1UjNKaGRtbDBlU3dLSUNBZ0lDQWdaM0poZG1sMGVTd0tJQ0FnSUNBZ2FYUmxjbUYwYVc5dWN5d0tJQ0FnSUNBZ2NYVmhkRTV2Y20xaGJHbDZaVVpoYzNRc0NpQWdJQ0FnSUhGMVlYUk9iM0p0WVd4cGVtVlRhMmx3TEFvZ0lDQWdJQ0J6YjJ4MlpYSXNDaUFnSUNBZ0lIUnZiR1Z5WVc1alpRb2dJQ0FnZlNBOUlGOXlaV1l6T3dvZ0lDQWdkMjl5YkdRdVlXeHNiM2RUYkdWbGNDQTlJR0ZzYkc5M1UyeGxaWEE3Q2lBZ0lDQjNiM0pzWkM1bmNtRjJhWFI1TG5ObGRDZ3VMaTVuY21GMmFYUjVLVHNLSUNBZ0lIZHZjbXhrTG1aeWFXTjBhVzl1UjNKaGRtbDBlU0E5SUdaeWFXTjBhVzl1UjNKaGRtbDBlU0EvSUc1bGR5QldaV016S0M0dUxtWnlhV04wYVc5dVIzSmhkbWwwZVNrZ09pQjFibVJsWm1sdVpXUTdDaUFnSUNCM2IzSnNaQzV4ZFdGMFRtOXliV0ZzYVhwbFJtRnpkQ0E5SUhGMVlYUk9iM0p0WVd4cGVtVkdZWE4wT3dvZ0lDQWdkMjl5YkdRdWNYVmhkRTV2Y20xaGJHbDZaVk5yYVhBZ1BTQnhkV0YwVG05eWJXRnNhWHBsVTJ0cGNEc0tJQ0FnSUdsbUlDaHpiMngyWlhJZ1BUMDlJQ2RUY0d4cGRDY3BJSHNLSUNBZ0lDQWdkMjl5YkdRdWMyOXNkbVZ5SUQwZ2JtVjNJRk53YkdsMFUyOXNkbVZ5S0c1bGR5QkhVMU52YkhabGNpZ3BLVHNLSUNBZ0lIMEtJQ0FnSUdsbUlDaDNiM0pzWkM1emIyeDJaWElnYVc1emRHRnVZMlZ2WmlCSFUxTnZiSFpsY2lrZ2V3b2dJQ0FnSUNCM2IzSnNaQzV6YjJ4MlpYSXVkRzlzWlhKaGJtTmxJRDBnZEc5c1pYSmhibU5sT3dvZ0lDQWdJQ0IzYjNKc1pDNXpiMngyWlhJdWFYUmxjbUYwYVc5dWN5QTlJR2wwWlhKaGRHbHZibk03Q2lBZ0lDQjlDaUFnSUNCM2IzSnNaQzVpY205aFpIQm9ZWE5sSUQwZ1luSnZZV1J3YUdGelpTQTlQVDBnSjFOQlVDY2dQeUJ1WlhjZ1UwRlFRbkp2WVdSd2FHRnpaU2gzYjNKc1pDa2dPaUJ1WlhjZ1RtRnBkbVZDY205aFpIQm9ZWE5sS0NrN0NpQWdJQ0JwWmlBb2QyOXliR1F1WW5KdllXUndhR0Z6WlNCcGJuTjBZVzVqWlc5bUlGTkJVRUp5YjJGa2NHaGhjMlVwSUhzS0lDQWdJQ0FnZDI5eWJHUXVZbkp2WVdSd2FHRnpaUzVoZUdselNXNWtaWGdnUFNCaGVHbHpTVzVrWlhnN0NpQWdJQ0I5Q2lBZ0lDQjNiM0pzWkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaVpXZHBia052Ym5SaFkzUW5MQ0JsYldsMFFtVm5hVzVEYjI1MFlXTjBLVHNLSUNBZ0lIZHZjbXhrTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJWdVpFTnZiblJoWTNRbkxDQmxiV2wwUlc1a1EyOXVkR0ZqZENrN0NpQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtIZHZjbXhrTG1SbFptRjFiSFJEYjI1MFlXTjBUV0YwWlhKcFlXd3NJR1JsWm1GMWJIUkRiMjUwWVdOMFRXRjBaWEpwWVd3cE93b2dJSDA3Q2dvZ0lHTnZibk4wSUdselVXOXlWaUE5SUhZZ1BUNGdkaUJwYm5OMFlXNWpaVzltSUZGMVlYUmxjbTVwYjI0Z2ZId2dkaUJwYm5OMFlXNWpaVzltSUZabFl6TTdDaUFnWTI5dWMzUWdjM1JsY0NBOUlDaHpkR0YwWlN3Z1gzSmxaaWtnUFQ0Z2V3b2dJQ0FnYkdWMElIc0tJQ0FnSUNBZ2NHOXphWFJwYjI1ekxBb2dJQ0FnSUNCd2NtOXdjem9nZXdvZ0lDQWdJQ0FnSUcxaGVGTjFZbE4wWlhCekxBb2dJQ0FnSUNBZ0lITjBaWEJUYVhwbExBb2dJQ0FnSUNBZ0lIUnBiV1ZUYVc1alpVeGhjM1JEWVd4c1pXUUtJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ2NYVmhkR1Z5Ym1sdmJuTUtJQ0FnSUgwZ1BTQmZjbVZtT3dvZ0lDQWdjM1JoZEdVdWQyOXliR1F1YzNSbGNDaHpkR1Z3VTJsNlpTd2dkR2x0WlZOcGJtTmxUR0Z6ZEVOaGJHeGxaQ3dnYldGNFUzVmlVM1JsY0hNcE93b2dJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCemRHRjBaUzUzYjNKc1pDNWliMlJwWlhNdWJHVnVaM1JvT3lCcElDczlJREVwSUhzS0lDQWdJQ0FnWTI5dWMzUWdjQ0E5SUhOMFlYUmxMbmR2Y214a0xtSnZaR2xsYzF0cFhTNXdiM05wZEdsdmJqc0tJQ0FnSUNBZ1kyOXVjM1FnY1NBOUlITjBZWFJsTG5kdmNteGtMbUp2WkdsbGMxdHBYUzV4ZFdGMFpYSnVhVzl1T3dvZ0lDQWdJQ0J3YjNOcGRHbHZibk5iTXlBcUlHa2dLeUF3WFNBOUlIQXVlRHNLSUNBZ0lDQWdjRzl6YVhScGIyNXpXek1nS2lCcElDc2dNVjBnUFNCd0xuazdDaUFnSUNBZ0lIQnZjMmwwYVc5dWMxc3pJQ29nYVNBcklESmRJRDBnY0M1Nk93b2dJQ0FnSUNCeGRXRjBaWEp1YVc5dWMxczBJQ29nYVNBcklEQmRJRDBnY1M1NE93b2dJQ0FnSUNCeGRXRjBaWEp1YVc5dWMxczBJQ29nYVNBcklERmRJRDBnY1M1NU93b2dJQ0FnSUNCeGRXRjBaWEp1YVc5dWMxczBJQ29nYVNBcklESmRJRDBnY1M1Nk93b2dJQ0FnSUNCeGRXRjBaWEp1YVc5dWMxczBJQ29nYVNBcklETmRJRDBnY1M1M093b2dJQ0FnZlFvZ0lDQWdZMjl1YzNRZ2IySnpaWEoyWVhScGIyNXpJRDBnVzEwN0NpQWdJQ0JtYjNJZ0tHTnZibk4wSUdsa0lHOW1JRTlpYW1WamRDNXJaWGx6S0hOMFlYUmxMbk4xWW5OamNtbHdkR2x2Ym5NcEtTQjdDaUFnSUNBZ0lHTnZibk4wSUZ0MWRXbGtMQ0IwZVhCbExDQjBZWEpuWlhRZ1BTQW5ZbTlrYVdWekoxMGdQU0J6ZEdGMFpTNXpkV0p6WTNKcGNIUnBiMjV6VzJsa1hUc0tJQ0FnSUNBZ1kyOXVjM1FnZXdvZ0lDQWdJQ0FnSUdKdlpHbGxjeXdLSUNBZ0lDQWdJQ0IyWldocFkyeGxjd29nSUNBZ0lDQjlJRDBnYzNSaGRHVTdDaUFnSUNBZ0lHTnZibk4wSUhaaGJIVmxJRDBnZEdGeVoyVjBJRDA5UFNBbmRtVm9hV05zWlhNbklEOEtJQ0FnSUNBZ0x5OGdRSFJ6TFdWNGNHVmpkQzFsY25KdmNpQlVUMFJQT2lCRWFXWm1aWEpsYm5ScFlYUmxJSFJvWlhObElDSjBlWEJsY3lJS0lDQWdJQ0FnZG1Wb2FXTnNaWE5iZFhWcFpGMHVkbVZvYVdOc1pWdDBlWEJsWFNBNkNpQWdJQ0FnSUM4dklFQjBjeTFsZUhCbFkzUXRaWEp5YjNJZ1ZFOUVUem9nUkdsbVptVnlaVzUwYVdGMFpTQjBhR1Z6WlNBaWRIbHdaWE1pQ2lBZ0lDQWdJR0p2WkdsbGMxdDFkV2xrWFZ0MGVYQmxYVHNLSUNBZ0lDQWdZMjl1YzNRZ2MyVnlhV0ZzYVhwaFlteGxWbUZzZFdVZ1BTQnBjMUZ2Y2xZb2RtRnNkV1VwSUQ4Z2RtRnNkV1V1ZEc5QmNuSmhlU2dwSURvZ2RtRnNkV1U3Q2lBZ0lDQWdJRzlpYzJWeWRtRjBhVzl1Y3k1d2RYTm9LRnRPZFcxaVpYSW9hV1FwTENCelpYSnBZV3hwZW1GaWJHVldZV3gxWlN3S0lDQWdJQ0FnTHk4Z1FIUnpMV1Y0Y0dWamRDMWxjbkp2Y2lCVVQwUlBPaUJFYVdabVpYSmxiblJwWVhSbElIUm9aWE5sSUNKMGVYQmxjeUlLSUNBZ0lDQWdkSGx3WlYwcE93b2dJQ0FnZlFvZ0lDQWdZMjl1YzNRZ2JXVnpjMkZuWlNBOUlIc0tJQ0FnSUNBZ1lXTjBhWFpsT2lCemRHRjBaUzUzYjNKc1pDNW9ZWE5CWTNScGRtVkNiMlJwWlhNc0NpQWdJQ0FnSUc5aWMyVnlkbUYwYVc5dWN5d0tJQ0FnSUNBZ2IzQTZJQ2RtY21GdFpTY3NDaUFnSUNBZ0lIQnZjMmwwYVc5dWN5d0tJQ0FnSUNBZ2NYVmhkR1Z5Ym1sdmJuTUtJQ0FnSUgwN0NpQWdJQ0JwWmlBb2MzUmhkR1V1WW05a2FXVnpUbVZsWkZONWJtTnBibWNwSUhzS0lDQWdJQ0FnYldWemMyRm5aUzVpYjJScFpYTWdQU0J6ZEdGMFpTNTNiM0pzWkM1aWIyUnBaWE11Y21Wa2RXTmxLQ2hpYjJScFpYTXNJR0p2WkhrcElEMCtJSHNLSUNBZ0lDQWdJQ0JwWmlBb1ltOWtlUzUxZFdsa0tTQmliMlJwWlhNdWNIVnphQ2hpYjJSNUxuVjFhV1FwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJpYjJScFpYTTdDaUFnSUNBZ0lIMHNJRnRkS1RzS0lDQWdJQ0FnYzNSaGRHVXVZbTlrYVdWelRtVmxaRk41Ym1OcGJtY2dQU0JtWVd4elpUc0tJQ0FnSUgwS0lDQWdJSE5sYkdZdWNHOXpkRTFsYzNOaFoyVW9iV1Z6YzJGblpTd2dXM0J2YzJsMGFXOXVjeTVpZFdabVpYSXNJSEYxWVhSbGNtNXBiMjV6TG1KMVptWmxjbDBwT3dvZ0lIMDdDZ29nSUdOdmJuTjBJSE4wWVhSbElEMGdld29nSUNBZ1ltOWthV1Z6T2lCN2ZTd0tJQ0FnSUdKdlpHbGxjMDVsWldSVGVXNWphVzVuT2lCbVlXeHpaU3dLSUNBZ0lHTnZibk4wY21GcGJuUnpPaUI3ZlN3S0lDQWdJRzFoZEdWeWFXRnNjem9nZTMwc0NpQWdJQ0J5WVhsek9pQjdmU3dLSUNBZ0lITndjbWx1WjBsdWMzUmhibU5sY3pvZ2UzMHNDaUFnSUNCemNISnBibWR6T2lCN2ZTd0tJQ0FnSUhOMVluTmpjbWx3ZEdsdmJuTTZJSHQ5TEFvZ0lDQWdkbVZvYVdOc1pYTTZJSHQ5TEFvZ0lDQWdkMjl5YkdRNklHNWxkeUJYYjNKc1pDZ3BDaUFnZlRzS0NpQWdMeTh2SUR4eVpXWmxjbVZ1WTJVZ2JtOHRaR1ZtWVhWc2RDMXNhV0k5SW5SeWRXVWlMejRLSUNCamIyNXpkQ0JwYzBocGJtZGxRMjl1YzNSeVlXbHVkQ0E5SUdNZ1BUNGdZeUJwYm5OMFlXNWpaVzltSUVocGJtZGxRMjl1YzNSeVlXbHVkRHNLSUNCbWRXNWpkR2x2YmlCemVXNWpRbTlrYVdWektDa2dld29nSUNBZ2MzUmhkR1V1WW05a2FXVnpUbVZsWkZONWJtTnBibWNnUFNCMGNuVmxPd29nSUNBZ2MzUmhkR1V1WW05a2FXVnpJRDBnYzNSaGRHVXVkMjl5YkdRdVltOWthV1Z6TG5KbFpIVmpaU2dvWW05a2FXVnpMQ0JpYjJSNUtTQTlQaUJpYjJSNUxuVjFhV1FnUHlCN0NpQWdJQ0FnSUM0dUxtSnZaR2xsY3l3S0lDQWdJQ0FnVzJKdlpIa3VkWFZwWkYwNklHSnZaSGtLSUNBZ0lIMGdPaUJpYjJScFpYTXNJSHQ5S1RzS0lDQjlDaUFnWTI5dWMzUWdZbkp2WVdSd2FHRnpaWE1nUFNCN0NpQWdJQ0JPWVdsMlpVSnliMkZrY0doaGMyVXNDaUFnSUNCVFFWQkNjbTloWkhCb1lYTmxDaUFnZlRzS0lDQmpiMjV6ZENCamNtVmhkR1ZOWVhSbGNtbGhiQ0E5SUdOeVpXRjBaVTFoZEdWeWFXRnNSbUZqZEc5eWVTaHpkR0YwWlM1dFlYUmxjbWxoYkhNcE93b2dJSE5sYkdZdWIyNXRaWE56WVdkbElEMGdYM0psWmlBOVBpQjdDaUFnSUNCc1pYUWdld29nSUNBZ0lDQmtZWFJoQ2lBZ0lDQjlJRDBnWDNKbFpqc0tJQ0FnSUhOM2FYUmphQ0FvWkdGMFlTNXZjQ2tnZXdvZ0lDQWdJQ0JqWVhObElDZHBibWwwSnpvS0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQnBibWwwS0hOMFlYUmxMbmR2Y214a0xDQmtZWFJoTG5CeWIzQnpLVHNLSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdZMkZ6WlNBbmMzUmxjQ2M2Q2lBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ2MzUmxjQ2h6ZEdGMFpTd2daR0YwWVNrN0NpQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUdOaGMyVWdKMkZrWkVKdlpHbGxjeWM2Q2lBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ1lXUmtRbTlrYVdWektITjBZWFJsTENCamNtVmhkR1ZOWVhSbGNtbGhiQ3dnWkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0J6ZVc1alFtOWthV1Z6S0NrN0NpQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUdOaGMyVWdKM0psYlc5MlpVSnZaR2xsY3ljNkNpQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JrWVhSaExuVjFhV1F1YkdWdVozUm9PeUJwS3lzcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVXVkMjl5YkdRdWNtVnRiM1psUW05a2VTaHpkR0YwWlM1aWIyUnBaWE5iWkdGMFlTNTFkV2xrVzJsZFhTazdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVNBOUlFOWlhbVZqZEM1clpYbHpLSE4wWVhSbExuTjFZbk5qY21sd2RHbHZibk1wTG1acGJtUW9heUE5UGlCemRHRjBaUzV6ZFdKelkzSnBjSFJwYjI1elcydGRXekJkSUQwOVBTQmtZWFJoTG5WMWFXUmJhVjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYTJWNUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhOMFlYUmxMbk4xWW5OamNtbHdkR2x2Ym5OYmEyVjVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnYzNsdVkwSnZaR2xsY3lncE93b2dJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCallYTmxJQ2R6ZFdKelkzSnBZbVVuT2dvZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1FzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEN3S0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlFvZ0lDQWdJQ0FnSUNBZ2ZTQTlJR1JoZEdFdWNISnZjSE03Q2lBZ0lDQWdJQ0FnSUNCemRHRjBaUzV6ZFdKelkzSnBjSFJwYjI1elcybGtYU0E5SUZ0a1lYUmhMblYxYVdRc0lIUjVjR1VzSUhSaGNtZGxkRjA3Q2lBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJR05oYzJVZ0ozVnVjM1ZpYzJOeWFXSmxKem9LSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnYzNSaGRHVXVjM1ZpYzJOeWFYQjBhVzl1YzF0a1lYUmhMbkJ5YjNCelhUc0tJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ1kyRnpaU0FuYzJWMFVHOXphWFJwYjI0bk9nb2dJQ0FnSUNBZ0lITjBZWFJsTG1KdlpHbGxjMXRrWVhSaExuVjFhV1JkTG5CdmMybDBhVzl1TG5ObGRDaGtZWFJoTG5CeWIzQnpXekJkTENCa1lYUmhMbkJ5YjNCeld6RmRMQ0JrWVhSaExuQnliM0J6V3pKZEtUc0tJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnWTJGelpTQW5jMlYwVVhWaGRHVnlibWx2YmljNkNpQWdJQ0FnSUNBZ2MzUmhkR1V1WW05a2FXVnpXMlJoZEdFdWRYVnBaRjB1Y1hWaGRHVnlibWx2Ymk1elpYUW9aR0YwWVM1d2NtOXdjMXN3WFN3Z1pHRjBZUzV3Y205d2Mxc3hYU3dnWkdGMFlTNXdjbTl3YzFzeVhTd2daR0YwWVM1d2NtOXdjMXN6WFNrN0NpQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJR05oYzJVZ0ozTmxkRkp2ZEdGMGFXOXVKem9LSUNBZ0lDQWdJQ0J6ZEdGMFpTNWliMlJwWlhOYlpHRjBZUzUxZFdsa1hTNXhkV0YwWlhKdWFXOXVMbk5sZEVaeWIyMUZkV3hsY2loa1lYUmhMbkJ5YjNCeld6QmRMQ0JrWVhSaExuQnliM0J6V3pGZExDQmtZWFJoTG5CeWIzQnpXekpkS1RzS0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdZMkZ6WlNBbmMyVjBWbVZzYjJOcGRIa25PZ29nSUNBZ0lDQWdJSE4wWVhSbExtSnZaR2xsYzF0a1lYUmhMblYxYVdSZExuWmxiRzlqYVhSNUxuTmxkQ2hrWVhSaExuQnliM0J6V3pCZExDQmtZWFJoTG5CeWIzQnpXekZkTENCa1lYUmhMbkJ5YjNCeld6SmRLVHNLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuYzJWMFFXNW5kV3hoY2xabGJHOWphWFI1SnpvS0lDQWdJQ0FnSUNCemRHRjBaUzVpYjJScFpYTmJaR0YwWVM1MWRXbGtYUzVoYm1kMWJHRnlWbVZzYjJOcGRIa3VjMlYwS0dSaGRHRXVjSEp2Y0hOYk1GMHNJR1JoZEdFdWNISnZjSE5iTVYwc0lHUmhkR0V1Y0hKdmNITmJNbDBwT3dvZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQmpZWE5sSUNkelpYUk1hVzVsWVhKR1lXTjBiM0luT2dvZ0lDQWdJQ0FnSUhOMFlYUmxMbUp2WkdsbGMxdGtZWFJoTG5WMWFXUmRMbXhwYm1WaGNrWmhZM1J2Y2k1elpYUW9aR0YwWVM1d2NtOXdjMXN3WFN3Z1pHRjBZUzV3Y205d2Mxc3hYU3dnWkdGMFlTNXdjbTl3YzFzeVhTazdDaUFnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUdOaGMyVWdKM05sZEVGdVozVnNZWEpHWVdOMGIzSW5PZ29nSUNBZ0lDQWdJSE4wWVhSbExtSnZaR2xsYzF0a1lYUmhMblYxYVdSZExtRnVaM1ZzWVhKR1lXTjBiM0l1YzJWMEtHUmhkR0V1Y0hKdmNITmJNRjBzSUdSaGRHRXVjSEp2Y0hOYk1WMHNJR1JoZEdFdWNISnZjSE5iTWwwcE93b2dJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0JqWVhObElDZHpaWFJOWVhOekp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1aWIyUnBaWE5iWkdGMFlTNTFkV2xrWFM1dFlYTnpJRDBnWkdGMFlTNXdjbTl3Y3pzS0lDQWdJQ0FnSUNCemRHRjBaUzVpYjJScFpYTmJaR0YwWVM1MWRXbGtYUzUxY0dSaGRHVk5ZWE56VUhKdmNHVnlkR2xsY3lncE93b2dJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0JqWVhObElDZHpaWFJOWVhSbGNtbGhiQ2M2Q2lBZ0lDQWdJQ0FnYzNSaGRHVXVZbTlrYVdWelcyUmhkR0V1ZFhWcFpGMHViV0YwWlhKcFlXd2dQU0JrWVhSaExuQnliM0J6SUQ4Z1kzSmxZWFJsVFdGMFpYSnBZV3dvWkdGMFlTNXdjbTl3Y3lrZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQmpZWE5sSUNkelpYUk1hVzVsWVhKRVlXMXdhVzVuSnpvS0lDQWdJQ0FnSUNCemRHRjBaUzVpYjJScFpYTmJaR0YwWVM1MWRXbGtYUzVzYVc1bFlYSkVZVzF3YVc1bklEMGdaR0YwWVM1d2NtOXdjenNLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuYzJWMFFXNW5kV3hoY2tSaGJYQnBibWNuT2dvZ0lDQWdJQ0FnSUhOMFlYUmxMbUp2WkdsbGMxdGtZWFJoTG5WMWFXUmRMbUZ1WjNWc1lYSkVZVzF3YVc1bklEMGdaR0YwWVM1d2NtOXdjenNLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuYzJWMFFXeHNiM2RUYkdWbGNDYzZDaUFnSUNBZ0lDQWdjM1JoZEdVdVltOWthV1Z6VzJSaGRHRXVkWFZwWkYwdVlXeHNiM2RUYkdWbGNDQTlJR1JoZEdFdWNISnZjSE03Q2lBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lHTmhjMlVnSjNObGRGTnNaV1Z3VTNCbFpXUk1hVzFwZENjNkNpQWdJQ0FnSUNBZ2MzUmhkR1V1WW05a2FXVnpXMlJoZEdFdWRYVnBaRjB1YzJ4bFpYQlRjR1ZsWkV4cGJXbDBJRDBnWkdGMFlTNXdjbTl3Y3pzS0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdZMkZ6WlNBbmMyVjBVMnhsWlhCVWFXMWxUR2x0YVhRbk9nb2dJQ0FnSUNBZ0lITjBZWFJsTG1KdlpHbGxjMXRrWVhSaExuVjFhV1JkTG5Oc1pXVndWR2x0WlV4cGJXbDBJRDBnWkdGMFlTNXdjbTl3Y3pzS0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdZMkZ6WlNBbmMyVjBRMjlzYkdsemFXOXVSbWxzZEdWeVIzSnZkWEFuT2dvZ0lDQWdJQ0FnSUhOMFlYUmxMbUp2WkdsbGMxdGtZWFJoTG5WMWFXUmRMbU52Ykd4cGMybHZia1pwYkhSbGNrZHliM1Z3SUQwZ1pHRjBZUzV3Y205d2N6c0tJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnWTJGelpTQW5jMlYwUTI5c2JHbHphVzl1Um1sc2RHVnlUV0Z6YXljNkNpQWdJQ0FnSUNBZ2MzUmhkR1V1WW05a2FXVnpXMlJoZEdFdWRYVnBaRjB1WTI5c2JHbHphVzl1Um1sc2RHVnlUV0Z6YXlBOUlHUmhkR0V1Y0hKdmNITTdDaUFnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUdOaGMyVWdKM05sZEVOdmJHeHBjMmx2YmxKbGMzQnZibk5sSnpvS0lDQWdJQ0FnSUNCemRHRjBaUzVpYjJScFpYTmJaR0YwWVM1MWRXbGtYUzVqYjJ4c2FYTnBiMjVTWlhOd2IyNXpaU0E5SUdSaGRHRXVjSEp2Y0hNN0NpQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJR05oYzJVZ0ozTmxkRVpwZUdWa1VtOTBZWFJwYjI0bk9nb2dJQ0FnSUNBZ0lITjBZWFJsTG1KdlpHbGxjMXRrWVhSaExuVjFhV1JkTG1acGVHVmtVbTkwWVhScGIyNGdQU0JrWVhSaExuQnliM0J6T3dvZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQmpZWE5sSUNkelpYUkdjbWxqZEdsdmJrZHlZWFpwZEhrbk9nb2dJQ0FnSUNBZ0lITjBZWFJsTG5kdmNteGtMbVp5YVdOMGFXOXVSM0poZG1sMGVTQTlJR1JoZEdFdWNISnZjSE1nUHlCdVpYY2dWbVZqTXlndUxpNWtZWFJoTG5CeWIzQnpLU0E2SUhWdVpHVm1hVzVsWkRzS0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdZMkZ6WlNBbmMyVjBTWE5VY21sbloyVnlKem9LSUNBZ0lDQWdJQ0J6ZEdGMFpTNWliMlJwWlhOYlpHRjBZUzUxZFdsa1hTNXBjMVJ5YVdkblpYSWdQU0JrWVhSaExuQnliM0J6T3dvZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQmpZWE5sSUNkelpYUkhjbUYyYVhSNUp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1M2IzSnNaQzVuY21GMmFYUjVMbk5sZENoa1lYUmhMbkJ5YjNCeld6QmRMQ0JrWVhSaExuQnliM0J6V3pGZExDQmtZWFJoTG5CeWIzQnpXekpkS1RzS0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdZMkZ6WlNBbmMyVjBWRzlzWlhKaGJtTmxKem9LSUNBZ0lDQWdJQ0JwWmlBb2MzUmhkR1V1ZDI5eWJHUXVjMjlzZG1WeUlHbHVjM1JoYm1ObGIyWWdSMU5UYjJ4MlpYSXBJSHNLSUNBZ0lDQWdJQ0FnSUhOMFlYUmxMbmR2Y214a0xuTnZiSFpsY2k1MGIyeGxjbUZ1WTJVZ1BTQmtZWFJoTG5CeWIzQnpPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuYzJWMFNYUmxjbUYwYVc5dWN5YzZDaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxMbmR2Y214a0xuTnZiSFpsY2lCcGJuTjBZVzVqWlc5bUlFZFRVMjlzZG1WeUtTQjdDaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTNTNiM0pzWkM1emIyeDJaWEl1YVhSbGNtRjBhVzl1Y3lBOUlHUmhkR0V1Y0hKdmNITTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNCallYTmxJQ2R6WlhSQ2NtOWhaSEJvWVhObEp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1M2IzSnNaQzVpY205aFpIQm9ZWE5sSUQwZ2JtVjNJQ2hpY205aFpIQm9ZWE5sYzF0Z0pIdGtZWFJoTG5CeWIzQnpmVUp5YjJGa2NHaGhjMlZnWFNCOGZDQk9ZV2wyWlVKeWIyRmtjR2hoYzJVcEtITjBZWFJsTG5kdmNteGtLVHNLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuYzJWMFFYaHBjMGx1WkdWNEp6b0tJQ0FnSUNBZ0lDQnBaaUFvYzNSaGRHVXVkMjl5YkdRdVluSnZZV1J3YUdGelpTQnBibk4wWVc1alpXOW1JRk5CVUVKeWIyRmtjR2hoYzJVcElIc0tJQ0FnSUNBZ0lDQWdJSE4wWVhSbExuZHZjbXhrTG1KeWIyRmtjR2hoYzJVdVlYaHBjMGx1WkdWNElEMGdaR0YwWVM1d2NtOXdjeUE5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJR1JoZEdFdWNISnZjSE1nUFQwOUlHNTFiR3dnUHlBd0lEb2daR0YwWVM1d2NtOXdjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lHTmhjMlVnSjJGd2NHeDVSbTl5WTJVbk9nb2dJQ0FnSUNBZ0lITjBZWFJsTG1KdlpHbGxjMXRrWVhSaExuVjFhV1JkTG1Gd2NHeDVSbTl5WTJVb2JtVjNJRlpsWXpNb0xpNHVaR0YwWVM1d2NtOXdjMXN3WFNrc0lHNWxkeUJXWldNektDNHVMbVJoZEdFdWNISnZjSE5iTVYwcEtUc0tJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnWTJGelpTQW5ZWEJ3YkhsSmJYQjFiSE5sSnpvS0lDQWdJQ0FnSUNCemRHRjBaUzVpYjJScFpYTmJaR0YwWVM1MWRXbGtYUzVoY0hCc2VVbHRjSFZzYzJVb2JtVjNJRlpsWXpNb0xpNHVaR0YwWVM1d2NtOXdjMXN3WFNrc0lHNWxkeUJXWldNektDNHVMbVJoZEdFdWNISnZjSE5iTVYwcEtUc0tJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnWTJGelpTQW5ZWEJ3YkhsTWIyTmhiRVp2Y21ObEp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1aWIyUnBaWE5iWkdGMFlTNTFkV2xrWFM1aGNIQnNlVXh2WTJGc1JtOXlZMlVvYm1WM0lGWmxZek1vTGk0dVpHRjBZUzV3Y205d2Mxc3dYU2tzSUc1bGR5QldaV016S0M0dUxtUmhkR0V1Y0hKdmNITmJNVjBwS1RzS0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdZMkZ6WlNBbllYQndiSGxNYjJOaGJFbHRjSFZzYzJVbk9nb2dJQ0FnSUNBZ0lITjBZWFJsTG1KdlpHbGxjMXRrWVhSaExuVjFhV1JkTG1Gd2NHeDVURzlqWVd4SmJYQjFiSE5sS0c1bGR5QldaV016S0M0dUxtUmhkR0V1Y0hKdmNITmJNRjBwTENCdVpYY2dWbVZqTXlndUxpNWtZWFJoTG5CeWIzQnpXekZkS1NrN0NpQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJR05oYzJVZ0oyRndjR3g1Vkc5eWNYVmxKem9LSUNBZ0lDQWdJQ0J6ZEdGMFpTNWliMlJwWlhOYlpHRjBZUzUxZFdsa1hTNWhjSEJzZVZSdmNuRjFaU2h1WlhjZ1ZtVmpNeWd1TGk1a1lYUmhMbkJ5YjNCeld6QmRLU2s3Q2lBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lHTmhjMlVnSjJGa1pFTnZibk4wY21GcGJuUW5PZ29nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUdGa1pFTnZibk4wY21GcGJuUW9jM1JoZEdVc0lHUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0JqWVhObElDZHlaVzF2ZG1WRGIyNXpkSEpoYVc1MEp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1M2IzSnNaQzVqYjI1emRISmhhVzUwY3k1bWFXeDBaWElvWDNKbFpqSWdQVDRnZXdvZ0lDQWdJQ0FnSUNBZ2JHVjBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RYVnBaQW9nSUNBZ0lDQWdJQ0FnZlNBOUlGOXlaV1l5T3dvZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWMWFXUWdQVDA5SUdSaGRHRXVkWFZwWkRzS0lDQWdJQ0FnSUNCOUtTNXRZWEFvWXlBOVBpQnpkR0YwWlM1M2IzSnNaQzV5WlcxdmRtVkRiMjV6ZEhKaGFXNTBLR01wS1RzS0lDQWdJQ0FnSUNCcFppQW9jM1JoZEdVdVkyOXVjM1J5WVdsdWRITmJaR0YwWVM1MWRXbGtYU2tnZXdvZ0lDQWdJQ0FnSUNBZ2MzUmhkR1V1ZDI5eWJHUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduY0c5emRGTjBaWEFuTENCemRHRjBaUzVqYjI1emRISmhhVzUwYzF0a1lYUmhMblYxYVdSZEtUc0tJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnpkR0YwWlM1amIyNXpkSEpoYVc1MGMxdGtZWFJoTG5WMWFXUmRPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuWlc1aFlteGxRMjl1YzNSeVlXbHVkQ2M2Q2lBZ0lDQWdJQ0FnYzNSaGRHVXVkMjl5YkdRdVkyOXVjM1J5WVdsdWRITXVabWxzZEdWeUtHTWdQVDRnWXk1MWRXbGtJRDA5UFNCa1lYUmhMblYxYVdRcExtMWhjQ2hqSUQwK0lHTXVaVzVoWW14bEtDa3BPd29nSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNCallYTmxJQ2RrYVhOaFlteGxRMjl1YzNSeVlXbHVkQ2M2Q2lBZ0lDQWdJQ0FnYzNSaGRHVXVkMjl5YkdRdVkyOXVjM1J5WVdsdWRITXVabWxzZEdWeUtHTWdQVDRnWXk1MWRXbGtJRDA5UFNCa1lYUmhMblYxYVdRcExtMWhjQ2hqSUQwK0lHTXVaR2x6WVdKc1pTZ3BLVHNLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuWlc1aFlteGxRMjl1YzNSeVlXbHVkRTF2ZEc5eUp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1M2IzSnNaQzVqYjI1emRISmhhVzUwY3k1bWFXeDBaWElvWXlBOVBpQmpMblYxYVdRZ1BUMDlJR1JoZEdFdWRYVnBaQ2t1Wm1sc2RHVnlLR2x6U0dsdVoyVkRiMjV6ZEhKaGFXNTBLUzV0WVhBb1l5QTlQaUJqTG1WdVlXSnNaVTF2ZEc5eUtDa3BPd29nSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNCallYTmxJQ2RrYVhOaFlteGxRMjl1YzNSeVlXbHVkRTF2ZEc5eUp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1M2IzSnNaQzVqYjI1emRISmhhVzUwY3k1bWFXeDBaWElvWXlBOVBpQmpMblYxYVdRZ1BUMDlJR1JoZEdFdWRYVnBaQ2t1Wm1sc2RHVnlLR2x6U0dsdVoyVkRiMjV6ZEhKaGFXNTBLUzV0WVhBb1l5QTlQaUJqTG1ScGMyRmliR1ZOYjNSdmNpZ3BLVHNLSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ1kyRnpaU0FuYzJWMFEyOXVjM1J5WVdsdWRFMXZkRzl5VTNCbFpXUW5PZ29nSUNBZ0lDQWdJSE4wWVhSbExuZHZjbXhrTG1OdmJuTjBjbUZwYm5SekxtWnBiSFJsY2loaklEMCtJR011ZFhWcFpDQTlQVDBnWkdGMFlTNTFkV2xrS1M1bWFXeDBaWElvYVhOSWFXNW5aVU52Ym5OMGNtRnBiblFwTG0xaGNDaGpJRDArSUdNdWMyVjBUVzkwYjNKVGNHVmxaQ2hrWVhSaExuQnliM0J6S1NrN0NpQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJR05oYzJVZ0ozTmxkRU52Ym5OMGNtRnBiblJOYjNSdmNrMWhlRVp2Y21ObEp6b0tJQ0FnSUNBZ0lDQnpkR0YwWlM1M2IzSnNaQzVqYjI1emRISmhhVzUwY3k1bWFXeDBaWElvWXlBOVBpQmpMblYxYVdRZ1BUMDlJR1JoZEdFdWRYVnBaQ2t1Wm1sc2RHVnlLR2x6U0dsdVoyVkRiMjV6ZEhKaGFXNTBLUzV0WVhBb1l5QTlQaUJqTG5ObGRFMXZkRzl5VFdGNFJtOXlZMlVvWkdGMFlTNXdjbTl3Y3lrcE93b2dJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0JqWVhObElDZGhaR1JUY0hKcGJtY25PZ29nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUdGa1pGTndjbWx1WnloemRHRjBaU3dnWkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lHTmhjMlVnSjNObGRGTndjbWx1WjFOMGFXWm1ibVZ6Y3ljNkNpQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdjM1JoZEdVdWMzQnlhVzVuU1c1emRHRnVZMlZ6VzJSaGRHRXVkWFZwWkYwdWMzUnBabVp1WlhOeklEMGdaR0YwWVM1d2NtOXdjenNLSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdZMkZ6WlNBbmMyVjBVM0J5YVc1blVtVnpkRXhsYm1kMGFDYzZDaUFnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnYzNSaGRHVXVjM0J5YVc1blNXNXpkR0Z1WTJWelcyUmhkR0V1ZFhWcFpGMHVjbVZ6ZEV4bGJtZDBhQ0E5SUdSaGRHRXVjSEp2Y0hNN0NpQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUdOaGMyVWdKM05sZEZOd2NtbHVaMFJoYlhCcGJtY25PZ29nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUhOMFlYUmxMbk53Y21sdVowbHVjM1JoYm1ObGMxdGtZWFJoTG5WMWFXUmRMbVJoYlhCcGJtY2dQU0JrWVhSaExuQnliM0J6T3dvZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0JqWVhObElDZHlaVzF2ZG1WVGNISnBibWNuT2dvZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG5kdmNteGtMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNCdmMzUlRkR1Z3Snl3Z2MzUmhkR1V1YzNCeWFXNW5jMXRrWVhSaExuVjFhV1JkS1RzS0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnWTJGelpTQW5ZV1JrVW1GNUp6b0tJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0JoWkdSU1lYa29jM1JoZEdVc0lHUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0JqWVhObElDZHlaVzF2ZG1WU1lYa25PZ29nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUhOMFlYUmxMbmR2Y214a0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM0J5WlZOMFpYQW5MQ0J6ZEdGMFpTNXlZWGx6VzJSaGRHRXVkWFZwWkYwcE93b2dJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElITjBZWFJsTG5KaGVYTmJaR0YwWVM1MWRXbGtYVHNLSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdZMkZ6WlNBbllXUmtVbUY1WTJGemRGWmxhR2xqYkdVbk9nb2dJQ0FnSUNBZ0lIc0tJQ0FnSUNBZ0lDQWdJR0ZrWkZKaGVXTmhjM1JXWldocFkyeGxLSE4wWVhSbExDQmtZWFJoS1RzS0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnWTJGelpTQW5jbVZ0YjNabFVtRjVZMkZ6ZEZabGFHbGpiR1VuT2dvZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG5kdmNteGtMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNCeVpWTjBaWEFuTENCemRHRjBaUzUyWldocFkyeGxjMXRrWVhSaExuVjFhV1JkTG5CeVpWTjBaWEFwT3dvZ0lDQWdJQ0FnSUNBZ2MzUmhkR1V1ZDI5eWJHUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduY0c5emRGTjBaWEFuTENCemRHRjBaUzUyWldocFkyeGxjMXRrWVhSaExuVjFhV1JkTG5CdmMzUlRkR1Z3S1RzS0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG5abGFHbGpiR1Z6VzJSaGRHRXVkWFZwWkYwdWRtVm9hV05zWlM1M2IzSnNaQ0E5SUc1MWJHdzdDaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVWdjM1JoZEdVdWRtVm9hV05zWlhOYlpHRjBZUzUxZFdsa1hUc0tJQ0FnSUNBZ0lDQWdJR052Ym5OMElHdGxlU0E5SUU5aWFtVmpkQzVyWlhsektITjBZWFJsTG5OMVluTmpjbWx3ZEdsdmJuTXBMbVpwYm1Rb2F5QTlQaUJ6ZEdGMFpTNXpkV0p6WTNKcGNIUnBiMjV6VzJ0ZFd6QmRJRDA5UFNCa1lYUmhMblYxYVdRcE93b2dJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTa2dld29nSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnYzNSaGRHVXVjM1ZpYzJOeWFYQjBhVzl1YzF0clpYbGRPd29nSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0JqWVhObElDZHpaWFJTWVhsallYTjBWbVZvYVdOc1pWTjBaV1Z5YVc1blZtRnNkV1VuT2dvZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUZ0MllXeDFaU3dnZDJobFpXeEpibVJsZUYwZ1BTQmtZWFJoTG5CeWIzQnpPd29nSUNBZ0lDQWdJQ0FnYzNSaGRHVXVkbVZvYVdOc1pYTmJaR0YwWVM1MWRXbGtYUzUyWldocFkyeGxMbk5sZEZOMFpXVnlhVzVuVm1Gc2RXVW9kbUZzZFdVc0lIZG9aV1ZzU1c1a1pYZ3BPd29nSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQmpZWE5sSUNkaGNIQnNlVkpoZVdOaGMzUldaV2hwWTJ4bFJXNW5hVzVsUm05eVkyVW5PZ29nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRnQyWVd4MVpTd2dkMmhsWld4SmJtUmxlRjBnUFNCa1lYUmhMbkJ5YjNCek93b2dJQ0FnSUNBZ0lDQWdjM1JoZEdVdWRtVm9hV05zWlhOYlpHRjBZUzUxZFdsa1hTNTJaV2hwWTJ4bExtRndjR3g1Ulc1bmFXNWxSbTl5WTJVb2RtRnNkV1VzSUhkb1pXVnNTVzVrWlhncE93b2dJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNCallYTmxJQ2R6WlhSU1lYbGpZWE4wVm1Wb2FXTnNaVUp5WVd0bEp6b0tJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmJZbkpoYTJVc0lIZG9aV1ZzU1c1a1pYaGRJRDBnWkdGMFlTNXdjbTl3Y3pzS0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG5abGFHbGpiR1Z6VzJSaGRHRXVkWFZwWkYwdWRtVm9hV05zWlM1elpYUkNjbUZyWlNoaWNtRnJaU3dnZDJobFpXeEpibVJsZUNrN0NpQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUdOaGMyVWdKMkZrWkVOdmJuUmhZM1JOWVhSbGNtbGhiQ2M2Q2lBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ1lXUmtRMjl1ZEdGamRFMWhkR1Z5YVdGc0tITjBZWFJsTG5kdmNteGtMQ0JqY21WaGRHVk5ZWFJsY21saGJDd2daR0YwWVM1d2NtOXdjeXdnWkdGMFlTNTFkV2xrS1RzS0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnWTJGelpTQW5jbVZ0YjNabFEyOXVkR0ZqZEUxaGRHVnlhV0ZzSnpvS0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1WRGIyNTBZV04wVFdGMFpYSnBZV3dvYzNSaGRHVXVkMjl5YkdRc0lHUmhkR0V1ZFhWcFpDazdDaUFnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lHTmhjMlVnSjNkaGEyVlZjQ2M2Q2lBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ2MzUmhkR1V1WW05a2FXVnpXMlJoZEdFdWRYVnBaRjB1ZDJGclpWVndLQ2s3Q2lBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJR05oYzJVZ0ozTnNaV1Z3SnpvS0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1aWIyUnBaWE5iWkdGMFlTNTFkV2xrWFM1emJHVmxjQ2dwT3dvZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUgwN0NncDlLU2dwT3dvSycsIG51bGwsIGZhbHNlKTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuY2xhc3MgQ2Fubm9uV29ya2VyQVBJIGV4dGVuZHMgRXZlbnRFbWl0dGVyJDEge1xuICBnZXQgYXhpc0luZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5heGlzSW5kZXg7XG4gIH1cbiAgc2V0IGF4aXNJbmRleCh2YWx1ZSkge1xuICAgIHRoaXMuY29uZmlnLmF4aXNJbmRleCA9IHZhbHVlO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRBeGlzSW5kZXgnLFxuICAgICAgcHJvcHM6IHZhbHVlXG4gICAgfSk7XG4gIH1cbiAgZ2V0IGJyb2FkcGhhc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmJyb2FkcGhhc2U7XG4gIH1cbiAgc2V0IGJyb2FkcGhhc2UodmFsdWUpIHtcbiAgICB0aGlzLmNvbmZpZy5icm9hZHBoYXNlID0gdmFsdWU7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldEJyb2FkcGhhc2UnLFxuICAgICAgcHJvcHM6IHZhbHVlXG4gICAgfSk7XG4gIH1cbiAgZ2V0IGZyaWN0aW9uR3Jhdml0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZnJpY3Rpb25HcmF2aXR5O1xuICB9XG4gIHNldCBmcmljdGlvbkdyYXZpdHkodmFsdWUpIHtcbiAgICB0aGlzLmNvbmZpZy5mcmljdGlvbkdyYXZpdHkgPSB2YWx1ZTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0RnJpY3Rpb25HcmF2aXR5JyxcbiAgICAgIHByb3BzOiB2YWx1ZVxuICAgIH0pO1xuICB9XG4gIGdldCBncmF2aXR5KCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5ncmF2aXR5O1xuICB9XG4gIHNldCBncmF2aXR5KHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcuZ3Jhdml0eSA9IHZhbHVlO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRHcmF2aXR5JyxcbiAgICAgIHByb3BzOiB2YWx1ZVxuICAgIH0pO1xuICB9XG4gIGdldCBpdGVyYXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5pdGVyYXRpb25zO1xuICB9XG4gIHNldCBpdGVyYXRpb25zKHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcuaXRlcmF0aW9ucyA9IHZhbHVlO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRJdGVyYXRpb25zJyxcbiAgICAgIHByb3BzOiB2YWx1ZVxuICAgIH0pO1xuICB9XG4gIGdldCB0b2xlcmFuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnRvbGVyYW5jZTtcbiAgfVxuICBzZXQgdG9sZXJhbmNlKHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcudG9sZXJhbmNlID0gdmFsdWU7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldFRvbGVyYW5jZScsXG4gICAgICBwcm9wczogdmFsdWVcbiAgICB9KTtcbiAgfVxuICBtZXNzYWdlUXVldWUgPSBbXTtcbiAgd29ya2VyID0gbnVsbDtcbiAgY29uc3RydWN0b3IoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhbGxvd1NsZWVwID0gZmFsc2UsXG4gICAgICBheGlzSW5kZXggPSAwLFxuICAgICAgYnJvYWRwaGFzZSA9ICdOYWl2ZScsXG4gICAgICBkZWZhdWx0Q29udGFjdE1hdGVyaWFsID0ge1xuICAgICAgICBjb250YWN0RXF1YXRpb25TdGlmZm5lc3M6IDFlNlxuICAgICAgfSxcbiAgICAgIGZyaWN0aW9uR3Jhdml0eSA9IG51bGwsXG4gICAgICBncmF2aXR5ID0gWzAsIC05LjgxLCAwXSxcbiAgICAgIGl0ZXJhdGlvbnMgPSA1LFxuICAgICAgcXVhdE5vcm1hbGl6ZUZhc3QgPSBmYWxzZSxcbiAgICAgIHF1YXROb3JtYWxpemVTa2lwID0gMCxcbiAgICAgIHNpemUgPSAxMDAwLFxuICAgICAgc29sdmVyID0gJ0dTJyxcbiAgICAgIHRvbGVyYW5jZSA9IDAuMDAxXG4gICAgfSA9IF9yZWY7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGFsbG93U2xlZXAsXG4gICAgICBheGlzSW5kZXgsXG4gICAgICBicm9hZHBoYXNlLFxuICAgICAgZGVmYXVsdENvbnRhY3RNYXRlcmlhbCxcbiAgICAgIGZyaWN0aW9uR3Jhdml0eSxcbiAgICAgIGdyYXZpdHksXG4gICAgICBpdGVyYXRpb25zLFxuICAgICAgcXVhdE5vcm1hbGl6ZUZhc3QsXG4gICAgICBxdWF0Tm9ybWFsaXplU2tpcCxcbiAgICAgIHNpemUsXG4gICAgICBzb2x2ZXIsXG4gICAgICB0b2xlcmFuY2VcbiAgICB9O1xuICAgIHRoaXMuYnVmZmVycyA9IHtcbiAgICAgIHBvc2l0aW9uczogbmV3IEZsb2F0MzJBcnJheShzaXplICogMyksXG4gICAgICBxdWF0ZXJuaW9uczogbmV3IEZsb2F0MzJBcnJheShzaXplICogNClcbiAgICB9O1xuICB9XG4gIGFkZEJvZGllcyhfcmVmMikge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHR5cGUsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYyO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdhZGRCb2RpZXMnLFxuICAgICAgcHJvcHMsXG4gICAgICB0eXBlLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIGFkZENvbnN0cmFpbnQoX3JlZjMpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHM6IFtyZWZBLCByZWZCLCBvcHRuc10sXG4gICAgICB0eXBlLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMztcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnYWRkQ29uc3RyYWludCcsXG4gICAgICBwcm9wczogW3JlZkEsIHJlZkIsIG9wdG5zXSxcbiAgICAgIHR5cGUsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgYWRkQ29udGFjdE1hdGVyaWFsKF9yZWY0KSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNDtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnYWRkQ29udGFjdE1hdGVyaWFsJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIGFkZFJheShfcmVmNSkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjU7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2FkZFJheScsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBhZGRSYXljYXN0VmVoaWNsZShfcmVmNikge1xuICAgIGxldCB7XG4gICAgICBwcm9wczogW2NoYXNzaXNCb2R5VVVJRCwgd2hlZWxVVUlEcywgd2hlZWxJbmZvcywgaW5kZXhGb3J3YXJkQXhpcywgaW5kZXhSaWdodEF4aXMsIGluZGV4VXBBeGlzXSxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjY7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2FkZFJheWNhc3RWZWhpY2xlJyxcbiAgICAgIHByb3BzOiBbY2hhc3Npc0JvZHlVVUlELCB3aGVlbFVVSURzLCB3aGVlbEluZm9zLCBpbmRleEZvcndhcmRBeGlzLCBpbmRleFJpZ2h0QXhpcywgaW5kZXhVcEF4aXNdLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIGFkZFNwcmluZyhfcmVmNykge1xuICAgIGxldCB7XG4gICAgICBwcm9wczogW3JlZkEsIHJlZkIsIG9wdG5zXSxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjc7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2FkZFNwcmluZycsXG4gICAgICBwcm9wczogW3JlZkEsIHJlZkIsIG9wdG5zXSxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBhcHBseUZvcmNlKF9yZWY4KSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmODtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnYXBwbHlGb3JjZScsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBhcHBseUltcHVsc2UoX3JlZjkpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWY5O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdhcHBseUltcHVsc2UnLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgYXBwbHlMb2NhbEZvcmNlKF9yZWYxMCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjEwO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdhcHBseUxvY2FsRm9yY2UnLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgYXBwbHlMb2NhbEltcHVsc2UoX3JlZjExKSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMTE7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2FwcGx5TG9jYWxJbXB1bHNlJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIGFwcGx5UmF5Y2FzdFZlaGljbGVFbmdpbmVGb3JjZShfcmVmMTIpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYxMjtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnYXBwbHlSYXljYXN0VmVoaWNsZUVuZ2luZUZvcmNlJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIGFwcGx5VG9ycXVlKF9yZWYxMykge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjEzO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdhcHBseVRvcnF1ZScsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBjb25uZWN0KCkge1xuICAgIHRoaXMud29ya2VyID0gbmV3IFdvcmtlckZhY3RvcnkoKTtcbiAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSBtZXNzYWdlID0+IHtcbiAgICAgIGlmIChtZXNzYWdlLmRhdGEub3AgPT09ICdmcmFtZScpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLnBvc2l0aW9ucyA9IG1lc3NhZ2UuZGF0YS5wb3NpdGlvbnM7XG4gICAgICAgIHRoaXMuYnVmZmVycy5xdWF0ZXJuaW9ucyA9IG1lc3NhZ2UuZGF0YS5xdWF0ZXJuaW9ucztcbiAgICAgICAgdGhpcy5lbWl0KG1lc3NhZ2UuZGF0YS5vcCwgbWVzc2FnZS5kYXRhKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KG1lc3NhZ2UuZGF0YS50eXBlLCBtZXNzYWdlLmRhdGEpO1xuICAgIH07XG4gICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIHRoaXMubWVzc2FnZVF1ZXVlKSB7XG4gICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID0gMDtcbiAgfVxuICBkaXNhYmxlQ29uc3RyYWludChfcmVmMTQpIHtcbiAgICBsZXQge1xuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMTQ7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2Rpc2FibGVDb25zdHJhaW50JyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBkaXNhYmxlQ29uc3RyYWludE1vdG9yKF9yZWYxNSkge1xuICAgIGxldCB7XG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYxNTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnZGlzYWJsZUNvbnN0cmFpbnRNb3RvcicsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgZGlzY29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy53b3JrZXIpIHRoaXMud29ya2VyLm9ubWVzc2FnZSA9IG51bGw7XG4gIH1cbiAgZW5hYmxlQ29uc3RyYWludChfcmVmMTYpIHtcbiAgICBsZXQge1xuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMTY7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2VuYWJsZUNvbnN0cmFpbnQnLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIGVuYWJsZUNvbnN0cmFpbnRNb3RvcihfcmVmMTcpIHtcbiAgICBsZXQge1xuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMTc7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2VuYWJsZUNvbnN0cmFpbnRNb3RvcicsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBhbGxvd1NsZWVwLFxuICAgICAgYXhpc0luZGV4LFxuICAgICAgYnJvYWRwaGFzZSxcbiAgICAgIGRlZmF1bHRDb250YWN0TWF0ZXJpYWwsXG4gICAgICBmcmljdGlvbkdyYXZpdHksXG4gICAgICBncmF2aXR5LFxuICAgICAgaXRlcmF0aW9ucyxcbiAgICAgIHF1YXROb3JtYWxpemVGYXN0LFxuICAgICAgcXVhdE5vcm1hbGl6ZVNraXAsXG4gICAgICBzb2x2ZXIsXG4gICAgICB0b2xlcmFuY2VcbiAgICB9ID0gdGhpcy5jb25maWc7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ2luaXQnLFxuICAgICAgcHJvcHM6IHtcbiAgICAgICAgYWxsb3dTbGVlcCxcbiAgICAgICAgYXhpc0luZGV4LFxuICAgICAgICBicm9hZHBoYXNlLFxuICAgICAgICBkZWZhdWx0Q29udGFjdE1hdGVyaWFsLFxuICAgICAgICBmcmljdGlvbkdyYXZpdHksXG4gICAgICAgIGdyYXZpdHksXG4gICAgICAgIGl0ZXJhdGlvbnMsXG4gICAgICAgIHF1YXROb3JtYWxpemVGYXN0LFxuICAgICAgICBxdWF0Tm9ybWFsaXplU2tpcCxcbiAgICAgICAgc29sdmVyLFxuICAgICAgICB0b2xlcmFuY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZW1vdmVCb2RpZXMoX3JlZjE4KSB7XG4gICAgbGV0IHtcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjE4O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdyZW1vdmVCb2RpZXMnLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHJlbW92ZUNvbnN0cmFpbnQoX3JlZjE5KSB7XG4gICAgbGV0IHtcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjE5O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdyZW1vdmVDb25zdHJhaW50JyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICByZW1vdmVDb250YWN0TWF0ZXJpYWwoX3JlZjIwKSB7XG4gICAgbGV0IHtcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjIwO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdyZW1vdmVDb250YWN0TWF0ZXJpYWwnLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHJlbW92ZVJheShfcmVmMjEpIHtcbiAgICBsZXQge1xuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMjE7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3JlbW92ZVJheScsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlUmF5Y2FzdFZlaGljbGUoX3JlZjIyKSB7XG4gICAgbGV0IHtcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjIyO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdyZW1vdmVSYXljYXN0VmVoaWNsZScsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlU3ByaW5nKF9yZWYyMykge1xuICAgIGxldCB7XG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYyMztcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAncmVtb3ZlU3ByaW5nJyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRBbGxvd1NsZWVwKF9yZWYyNCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjI0O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRBbGxvd1NsZWVwJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldEFuZ3VsYXJEYW1waW5nKF9yZWYyNSkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjI1O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRBbmd1bGFyRGFtcGluZycsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRBbmd1bGFyRmFjdG9yKF9yZWYyNikge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjI2O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRBbmd1bGFyRmFjdG9yJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldEFuZ3VsYXJWZWxvY2l0eShfcmVmMjcpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYyNztcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0QW5ndWxhclZlbG9jaXR5JyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldENvbGxpc2lvbkZpbHRlckdyb3VwKF9yZWYyOCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjI4O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRDb2xsaXNpb25GaWx0ZXJHcm91cCcsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRDb2xsaXNpb25GaWx0ZXJNYXNrKF9yZWYyOSkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjI5O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRDb2xsaXNpb25GaWx0ZXJNYXNrJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldENvbGxpc2lvblJlc3BvbnNlKF9yZWYzMCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjMwO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRDb2xsaXNpb25SZXNwb25zZScsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRDb25zdHJhaW50TW90b3JNYXhGb3JjZShfcmVmMzEpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYzMTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0Q29uc3RyYWludE1vdG9yTWF4Rm9yY2UnLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0Q29uc3RyYWludE1vdG9yU3BlZWQoX3JlZjMyKSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMzI7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldENvbnN0cmFpbnRNb3RvclNwZWVkJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldEZpeGVkUm90YXRpb24oX3JlZjMzKSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMzM7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldEZpeGVkUm90YXRpb24nLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0SXNUcmlnZ2VyKF9yZWYzNCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjM0O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRJc1RyaWdnZXInLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0TGluZWFyRGFtcGluZyhfcmVmMzUpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYzNTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0TGluZWFyRGFtcGluZycsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRMaW5lYXJGYWN0b3IoX3JlZjM2KSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmMzY7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldExpbmVhckZhY3RvcicsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRNYXNzKF9yZWYzNykge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjM3O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRNYXNzJyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldE1hdGVyaWFsKF9yZWYzOCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjM4O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRNYXRlcmlhbCcsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRQb3NpdGlvbihfcmVmMzkpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWYzOTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0UG9zaXRpb24nLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0UXVhdGVybmlvbihfcmVmNDApIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHM6IFt4LCB5LCB6LCB3XSxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjQwO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRRdWF0ZXJuaW9uJyxcbiAgICAgIHByb3BzOiBbeCwgeSwgeiwgd10sXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0UmF5Y2FzdFZlaGljbGVCcmFrZShfcmVmNDEpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWY0MTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0UmF5Y2FzdFZlaGljbGVCcmFrZScsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRSYXljYXN0VmVoaWNsZVN0ZWVyaW5nVmFsdWUoX3JlZjQyKSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNDI7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldFJheWNhc3RWZWhpY2xlU3RlZXJpbmdWYWx1ZScsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRSb3RhdGlvbihfcmVmNDMpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWY0MztcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0Um90YXRpb24nLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0U2xlZXBTcGVlZExpbWl0KF9yZWY0NCkge1xuICAgIGxldCB7XG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjQ0O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzZXRTbGVlcFNwZWVkTGltaXQnLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0U2xlZXBUaW1lTGltaXQoX3JlZjQ1KSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNDU7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldFNsZWVwVGltZUxpbWl0JyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNldFNwcmluZ0RhbXBpbmcoX3JlZjQ2KSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNDY7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldFNwcmluZ0RhbXBpbmcnLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0U3ByaW5nUmVzdExlbmd0aChfcmVmNDcpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWY0NztcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0U3ByaW5nUmVzdExlbmd0aCcsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRTcHJpbmdTdGlmZm5lc3MoX3JlZjQ4KSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNDg7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldFNwcmluZ1N0aWZmbmVzcycsXG4gICAgICBwcm9wcyxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgfVxuICBzZXRVc2VyRGF0YShfcmVmNDkpIHtcbiAgICBsZXQge1xuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWY0OTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2V0VXNlckRhdGEnLFxuICAgICAgcHJvcHMsXG4gICAgICB1dWlkXG4gICAgfSk7XG4gIH1cbiAgc2V0VmVsb2NpdHkoX3JlZjUwKSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNTA7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3NldFZlbG9jaXR5JyxcbiAgICAgIHByb3BzLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHNsZWVwKF9yZWY1MSkge1xuICAgIGxldCB7XG4gICAgICB1dWlkXG4gICAgfSA9IF9yZWY1MTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAnc2xlZXAnLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHN0ZXAocHJvcHMpIHtcbiAgICB2YXIgX3RoaXMkd29ya2VyO1xuICAgIGNvbnN0IHtcbiAgICAgIGJ1ZmZlcnM6IHtcbiAgICAgICAgcG9zaXRpb25zLFxuICAgICAgICBxdWF0ZXJuaW9uc1xuICAgICAgfVxuICAgIH0gPSB0aGlzO1xuICAgIGlmICghcG9zaXRpb25zLmJ5dGVMZW5ndGggJiYgIXF1YXRlcm5pb25zLmJ5dGVMZW5ndGgpIHJldHVybjtcbiAgICAoX3RoaXMkd29ya2VyID0gdGhpcy53b3JrZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICdzdGVwJyxcbiAgICAgIHBvc2l0aW9ucyxcbiAgICAgIHByb3BzLFxuICAgICAgcXVhdGVybmlvbnNcbiAgICB9LCBbcG9zaXRpb25zLmJ1ZmZlciwgcXVhdGVybmlvbnMuYnVmZmVyXSk7XG4gIH1cbiAgc3Vic2NyaWJlKF9yZWY1Mikge1xuICAgIGxldCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBpZCxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICB0eXBlXG4gICAgICB9LFxuICAgICAgdXVpZFxuICAgIH0gPSBfcmVmNTI7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBvcDogJ3N1YnNjcmliZScsXG4gICAgICBwcm9wczoge1xuICAgICAgICBpZCxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICB0eXBlXG4gICAgICB9LFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHRlcm1pbmF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkd29ya2VyMjtcbiAgICAoX3RoaXMkd29ya2VyMiA9IHRoaXMud29ya2VyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkd29ya2VyMi50ZXJtaW5hdGUoKTtcbiAgICB0aGlzLndvcmtlciA9IG51bGw7XG4gIH1cbiAgdW5zdWJzY3JpYmUoX3JlZjUzKSB7XG4gICAgbGV0IHtcbiAgICAgIHByb3BzXG4gICAgfSA9IF9yZWY1MztcbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIG9wOiAndW5zdWJzY3JpYmUnLFxuICAgICAgcHJvcHNcbiAgICB9KTtcbiAgfVxuICB3YWtlVXAoX3JlZjU0KSB7XG4gICAgbGV0IHtcbiAgICAgIHV1aWRcbiAgICB9ID0gX3JlZjU0O1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgb3A6ICd3YWtlVXAnLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICB9XG4gIHBvc3RNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy53b3JrZXIpIHJldHVybiB0aGlzLndvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogUmVjb3JkcyB3aGF0IG9iamVjdHMgYXJlIGNvbGxpZGluZyB3aXRoIGVhY2ggb3RoZXJcbiAqL1xuXG4vKipcbiAqIEEgM3gzIG1hdHJpeC5cbiAqIEF1dGhvcmVkIGJ5IHtAbGluayBodHRwOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZS8gc2NodGVwcGV9XG4gKi9cbmNsYXNzIE1hdDMkMSB7XG4gIC8qKlxuICAgKiBBIHZlY3RvciBvZiBsZW5ndGggOSwgY29udGFpbmluZyBhbGwgbWF0cml4IGVsZW1lbnRzLlxuICAgKi9cblxuICAvKipcbiAgICogQHBhcmFtIGVsZW1lbnRzIEEgdmVjdG9yIG9mIGxlbmd0aCA5LCBjb250YWluaW5nIGFsbCBtYXRyaXggZWxlbWVudHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50cykge1xuICAgIGlmIChlbGVtZW50cyA9PT0gdm9pZCAwKSB7XG4gICAgICBlbGVtZW50cyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIG1hdHJpeCB0byBpZGVudGl0eVxuICAgKiBAdG9kbyBTaG91bGQgcGVyaGFwcyBiZSByZW5hbWVkIHRvIGBzZXRJZGVudGl0eSgpYCB0byBiZSBtb3JlIGNsZWFyLlxuICAgKiBAdG9kbyBDcmVhdGUgYW5vdGhlciBmdW5jdGlvbiB0aGF0IGltbWVkaWF0ZWx5IGNyZWF0ZXMgYW4gaWRlbnRpdHkgbWF0cml4IGVnLiBgZXllKClgXG4gICAqL1xuXG5cbiAgaWRlbnRpdHkoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgZVswXSA9IDE7XG4gICAgZVsxXSA9IDA7XG4gICAgZVsyXSA9IDA7XG4gICAgZVszXSA9IDA7XG4gICAgZVs0XSA9IDE7XG4gICAgZVs1XSA9IDA7XG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG4gICAgZVs4XSA9IDE7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBhbGwgZWxlbWVudHMgdG8gemVyb1xuICAgKi9cblxuXG4gIHNldFplcm8oKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgZVswXSA9IDA7XG4gICAgZVsxXSA9IDA7XG4gICAgZVsyXSA9IDA7XG4gICAgZVszXSA9IDA7XG4gICAgZVs0XSA9IDA7XG4gICAgZVs1XSA9IDA7XG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG4gICAgZVs4XSA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIG1hdHJpeCBkaWFnb25hbCBlbGVtZW50cyBmcm9tIGEgVmVjM1xuICAgKi9cblxuXG4gIHNldFRyYWNlKHZlY3Rvcikge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGVbMF0gPSB2ZWN0b3IueDtcbiAgICBlWzRdID0gdmVjdG9yLnk7XG4gICAgZVs4XSA9IHZlY3Rvci56O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBtYXRyaXggZGlhZ29uYWwgZWxlbWVudHNcbiAgICovXG5cblxuICBnZXRUcmFjZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcbiAgICB0YXJnZXQueCA9IGVbMF07XG4gICAgdGFyZ2V0LnkgPSBlWzRdO1xuICAgIHRhcmdldC56ID0gZVs4XTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBNYXRyaXgtVmVjdG9yIG11bHRpcGxpY2F0aW9uXG4gICAqIEBwYXJhbSB2IFRoZSB2ZWN0b3IgdG8gbXVsdGlwbHkgd2l0aFxuICAgKiBAcGFyYW0gdGFyZ2V0IE9wdGlvbmFsLCB0YXJnZXQgdG8gc2F2ZSB0aGUgcmVzdWx0IGluLlxuICAgKi9cblxuXG4gIHZtdWx0KHYsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGNvbnN0IHggPSB2Lng7XG4gICAgY29uc3QgeSA9IHYueTtcbiAgICBjb25zdCB6ID0gdi56O1xuICAgIHRhcmdldC54ID0gZVswXSAqIHggKyBlWzFdICogeSArIGVbMl0gKiB6O1xuICAgIHRhcmdldC55ID0gZVszXSAqIHggKyBlWzRdICogeSArIGVbNV0gKiB6O1xuICAgIHRhcmdldC56ID0gZVs2XSAqIHggKyBlWzddICogeSArIGVbOF0gKiB6O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIE1hdHJpeC1zY2FsYXIgbXVsdGlwbGljYXRpb25cbiAgICovXG5cblxuICBzbXVsdChzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzW2ldICo9IHM7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBNYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICogQHBhcmFtIG1hdHJpeCBNYXRyaXggdG8gbXVsdGlwbHkgd2l0aCBmcm9tIGxlZnQgc2lkZS5cbiAgICovXG5cblxuICBtbXVsdChtYXRyaXgsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IE1hdDMkMSgpO1xuICAgIH1cblxuICAgIGNvbnN0IEEgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGNvbnN0IEIgPSBtYXRyaXguZWxlbWVudHM7XG4gICAgY29uc3QgVCA9IHRhcmdldC5lbGVtZW50cztcbiAgICBjb25zdCBhMTEgPSBBWzBdLFxuICAgICAgICAgIGExMiA9IEFbMV0sXG4gICAgICAgICAgYTEzID0gQVsyXSxcbiAgICAgICAgICBhMjEgPSBBWzNdLFxuICAgICAgICAgIGEyMiA9IEFbNF0sXG4gICAgICAgICAgYTIzID0gQVs1XSxcbiAgICAgICAgICBhMzEgPSBBWzZdLFxuICAgICAgICAgIGEzMiA9IEFbN10sXG4gICAgICAgICAgYTMzID0gQVs4XTtcbiAgICBjb25zdCBiMTEgPSBCWzBdLFxuICAgICAgICAgIGIxMiA9IEJbMV0sXG4gICAgICAgICAgYjEzID0gQlsyXSxcbiAgICAgICAgICBiMjEgPSBCWzNdLFxuICAgICAgICAgIGIyMiA9IEJbNF0sXG4gICAgICAgICAgYjIzID0gQls1XSxcbiAgICAgICAgICBiMzEgPSBCWzZdLFxuICAgICAgICAgIGIzMiA9IEJbN10sXG4gICAgICAgICAgYjMzID0gQls4XTtcbiAgICBUWzBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxO1xuICAgIFRbMV0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzI7XG4gICAgVFsyXSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMztcbiAgICBUWzNdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuICAgIFRbNF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzI7XG4gICAgVFs1XSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMztcbiAgICBUWzZdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxO1xuICAgIFRbN10gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XG4gICAgVFs4XSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMztcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBTY2FsZSBlYWNoIGNvbHVtbiBvZiB0aGUgbWF0cml4XG4gICAqL1xuXG5cbiAgc2NhbGUodmVjdG9yLCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBNYXQzJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcbiAgICBjb25zdCB0ID0gdGFyZ2V0LmVsZW1lbnRzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IDM7IGkrKykge1xuICAgICAgdFszICogaSArIDBdID0gdmVjdG9yLnggKiBlWzMgKiBpICsgMF07XG4gICAgICB0WzMgKiBpICsgMV0gPSB2ZWN0b3IueSAqIGVbMyAqIGkgKyAxXTtcbiAgICAgIHRbMyAqIGkgKyAyXSA9IHZlY3Rvci56ICogZVszICogaSArIDJdO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFNvbHZlIEF4PWJcbiAgICogQHBhcmFtIGIgVGhlIHJpZ2h0IGhhbmQgc2lkZVxuICAgKiBAcGFyYW0gdGFyZ2V0IE9wdGlvbmFsLiBUYXJnZXQgdmVjdG9yIHRvIHNhdmUgaW4uXG4gICAqIEByZXR1cm4gVGhlIHNvbHV0aW9uIHhcbiAgICogQHRvZG8gc2hvdWxkIHJldXNlIGFycmF5c1xuICAgKi9cblxuXG4gIHNvbHZlKGIsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdCBlcXVhdGlvbnNcbiAgICBjb25zdCBuciA9IDM7IC8vIG51bSByb3dzXG5cbiAgICBjb25zdCBuYyA9IDQ7IC8vIG51bSBjb2xzXG5cbiAgICBjb25zdCBlcW5zID0gW107XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbnIgKiBuYzsgaSsrKSB7XG4gICAgICBlcW5zLnB1c2goMCk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgICBlcW5zW2kgKyBuYyAqIGpdID0gdGhpcy5lbGVtZW50c1tpICsgMyAqIGpdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVxbnNbMyArIDQgKiAwXSA9IGIueDtcbiAgICBlcW5zWzMgKyA0ICogMV0gPSBiLnk7XG4gICAgZXFuc1szICsgNCAqIDJdID0gYi56OyAvLyBDb21wdXRlIHJpZ2h0IHVwcGVyIHRyaWFuZ3VsYXIgdmVyc2lvbiBvZiB0aGUgbWF0cml4IC0gR2F1c3MgZWxpbWluYXRpb25cblxuICAgIGxldCBuID0gMztcbiAgICBjb25zdCBrID0gbjtcbiAgICBsZXQgbnA7XG4gICAgY29uc3Qga3AgPSA0OyAvLyBudW0gcm93c1xuXG4gICAgbGV0IHA7XG5cbiAgICBkbyB7XG4gICAgICBpID0gayAtIG47XG5cbiAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGldID09PSAwKSB7XG4gICAgICAgIC8vIHRoZSBwaXZvdCBpcyBudWxsLCBzd2FwIGxpbmVzXG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgaWYgKGVxbnNbaSArIG5jICogal0gIT09IDApIHtcbiAgICAgICAgICAgIG5wID0ga3A7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgLy8gZG8gbGlnbmUoIGkgKSA9IGxpZ25lKCBpICkgKyBsaWduZSggayApXG4gICAgICAgICAgICAgIHAgPSBrcCAtIG5wO1xuICAgICAgICAgICAgICBlcW5zW3AgKyBuYyAqIGldICs9IGVxbnNbcCArIG5jICogal07XG4gICAgICAgICAgICB9IHdoaWxlICgtLW5wKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGldICE9PSAwKSB7XG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IGVxbnNbaSArIG5jICogal0gLyBlcW5zW2kgKyBuYyAqIGldO1xuICAgICAgICAgIG5wID0ga3A7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBkbyBsaWduZSggayApID0gbGlnbmUoIGsgKSAtIG11bHRpcGxpZXIgKiBsaWduZSggaSApXG4gICAgICAgICAgICBwID0ga3AgLSBucDtcbiAgICAgICAgICAgIGVxbnNbcCArIG5jICogal0gPSBwIDw9IGkgPyAwIDogZXFuc1twICsgbmMgKiBqXSAtIGVxbnNbcCArIG5jICogaV0gKiBtdWx0aXBsaWVyO1xuICAgICAgICAgIH0gd2hpbGUgKC0tbnApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAoLS1uKTsgLy8gR2V0IHRoZSBzb2x1dGlvblxuXG5cbiAgICB0YXJnZXQueiA9IGVxbnNbMiAqIG5jICsgM10gLyBlcW5zWzIgKiBuYyArIDJdO1xuICAgIHRhcmdldC55ID0gKGVxbnNbMSAqIG5jICsgM10gLSBlcW5zWzEgKiBuYyArIDJdICogdGFyZ2V0LnopIC8gZXFuc1sxICogbmMgKyAxXTtcbiAgICB0YXJnZXQueCA9IChlcW5zWzAgKiBuYyArIDNdIC0gZXFuc1swICogbmMgKyAyXSAqIHRhcmdldC56IC0gZXFuc1swICogbmMgKyAxXSAqIHRhcmdldC55KSAvIGVxbnNbMCAqIG5jICsgMF07XG5cbiAgICBpZiAoaXNOYU4odGFyZ2V0LngpIHx8IGlzTmFOKHRhcmdldC55KSB8fCBpc05hTih0YXJnZXQueikgfHwgdGFyZ2V0LnggPT09IEluZmluaXR5IHx8IHRhcmdldC55ID09PSBJbmZpbml0eSB8fCB0YXJnZXQueiA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHRocm93IGBDb3VsZCBub3Qgc29sdmUgZXF1YXRpb24hIEdvdCB4PVske3RhcmdldC50b1N0cmluZygpfV0sIGI9WyR7Yi50b1N0cmluZygpfV0sIEE9WyR7dGhpcy50b1N0cmluZygpfV1gO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBlbGVtZW50IGluIHRoZSBtYXRyaXggYnkgaW5kZXguIEluZGV4IHN0YXJ0cyBhdCAwLCBub3QgMSEhIVxuICAgKiBAcGFyYW0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZSBtYXRyaXggZWxlbWVudCB3aWxsIGJlIHNldCB0byB0aGlzIHZhbHVlLlxuICAgKi9cblxuXG4gIGUocm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2NvbHVtbiArIDMgKiByb3ddO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgdmFsdWVcbiAgICAgIHRoaXMuZWxlbWVudHNbY29sdW1uICsgMyAqIHJvd10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvcHkgYW5vdGhlciBtYXRyaXggaW50byB0aGlzIG1hdHJpeCBvYmplY3QuXG4gICAqL1xuXG5cbiAgY29weShtYXRyaXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5lbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5lbGVtZW50c1tpXSA9IG1hdHJpeC5lbGVtZW50c1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4LlxuICAgKi9cblxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCByID0gJyc7XG4gICAgY29uc3Qgc2VwID0gJywnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgIHIgKz0gdGhpcy5lbGVtZW50c1tpXSArIHNlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfVxuICAvKipcbiAgICogcmV2ZXJzZSB0aGUgbWF0cml4XG4gICAqIEBwYXJhbSB0YXJnZXQgVGFyZ2V0IG1hdHJpeCB0byBzYXZlIGluLlxuICAgKiBAcmV0dXJuIFRoZSBzb2x1dGlvbiB4XG4gICAqL1xuXG5cbiAgcmV2ZXJzZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBNYXQzJDEoKTtcbiAgICB9XG5cbiAgICAvLyBDb25zdHJ1Y3QgZXF1YXRpb25zXG4gICAgY29uc3QgbnIgPSAzOyAvLyBudW0gcm93c1xuXG4gICAgY29uc3QgbmMgPSA2OyAvLyBudW0gY29sc1xuXG4gICAgY29uc3QgZXFucyA9IHJldmVyc2VfZXFucyQxO1xuICAgIGxldCBpO1xuICAgIGxldCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgICBlcW5zW2kgKyBuYyAqIGpdID0gdGhpcy5lbGVtZW50c1tpICsgMyAqIGpdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVxbnNbMyArIDYgKiAwXSA9IDE7XG4gICAgZXFuc1szICsgNiAqIDFdID0gMDtcbiAgICBlcW5zWzMgKyA2ICogMl0gPSAwO1xuICAgIGVxbnNbNCArIDYgKiAwXSA9IDA7XG4gICAgZXFuc1s0ICsgNiAqIDFdID0gMTtcbiAgICBlcW5zWzQgKyA2ICogMl0gPSAwO1xuICAgIGVxbnNbNSArIDYgKiAwXSA9IDA7XG4gICAgZXFuc1s1ICsgNiAqIDFdID0gMDtcbiAgICBlcW5zWzUgKyA2ICogMl0gPSAxOyAvLyBDb21wdXRlIHJpZ2h0IHVwcGVyIHRyaWFuZ3VsYXIgdmVyc2lvbiBvZiB0aGUgbWF0cml4IC0gR2F1c3MgZWxpbWluYXRpb25cblxuICAgIGxldCBuID0gMztcbiAgICBjb25zdCBrID0gbjtcbiAgICBsZXQgbnA7XG4gICAgY29uc3Qga3AgPSBuYzsgLy8gbnVtIHJvd3NcblxuICAgIGxldCBwO1xuXG4gICAgZG8ge1xuICAgICAgaSA9IGsgLSBuO1xuXG4gICAgICBpZiAoZXFuc1tpICsgbmMgKiBpXSA9PT0gMCkge1xuICAgICAgICAvLyB0aGUgcGl2b3QgaXMgbnVsbCwgc3dhcCBsaW5lc1xuICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IGs7IGorKykge1xuICAgICAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGpdICE9PSAwKSB7XG4gICAgICAgICAgICBucCA9IGtwO1xuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIC8vIGRvIGxpbmUoIGkgKSA9IGxpbmUoIGkgKSArIGxpbmUoIGsgKVxuICAgICAgICAgICAgICBwID0ga3AgLSBucDtcbiAgICAgICAgICAgICAgZXFuc1twICsgbmMgKiBpXSArPSBlcW5zW3AgKyBuYyAqIGpdO1xuICAgICAgICAgICAgfSB3aGlsZSAoLS1ucCk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZXFuc1tpICsgbmMgKiBpXSAhPT0gMCkge1xuICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IGs7IGorKykge1xuICAgICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBlcW5zW2kgKyBuYyAqIGpdIC8gZXFuc1tpICsgbmMgKiBpXTtcbiAgICAgICAgICBucCA9IGtwO1xuXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gZG8gbGluZSggayApID0gbGluZSggayApIC0gbXVsdGlwbGllciAqIGxpbmUoIGkgKVxuICAgICAgICAgICAgcCA9IGtwIC0gbnA7XG4gICAgICAgICAgICBlcW5zW3AgKyBuYyAqIGpdID0gcCA8PSBpID8gMCA6IGVxbnNbcCArIG5jICogal0gLSBlcW5zW3AgKyBuYyAqIGldICogbXVsdGlwbGllcjtcbiAgICAgICAgICB9IHdoaWxlICgtLW5wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gd2hpbGUgKC0tbik7IC8vIGVsaW1pbmF0ZSB0aGUgdXBwZXIgbGVmdCB0cmlhbmdsZSBvZiB0aGUgbWF0cml4XG5cblxuICAgIGkgPSAyO1xuXG4gICAgZG8ge1xuICAgICAgaiA9IGkgLSAxO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBlcW5zW2kgKyBuYyAqIGpdIC8gZXFuc1tpICsgbmMgKiBpXTtcbiAgICAgICAgbnAgPSBuYztcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgcCA9IG5jIC0gbnA7XG4gICAgICAgICAgZXFuc1twICsgbmMgKiBqXSA9IGVxbnNbcCArIG5jICogal0gLSBlcW5zW3AgKyBuYyAqIGldICogbXVsdGlwbGllcjtcbiAgICAgICAgfSB3aGlsZSAoLS1ucCk7XG4gICAgICB9IHdoaWxlIChqLS0pO1xuICAgIH0gd2hpbGUgKC0taSk7IC8vIG9wZXJhdGlvbnMgb24gdGhlIGRpYWdvbmFsXG5cblxuICAgIGkgPSAyO1xuXG4gICAgZG8ge1xuICAgICAgY29uc3QgbXVsdGlwbGllciA9IDEgLyBlcW5zW2kgKyBuYyAqIGldO1xuICAgICAgbnAgPSBuYztcblxuICAgICAgZG8ge1xuICAgICAgICBwID0gbmMgLSBucDtcbiAgICAgICAgZXFuc1twICsgbmMgKiBpXSA9IGVxbnNbcCArIG5jICogaV0gKiBtdWx0aXBsaWVyO1xuICAgICAgfSB3aGlsZSAoLS1ucCk7XG4gICAgfSB3aGlsZSAoaS0tKTtcblxuICAgIGkgPSAyO1xuXG4gICAgZG8ge1xuICAgICAgaiA9IDI7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgcCA9IGVxbnNbbnIgKyBqICsgbmMgKiBpXTtcblxuICAgICAgICBpZiAoaXNOYU4ocCkgfHwgcCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICB0aHJvdyBgQ291bGQgbm90IHJldmVyc2UhIEE9WyR7dGhpcy50b1N0cmluZygpfV1gO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LmUoaSwgaiwgcCk7XG4gICAgICB9IHdoaWxlIChqLS0pO1xuICAgIH0gd2hpbGUgKGktLSk7XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIG1hdHJpeCBmcm9tIGEgcXVhdGVyaW9uXG4gICAqL1xuXG5cbiAgc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbihxKSB7XG4gICAgY29uc3QgeCA9IHEueDtcbiAgICBjb25zdCB5ID0gcS55O1xuICAgIGNvbnN0IHogPSBxLno7XG4gICAgY29uc3QgdyA9IHEudztcbiAgICBjb25zdCB4MiA9IHggKyB4O1xuICAgIGNvbnN0IHkyID0geSArIHk7XG4gICAgY29uc3QgejIgPSB6ICsgejtcbiAgICBjb25zdCB4eCA9IHggKiB4MjtcbiAgICBjb25zdCB4eSA9IHggKiB5MjtcbiAgICBjb25zdCB4eiA9IHggKiB6MjtcbiAgICBjb25zdCB5eSA9IHkgKiB5MjtcbiAgICBjb25zdCB5eiA9IHkgKiB6MjtcbiAgICBjb25zdCB6eiA9IHogKiB6MjtcbiAgICBjb25zdCB3eCA9IHcgKiB4MjtcbiAgICBjb25zdCB3eSA9IHcgKiB5MjtcbiAgICBjb25zdCB3eiA9IHcgKiB6MjtcbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcbiAgICBlWzMgKiAwICsgMF0gPSAxIC0gKHl5ICsgenopO1xuICAgIGVbMyAqIDAgKyAxXSA9IHh5IC0gd3o7XG4gICAgZVszICogMCArIDJdID0geHogKyB3eTtcbiAgICBlWzMgKiAxICsgMF0gPSB4eSArIHd6O1xuICAgIGVbMyAqIDEgKyAxXSA9IDEgLSAoeHggKyB6eik7XG4gICAgZVszICogMSArIDJdID0geXogLSB3eDtcbiAgICBlWzMgKiAyICsgMF0gPSB4eiAtIHd5O1xuICAgIGVbMyAqIDIgKyAxXSA9IHl6ICsgd3g7XG4gICAgZVszICogMiArIDJdID0gMSAtICh4eCArIHl5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVHJhbnNwb3NlIHRoZSBtYXRyaXhcbiAgICogQHBhcmFtIHRhcmdldCBPcHRpb25hbC4gV2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAgICogQHJldHVybiBUaGUgdGFyZ2V0IE1hdDMsIG9yIGEgbmV3IE1hdDMgaWYgdGFyZ2V0IHdhcyBvbWl0dGVkLlxuICAgKi9cblxuXG4gIHRyYW5zcG9zZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBNYXQzJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCBNID0gdGhpcy5lbGVtZW50cztcbiAgICBjb25zdCBUID0gdGFyZ2V0LmVsZW1lbnRzO1xuICAgIGxldCB0bXA7IC8vU2V0IGRpYWdvbmFsc1xuXG4gICAgVFswXSA9IE1bMF07XG4gICAgVFs0XSA9IE1bNF07XG4gICAgVFs4XSA9IE1bOF07XG4gICAgdG1wID0gTVsxXTtcbiAgICBUWzFdID0gTVszXTtcbiAgICBUWzNdID0gdG1wO1xuICAgIHRtcCA9IE1bMl07XG4gICAgVFsyXSA9IE1bNl07XG4gICAgVFs2XSA9IHRtcDtcbiAgICB0bXAgPSBNWzVdO1xuICAgIFRbNV0gPSBNWzddO1xuICAgIFRbN10gPSB0bXA7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG59XG5jb25zdCByZXZlcnNlX2VxbnMkMSA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTtcblxuLyoqXG4gKiAzLWRpbWVuc2lvbmFsIHZlY3RvclxuICogQGV4YW1wbGVcbiAqICAgICBjb25zdCB2ID0gbmV3IFZlYzMoMSwgMiwgMylcbiAqICAgICBjb25zb2xlLmxvZygneD0nICsgdi54KSAvLyB4PTFcbiAqL1xuXG5jbGFzcyBWZWMzJDEge1xuICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgaWYgKHggPT09IHZvaWQgMCkge1xuICAgICAgeCA9IDAuMDtcbiAgICB9XG5cbiAgICBpZiAoeSA9PT0gdm9pZCAwKSB7XG4gICAgICB5ID0gMC4wO1xuICAgIH1cblxuICAgIGlmICh6ID09PSB2b2lkIDApIHtcbiAgICAgIHogPSAwLjA7XG4gICAgfVxuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG4gIH1cbiAgLyoqXG4gICAqIFZlY3RvciBjcm9zcyBwcm9kdWN0XG4gICAqIEBwYXJhbSB0YXJnZXQgT3B0aW9uYWwgdGFyZ2V0IHRvIHNhdmUgaW4uXG4gICAqL1xuXG5cbiAgY3Jvc3ModmVjdG9yLCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCB2eCA9IHZlY3Rvci54O1xuICAgIGNvbnN0IHZ5ID0gdmVjdG9yLnk7XG4gICAgY29uc3QgdnogPSB2ZWN0b3IuejtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICB0YXJnZXQueCA9IHkgKiB2eiAtIHogKiB2eTtcbiAgICB0YXJnZXQueSA9IHogKiB2eCAtIHggKiB2ejtcbiAgICB0YXJnZXQueiA9IHggKiB2eSAtIHkgKiB2eDtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZlY3RvcnMnIDMgZWxlbWVudHNcbiAgICovXG5cblxuICBzZXQoeCwgeSwgeikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgYWxsIGNvbXBvbmVudHMgb2YgdGhlIHZlY3RvciB0byB6ZXJvLlxuICAgKi9cblxuXG4gIHNldFplcm8oKSB7XG4gICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy56ID0gMDtcbiAgfVxuICAvKipcbiAgICogVmVjdG9yIGFkZGl0aW9uXG4gICAqL1xuXG5cbiAgdmFkZCh2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldC54ID0gdmVjdG9yLnggKyB0aGlzLng7XG4gICAgICB0YXJnZXQueSA9IHZlY3Rvci55ICsgdGhpcy55O1xuICAgICAgdGFyZ2V0LnogPSB2ZWN0b3IueiArIHRoaXMuejtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBWZWMzJDEodGhpcy54ICsgdmVjdG9yLngsIHRoaXMueSArIHZlY3Rvci55LCB0aGlzLnogKyB2ZWN0b3Iueik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBWZWN0b3Igc3VidHJhY3Rpb25cbiAgICogQHBhcmFtIHRhcmdldCBPcHRpb25hbCB0YXJnZXQgdG8gc2F2ZSBpbi5cbiAgICovXG5cblxuICB2c3ViKHZlY3RvciwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgdGFyZ2V0LnggPSB0aGlzLnggLSB2ZWN0b3IueDtcbiAgICAgIHRhcmdldC55ID0gdGhpcy55IC0gdmVjdG9yLnk7XG4gICAgICB0YXJnZXQueiA9IHRoaXMueiAtIHZlY3Rvci56O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFZlYzMkMSh0aGlzLnggLSB2ZWN0b3IueCwgdGhpcy55IC0gdmVjdG9yLnksIHRoaXMueiAtIHZlY3Rvci56KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3Jvc3MgcHJvZHVjdCBtYXRyaXggYV9jcm9zcyBmcm9tIGEgdmVjdG9yLCBzdWNoIHRoYXQgYSB4IGIgPSBhX2Nyb3NzICogYiA9IGNcbiAgICpcbiAgICogU2VlIHtAbGluayBodHRwczovL3d3dzguY3MudW11LnNlL2t1cnNlci9UREJEMjQvVlQwNi9sZWN0dXJlcy9MZWN0dXJlNi5wZGYgVW1lw6UgVW5pdmVyc2l0eSBMZWN0dXJlfVxuICAgKi9cblxuXG4gIGNyb3NzbWF0KCkge1xuICAgIHJldHVybiBuZXcgTWF0MyQxKFswLCAtdGhpcy56LCB0aGlzLnksIHRoaXMueiwgMCwgLXRoaXMueCwgLXRoaXMueSwgdGhpcy54LCAwXSk7XG4gIH1cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSB0aGUgdmVjdG9yLiBOb3RlIHRoYXQgdGhpcyBjaGFuZ2VzIHRoZSB2YWx1ZXMgaW4gdGhlIHZlY3Rvci5cbiAgICAqIEByZXR1cm4gUmV0dXJucyB0aGUgbm9ybSBvZiB0aGUgdmVjdG9yXG4gICAqL1xuXG5cbiAgbm9ybWFsaXplKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgIGNvbnN0IG4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcblxuICAgIGlmIChuID4gMC4wKSB7XG4gICAgICBjb25zdCBpbnZOID0gMSAvIG47XG4gICAgICB0aGlzLnggKj0gaW52TjtcbiAgICAgIHRoaXMueSAqPSBpbnZOO1xuICAgICAgdGhpcy56ICo9IGludk47XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1ha2Ugc29tZXRoaW5nIHVwXG4gICAgICB0aGlzLnggPSAwO1xuICAgICAgdGhpcy55ID0gMDtcbiAgICAgIHRoaXMueiA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmVyc2lvbiBvZiB0aGlzIHZlY3RvciB0aGF0IGlzIG9mIGxlbmd0aCAxLlxuICAgKiBAcGFyYW0gdGFyZ2V0IE9wdGlvbmFsIHRhcmdldCB0byBzYXZlIGluXG4gICAqIEByZXR1cm4gUmV0dXJucyB0aGUgdW5pdCB2ZWN0b3JcbiAgICovXG5cblxuICB1bml0KHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgIGxldCBuaW52ID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG5cbiAgICBpZiAobmludiA+IDAuMCkge1xuICAgICAgbmludiA9IDEuMCAvIG5pbnY7XG4gICAgICB0YXJnZXQueCA9IHggKiBuaW52O1xuICAgICAgdGFyZ2V0LnkgPSB5ICogbmludjtcbiAgICAgIHRhcmdldC56ID0geiAqIG5pbnY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC54ID0gMTtcbiAgICAgIHRhcmdldC55ID0gMDtcbiAgICAgIHRhcmdldC56ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gICAqL1xuXG5cbiAgbGVuZ3RoKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cblxuXG4gIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG90KHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZGlzdGFuY2UgZnJvbSB0aGlzIHBvaW50IHRvIGFub3RoZXIgcG9pbnRcbiAgICovXG5cblxuICBkaXN0YW5jZVRvKHApIHtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICBjb25zdCBweCA9IHAueDtcbiAgICBjb25zdCBweSA9IHAueTtcbiAgICBjb25zdCBweiA9IHAuejtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KChweCAtIHgpICogKHB4IC0geCkgKyAocHkgLSB5KSAqIChweSAtIHkpICsgKHB6IC0geikgKiAocHogLSB6KSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBzcXVhcmVkIGRpc3RhbmNlIGZyb20gdGhpcyBwb2ludCB0byBhbm90aGVyIHBvaW50XG4gICAqL1xuXG5cbiAgZGlzdGFuY2VTcXVhcmVkKHApIHtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICBjb25zdCBweCA9IHAueDtcbiAgICBjb25zdCBweSA9IHAueTtcbiAgICBjb25zdCBweiA9IHAuejtcbiAgICByZXR1cm4gKHB4IC0geCkgKiAocHggLSB4KSArIChweSAtIHkpICogKHB5IC0geSkgKyAocHogLSB6KSAqIChweiAtIHopO1xuICB9XG4gIC8qKlxuICAgKiBNdWx0aXBseSBhbGwgdGhlIGNvbXBvbmVudHMgb2YgdGhlIHZlY3RvciB3aXRoIGEgc2NhbGFyLlxuICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB2ZWN0b3IgdG8gc2F2ZSB0aGUgcmVzdWx0IGluLlxuICAgKi9cblxuXG4gIHNjYWxlKHNjYWxhciwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMyQxKCk7XG4gICAgfVxuXG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgdGFyZ2V0LnggPSBzY2FsYXIgKiB4O1xuICAgIHRhcmdldC55ID0gc2NhbGFyICogeTtcbiAgICB0YXJnZXQueiA9IHNjYWxhciAqIHo7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogTXVsdGlwbHkgdGhlIHZlY3RvciB3aXRoIGFuIG90aGVyIHZlY3RvciwgY29tcG9uZW50LXdpc2UuXG4gICAqIEBwYXJhbSB0YXJnZXQgVGhlIHZlY3RvciB0byBzYXZlIHRoZSByZXN1bHQgaW4uXG4gICAqL1xuXG5cbiAgdm11bCh2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRhcmdldC54ID0gdmVjdG9yLnggKiB0aGlzLng7XG4gICAgdGFyZ2V0LnkgPSB2ZWN0b3IueSAqIHRoaXMueTtcbiAgICB0YXJnZXQueiA9IHZlY3Rvci56ICogdGhpcy56O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFNjYWxlIGEgdmVjdG9yIGFuZCBhZGQgaXQgdG8gdGhpcyB2ZWN0b3IuIFNhdmUgdGhlIHJlc3VsdCBpbiBcInRhcmdldFwiLiAodGFyZ2V0ID0gdGhpcyArIHZlY3RvciAqIHNjYWxhcilcbiAgICogQHBhcmFtIHRhcmdldCBUaGUgdmVjdG9yIHRvIHNhdmUgdGhlIHJlc3VsdCBpbi5cbiAgICovXG5cblxuICBhZGRTY2FsZWRWZWN0b3Ioc2NhbGFyLCB2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRhcmdldC54ID0gdGhpcy54ICsgc2NhbGFyICogdmVjdG9yLng7XG4gICAgdGFyZ2V0LnkgPSB0aGlzLnkgKyBzY2FsYXIgKiB2ZWN0b3IueTtcbiAgICB0YXJnZXQueiA9IHRoaXMueiArIHNjYWxhciAqIHZlY3Rvci56O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBkb3QgcHJvZHVjdFxuICAgKiBAcGFyYW0gdmVjdG9yXG4gICAqL1xuXG5cbiAgZG90KHZlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLnggKiB2ZWN0b3IueCArIHRoaXMueSAqIHZlY3Rvci55ICsgdGhpcy56ICogdmVjdG9yLno7XG4gIH1cblxuICBpc1plcm8oKSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0gMCAmJiB0aGlzLnkgPT09IDAgJiYgdGhpcy56ID09PSAwO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlIHRoZSB2ZWN0b3IgcG9pbnQgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHRhcmdldCBPcHRpb25hbCB0YXJnZXQgdG8gc2F2ZSBpblxuICAgKi9cblxuXG4gIG5lZ2F0ZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICB0YXJnZXQueCA9IC10aGlzLng7XG4gICAgdGFyZ2V0LnkgPSAtdGhpcy55O1xuICAgIHRhcmdldC56ID0gLXRoaXMuejtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBDb21wdXRlIHR3byBhcnRpZmljaWFsIHRhbmdlbnRzIHRvIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIHQxIFZlY3RvciBvYmplY3QgdG8gc2F2ZSB0aGUgZmlyc3QgdGFuZ2VudCBpblxuICAgKiBAcGFyYW0gdDIgVmVjdG9yIG9iamVjdCB0byBzYXZlIHRoZSBzZWNvbmQgdGFuZ2VudCBpblxuICAgKi9cblxuXG4gIHRhbmdlbnRzKHQxLCB0Mikge1xuICAgIGNvbnN0IG5vcm0gPSB0aGlzLmxlbmd0aCgpO1xuXG4gICAgaWYgKG5vcm0gPiAwLjApIHtcbiAgICAgIGNvbnN0IG4gPSBWZWMzX3RhbmdlbnRzX24kMTtcbiAgICAgIGNvbnN0IGlub3JtID0gMSAvIG5vcm07XG4gICAgICBuLnNldCh0aGlzLnggKiBpbm9ybSwgdGhpcy55ICogaW5vcm0sIHRoaXMueiAqIGlub3JtKTtcbiAgICAgIGNvbnN0IHJhbmRWZWMgPSBWZWMzX3RhbmdlbnRzX3JhbmRWZWMkMTtcblxuICAgICAgaWYgKE1hdGguYWJzKG4ueCkgPCAwLjkpIHtcbiAgICAgICAgcmFuZFZlYy5zZXQoMSwgMCwgMCk7XG4gICAgICAgIG4uY3Jvc3MocmFuZFZlYywgdDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZFZlYy5zZXQoMCwgMSwgMCk7XG4gICAgICAgIG4uY3Jvc3MocmFuZFZlYywgdDEpO1xuICAgICAgfVxuXG4gICAgICBuLmNyb3NzKHQxLCB0Mik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBub3JtYWwgbGVuZ3RoIGlzIHplcm8sIG1ha2Ugc29tZXRoaW5nIHVwXG4gICAgICB0MS5zZXQoMSwgMCwgMCk7XG4gICAgICB0Mi5zZXQoMCwgMSwgMCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0byBhIG1vcmUgcmVhZGFibGUgZm9ybWF0XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMueH0sJHt0aGlzLnl9LCR7dGhpcy56fWA7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRvIGFuIGFycmF5XG4gICAqL1xuXG5cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnpdO1xuICB9XG4gIC8qKlxuICAgKiBDb3BpZXMgdmFsdWUgb2Ygc291cmNlIHRvIHRoaXMgdmVjdG9yLlxuICAgKi9cblxuXG4gIGNvcHkodmVjdG9yKSB7XG4gICAgdGhpcy54ID0gdmVjdG9yLng7XG4gICAgdGhpcy55ID0gdmVjdG9yLnk7XG4gICAgdGhpcy56ID0gdmVjdG9yLno7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIERvIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgKiBAcGFyYW0gdCBBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuIDAgd2lsbCBtYWtlIHRoaXMgZnVuY3Rpb24gcmV0dXJuIHUsIGFuZCAxIHdpbGwgbWFrZSBpdCByZXR1cm4gdi4gTnVtYmVycyBpbiBiZXR3ZWVuIHdpbGwgZ2VuZXJhdGUgYSB2ZWN0b3IgaW4gYmV0d2VlbiB0aGVtLlxuICAgKi9cblxuXG4gIGxlcnAodmVjdG9yLCB0LCB0YXJnZXQpIHtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICB0YXJnZXQueCA9IHggKyAodmVjdG9yLnggLSB4KSAqIHQ7XG4gICAgdGFyZ2V0LnkgPSB5ICsgKHZlY3Rvci55IC0geSkgKiB0O1xuICAgIHRhcmdldC56ID0geiArICh2ZWN0b3IueiAtIHopICogdDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB2ZWN0b3IgZXF1YWxzIGlzIGFsbW9zdCBlcXVhbCB0byBhbm90aGVyIG9uZS5cbiAgICovXG5cblxuICBhbG1vc3RFcXVhbHModmVjdG9yLCBwcmVjaXNpb24pIHtcbiAgICBpZiAocHJlY2lzaW9uID09PSB2b2lkIDApIHtcbiAgICAgIHByZWNpc2lvbiA9IDFlLTY7XG4gICAgfVxuXG4gICAgaWYgKE1hdGguYWJzKHRoaXMueCAtIHZlY3Rvci54KSA+IHByZWNpc2lvbiB8fCBNYXRoLmFicyh0aGlzLnkgLSB2ZWN0b3IueSkgPiBwcmVjaXNpb24gfHwgTWF0aC5hYnModGhpcy56IC0gdmVjdG9yLnopID4gcHJlY2lzaW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdmVjdG9yIGlzIGFsbW9zdCB6ZXJvXG4gICAqL1xuXG5cbiAgYWxtb3N0WmVybyhwcmVjaXNpb24pIHtcbiAgICBpZiAocHJlY2lzaW9uID09PSB2b2lkIDApIHtcbiAgICAgIHByZWNpc2lvbiA9IDFlLTY7XG4gICAgfVxuXG4gICAgaWYgKE1hdGguYWJzKHRoaXMueCkgPiBwcmVjaXNpb24gfHwgTWF0aC5hYnModGhpcy55KSA+IHByZWNpc2lvbiB8fCBNYXRoLmFicyh0aGlzLnopID4gcHJlY2lzaW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB2ZWN0b3IgaXMgYW50aS1wYXJhbGxlbCB0byBhbm90aGVyIHZlY3Rvci5cbiAgICogQHBhcmFtIHByZWNpc2lvbiBTZXQgdG8gemVybyBmb3IgZXhhY3QgY29tcGFyaXNvbnNcbiAgICovXG5cblxuICBpc0FudGlwYXJhbGxlbFRvKHZlY3RvciwgcHJlY2lzaW9uKSB7XG4gICAgdGhpcy5uZWdhdGUoYW50aXBfbmVnJDEpO1xuICAgIHJldHVybiBhbnRpcF9uZWckMS5hbG1vc3RFcXVhbHModmVjdG9yLCBwcmVjaXNpb24pO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgdmVjdG9yXG4gICAqL1xuXG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzJDEodGhpcy54LCB0aGlzLnksIHRoaXMueik7XG4gIH1cblxufVxuVmVjMyQxLlpFUk8gPSBuZXcgVmVjMyQxKDAsIDAsIDApO1xuVmVjMyQxLlVOSVRfWCA9IG5ldyBWZWMzJDEoMSwgMCwgMCk7XG5WZWMzJDEuVU5JVF9ZID0gbmV3IFZlYzMkMSgwLCAxLCAwKTtcblZlYzMkMS5VTklUX1ogPSBuZXcgVmVjMyQxKDAsIDAsIDEpO1xuY29uc3QgVmVjM190YW5nZW50c19uJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBWZWMzX3RhbmdlbnRzX3JhbmRWZWMkMSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGFudGlwX25lZyQxID0gbmV3IFZlYzMkMSgpO1xuXG4vKipcbiAqIEF4aXMgYWxpZ25lZCBib3VuZGluZyBib3ggY2xhc3MuXG4gKi9cbmNsYXNzIEFBQkIkMSB7XG4gIC8qKlxuICAgKiBUaGUgbG93ZXIgYm91bmQgb2YgdGhlIGJvdW5kaW5nIGJveFxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHVwcGVyIGJvdW5kIG9mIHRoZSBib3VuZGluZyBib3hcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5sb3dlckJvdW5kID0gbmV3IFZlYzMkMSgpO1xuICAgIHRoaXMudXBwZXJCb3VuZCA9IG5ldyBWZWMzJDEoKTtcblxuICAgIGlmIChvcHRpb25zLmxvd2VyQm91bmQpIHtcbiAgICAgIHRoaXMubG93ZXJCb3VuZC5jb3B5KG9wdGlvbnMubG93ZXJCb3VuZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudXBwZXJCb3VuZCkge1xuICAgICAgdGhpcy51cHBlckJvdW5kLmNvcHkob3B0aW9ucy51cHBlckJvdW5kKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgQUFCQiBib3VuZHMgZnJvbSBhIHNldCBvZiBwb2ludHMuXG4gICAqIEBwYXJhbSBwb2ludHMgQW4gYXJyYXkgb2YgVmVjMydzLlxuICAgKiBAcmV0dXJuIFRoZSBzZWxmIG9iamVjdFxuICAgKi9cblxuXG4gIHNldEZyb21Qb2ludHMocG9pbnRzLCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2tpblNpemUpIHtcbiAgICBjb25zdCBsID0gdGhpcy5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUgPSB0aGlzLnVwcGVyQm91bmQ7XG4gICAgY29uc3QgcSA9IHF1YXRlcm5pb247IC8vIFNldCB0byB0aGUgZmlyc3QgcG9pbnRcblxuICAgIGwuY29weShwb2ludHNbMF0pO1xuXG4gICAgaWYgKHEpIHtcbiAgICAgIHEudm11bHQobCwgbCk7XG4gICAgfVxuXG4gICAgdS5jb3B5KGwpO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwID0gcG9pbnRzW2ldO1xuXG4gICAgICBpZiAocSkge1xuICAgICAgICBxLnZtdWx0KHAsIHRtcCQxJDEpO1xuICAgICAgICBwID0gdG1wJDEkMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHAueCA+IHUueCkge1xuICAgICAgICB1LnggPSBwLng7XG4gICAgICB9XG5cbiAgICAgIGlmIChwLnggPCBsLngpIHtcbiAgICAgICAgbC54ID0gcC54O1xuICAgICAgfVxuXG4gICAgICBpZiAocC55ID4gdS55KSB7XG4gICAgICAgIHUueSA9IHAueTtcbiAgICAgIH1cblxuICAgICAgaWYgKHAueSA8IGwueSkge1xuICAgICAgICBsLnkgPSBwLnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwLnogPiB1LnopIHtcbiAgICAgICAgdS56ID0gcC56O1xuICAgICAgfVxuXG4gICAgICBpZiAocC56IDwgbC56KSB7XG4gICAgICAgIGwueiA9IHAuejtcbiAgICAgIH1cbiAgICB9IC8vIEFkZCBvZmZzZXRcblxuXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBwb3NpdGlvbi52YWRkKGwsIGwpO1xuICAgICAgcG9zaXRpb24udmFkZCh1LCB1KTtcbiAgICB9XG5cbiAgICBpZiAoc2tpblNpemUpIHtcbiAgICAgIGwueCAtPSBza2luU2l6ZTtcbiAgICAgIGwueSAtPSBza2luU2l6ZTtcbiAgICAgIGwueiAtPSBza2luU2l6ZTtcbiAgICAgIHUueCArPSBza2luU2l6ZTtcbiAgICAgIHUueSArPSBza2luU2l6ZTtcbiAgICAgIHUueiArPSBza2luU2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29weSBib3VuZHMgZnJvbSBhbiBBQUJCIHRvIHRoaXMgQUFCQlxuICAgKiBAcGFyYW0gYWFiYiBTb3VyY2UgdG8gY29weSBmcm9tXG4gICAqIEByZXR1cm4gVGhlIHRoaXMgb2JqZWN0LCBmb3IgY2hhaW5hYmlsaXR5XG4gICAqL1xuXG5cbiAgY29weShhYWJiKSB7XG4gICAgdGhpcy5sb3dlckJvdW5kLmNvcHkoYWFiYi5sb3dlckJvdW5kKTtcbiAgICB0aGlzLnVwcGVyQm91bmQuY29weShhYWJiLnVwcGVyQm91bmQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSBhbiBBQUJCXG4gICAqL1xuXG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBBQUJCJDEoKS5jb3B5KHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBFeHRlbmQgdGhpcyBBQUJCIHNvIHRoYXQgaXQgY292ZXJzIHRoZSBnaXZlbiBBQUJCIHRvby5cbiAgICovXG5cblxuICBleHRlbmQoYWFiYikge1xuICAgIHRoaXMubG93ZXJCb3VuZC54ID0gTWF0aC5taW4odGhpcy5sb3dlckJvdW5kLngsIGFhYmIubG93ZXJCb3VuZC54KTtcbiAgICB0aGlzLnVwcGVyQm91bmQueCA9IE1hdGgubWF4KHRoaXMudXBwZXJCb3VuZC54LCBhYWJiLnVwcGVyQm91bmQueCk7XG4gICAgdGhpcy5sb3dlckJvdW5kLnkgPSBNYXRoLm1pbih0aGlzLmxvd2VyQm91bmQueSwgYWFiYi5sb3dlckJvdW5kLnkpO1xuICAgIHRoaXMudXBwZXJCb3VuZC55ID0gTWF0aC5tYXgodGhpcy51cHBlckJvdW5kLnksIGFhYmIudXBwZXJCb3VuZC55KTtcbiAgICB0aGlzLmxvd2VyQm91bmQueiA9IE1hdGgubWluKHRoaXMubG93ZXJCb3VuZC56LCBhYWJiLmxvd2VyQm91bmQueik7XG4gICAgdGhpcy51cHBlckJvdW5kLnogPSBNYXRoLm1heCh0aGlzLnVwcGVyQm91bmQueiwgYWFiYi51cHBlckJvdW5kLnopO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIEFBQkIgb3ZlcmxhcHMgdGhpcyBBQUJCLlxuICAgKi9cblxuXG4gIG92ZXJsYXBzKGFhYmIpIHtcbiAgICBjb25zdCBsMSA9IHRoaXMubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1MSA9IHRoaXMudXBwZXJCb3VuZDtcbiAgICBjb25zdCBsMiA9IGFhYmIubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1MiA9IGFhYmIudXBwZXJCb3VuZDsgLy8gICAgICBsMiAgICAgICAgdTJcbiAgICAvLyAgICAgIHwtLS0tLS0tLS18XG4gICAgLy8gfC0tLS0tLS0tfFxuICAgIC8vIGwxICAgICAgIHUxXG5cbiAgICBjb25zdCBvdmVybGFwc1ggPSBsMi54IDw9IHUxLnggJiYgdTEueCA8PSB1Mi54IHx8IGwxLnggPD0gdTIueCAmJiB1Mi54IDw9IHUxLng7XG4gICAgY29uc3Qgb3ZlcmxhcHNZID0gbDIueSA8PSB1MS55ICYmIHUxLnkgPD0gdTIueSB8fCBsMS55IDw9IHUyLnkgJiYgdTIueSA8PSB1MS55O1xuICAgIGNvbnN0IG92ZXJsYXBzWiA9IGwyLnogPD0gdTEueiAmJiB1MS56IDw9IHUyLnogfHwgbDEueiA8PSB1Mi56ICYmIHUyLnogPD0gdTEuejtcbiAgICByZXR1cm4gb3ZlcmxhcHNYICYmIG92ZXJsYXBzWSAmJiBvdmVybGFwc1o7XG4gIH0gLy8gTW9zdGx5IGZvciBkZWJ1Z2dpbmdcblxuXG4gIHZvbHVtZSgpIHtcbiAgICBjb25zdCBsID0gdGhpcy5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUgPSB0aGlzLnVwcGVyQm91bmQ7XG4gICAgcmV0dXJuICh1LnggLSBsLngpICogKHUueSAtIGwueSkgKiAodS56IC0gbC56KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBBQUJCIGlzIGZ1bGx5IGNvbnRhaW5lZCBpbiB0aGlzIEFBQkIuXG4gICAqL1xuXG5cbiAgY29udGFpbnMoYWFiYikge1xuICAgIGNvbnN0IGwxID0gdGhpcy5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUxID0gdGhpcy51cHBlckJvdW5kO1xuICAgIGNvbnN0IGwyID0gYWFiYi5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUyID0gYWFiYi51cHBlckJvdW5kOyAvLyAgICAgIGwyICAgICAgICB1MlxuICAgIC8vICAgICAgfC0tLS0tLS0tLXxcbiAgICAvLyB8LS0tLS0tLS0tLS0tLS0tfFxuICAgIC8vIGwxICAgICAgICAgICAgICB1MVxuXG4gICAgcmV0dXJuIGwxLnggPD0gbDIueCAmJiB1MS54ID49IHUyLnggJiYgbDEueSA8PSBsMi55ICYmIHUxLnkgPj0gdTIueSAmJiBsMS56IDw9IGwyLnogJiYgdTEueiA+PSB1Mi56O1xuICB9XG5cbiAgZ2V0Q29ybmVycyhhLCBiLCBjLCBkLCBlLCBmLCBnLCBoKSB7XG4gICAgY29uc3QgbCA9IHRoaXMubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1ID0gdGhpcy51cHBlckJvdW5kO1xuICAgIGEuY29weShsKTtcbiAgICBiLnNldCh1LngsIGwueSwgbC56KTtcbiAgICBjLnNldCh1LngsIHUueSwgbC56KTtcbiAgICBkLnNldChsLngsIHUueSwgdS56KTtcbiAgICBlLnNldCh1LngsIGwueSwgdS56KTtcbiAgICBmLnNldChsLngsIHUueSwgbC56KTtcbiAgICBnLnNldChsLngsIGwueSwgdS56KTtcbiAgICBoLmNvcHkodSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVwcmVzZW50YXRpb24gb2YgYW4gQUFCQiBpbiBhbm90aGVyIGZyYW1lLlxuICAgKiBAcmV0dXJuIFRoZSBcInRhcmdldFwiIEFBQkIgb2JqZWN0LlxuICAgKi9cblxuXG4gIHRvTG9jYWxGcmFtZShmcmFtZSwgdGFyZ2V0KSB7XG4gICAgY29uc3QgY29ybmVycyA9IHRyYW5zZm9ybUludG9GcmFtZV9jb3JuZXJzJDE7XG4gICAgY29uc3QgYSA9IGNvcm5lcnNbMF07XG4gICAgY29uc3QgYiA9IGNvcm5lcnNbMV07XG4gICAgY29uc3QgYyA9IGNvcm5lcnNbMl07XG4gICAgY29uc3QgZCA9IGNvcm5lcnNbM107XG4gICAgY29uc3QgZSA9IGNvcm5lcnNbNF07XG4gICAgY29uc3QgZiA9IGNvcm5lcnNbNV07XG4gICAgY29uc3QgZyA9IGNvcm5lcnNbNl07XG4gICAgY29uc3QgaCA9IGNvcm5lcnNbN107IC8vIEdldCBjb3JuZXJzIGluIGN1cnJlbnQgZnJhbWVcblxuICAgIHRoaXMuZ2V0Q29ybmVycyhhLCBiLCBjLCBkLCBlLCBmLCBnLCBoKTsgLy8gVHJhbnNmb3JtIHRoZW0gdG8gbmV3IGxvY2FsIGZyYW1lXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gODsgaSsrKSB7XG4gICAgICBjb25zdCBjb3JuZXIgPSBjb3JuZXJzW2ldO1xuICAgICAgZnJhbWUucG9pbnRUb0xvY2FsKGNvcm5lciwgY29ybmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0LnNldEZyb21Qb2ludHMoY29ybmVycyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVwcmVzZW50YXRpb24gb2YgYW4gQUFCQiBpbiB0aGUgZ2xvYmFsIGZyYW1lLlxuICAgKiBAcmV0dXJuIFRoZSBcInRhcmdldFwiIEFBQkIgb2JqZWN0LlxuICAgKi9cblxuXG4gIHRvV29ybGRGcmFtZShmcmFtZSwgdGFyZ2V0KSB7XG4gICAgY29uc3QgY29ybmVycyA9IHRyYW5zZm9ybUludG9GcmFtZV9jb3JuZXJzJDE7XG4gICAgY29uc3QgYSA9IGNvcm5lcnNbMF07XG4gICAgY29uc3QgYiA9IGNvcm5lcnNbMV07XG4gICAgY29uc3QgYyA9IGNvcm5lcnNbMl07XG4gICAgY29uc3QgZCA9IGNvcm5lcnNbM107XG4gICAgY29uc3QgZSA9IGNvcm5lcnNbNF07XG4gICAgY29uc3QgZiA9IGNvcm5lcnNbNV07XG4gICAgY29uc3QgZyA9IGNvcm5lcnNbNl07XG4gICAgY29uc3QgaCA9IGNvcm5lcnNbN107IC8vIEdldCBjb3JuZXJzIGluIGN1cnJlbnQgZnJhbWVcblxuICAgIHRoaXMuZ2V0Q29ybmVycyhhLCBiLCBjLCBkLCBlLCBmLCBnLCBoKTsgLy8gVHJhbnNmb3JtIHRoZW0gdG8gbmV3IGxvY2FsIGZyYW1lXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gODsgaSsrKSB7XG4gICAgICBjb25zdCBjb3JuZXIgPSBjb3JuZXJzW2ldO1xuICAgICAgZnJhbWUucG9pbnRUb1dvcmxkKGNvcm5lciwgY29ybmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0LnNldEZyb21Qb2ludHMoY29ybmVycyk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBBQUJCIGlzIGhpdCBieSBhIHJheS5cbiAgICovXG5cblxuICBvdmVybGFwc1JheShyYXkpIHtcbiAgICBjb25zdCB7XG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBmcm9tXG4gICAgfSA9IHJheTsgLy8gY29uc3QgdCA9IDBcbiAgICAvLyByYXkuZGlyZWN0aW9uIGlzIHVuaXQgZGlyZWN0aW9uIHZlY3RvciBvZiByYXlcblxuICAgIGNvbnN0IGRpckZyYWNYID0gMSAvIGRpcmVjdGlvbi54O1xuICAgIGNvbnN0IGRpckZyYWNZID0gMSAvIGRpcmVjdGlvbi55O1xuICAgIGNvbnN0IGRpckZyYWNaID0gMSAvIGRpcmVjdGlvbi56OyAvLyB0aGlzLmxvd2VyQm91bmQgaXMgdGhlIGNvcm5lciBvZiBBQUJCIHdpdGggbWluaW1hbCBjb29yZGluYXRlcyAtIGxlZnQgYm90dG9tLCBydCBpcyBtYXhpbWFsIGNvcm5lclxuXG4gICAgY29uc3QgdDEgPSAodGhpcy5sb3dlckJvdW5kLnggLSBmcm9tLngpICogZGlyRnJhY1g7XG4gICAgY29uc3QgdDIgPSAodGhpcy51cHBlckJvdW5kLnggLSBmcm9tLngpICogZGlyRnJhY1g7XG4gICAgY29uc3QgdDMgPSAodGhpcy5sb3dlckJvdW5kLnkgLSBmcm9tLnkpICogZGlyRnJhY1k7XG4gICAgY29uc3QgdDQgPSAodGhpcy51cHBlckJvdW5kLnkgLSBmcm9tLnkpICogZGlyRnJhY1k7XG4gICAgY29uc3QgdDUgPSAodGhpcy5sb3dlckJvdW5kLnogLSBmcm9tLnopICogZGlyRnJhY1o7XG4gICAgY29uc3QgdDYgPSAodGhpcy51cHBlckJvdW5kLnogLSBmcm9tLnopICogZGlyRnJhY1o7IC8vIGNvbnN0IHRtaW4gPSBNYXRoLm1heChNYXRoLm1heChNYXRoLm1pbih0MSwgdDIpLCBNYXRoLm1pbih0MywgdDQpKSk7XG4gICAgLy8gY29uc3QgdG1heCA9IE1hdGgubWluKE1hdGgubWluKE1hdGgubWF4KHQxLCB0MiksIE1hdGgubWF4KHQzLCB0NCkpKTtcblxuICAgIGNvbnN0IHRtaW4gPSBNYXRoLm1heChNYXRoLm1heChNYXRoLm1pbih0MSwgdDIpLCBNYXRoLm1pbih0MywgdDQpKSwgTWF0aC5taW4odDUsIHQ2KSk7XG4gICAgY29uc3QgdG1heCA9IE1hdGgubWluKE1hdGgubWluKE1hdGgubWF4KHQxLCB0MiksIE1hdGgubWF4KHQzLCB0NCkpLCBNYXRoLm1heCh0NSwgdDYpKTsgLy8gaWYgdG1heCA8IDAsIHJheSAobGluZSkgaXMgaW50ZXJzZWN0aW5nIEFBQkIsIGJ1dCB3aG9sZSBBQUJCIGlzIGJlaGluZyB1c1xuXG4gICAgaWYgKHRtYXggPCAwKSB7XG4gICAgICAvL3QgPSB0bWF4O1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gaWYgdG1pbiA+IHRtYXgsIHJheSBkb2Vzbid0IGludGVyc2VjdCBBQUJCXG5cblxuICAgIGlmICh0bWluID4gdG1heCkge1xuICAgICAgLy90ID0gdG1heDtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG59XG5jb25zdCB0bXAkMSQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgdHJhbnNmb3JtSW50b0ZyYW1lX2Nvcm5lcnMkMSA9IFtuZXcgVmVjMyQxKCksIG5ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpLCBuZXcgVmVjMyQxKCksIG5ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpLCBuZXcgVmVjMyQxKCksIG5ldyBWZWMzJDEoKV07XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3Igb2JqZWN0cyB0aGF0IGRpc3BhdGNoZXMgZXZlbnRzLlxuICovXG5jbGFzcyBFdmVudFRhcmdldCB7XG4gIC8qKlxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICogQHJldHVybiBUaGUgc2VsZiBvYmplY3QsIGZvciBjaGFpbmFiaWxpdHkuXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cbiAgICBpZiAobGlzdGVuZXJzW3R5cGVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgIH1cblxuICAgIGlmICghbGlzdGVuZXJzW3R5cGVdLmluY2x1ZGVzKGxpc3RlbmVyKSkge1xuICAgICAgbGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBldmVudCBsaXN0ZW5lciBpcyBhZGRlZFxuICAgKi9cblxuXG4gIGhhc0V2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cbiAgICBpZiAobGlzdGVuZXJzW3R5cGVdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzW3R5cGVdLmluY2x1ZGVzKGxpc3RlbmVyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbnkgZXZlbnQgbGlzdGVuZXIgb2YgdGhlIGdpdmVuIHR5cGUgaXMgYWRkZWRcbiAgICovXG5cblxuICBoYXNBbnlFdmVudExpc3RlbmVyKHR5cGUpIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgcmV0dXJuIGxpc3RlbmVyc1t0eXBlXSAhPT0gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICogQHJldHVybiBUaGUgc2VsZiBvYmplY3QsIGZvciBjaGFpbmFiaWxpdHkuXG4gICAqL1xuXG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXG4gICAgaWYgKGxpc3RlbmVyc1t0eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBFbWl0IGFuIGV2ZW50LlxuICAgKiBAcmV0dXJuIFRoZSBzZWxmIG9iamVjdCwgZm9yIGNoYWluYWJpbGl0eS5cbiAgICovXG5cblxuICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgY29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1tldmVudC50eXBlXTtcblxuICAgIGlmIChsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGV2ZW50LnRhcmdldCA9IHRoaXM7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlzdGVuZXJBcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJBcnJheVtpXS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cbi8qKlxuICogQSBRdWF0ZXJuaW9uIGRlc2NyaWJlcyBhIHJvdGF0aW9uIGluIDNEIHNwYWNlLiBUaGUgUXVhdGVybmlvbiBpcyBtYXRoZW1hdGljYWxseSBkZWZpbmVkIGFzIFEgPSB4KmkgKyB5KmogKyB6KmsgKyB3LCB3aGVyZSAoaSxqLGspIGFyZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9ycy4gKHgseSx6KSBjYW4gYmUgc2VlbiBhcyBhIHZlY3RvciByZWxhdGVkIHRvIHRoZSBheGlzIG9mIHJvdGF0aW9uLCB3aGlsZSB0aGUgcmVhbCBtdWx0aXBsaWVyLCB3LCBpcyByZWxhdGVkIHRvIHRoZSBhbW91bnQgb2Ygcm90YXRpb24uXG4gKiBAcGFyYW0geCBNdWx0aXBsaWVyIG9mIHRoZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9yIGkuXG4gKiBAcGFyYW0geSBNdWx0aXBsaWVyIG9mIHRoZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9yIGouXG4gKiBAcGFyYW0geiBNdWx0aXBsaWVyIG9mIHRoZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9yIGsuXG4gKiBAcGFyYW0gdyBNdWx0aXBsaWVyIG9mIHRoZSByZWFsIHBhcnQuXG4gKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhdGVybmlvblxuICovXG5cbmNsYXNzIFF1YXRlcm5pb24kMSB7XG4gIGNvbnN0cnVjdG9yKHgsIHksIHosIHcpIHtcbiAgICBpZiAoeCA9PT0gdm9pZCAwKSB7XG4gICAgICB4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoeSA9PT0gdm9pZCAwKSB7XG4gICAgICB5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoeiA9PT0gdm9pZCAwKSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG5cbiAgICBpZiAodyA9PT0gdm9pZCAwKSB7XG4gICAgICB3ID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcbiAgICB0aGlzLncgPSB3O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKi9cblxuXG4gIHNldCh4LCB5LCB6LCB3KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG4gICAgdGhpcy53ID0gdztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0byBhIHJlYWRhYmxlIGZvcm1hdFxuICAgKiBAcmV0dXJuIFwieCx5LHosd1wiXG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMueH0sJHt0aGlzLnl9LCR7dGhpcy56fSwke3RoaXMud31gO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHRvIGFuIEFycmF5XG4gICAqIEByZXR1cm4gW3gsIHksIHosIHddXG4gICAqL1xuXG5cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMud107XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgcXVhdGVybmlvbiBjb21wb25lbnRzIGdpdmVuIGFuIGF4aXMgYW5kIGFuIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAqL1xuXG5cbiAgc2V0RnJvbUF4aXNBbmdsZSh2ZWN0b3IsIGFuZ2xlKSB7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKGFuZ2xlICogMC41KTtcbiAgICB0aGlzLnggPSB2ZWN0b3IueCAqIHM7XG4gICAgdGhpcy55ID0gdmVjdG9yLnkgKiBzO1xuICAgIHRoaXMueiA9IHZlY3Rvci56ICogcztcbiAgICB0aGlzLncgPSBNYXRoLmNvcyhhbmdsZSAqIDAuNSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBxdWF0ZXJuaW9uIHRvIFsgYXhpcywgYW5nbGUgXSByZXByZXNlbnRhdGlvbi5cbiAgICogQHBhcmFtIHRhcmdldEF4aXMgQSB2ZWN0b3Igb2JqZWN0IHRvIHJldXNlIGZvciBzdG9yaW5nIHRoZSBheGlzLlxuICAgKiBAcmV0dXJuIEFuIGFycmF5LCBmaXJzdCBlbGVtZW50IGlzIHRoZSBheGlzIGFuZCB0aGUgc2Vjb25kIGlzIHRoZSBhbmdsZSBpbiByYWRpYW5zLlxuICAgKi9cblxuXG4gIHRvQXhpc0FuZ2xlKHRhcmdldEF4aXMpIHtcbiAgICBpZiAodGFyZ2V0QXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXRBeGlzID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRoaXMubm9ybWFsaXplKCk7IC8vIGlmIHc+MSBhY29zIGFuZCBzcXJ0IHdpbGwgcHJvZHVjZSBlcnJvcnMsIHRoaXMgY2FudCBoYXBwZW4gaWYgcXVhdGVybmlvbiBpcyBub3JtYWxpc2VkXG5cbiAgICBjb25zdCBhbmdsZSA9IDIgKiBNYXRoLmFjb3ModGhpcy53KTtcbiAgICBjb25zdCBzID0gTWF0aC5zcXJ0KDEgLSB0aGlzLncgKiB0aGlzLncpOyAvLyBhc3N1bWluZyBxdWF0ZXJuaW9uIG5vcm1hbGlzZWQgdGhlbiB3IGlzIGxlc3MgdGhhbiAxLCBzbyB0ZXJtIGFsd2F5cyBwb3NpdGl2ZS5cblxuICAgIGlmIChzIDwgMC4wMDEpIHtcbiAgICAgIC8vIHRlc3QgdG8gYXZvaWQgZGl2aWRlIGJ5IHplcm8sIHMgaXMgYWx3YXlzIHBvc2l0aXZlIGR1ZSB0byBzcXJ0XG4gICAgICAvLyBpZiBzIGNsb3NlIHRvIHplcm8gdGhlbiBkaXJlY3Rpb24gb2YgYXhpcyBub3QgaW1wb3J0YW50XG4gICAgICB0YXJnZXRBeGlzLnggPSB0aGlzLng7IC8vIGlmIGl0IGlzIGltcG9ydGFudCB0aGF0IGF4aXMgaXMgbm9ybWFsaXNlZCB0aGVuIHJlcGxhY2Ugd2l0aCB4PTE7IHk9ej0wO1xuXG4gICAgICB0YXJnZXRBeGlzLnkgPSB0aGlzLnk7XG4gICAgICB0YXJnZXRBeGlzLnogPSB0aGlzLno7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldEF4aXMueCA9IHRoaXMueCAvIHM7IC8vIG5vcm1hbGlzZSBheGlzXG5cbiAgICAgIHRhcmdldEF4aXMueSA9IHRoaXMueSAvIHM7XG4gICAgICB0YXJnZXRBeGlzLnogPSB0aGlzLnogLyBzO1xuICAgIH1cblxuICAgIHJldHVybiBbdGFyZ2V0QXhpcywgYW5nbGVdO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHF1YXRlcm5pb24gdmFsdWUgZ2l2ZW4gdHdvIHZlY3RvcnMuIFRoZSByZXN1bHRpbmcgcm90YXRpb24gd2lsbCBiZSB0aGUgbmVlZGVkIHJvdGF0aW9uIHRvIHJvdGF0ZSB1IHRvIHYuXG4gICAqL1xuXG5cbiAgc2V0RnJvbVZlY3RvcnModSwgdikge1xuICAgIGlmICh1LmlzQW50aXBhcmFsbGVsVG8odikpIHtcbiAgICAgIGNvbnN0IHQxID0gc2Z2X3QxJDE7XG4gICAgICBjb25zdCB0MiA9IHNmdl90MiQxO1xuICAgICAgdS50YW5nZW50cyh0MSwgdDIpO1xuICAgICAgdGhpcy5zZXRGcm9tQXhpc0FuZ2xlKHQxLCBNYXRoLlBJKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYSA9IHUuY3Jvc3Modik7XG4gICAgICB0aGlzLnggPSBhLng7XG4gICAgICB0aGlzLnkgPSBhLnk7XG4gICAgICB0aGlzLnogPSBhLno7XG4gICAgICB0aGlzLncgPSBNYXRoLnNxcnQodS5sZW5ndGgoKSAqKiAyICogdi5sZW5ndGgoKSAqKiAyKSArIHUuZG90KHYpO1xuICAgICAgdGhpcy5ub3JtYWxpemUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogTXVsdGlwbHkgdGhlIHF1YXRlcm5pb24gd2l0aCBhbiBvdGhlciBxdWF0ZXJuaW9uLlxuICAgKi9cblxuXG4gIG11bHQocXVhdCwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgUXVhdGVybmlvbiQxKCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXggPSB0aGlzLng7XG4gICAgY29uc3QgYXkgPSB0aGlzLnk7XG4gICAgY29uc3QgYXogPSB0aGlzLno7XG4gICAgY29uc3QgYXcgPSB0aGlzLnc7XG4gICAgY29uc3QgYnggPSBxdWF0Lng7XG4gICAgY29uc3QgYnkgPSBxdWF0Lnk7XG4gICAgY29uc3QgYnogPSBxdWF0Lno7XG4gICAgY29uc3QgYncgPSBxdWF0Lnc7XG4gICAgdGFyZ2V0LnggPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIHRhcmdldC55ID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICB0YXJnZXQueiA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gICAgdGFyZ2V0LncgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgaW52ZXJzZSBxdWF0ZXJuaW9uIHJvdGF0aW9uLlxuICAgKi9cblxuXG4gIGludmVyc2UodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgUXVhdGVybmlvbiQxKCk7XG4gICAgfVxuXG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgY29uc3QgdyA9IHRoaXMudztcbiAgICB0aGlzLmNvbmp1Z2F0ZSh0YXJnZXQpO1xuICAgIGNvbnN0IGlub3JtMiA9IDEgLyAoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICAgIHRhcmdldC54ICo9IGlub3JtMjtcbiAgICB0YXJnZXQueSAqPSBpbm9ybTI7XG4gICAgdGFyZ2V0LnogKj0gaW5vcm0yO1xuICAgIHRhcmdldC53ICo9IGlub3JtMjtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHF1YXRlcm5pb24gY29uanVnYXRlXG4gICAqL1xuXG5cbiAgY29uanVnYXRlKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFF1YXRlcm5pb24kMSgpO1xuICAgIH1cblxuICAgIHRhcmdldC54ID0gLXRoaXMueDtcbiAgICB0YXJnZXQueSA9IC10aGlzLnk7XG4gICAgdGFyZ2V0LnogPSAtdGhpcy56O1xuICAgIHRhcmdldC53ID0gdGhpcy53O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbi4gTm90ZSB0aGF0IHRoaXMgY2hhbmdlcyB0aGUgdmFsdWVzIG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKi9cblxuXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBsZXQgbCA9IE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncpO1xuXG4gICAgaWYgKGwgPT09IDApIHtcbiAgICAgIHRoaXMueCA9IDA7XG4gICAgICB0aGlzLnkgPSAwO1xuICAgICAgdGhpcy56ID0gMDtcbiAgICAgIHRoaXMudyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSAxIC8gbDtcbiAgICAgIHRoaXMueCAqPSBsO1xuICAgICAgdGhpcy55ICo9IGw7XG4gICAgICB0aGlzLnogKj0gbDtcbiAgICAgIHRoaXMudyAqPSBsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBcHByb3hpbWF0aW9uIG9mIHF1YXRlcm5pb24gbm9ybWFsaXphdGlvbi4gV29ya3MgYmVzdCB3aGVuIHF1YXQgaXMgYWxyZWFkeSBhbG1vc3Qtbm9ybWFsaXplZC5cbiAgICogQGF1dGhvciB1bnBoYXNlZCwgaHR0cHM6Ly9naXRodWIuY29tL3VucGhhc2VkXG4gICAqL1xuXG5cbiAgbm9ybWFsaXplRmFzdCgpIHtcbiAgICBjb25zdCBmID0gKDMuMCAtICh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncpKSAvIDIuMDtcblxuICAgIGlmIChmID09PSAwKSB7XG4gICAgICB0aGlzLnggPSAwO1xuICAgICAgdGhpcy55ID0gMDtcbiAgICAgIHRoaXMueiA9IDA7XG4gICAgICB0aGlzLncgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnggKj0gZjtcbiAgICAgIHRoaXMueSAqPSBmO1xuICAgICAgdGhpcy56ICo9IGY7XG4gICAgICB0aGlzLncgKj0gZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogTXVsdGlwbHkgdGhlIHF1YXRlcm5pb24gYnkgYSB2ZWN0b3JcbiAgICovXG5cblxuICB2bXVsdCh2LCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCB4ID0gdi54O1xuICAgIGNvbnN0IHkgPSB2Lnk7XG4gICAgY29uc3QgeiA9IHYuejtcbiAgICBjb25zdCBxeCA9IHRoaXMueDtcbiAgICBjb25zdCBxeSA9IHRoaXMueTtcbiAgICBjb25zdCBxeiA9IHRoaXMuejtcbiAgICBjb25zdCBxdyA9IHRoaXMudzsgLy8gcSp2XG5cbiAgICBjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcbiAgICBjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgICBjb25zdCBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgICBjb25zdCBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG4gICAgdGFyZ2V0LnggPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xuICAgIHRhcmdldC55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgICB0YXJnZXQueiA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogQ29waWVzIHZhbHVlIG9mIHNvdXJjZSB0byB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm4gdGhpc1xuICAgKi9cblxuXG4gIGNvcHkocXVhdCkge1xuICAgIHRoaXMueCA9IHF1YXQueDtcbiAgICB0aGlzLnkgPSBxdWF0Lnk7XG4gICAgdGhpcy56ID0gcXVhdC56O1xuICAgIHRoaXMudyA9IHF1YXQudztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0aGUgcXVhdGVybmlvbiB0byBldWxlciBhbmdsZSByZXByZXNlbnRhdGlvbi4gT3JkZXI6IFlaWCwgYXMgdGhpcyBwYWdlIGRlc2NyaWJlczogaHR0cHM6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL3N0YW5kYXJkcy9pbmRleC5odG1cbiAgICogQHBhcmFtIG9yZGVyIFRocmVlLWNoYXJhY3RlciBzdHJpbmcsIGRlZmF1bHRzIHRvIFwiWVpYXCJcbiAgICovXG5cblxuICB0b0V1bGVyKHRhcmdldCwgb3JkZXIpIHtcbiAgICBpZiAob3JkZXIgPT09IHZvaWQgMCkge1xuICAgICAgb3JkZXIgPSAnWVpYJztcbiAgICB9XG5cbiAgICBsZXQgaGVhZGluZztcbiAgICBsZXQgYXR0aXR1ZGU7XG4gICAgbGV0IGJhbms7XG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgY29uc3QgdyA9IHRoaXMudztcblxuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICAgIGNhc2UgJ1laWCc6XG4gICAgICAgIGNvbnN0IHRlc3QgPSB4ICogeSArIHogKiB3O1xuXG4gICAgICAgIGlmICh0ZXN0ID4gMC40OTkpIHtcbiAgICAgICAgICAvLyBzaW5ndWxhcml0eSBhdCBub3J0aCBwb2xlXG4gICAgICAgICAgaGVhZGluZyA9IDIgKiBNYXRoLmF0YW4yKHgsIHcpO1xuICAgICAgICAgIGF0dGl0dWRlID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgYmFuayA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGVzdCA8IC0wLjQ5OSkge1xuICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IHNvdXRoIHBvbGVcbiAgICAgICAgICBoZWFkaW5nID0gLTIgKiBNYXRoLmF0YW4yKHgsIHcpO1xuICAgICAgICAgIGF0dGl0dWRlID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgIGJhbmsgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlYWRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IHNxeCA9IHggKiB4O1xuICAgICAgICAgIGNvbnN0IHNxeSA9IHkgKiB5O1xuICAgICAgICAgIGNvbnN0IHNxeiA9IHogKiB6O1xuICAgICAgICAgIGhlYWRpbmcgPSBNYXRoLmF0YW4yKDIgKiB5ICogdyAtIDIgKiB4ICogeiwgMSAtIDIgKiBzcXkgLSAyICogc3F6KTsgLy8gSGVhZGluZ1xuXG4gICAgICAgICAgYXR0aXR1ZGUgPSBNYXRoLmFzaW4oMiAqIHRlc3QpOyAvLyBhdHRpdHVkZVxuXG4gICAgICAgICAgYmFuayA9IE1hdGguYXRhbjIoMiAqIHggKiB3IC0gMiAqIHkgKiB6LCAxIC0gMiAqIHNxeCAtIDIgKiBzcXopOyAvLyBiYW5rXG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFdWxlciBvcmRlciAke29yZGVyfSBub3Qgc3VwcG9ydGVkIHlldC5gKTtcbiAgICB9XG5cbiAgICB0YXJnZXQueSA9IGhlYWRpbmc7XG4gICAgdGFyZ2V0LnogPSBhdHRpdHVkZTtcbiAgICB0YXJnZXQueCA9IGJhbms7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgcXVhdGVybmlvbiBjb21wb25lbnRzIGdpdmVuIEV1bGVyIGFuZ2xlIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gb3JkZXIgVGhlIG9yZGVyIHRvIGFwcGx5IGFuZ2xlczogJ1hZWicgb3IgJ1lYWicgb3IgYW55IG90aGVyIGNvbWJpbmF0aW9uLlxuICAgKlxuICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvMjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMgTWF0aFdvcmtzfSByZWZlcmVuY2VcbiAgICovXG5cblxuICBzZXRGcm9tRXVsZXIoeCwgeSwgeiwgb3JkZXIpIHtcbiAgICBpZiAob3JkZXIgPT09IHZvaWQgMCkge1xuICAgICAgb3JkZXIgPSAnWFlaJztcbiAgICB9XG5cbiAgICBjb25zdCBjMSA9IE1hdGguY29zKHggLyAyKTtcbiAgICBjb25zdCBjMiA9IE1hdGguY29zKHkgLyAyKTtcbiAgICBjb25zdCBjMyA9IE1hdGguY29zKHogLyAyKTtcbiAgICBjb25zdCBzMSA9IE1hdGguc2luKHggLyAyKTtcbiAgICBjb25zdCBzMiA9IE1hdGguc2luKHkgLyAyKTtcbiAgICBjb25zdCBzMyA9IE1hdGguc2luKHogLyAyKTtcblxuICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcbiAgICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcbiAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcbiAgICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcbiAgICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG4gICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG4gICAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcbiAgICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcbiAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcbiAgICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcbiAgICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuICAgICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG4gICAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24kMSh0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncpO1xuICB9XG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0XG4gICAqXG4gICAqIEBwYXJhbSB0b1F1YXQgc2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgc2VsZiBxdWF0ZXJuaW9uIGFuZCB0b1F1YXRcbiAgICogQHBhcmFtIHRhcmdldCBBIHF1YXRlcm5pb24gdG8gc3RvcmUgdGhlIHJlc3VsdCBpbi4gSWYgbm90IHByb3ZpZGVkLCBhIG5ldyBvbmUgd2lsbCBiZSBjcmVhdGVkLlxuICAgKiBAcmV0dXJucyB7UXVhdGVybmlvbn0gVGhlIFwidGFyZ2V0XCIgb2JqZWN0XG4gICAqL1xuXG5cbiAgc2xlcnAodG9RdWF0LCB0LCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCBheCA9IHRoaXMueDtcbiAgICBjb25zdCBheSA9IHRoaXMueTtcbiAgICBjb25zdCBheiA9IHRoaXMuejtcbiAgICBjb25zdCBhdyA9IHRoaXMudztcbiAgICBsZXQgYnggPSB0b1F1YXQueDtcbiAgICBsZXQgYnkgPSB0b1F1YXQueTtcbiAgICBsZXQgYnogPSB0b1F1YXQuejtcbiAgICBsZXQgYncgPSB0b1F1YXQudztcbiAgICBsZXQgb21lZ2E7XG4gICAgbGV0IGNvc29tO1xuICAgIGxldCBzaW5vbTtcbiAgICBsZXQgc2NhbGUwO1xuICAgIGxldCBzY2FsZTE7IC8vIGNhbGMgY29zaW5lXG5cbiAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7IC8vIGFkanVzdCBzaWducyAoaWYgbmVjZXNzYXJ5KVxuXG4gICAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgICBjb3NvbSA9IC1jb3NvbTtcbiAgICAgIGJ4ID0gLWJ4O1xuICAgICAgYnkgPSAtYnk7XG4gICAgICBieiA9IC1iejtcbiAgICAgIGJ3ID0gLWJ3O1xuICAgIH0gLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuXG5cbiAgICBpZiAoMS4wIC0gY29zb20gPiAwLjAwMDAwMSkge1xuICAgICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgICBvbWVnYSA9IE1hdGguYWNvcyhjb3NvbSk7XG4gICAgICBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBcImZyb21cIiBhbmQgXCJ0b1wiIHF1YXRlcm5pb25zIGFyZSB2ZXJ5IGNsb3NlXG4gICAgICAvLyAgLi4uIHNvIHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgICAgc2NhbGUxID0gdDtcbiAgICB9IC8vIGNhbGN1bGF0ZSBmaW5hbCB2YWx1ZXNcblxuXG4gICAgdGFyZ2V0LnggPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICAgIHRhcmdldC55ID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgICB0YXJnZXQueiA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgdGFyZ2V0LncgPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFJvdGF0ZSBhbiBhYnNvbHV0ZSBvcmllbnRhdGlvbiBxdWF0ZXJuaW9uIGdpdmVuIGFuIGFuZ3VsYXIgdmVsb2NpdHkgYW5kIGEgdGltZSBzdGVwLlxuICAgKi9cblxuXG4gIGludGVncmF0ZShhbmd1bGFyVmVsb2NpdHksIGR0LCBhbmd1bGFyRmFjdG9yLCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCBheCA9IGFuZ3VsYXJWZWxvY2l0eS54ICogYW5ndWxhckZhY3Rvci54LFxuICAgICAgICAgIGF5ID0gYW5ndWxhclZlbG9jaXR5LnkgKiBhbmd1bGFyRmFjdG9yLnksXG4gICAgICAgICAgYXogPSBhbmd1bGFyVmVsb2NpdHkueiAqIGFuZ3VsYXJGYWN0b3IueixcbiAgICAgICAgICBieCA9IHRoaXMueCxcbiAgICAgICAgICBieSA9IHRoaXMueSxcbiAgICAgICAgICBieiA9IHRoaXMueixcbiAgICAgICAgICBidyA9IHRoaXMudztcbiAgICBjb25zdCBoYWxmX2R0ID0gZHQgKiAwLjU7XG4gICAgdGFyZ2V0LnggKz0gaGFsZl9kdCAqIChheCAqIGJ3ICsgYXkgKiBieiAtIGF6ICogYnkpO1xuICAgIHRhcmdldC55ICs9IGhhbGZfZHQgKiAoYXkgKiBidyArIGF6ICogYnggLSBheCAqIGJ6KTtcbiAgICB0YXJnZXQueiArPSBoYWxmX2R0ICogKGF6ICogYncgKyBheCAqIGJ5IC0gYXkgKiBieCk7XG4gICAgdGFyZ2V0LncgKz0gaGFsZl9kdCAqICgtYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbn1cbmNvbnN0IHNmdl90MSQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3Qgc2Z2X3QyJDEgPSBuZXcgVmVjMyQxKCk7XG5cbi8qKlxuICogVGhlIGF2YWlsYWJsZSBzaGFwZSB0eXBlcy5cbiAqL1xuY29uc3QgU0hBUEVfVFlQRVMkMSA9IHtcbiAgLyoqIFNQSEVSRSAqL1xuICBTUEhFUkU6IDEsXG5cbiAgLyoqIFBMQU5FICovXG4gIFBMQU5FOiAyLFxuXG4gIC8qKiBCT1ggKi9cbiAgQk9YOiA0LFxuXG4gIC8qKiBDT01QT1VORCAqL1xuICBDT01QT1VORDogOCxcblxuICAvKiogQ09OVkVYUE9MWUhFRFJPTiAqL1xuICBDT05WRVhQT0xZSEVEUk9OOiAxNixcblxuICAvKiogSEVJR0hURklFTEQgKi9cbiAgSEVJR0hURklFTEQ6IDMyLFxuXG4gIC8qKiBQQVJUSUNMRSAqL1xuICBQQVJUSUNMRTogNjQsXG5cbiAgLyoqIENZTElOREVSICovXG4gIENZTElOREVSOiAxMjgsXG5cbiAgLyoqIFRSSU1FU0ggKi9cbiAgVFJJTUVTSDogMjU2XG59O1xuLyoqXG4gKiBTaGFwZVR5cGVcbiAqL1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHNoYXBlc1xuICovXG5jbGFzcyBTaGFwZSQxIHtcbiAgLyoqXG4gICAqIElkZW50aWZpZXIgb2YgdGhlIFNoYXBlLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhpcyBzaGFwZS4gTXVzdCBiZSBzZXQgdG8gYW4gaW50ID4gMCBieSBzdWJjbGFzc2VzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGxvY2FsIGJvdW5kaW5nIHNwaGVyZSByYWRpdXMgb2YgdGhpcyBzaGFwZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcHJvZHVjZSBjb250YWN0IGZvcmNlcyB3aGVuIGluIGNvbnRhY3Qgd2l0aCBvdGhlciBib2RpZXMuIE5vdGUgdGhhdCBjb250YWN0cyB3aWxsIGJlIGdlbmVyYXRlZCwgYnV0IHRoZXkgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cblxuICAvKipcbiAgICogQGRlZmF1bHQgMVxuICAgKi9cblxuICAvKipcbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIG1hdGVyaWFsIG9mIHRoZSBzaGFwZSB0aGF0IHJlZ3VsYXRlcyBjb250YWN0IHByb3BlcnRpZXMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgYm9keSB0byB3aGljaCB0aGUgc2hhcGUgaXMgYWRkZWQgdG8uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbGwgdGhlIFNoYXBlIHR5cGVzLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLmlkID0gU2hhcGUkMS5pZENvdW50ZXIrKztcbiAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGUgfHwgMDtcbiAgICB0aGlzLmJvdW5kaW5nU3BoZXJlUmFkaXVzID0gMDtcbiAgICB0aGlzLmNvbGxpc2lvblJlc3BvbnNlID0gb3B0aW9ucy5jb2xsaXNpb25SZXNwb25zZSA/IG9wdGlvbnMuY29sbGlzaW9uUmVzcG9uc2UgOiB0cnVlO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgPSBvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwIDogMTtcbiAgICB0aGlzLmNvbGxpc2lvbkZpbHRlck1hc2sgPSBvcHRpb25zLmNvbGxpc2lvbkZpbHRlck1hc2sgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzayA6IC0xO1xuICAgIHRoaXMubWF0ZXJpYWwgPSBvcHRpb25zLm1hdGVyaWFsID8gb3B0aW9ucy5tYXRlcmlhbCA6IG51bGw7XG4gICAgdGhpcy5ib2R5ID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGJvdW5kaW5nIHNwaGVyZSByYWRpdXMuXG4gICAqIFRoZSByZXN1bHQgaXMgc3RvcmVkIGluIHRoZSBwcm9wZXJ0eSBgLmJvdW5kaW5nU3BoZXJlUmFkaXVzYFxuICAgKi9cblxuXG4gIHVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCkge1xuICAgIHRocm93IGBjb21wdXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKSBub3QgaW1wbGVtZW50ZWQgZm9yIHNoYXBlIHR5cGUgJHt0aGlzLnR5cGV9YDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB2b2x1bWUgb2YgdGhpcyBzaGFwZVxuICAgKi9cblxuXG4gIHZvbHVtZSgpIHtcbiAgICB0aHJvdyBgdm9sdW1lKCkgbm90IGltcGxlbWVudGVkIGZvciBzaGFwZSB0eXBlICR7dGhpcy50eXBlfWA7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGluZXJ0aWEgaW4gdGhlIGxvY2FsIGZyYW1lIGZvciB0aGlzIHNoYXBlLlxuICAgKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9tb21lbnRzX29mX2luZXJ0aWFcbiAgICovXG5cblxuICBjYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgdGFyZ2V0KSB7XG4gICAgdGhyb3cgYGNhbGN1bGF0ZUxvY2FsSW5lcnRpYSgpIG5vdCBpbXBsZW1lbnRlZCBmb3Igc2hhcGUgdHlwZSAke3RoaXMudHlwZX1gO1xuICB9XG4gIC8qKlxuICAgKiBAdG9kbyB1c2UgYWJzdHJhY3QgZm9yIHRoZXNlIGtpbmQgb2YgbWV0aG9kc1xuICAgKi9cblxuXG4gIGNhbGN1bGF0ZVdvcmxkQUFCQihwb3MsIHF1YXQsIG1pbiwgbWF4KSB7XG4gICAgdGhyb3cgYGNhbGN1bGF0ZVdvcmxkQUFCQigpIG5vdCBpbXBsZW1lbnRlZCBmb3Igc2hhcGUgdHlwZSAke3RoaXMudHlwZX1gO1xuICB9XG5cbn1cblNoYXBlJDEuaWRDb3VudGVyID0gMDtcblNoYXBlJDEudHlwZXMgPSBTSEFQRV9UWVBFUyQxO1xuXG4vKipcbiAqIFRyYW5zZm9ybWF0aW9uIHV0aWxpdGllcy5cbiAqL1xuY2xhc3MgVHJhbnNmb3JtJDEge1xuICAvKipcbiAgICogcG9zaXRpb25cbiAgICovXG5cbiAgLyoqXG4gICAqIHF1YXRlcm5pb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLnF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbiQxKCk7XG5cbiAgICBpZiAob3B0aW9ucy5wb3NpdGlvbikge1xuICAgICAgdGhpcy5wb3NpdGlvbi5jb3B5KG9wdGlvbnMucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnF1YXRlcm5pb24pIHtcbiAgICAgIHRoaXMucXVhdGVybmlvbi5jb3B5KG9wdGlvbnMucXVhdGVybmlvbik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBnbG9iYWwgcG9pbnQgaW4gbG9jYWwgdHJhbnNmb3JtIGNvb3JkaW5hdGVzLlxuICAgKi9cblxuXG4gIHBvaW50VG9Mb2NhbCh3b3JsZFBvaW50LCByZXN1bHQpIHtcbiAgICByZXR1cm4gVHJhbnNmb3JtJDEucG9pbnRUb0xvY2FsRnJhbWUodGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB3b3JsZFBvaW50LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBsb2NhbCBwb2ludCBpbiBnbG9iYWwgdHJhbnNmb3JtIGNvb3JkaW5hdGVzLlxuICAgKi9cblxuXG4gIHBvaW50VG9Xb3JsZChsb2NhbFBvaW50LCByZXN1bHQpIHtcbiAgICByZXR1cm4gVHJhbnNmb3JtJDEucG9pbnRUb1dvcmxkRnJhbWUodGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCBsb2NhbFBvaW50LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiB2ZWN0b3JUb1dvcmxkRnJhbWVcbiAgICovXG5cblxuICB2ZWN0b3JUb1dvcmxkRnJhbWUobG9jYWxWZWN0b3IsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRoaXMucXVhdGVybmlvbi52bXVsdChsb2NhbFZlY3RvciwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBwb2ludFRvTG9jYWxGcmFtZVxuICAgKi9cblxuXG4gIHN0YXRpYyBwb2ludFRvTG9jYWxGcmFtZShwb3NpdGlvbiwgcXVhdGVybmlvbiwgd29ybGRQb2ludCwgcmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQgPSBuZXcgVmVjMyQxKCk7XG4gICAgfVxuXG4gICAgd29ybGRQb2ludC52c3ViKHBvc2l0aW9uLCByZXN1bHQpO1xuICAgIHF1YXRlcm5pb24uY29uanVnYXRlKHRtcFF1YXQkMSQxKTtcbiAgICB0bXBRdWF0JDEkMS52bXVsdChyZXN1bHQsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogcG9pbnRUb1dvcmxkRnJhbWVcbiAgICovXG5cblxuICBzdGF0aWMgcG9pbnRUb1dvcmxkRnJhbWUocG9zaXRpb24sIHF1YXRlcm5pb24sIGxvY2FsUG9pbnQsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHF1YXRlcm5pb24udm11bHQobG9jYWxQb2ludCwgcmVzdWx0KTtcbiAgICByZXN1bHQudmFkZChwb3NpdGlvbiwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiB2ZWN0b3JUb1dvcmxkRnJhbWVcbiAgICovXG5cblxuICBzdGF0aWMgdmVjdG9yVG9Xb3JsZEZyYW1lKHF1YXRlcm5pb24sIGxvY2FsVmVjdG9yLCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBxdWF0ZXJuaW9uLnZtdWx0KGxvY2FsVmVjdG9yLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIHZlY3RvclRvTG9jYWxGcmFtZVxuICAgKi9cblxuXG4gIHN0YXRpYyB2ZWN0b3JUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXRlcm5pb24sIHdvcmxkVmVjdG9yLCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBxdWF0ZXJuaW9uLncgKj0gLTE7XG4gICAgcXVhdGVybmlvbi52bXVsdCh3b3JsZFZlY3RvciwgcmVzdWx0KTtcbiAgICBxdWF0ZXJuaW9uLncgKj0gLTE7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG59XG5jb25zdCB0bXBRdWF0JDEkMSA9IG5ldyBRdWF0ZXJuaW9uJDEoKTtcblxuLyoqXG4gKiBBIHNldCBvZiBwb2x5Z29ucyBkZXNjcmliaW5nIGEgY29udmV4IHNoYXBlLlxuICpcbiAqIFRoZSBzaGFwZSBNVVNUIGJlIGNvbnZleCBmb3IgdGhlIGNvZGUgdG8gd29yayBwcm9wZXJseS4gTm8gcG9seWdvbnMgbWF5IGJlIGNvcGxhbmFyIChjb250YWluZWRcbiAqIGluIHRoZSBzYW1lIDNEIHBsYW5lKSwgaW5zdGVhZCB0aGVzZSBzaG91bGQgYmUgbWVyZ2VkIGludG8gb25lIHBvbHlnb24uXG4gKlxuICogQGF1dGhvciBxaWFvIC8gaHR0cHM6Ly9naXRodWIuY29tL3FpYW8gKG9yaWdpbmFsIGF1dGhvciwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9xaWFvL3RocmVlLmpzL2NvbW1pdC84NTAyNmYwYzc2OWU0MDAwMTQ4YTY3ZDQ1YTllOWI5YzUxMDg4MzZmKVxuICogQGF1dGhvciBzY2h0ZXBwZSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZVxuICogQHNlZSBodHRwczovL3d3dy5hbHRkZXZibG9nYWRheS5jb20vMjAxMS8wNS8xMy9jb250YWN0LWdlbmVyYXRpb24tYmV0d2Vlbi0zZC1jb252ZXgtbWVzaGVzL1xuICpcbiAqIEB0b2RvIE1vdmUgdGhlIGNsaXBwaW5nIGZ1bmN0aW9ucyB0byBDb250YWN0R2VuZXJhdG9yP1xuICogQHRvZG8gQXV0b21hdGljYWxseSBtZXJnZSBjb3BsYW5hciBwb2x5Z29ucyBpbiBjb25zdHJ1Y3Rvci5cbiAqIEBleGFtcGxlXG4gKiAgICAgY29uc3QgY29udmV4U2hhcGUgPSBuZXcgQ0FOTk9OLkNvbnZleFBvbHloZWRyb24oeyB2ZXJ0aWNlcywgZmFjZXMgfSlcbiAqICAgICBjb25zdCBjb252ZXhCb2R5ID0gbmV3IENBTk5PTi5Cb2R5KHsgbWFzczogMSwgc2hhcGU6IGNvbnZleFNoYXBlIH0pXG4gKiAgICAgd29ybGQuYWRkQm9keShjb252ZXhCb2R5KVxuICovXG5jbGFzcyBDb252ZXhQb2x5aGVkcm9uIGV4dGVuZHMgU2hhcGUkMSB7XG4gIC8qKiB2ZXJ0aWNlcyAqL1xuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBpbnRlZ2VyIGFycmF5cywgaW5kaWNhdGluZyB3aGljaCB2ZXJ0aWNlcyBlYWNoIGZhY2UgY29uc2lzdHMgb2ZcbiAgICovXG5cbiAgLyoqIGZhY2VOb3JtYWxzICovXG5cbiAgLyoqIHdvcmxkVmVydGljZXMgKi9cblxuICAvKiogd29ybGRWZXJ0aWNlc05lZWRzVXBkYXRlICovXG5cbiAgLyoqIHdvcmxkRmFjZU5vcm1hbHMgKi9cblxuICAvKiogd29ybGRGYWNlTm9ybWFsc05lZWRzVXBkYXRlICovXG5cbiAgLyoqXG4gICAqIElmIGdpdmVuLCB0aGVzZSBsb2NhbGx5IGRlZmluZWQsIG5vcm1hbGl6ZWQgYXhlcyBhcmUgdGhlIG9ubHkgb25lcyBiZWluZyBjaGVja2VkIHdoZW4gZG9pbmcgc2VwYXJhdGluZyBheGlzIGNoZWNrLlxuICAgKi9cblxuICAvKiogdW5pcXVlRWRnZXMgKi9cblxuICAvKipcbiAgICogQHBhcmFtIHZlcnRpY2VzIEFuIGFycmF5IG9mIFZlYzMnc1xuICAgKiBAcGFyYW0gZmFjZXMgQXJyYXkgb2YgaW50ZWdlciBhcnJheXMsIGRlc2NyaWJpbmcgd2hpY2ggdmVydGljZXMgdGhhdCBpcyBpbmNsdWRlZCBpbiBlYWNoIGZhY2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHZlcnRpY2VzID0gW10sXG4gICAgICBmYWNlcyA9IFtdLFxuICAgICAgbm9ybWFscyA9IFtdLFxuICAgICAgYXhlcyxcbiAgICAgIGJvdW5kaW5nU3BoZXJlUmFkaXVzXG4gICAgfSA9IHByb3BzO1xuICAgIHN1cGVyKHtcbiAgICAgIHR5cGU6IFNoYXBlJDEudHlwZXMuQ09OVkVYUE9MWUhFRFJPTlxuICAgIH0pO1xuICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICB0aGlzLmZhY2VzID0gZmFjZXM7XG4gICAgdGhpcy5mYWNlTm9ybWFscyA9IG5vcm1hbHM7XG5cbiAgICBpZiAodGhpcy5mYWNlTm9ybWFscy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuY29tcHV0ZU5vcm1hbHMoKTtcbiAgICB9XG5cbiAgICBpZiAoIWJvdW5kaW5nU3BoZXJlUmFkaXVzKSB7XG4gICAgICB0aGlzLnVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSBib3VuZGluZ1NwaGVyZVJhZGl1cztcbiAgICB9XG5cbiAgICB0aGlzLndvcmxkVmVydGljZXMgPSBbXTsgLy8gV29ybGQgdHJhbnNmb3JtZWQgdmVyc2lvbiBvZiAudmVydGljZXNcblxuICAgIHRoaXMud29ybGRWZXJ0aWNlc05lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLndvcmxkRmFjZU5vcm1hbHMgPSBbXTsgLy8gV29ybGQgdHJhbnNmb3JtZWQgdmVyc2lvbiBvZiAuZmFjZU5vcm1hbHNcblxuICAgIHRoaXMud29ybGRGYWNlTm9ybWFsc05lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLnVuaXF1ZUF4ZXMgPSBheGVzID8gYXhlcy5zbGljZSgpIDogbnVsbDtcbiAgICB0aGlzLnVuaXF1ZUVkZ2VzID0gW107XG4gICAgdGhpcy5jb21wdXRlRWRnZXMoKTtcbiAgfVxuICAvKipcbiAgICogQ29tcHV0ZXMgdW5pcXVlRWRnZXNcbiAgICovXG5cblxuICBjb21wdXRlRWRnZXMoKSB7XG4gICAgY29uc3QgZmFjZXMgPSB0aGlzLmZhY2VzO1xuICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcbiAgICBjb25zdCBlZGdlcyA9IHRoaXMudW5pcXVlRWRnZXM7XG4gICAgZWRnZXMubGVuZ3RoID0gMDtcbiAgICBjb25zdCBlZGdlID0gbmV3IFZlYzMkMSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IGZhY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmYWNlID0gZmFjZXNbaV07XG4gICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IGZhY2UubGVuZ3RoO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiAhPT0gbnVtVmVydGljZXM7IGorKykge1xuICAgICAgICBjb25zdCBrID0gKGogKyAxKSAlIG51bVZlcnRpY2VzO1xuICAgICAgICB2ZXJ0aWNlc1tmYWNlW2pdXS52c3ViKHZlcnRpY2VzW2ZhY2Vba11dLCBlZGdlKTtcbiAgICAgICAgZWRnZS5ub3JtYWxpemUoKTtcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgIT09IGVkZ2VzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgaWYgKGVkZ2VzW3BdLmFsbW9zdEVxdWFscyhlZGdlKSB8fCBlZGdlc1twXS5hbG1vc3RFcXVhbHMoZWRnZSkpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICBlZGdlcy5wdXNoKGVkZ2UuY2xvbmUoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIG5vcm1hbHMgb2YgdGhlIGZhY2VzLlxuICAgKiBXaWxsIHJldXNlIGV4aXN0aW5nIFZlYzMgb2JqZWN0cyBpbiB0aGUgYGZhY2VOb3JtYWxzYCBhcnJheSBpZiB0aGV5IGV4aXN0LlxuICAgKi9cblxuXG4gIGNvbXB1dGVOb3JtYWxzKCkge1xuICAgIHRoaXMuZmFjZU5vcm1hbHMubGVuZ3RoID0gdGhpcy5mYWNlcy5sZW5ndGg7IC8vIEdlbmVyYXRlIG5vcm1hbHNcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mYWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gQ2hlY2sgc28gYWxsIHZlcnRpY2VzIGV4aXN0cyBmb3IgdGhpcyBmYWNlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuZmFjZXNbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKCF0aGlzLnZlcnRpY2VzW3RoaXMuZmFjZXNbaV1bal1dKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWZXJ0ZXggJHt0aGlzLmZhY2VzW2ldW2pdfSBub3QgZm91bmQhYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbiA9IHRoaXMuZmFjZU5vcm1hbHNbaV0gfHwgbmV3IFZlYzMkMSgpO1xuICAgICAgdGhpcy5nZXRGYWNlTm9ybWFsKGksIG4pO1xuICAgICAgbi5uZWdhdGUobik7XG4gICAgICB0aGlzLmZhY2VOb3JtYWxzW2ldID0gbjtcbiAgICAgIGNvbnN0IHZlcnRleCA9IHRoaXMudmVydGljZXNbdGhpcy5mYWNlc1tpXVswXV07XG5cbiAgICAgIGlmIChuLmRvdCh2ZXJ0ZXgpIDwgMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGAuZmFjZU5vcm1hbHNbJHtpfV0gPSBWZWMzKCR7bi50b1N0cmluZygpfSkgbG9va3MgbGlrZSBpdCBwb2ludHMgaW50byB0aGUgc2hhcGU/IFRoZSB2ZXJ0aWNlcyBmb2xsb3cuIE1ha2Ugc3VyZSB0aGV5IGFyZSBvcmRlcmVkIENDVyBhcm91bmQgdGhlIG5vcm1hbCwgdXNpbmcgdGhlIHJpZ2h0IGhhbmQgcnVsZS5gKTtcblxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuZmFjZXNbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYC52ZXJ0aWNlc1ske3RoaXMuZmFjZXNbaV1bal19XSA9IFZlYzMoJHt0aGlzLnZlcnRpY2VzW3RoaXMuZmFjZXNbaV1bal1dLnRvU3RyaW5nKCl9KWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb21wdXRlIHRoZSBub3JtYWwgb2YgYSBmYWNlIGZyb20gaXRzIHZlcnRpY2VzXG4gICAqL1xuXG5cbiAgZ2V0RmFjZU5vcm1hbChpLCB0YXJnZXQpIHtcbiAgICBjb25zdCBmID0gdGhpcy5mYWNlc1tpXTtcbiAgICBjb25zdCB2YSA9IHRoaXMudmVydGljZXNbZlswXV07XG4gICAgY29uc3QgdmIgPSB0aGlzLnZlcnRpY2VzW2ZbMV1dO1xuICAgIGNvbnN0IHZjID0gdGhpcy52ZXJ0aWNlc1tmWzJdXTtcbiAgICBDb252ZXhQb2x5aGVkcm9uLmNvbXB1dGVOb3JtYWwodmEsIHZiLCB2YywgdGFyZ2V0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGZhY2Ugbm9ybWFsIGdpdmVuIDMgdmVydGljZXNcbiAgICovXG5cblxuICBzdGF0aWMgY29tcHV0ZU5vcm1hbCh2YSwgdmIsIHZjLCB0YXJnZXQpIHtcbiAgICBjb25zdCBjYiA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBhYiA9IG5ldyBWZWMzJDEoKTtcbiAgICB2Yi52c3ViKHZhLCBhYik7XG4gICAgdmMudnN1Yih2YiwgY2IpO1xuICAgIGNiLmNyb3NzKGFiLCB0YXJnZXQpO1xuXG4gICAgaWYgKCF0YXJnZXQuaXNaZXJvKCkpIHtcbiAgICAgIHRhcmdldC5ub3JtYWxpemUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBtaW5EaXN0IENsYW1wIGRpc3RhbmNlXG4gICAqIEBwYXJhbSByZXN1bHQgVGhlIGFuIGFycmF5IG9mIGNvbnRhY3QgcG9pbnQgb2JqZWN0cywgc2VlIGNsaXBGYWNlQWdhaW5zdEh1bGxcbiAgICovXG5cblxuICBjbGlwQWdhaW5zdEh1bGwocG9zQSwgcXVhdEEsIGh1bGxCLCBwb3NCLCBxdWF0Qiwgc2VwYXJhdGluZ05vcm1hbCwgbWluRGlzdCwgbWF4RGlzdCwgcmVzdWx0KSB7XG4gICAgY29uc3QgV29ybGROb3JtYWwgPSBuZXcgVmVjMyQxKCk7XG4gICAgbGV0IGNsb3Nlc3RGYWNlQiA9IC0xO1xuICAgIGxldCBkbWF4ID0gLU51bWJlci5NQVhfVkFMVUU7XG5cbiAgICBmb3IgKGxldCBmYWNlID0gMDsgZmFjZSA8IGh1bGxCLmZhY2VzLmxlbmd0aDsgZmFjZSsrKSB7XG4gICAgICBXb3JsZE5vcm1hbC5jb3B5KGh1bGxCLmZhY2VOb3JtYWxzW2ZhY2VdKTtcbiAgICAgIHF1YXRCLnZtdWx0KFdvcmxkTm9ybWFsLCBXb3JsZE5vcm1hbCk7XG4gICAgICBjb25zdCBkID0gV29ybGROb3JtYWwuZG90KHNlcGFyYXRpbmdOb3JtYWwpO1xuXG4gICAgICBpZiAoZCA+IGRtYXgpIHtcbiAgICAgICAgZG1heCA9IGQ7XG4gICAgICAgIGNsb3Nlc3RGYWNlQiA9IGZhY2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgd29ybGRWZXJ0c0IxID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGh1bGxCLmZhY2VzW2Nsb3Nlc3RGYWNlQl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGIgPSBodWxsQi52ZXJ0aWNlc1todWxsQi5mYWNlc1tjbG9zZXN0RmFjZUJdW2ldXTtcbiAgICAgIGNvbnN0IHdvcmxkYiA9IG5ldyBWZWMzJDEoKTtcbiAgICAgIHdvcmxkYi5jb3B5KGIpO1xuICAgICAgcXVhdEIudm11bHQod29ybGRiLCB3b3JsZGIpO1xuICAgICAgcG9zQi52YWRkKHdvcmxkYiwgd29ybGRiKTtcbiAgICAgIHdvcmxkVmVydHNCMS5wdXNoKHdvcmxkYik7XG4gICAgfVxuXG4gICAgaWYgKGNsb3Nlc3RGYWNlQiA+PSAwKSB7XG4gICAgICB0aGlzLmNsaXBGYWNlQWdhaW5zdEh1bGwoc2VwYXJhdGluZ05vcm1hbCwgcG9zQSwgcXVhdEEsIHdvcmxkVmVydHNCMSwgbWluRGlzdCwgbWF4RGlzdCwgcmVzdWx0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEZpbmQgdGhlIHNlcGFyYXRpbmcgYXhpcyBiZXR3ZWVuIHRoaXMgaHVsbCBhbmQgYW5vdGhlclxuICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdmVjdG9yIHRvIHNhdmUgdGhlIGF4aXMgaW5cbiAgICogQHJldHVybiBSZXR1cm5zIGZhbHNlIGlmIGEgc2VwYXJhdGlvbiBpcyBmb3VuZCwgZWxzZSB0cnVlXG4gICAqL1xuXG5cbiAgZmluZFNlcGFyYXRpbmdBeGlzKGh1bGxCLCBwb3NBLCBxdWF0QSwgcG9zQiwgcXVhdEIsIHRhcmdldCwgZmFjZUxpc3RBLCBmYWNlTGlzdEIpIHtcbiAgICBjb25zdCBmYWNlQU5vcm1hbFdTMyA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBXb3JsZG5vcm1hbDEgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgZGVsdGFDID0gbmV3IFZlYzMkMSgpO1xuICAgIGNvbnN0IHdvcmxkRWRnZTAgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3Qgd29ybGRFZGdlMSA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBDcm9zcyA9IG5ldyBWZWMzJDEoKTtcbiAgICBsZXQgZG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgY29uc3QgaHVsbEEgPSB0aGlzO1xuXG4gICAgaWYgKCFodWxsQS51bmlxdWVBeGVzKSB7XG4gICAgICBjb25zdCBudW1GYWNlc0EgPSBmYWNlTGlzdEEgPyBmYWNlTGlzdEEubGVuZ3RoIDogaHVsbEEuZmFjZXMubGVuZ3RoOyAvLyBUZXN0IGZhY2Ugbm9ybWFscyBmcm9tIGh1bGxBXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRmFjZXNBOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmkgPSBmYWNlTGlzdEEgPyBmYWNlTGlzdEFbaV0gOiBpOyAvLyBHZXQgd29ybGQgZmFjZSBub3JtYWxcblxuICAgICAgICBmYWNlQU5vcm1hbFdTMy5jb3B5KGh1bGxBLmZhY2VOb3JtYWxzW2ZpXSk7XG4gICAgICAgIHF1YXRBLnZtdWx0KGZhY2VBTm9ybWFsV1MzLCBmYWNlQU5vcm1hbFdTMyk7XG4gICAgICAgIGNvbnN0IGQgPSBodWxsQS50ZXN0U2VwQXhpcyhmYWNlQU5vcm1hbFdTMywgaHVsbEIsIHBvc0EsIHF1YXRBLCBwb3NCLCBxdWF0Qik7XG5cbiAgICAgICAgaWYgKGQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGQgPCBkbWluKSB7XG4gICAgICAgICAgZG1pbiA9IGQ7XG4gICAgICAgICAgdGFyZ2V0LmNvcHkoZmFjZUFOb3JtYWxXUzMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRlc3QgdW5pcXVlIGF4ZXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBodWxsQS51bmlxdWVBeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEdldCB3b3JsZCBheGlzXG4gICAgICAgIHF1YXRBLnZtdWx0KGh1bGxBLnVuaXF1ZUF4ZXNbaV0sIGZhY2VBTm9ybWFsV1MzKTtcbiAgICAgICAgY29uc3QgZCA9IGh1bGxBLnRlc3RTZXBBeGlzKGZhY2VBTm9ybWFsV1MzLCBodWxsQiwgcG9zQSwgcXVhdEEsIHBvc0IsIHF1YXRCKTtcblxuICAgICAgICBpZiAoZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZCA8IGRtaW4pIHtcbiAgICAgICAgICBkbWluID0gZDtcbiAgICAgICAgICB0YXJnZXQuY29weShmYWNlQU5vcm1hbFdTMyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWh1bGxCLnVuaXF1ZUF4ZXMpIHtcbiAgICAgIC8vIFRlc3QgZmFjZSBub3JtYWxzIGZyb20gaHVsbEJcbiAgICAgIGNvbnN0IG51bUZhY2VzQiA9IGZhY2VMaXN0QiA/IGZhY2VMaXN0Qi5sZW5ndGggOiBodWxsQi5mYWNlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRmFjZXNCOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmkgPSBmYWNlTGlzdEIgPyBmYWNlTGlzdEJbaV0gOiBpO1xuICAgICAgICBXb3JsZG5vcm1hbDEuY29weShodWxsQi5mYWNlTm9ybWFsc1tmaV0pO1xuICAgICAgICBxdWF0Qi52bXVsdChXb3JsZG5vcm1hbDEsIFdvcmxkbm9ybWFsMSk7XG4gICAgICAgIGNvbnN0IGQgPSBodWxsQS50ZXN0U2VwQXhpcyhXb3JsZG5vcm1hbDEsIGh1bGxCLCBwb3NBLCBxdWF0QSwgcG9zQiwgcXVhdEIpO1xuXG4gICAgICAgIGlmIChkID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkIDwgZG1pbikge1xuICAgICAgICAgIGRtaW4gPSBkO1xuICAgICAgICAgIHRhcmdldC5jb3B5KFdvcmxkbm9ybWFsMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGVzdCB1bmlxdWUgYXhlcyBpbiBCXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gaHVsbEIudW5pcXVlQXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBxdWF0Qi52bXVsdChodWxsQi51bmlxdWVBeGVzW2ldLCBXb3JsZG5vcm1hbDEpO1xuICAgICAgICBjb25zdCBkID0gaHVsbEEudGVzdFNlcEF4aXMoV29ybGRub3JtYWwxLCBodWxsQiwgcG9zQSwgcXVhdEEsIHBvc0IsIHF1YXRCKTtcblxuICAgICAgICBpZiAoZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZCA8IGRtaW4pIHtcbiAgICAgICAgICBkbWluID0gZDtcbiAgICAgICAgICB0YXJnZXQuY29weShXb3JsZG5vcm1hbDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBUZXN0IGVkZ2VzXG5cblxuICAgIGZvciAobGV0IGUwID0gMDsgZTAgIT09IGh1bGxBLnVuaXF1ZUVkZ2VzLmxlbmd0aDsgZTArKykge1xuICAgICAgLy8gR2V0IHdvcmxkIGVkZ2VcbiAgICAgIHF1YXRBLnZtdWx0KGh1bGxBLnVuaXF1ZUVkZ2VzW2UwXSwgd29ybGRFZGdlMCk7XG5cbiAgICAgIGZvciAobGV0IGUxID0gMDsgZTEgIT09IGh1bGxCLnVuaXF1ZUVkZ2VzLmxlbmd0aDsgZTErKykge1xuICAgICAgICAvLyBHZXQgd29ybGQgZWRnZSAyXG4gICAgICAgIHF1YXRCLnZtdWx0KGh1bGxCLnVuaXF1ZUVkZ2VzW2UxXSwgd29ybGRFZGdlMSk7XG4gICAgICAgIHdvcmxkRWRnZTAuY3Jvc3Mod29ybGRFZGdlMSwgQ3Jvc3MpO1xuXG4gICAgICAgIGlmICghQ3Jvc3MuYWxtb3N0WmVybygpKSB7XG4gICAgICAgICAgQ3Jvc3Mubm9ybWFsaXplKCk7XG4gICAgICAgICAgY29uc3QgZGlzdCA9IGh1bGxBLnRlc3RTZXBBeGlzKENyb3NzLCBodWxsQiwgcG9zQSwgcXVhdEEsIHBvc0IsIHF1YXRCKTtcblxuICAgICAgICAgIGlmIChkaXN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXN0IDwgZG1pbikge1xuICAgICAgICAgICAgZG1pbiA9IGRpc3Q7XG4gICAgICAgICAgICB0YXJnZXQuY29weShDcm9zcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcG9zQi52c3ViKHBvc0EsIGRlbHRhQyk7XG5cbiAgICBpZiAoZGVsdGFDLmRvdCh0YXJnZXQpID4gMC4wKSB7XG4gICAgICB0YXJnZXQubmVnYXRlKHRhcmdldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFRlc3Qgc2VwYXJhdGluZyBheGlzIGFnYWluc3QgdHdvIGh1bGxzLiBCb3RoIGh1bGxzIGFyZSBwcm9qZWN0ZWQgb250byB0aGUgYXhpcyBhbmQgdGhlIG92ZXJsYXAgc2l6ZSBpcyByZXR1cm5lZCBpZiB0aGVyZSBpcyBvbmUuXG4gICAqIEByZXR1cm4gVGhlIG92ZXJsYXAgZGVwdGgsIG9yIEZBTFNFIGlmIG5vIHBlbmV0cmF0aW9uLlxuICAgKi9cblxuXG4gIHRlc3RTZXBBeGlzKGF4aXMsIGh1bGxCLCBwb3NBLCBxdWF0QSwgcG9zQiwgcXVhdEIpIHtcbiAgICBjb25zdCBodWxsQSA9IHRoaXM7XG4gICAgQ29udmV4UG9seWhlZHJvbi5wcm9qZWN0KGh1bGxBLCBheGlzLCBwb3NBLCBxdWF0QSwgbWF4bWluQSk7XG4gICAgQ29udmV4UG9seWhlZHJvbi5wcm9qZWN0KGh1bGxCLCBheGlzLCBwb3NCLCBxdWF0QiwgbWF4bWluQik7XG4gICAgY29uc3QgbWF4QSA9IG1heG1pbkFbMF07XG4gICAgY29uc3QgbWluQSA9IG1heG1pbkFbMV07XG4gICAgY29uc3QgbWF4QiA9IG1heG1pbkJbMF07XG4gICAgY29uc3QgbWluQiA9IG1heG1pbkJbMV07XG5cbiAgICBpZiAobWF4QSA8IG1pbkIgfHwgbWF4QiA8IG1pbkEpIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gU2VwYXJhdGVkXG4gICAgfVxuXG4gICAgY29uc3QgZDAgPSBtYXhBIC0gbWluQjtcbiAgICBjb25zdCBkMSA9IG1heEIgLSBtaW5BO1xuICAgIGNvbnN0IGRlcHRoID0gZDAgPCBkMSA/IGQwIDogZDE7XG4gICAgcmV0dXJuIGRlcHRoO1xuICB9XG4gIC8qKlxuICAgKiBjYWxjdWxhdGVMb2NhbEluZXJ0aWFcbiAgICovXG5cblxuICBjYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgdGFyZ2V0KSB7XG4gICAgLy8gQXBwcm94aW1hdGUgd2l0aCBib3ggaW5lcnRpYVxuICAgIC8vIEV4YWN0IGluZXJ0aWEgY2FsY3VsYXRpb24gaXMgb3ZlcmtpbGwsIGJ1dCBzZWUgaHR0cDovL2dlb21ldHJpY3Rvb2xzLmNvbS9Eb2N1bWVudGF0aW9uL1BvbHloZWRyYWxNYXNzUHJvcGVydGllcy5wZGYgZm9yIHRoZSBjb3JyZWN0IHdheSB0byBkbyBpdFxuICAgIGNvbnN0IGFhYmJtYXggPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgYWFiYm1pbiA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLmNvbXB1dGVMb2NhbEFBQkIoYWFiYm1pbiwgYWFiYm1heCk7XG4gICAgY29uc3QgeCA9IGFhYmJtYXgueCAtIGFhYmJtaW4ueDtcbiAgICBjb25zdCB5ID0gYWFiYm1heC55IC0gYWFiYm1pbi55O1xuICAgIGNvbnN0IHogPSBhYWJibWF4LnogLSBhYWJibWluLno7XG4gICAgdGFyZ2V0LnggPSAxLjAgLyAxMi4wICogbWFzcyAqICgyICogeSAqIDIgKiB5ICsgMiAqIHogKiAyICogeik7XG4gICAgdGFyZ2V0LnkgPSAxLjAgLyAxMi4wICogbWFzcyAqICgyICogeCAqIDIgKiB4ICsgMiAqIHogKiAyICogeik7XG4gICAgdGFyZ2V0LnogPSAxLjAgLyAxMi4wICogbWFzcyAqICgyICogeSAqIDIgKiB5ICsgMiAqIHggKiAyICogeCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBmYWNlX2kgSW5kZXggb2YgdGhlIGZhY2VcbiAgICovXG5cblxuICBnZXRQbGFuZUNvbnN0YW50T2ZGYWNlKGZhY2VfaSkge1xuICAgIGNvbnN0IGYgPSB0aGlzLmZhY2VzW2ZhY2VfaV07XG4gICAgY29uc3QgbiA9IHRoaXMuZmFjZU5vcm1hbHNbZmFjZV9pXTtcbiAgICBjb25zdCB2ID0gdGhpcy52ZXJ0aWNlc1tmWzBdXTtcbiAgICBjb25zdCBjID0gLW4uZG90KHYpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIC8qKlxuICAgKiBDbGlwIGEgZmFjZSBhZ2FpbnN0IGEgaHVsbC5cbiAgICogQHBhcmFtIHdvcmxkVmVydHNCMSBBbiBhcnJheSBvZiBWZWMzIHdpdGggdmVydGljZXMgaW4gdGhlIHdvcmxkIGZyYW1lLlxuICAgKiBAcGFyYW0gbWluRGlzdCBEaXN0YW5jZSBjbGFtcGluZ1xuICAgKiBAcGFyYW0gQXJyYXkgcmVzdWx0IEFycmF5IHRvIHN0b3JlIHJlc3VsdGluZyBjb250YWN0IHBvaW50cyBpbi4gV2lsbCBiZSBvYmplY3RzIHdpdGggcHJvcGVydGllczogcG9pbnQsIGRlcHRoLCBub3JtYWwuIFRoZXNlIGFyZSByZXByZXNlbnRlZCBpbiB3b3JsZCBjb29yZGluYXRlcy5cbiAgICovXG5cblxuICBjbGlwRmFjZUFnYWluc3RIdWxsKHNlcGFyYXRpbmdOb3JtYWwsIHBvc0EsIHF1YXRBLCB3b3JsZFZlcnRzQjEsIG1pbkRpc3QsIG1heERpc3QsIHJlc3VsdCkge1xuICAgIGNvbnN0IGZhY2VBTm9ybWFsV1MgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgZWRnZTAgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgV29ybGRFZGdlMCA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCB3b3JsZFBsYW5lQW5vcm1hbDEgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgcGxhbmVOb3JtYWxXUzEgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3Qgd29ybGRBMSA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBsb2NhbFBsYW5lTm9ybWFsID0gbmV3IFZlYzMkMSgpO1xuICAgIGNvbnN0IHBsYW5lTm9ybWFsV1MgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgaHVsbEEgPSB0aGlzO1xuICAgIGNvbnN0IHdvcmxkVmVydHNCMiA9IFtdO1xuICAgIGNvbnN0IHBWdHhJbiA9IHdvcmxkVmVydHNCMTtcbiAgICBjb25zdCBwVnR4T3V0ID0gd29ybGRWZXJ0c0IyO1xuICAgIGxldCBjbG9zZXN0RmFjZUEgPSAtMTtcbiAgICBsZXQgZG1pbiA9IE51bWJlci5NQVhfVkFMVUU7IC8vIEZpbmQgdGhlIGZhY2Ugd2l0aCBub3JtYWwgY2xvc2VzdCB0byB0aGUgc2VwYXJhdGluZyBheGlzXG5cbiAgICBmb3IgKGxldCBmYWNlID0gMDsgZmFjZSA8IGh1bGxBLmZhY2VzLmxlbmd0aDsgZmFjZSsrKSB7XG4gICAgICBmYWNlQU5vcm1hbFdTLmNvcHkoaHVsbEEuZmFjZU5vcm1hbHNbZmFjZV0pO1xuICAgICAgcXVhdEEudm11bHQoZmFjZUFOb3JtYWxXUywgZmFjZUFOb3JtYWxXUyk7XG4gICAgICBjb25zdCBkID0gZmFjZUFOb3JtYWxXUy5kb3Qoc2VwYXJhdGluZ05vcm1hbCk7XG5cbiAgICAgIGlmIChkIDwgZG1pbikge1xuICAgICAgICBkbWluID0gZDtcbiAgICAgICAgY2xvc2VzdEZhY2VBID0gZmFjZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xvc2VzdEZhY2VBIDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IHRoZSBmYWNlIGFuZCBjb25zdHJ1Y3QgY29ubmVjdGVkIGZhY2VzXG5cblxuICAgIGNvbnN0IHBvbHlBID0gaHVsbEEuZmFjZXNbY2xvc2VzdEZhY2VBXTtcbiAgICBwb2x5QS5jb25uZWN0ZWRGYWNlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBodWxsQS5mYWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBodWxsQS5mYWNlc1tpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoXG4gICAgICAgIC8qIFNoYXJpbmcgYSB2ZXJ0ZXgqL1xuICAgICAgICBwb2x5QS5pbmRleE9mKGh1bGxBLmZhY2VzW2ldW2pdKSAhPT0gLTEgJiZcbiAgICAgICAgLyogTm90IHRoZSBvbmUgd2UgYXJlIGxvb2tpbmcgZm9yIGNvbm5lY3Rpb25zIGZyb20gKi9cbiAgICAgICAgaSAhPT0gY2xvc2VzdEZhY2VBICYmXG4gICAgICAgIC8qIE5vdCBhbHJlYWR5IGFkZGVkICovXG4gICAgICAgIHBvbHlBLmNvbm5lY3RlZEZhY2VzLmluZGV4T2YoaSkgPT09IC0xKSB7XG4gICAgICAgICAgcG9seUEuY29ubmVjdGVkRmFjZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gQ2xpcCB0aGUgcG9seWdvbiB0byB0aGUgYmFjayBvZiB0aGUgcGxhbmVzIG9mIGFsbCBmYWNlcyBvZiBodWxsIEEsXG4gICAgLy8gdGhhdCBhcmUgYWRqYWNlbnQgdG8gdGhlIHdpdG5lc3MgZmFjZVxuXG5cbiAgICBjb25zdCBudW1WZXJ0aWNlc0EgPSBwb2x5QS5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZlcnRpY2VzQTsgaSsrKSB7XG4gICAgICBjb25zdCBhID0gaHVsbEEudmVydGljZXNbcG9seUFbaV1dO1xuICAgICAgY29uc3QgYiA9IGh1bGxBLnZlcnRpY2VzW3BvbHlBWyhpICsgMSkgJSBudW1WZXJ0aWNlc0FdXTtcbiAgICAgIGEudnN1YihiLCBlZGdlMCk7XG4gICAgICBXb3JsZEVkZ2UwLmNvcHkoZWRnZTApO1xuICAgICAgcXVhdEEudm11bHQoV29ybGRFZGdlMCwgV29ybGRFZGdlMCk7XG4gICAgICBwb3NBLnZhZGQoV29ybGRFZGdlMCwgV29ybGRFZGdlMCk7XG4gICAgICB3b3JsZFBsYW5lQW5vcm1hbDEuY29weSh0aGlzLmZhY2VOb3JtYWxzW2Nsb3Nlc3RGYWNlQV0pO1xuICAgICAgcXVhdEEudm11bHQod29ybGRQbGFuZUFub3JtYWwxLCB3b3JsZFBsYW5lQW5vcm1hbDEpO1xuICAgICAgcG9zQS52YWRkKHdvcmxkUGxhbmVBbm9ybWFsMSwgd29ybGRQbGFuZUFub3JtYWwxKTtcbiAgICAgIFdvcmxkRWRnZTAuY3Jvc3Mod29ybGRQbGFuZUFub3JtYWwxLCBwbGFuZU5vcm1hbFdTMSk7XG4gICAgICBwbGFuZU5vcm1hbFdTMS5uZWdhdGUocGxhbmVOb3JtYWxXUzEpO1xuICAgICAgd29ybGRBMS5jb3B5KGEpO1xuICAgICAgcXVhdEEudm11bHQod29ybGRBMSwgd29ybGRBMSk7XG4gICAgICBwb3NBLnZhZGQod29ybGRBMSwgd29ybGRBMSk7XG4gICAgICBjb25zdCBvdGhlckZhY2UgPSBwb2x5QS5jb25uZWN0ZWRGYWNlc1tpXTtcbiAgICAgIGxvY2FsUGxhbmVOb3JtYWwuY29weSh0aGlzLmZhY2VOb3JtYWxzW290aGVyRmFjZV0pO1xuICAgICAgY29uc3QgbG9jYWxQbGFuZUVxID0gdGhpcy5nZXRQbGFuZUNvbnN0YW50T2ZGYWNlKG90aGVyRmFjZSk7XG4gICAgICBwbGFuZU5vcm1hbFdTLmNvcHkobG9jYWxQbGFuZU5vcm1hbCk7XG4gICAgICBxdWF0QS52bXVsdChwbGFuZU5vcm1hbFdTLCBwbGFuZU5vcm1hbFdTKTtcbiAgICAgIGNvbnN0IHBsYW5lRXFXUyA9IGxvY2FsUGxhbmVFcSAtIHBsYW5lTm9ybWFsV1MuZG90KHBvc0EpOyAvLyBDbGlwIGZhY2UgYWdhaW5zdCBvdXIgY29uc3RydWN0ZWQgcGxhbmVcblxuICAgICAgdGhpcy5jbGlwRmFjZUFnYWluc3RQbGFuZShwVnR4SW4sIHBWdHhPdXQsIHBsYW5lTm9ybWFsV1MsIHBsYW5lRXFXUyk7IC8vIFRocm93IGF3YXkgYWxsIGNsaXBwZWQgcG9pbnRzLCBidXQgc2F2ZSB0aGUgcmVtYWluaW5nIHVudGlsIG5leHQgY2xpcFxuXG4gICAgICB3aGlsZSAocFZ0eEluLmxlbmd0aCkge1xuICAgICAgICBwVnR4SW4uc2hpZnQoKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHBWdHhPdXQubGVuZ3RoKSB7XG4gICAgICAgIHBWdHhJbi5wdXNoKHBWdHhPdXQuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfSAvLyBvbmx5IGtlZXAgY29udGFjdCBwb2ludHMgdGhhdCBhcmUgYmVoaW5kIHRoZSB3aXRuZXNzIGZhY2VcblxuXG4gICAgbG9jYWxQbGFuZU5vcm1hbC5jb3B5KHRoaXMuZmFjZU5vcm1hbHNbY2xvc2VzdEZhY2VBXSk7XG4gICAgY29uc3QgbG9jYWxQbGFuZUVxID0gdGhpcy5nZXRQbGFuZUNvbnN0YW50T2ZGYWNlKGNsb3Nlc3RGYWNlQSk7XG4gICAgcGxhbmVOb3JtYWxXUy5jb3B5KGxvY2FsUGxhbmVOb3JtYWwpO1xuICAgIHF1YXRBLnZtdWx0KHBsYW5lTm9ybWFsV1MsIHBsYW5lTm9ybWFsV1MpO1xuICAgIGNvbnN0IHBsYW5lRXFXUyA9IGxvY2FsUGxhbmVFcSAtIHBsYW5lTm9ybWFsV1MuZG90KHBvc0EpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwVnR4SW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBkZXB0aCA9IHBsYW5lTm9ybWFsV1MuZG90KHBWdHhJbltpXSkgKyBwbGFuZUVxV1M7IC8vID8/P1xuXG4gICAgICBpZiAoZGVwdGggPD0gbWluRGlzdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgY2xhbXBlZDogZGVwdGg9JHtkZXB0aH0gdG8gbWluRGlzdD0ke21pbkRpc3R9YCk7XG4gICAgICAgIGRlcHRoID0gbWluRGlzdDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlcHRoIDw9IG1heERpc3QpIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwVnR4SW5baV07XG5cbiAgICAgICAgaWYgKGRlcHRoIDw9IDFlLTYpIHtcbiAgICAgICAgICBjb25zdCBwID0ge1xuICAgICAgICAgICAgcG9pbnQsXG4gICAgICAgICAgICBub3JtYWw6IHBsYW5lTm9ybWFsV1MsXG4gICAgICAgICAgICBkZXB0aFxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzdWx0LnB1c2gocCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENsaXAgYSBmYWNlIGluIGEgaHVsbCBhZ2FpbnN0IHRoZSBiYWNrIG9mIGEgcGxhbmUuXG4gICAqIEBwYXJhbSBwbGFuZUNvbnN0YW50IFRoZSBjb25zdGFudCBpbiB0aGUgbWF0aGVtYXRpY2FsIHBsYW5lIGVxdWF0aW9uXG4gICAqL1xuXG5cbiAgY2xpcEZhY2VBZ2FpbnN0UGxhbmUoaW5WZXJ0aWNlcywgb3V0VmVydGljZXMsIHBsYW5lTm9ybWFsLCBwbGFuZUNvbnN0YW50KSB7XG4gICAgbGV0IG5fZG90X2ZpcnN0O1xuICAgIGxldCBuX2RvdF9sYXN0O1xuICAgIGNvbnN0IG51bVZlcnRzID0gaW5WZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICBpZiAobnVtVmVydHMgPCAyKSB7XG4gICAgICByZXR1cm4gb3V0VmVydGljZXM7XG4gICAgfVxuXG4gICAgbGV0IGZpcnN0VmVydGV4ID0gaW5WZXJ0aWNlc1tpblZlcnRpY2VzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBsYXN0VmVydGV4ID0gaW5WZXJ0aWNlc1swXTtcbiAgICBuX2RvdF9maXJzdCA9IHBsYW5lTm9ybWFsLmRvdChmaXJzdFZlcnRleCkgKyBwbGFuZUNvbnN0YW50O1xuXG4gICAgZm9yIChsZXQgdmkgPSAwOyB2aSA8IG51bVZlcnRzOyB2aSsrKSB7XG4gICAgICBsYXN0VmVydGV4ID0gaW5WZXJ0aWNlc1t2aV07XG4gICAgICBuX2RvdF9sYXN0ID0gcGxhbmVOb3JtYWwuZG90KGxhc3RWZXJ0ZXgpICsgcGxhbmVDb25zdGFudDtcblxuICAgICAgaWYgKG5fZG90X2ZpcnN0IDwgMCkge1xuICAgICAgICBpZiAobl9kb3RfbGFzdCA8IDApIHtcbiAgICAgICAgICAvLyBTdGFydCA8IDAsIGVuZCA8IDAsIHNvIG91dHB1dCBsYXN0VmVydGV4XG4gICAgICAgICAgY29uc3QgbmV3diA9IG5ldyBWZWMzJDEoKTtcbiAgICAgICAgICBuZXd2LmNvcHkobGFzdFZlcnRleCk7XG4gICAgICAgICAgb3V0VmVydGljZXMucHVzaChuZXd2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTdGFydCA8IDAsIGVuZCA+PSAwLCBzbyBvdXRwdXQgaW50ZXJzZWN0aW9uXG4gICAgICAgICAgY29uc3QgbmV3diA9IG5ldyBWZWMzJDEoKTtcbiAgICAgICAgICBmaXJzdFZlcnRleC5sZXJwKGxhc3RWZXJ0ZXgsIG5fZG90X2ZpcnN0IC8gKG5fZG90X2ZpcnN0IC0gbl9kb3RfbGFzdCksIG5ld3YpO1xuICAgICAgICAgIG91dFZlcnRpY2VzLnB1c2gobmV3dik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuX2RvdF9sYXN0IDwgMCkge1xuICAgICAgICAgIC8vIFN0YXJ0ID49IDAsIGVuZCA8IDAgc28gb3V0cHV0IGludGVyc2VjdGlvbiBhbmQgZW5kXG4gICAgICAgICAgY29uc3QgbmV3diA9IG5ldyBWZWMzJDEoKTtcbiAgICAgICAgICBmaXJzdFZlcnRleC5sZXJwKGxhc3RWZXJ0ZXgsIG5fZG90X2ZpcnN0IC8gKG5fZG90X2ZpcnN0IC0gbl9kb3RfbGFzdCksIG5ld3YpO1xuICAgICAgICAgIG91dFZlcnRpY2VzLnB1c2gobmV3dik7XG4gICAgICAgICAgb3V0VmVydGljZXMucHVzaChsYXN0VmVydGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaXJzdFZlcnRleCA9IGxhc3RWZXJ0ZXg7XG4gICAgICBuX2RvdF9maXJzdCA9IG5fZG90X2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dFZlcnRpY2VzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIGAud29ybGRWZXJ0aWNlc2AgYW5kIHNldHMgYC53b3JsZFZlcnRpY2VzTmVlZHNVcGRhdGVgIHRvIGZhbHNlLlxuICAgKi9cblxuXG4gIGNvbXB1dGVXb3JsZFZlcnRpY2VzKHBvc2l0aW9uLCBxdWF0KSB7XG4gICAgd2hpbGUgKHRoaXMud29ybGRWZXJ0aWNlcy5sZW5ndGggPCB0aGlzLnZlcnRpY2VzLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3JsZFZlcnRpY2VzLnB1c2gobmV3IFZlYzMkMSgpKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0cyA9IHRoaXMudmVydGljZXM7XG4gICAgY29uc3Qgd29ybGRWZXJ0cyA9IHRoaXMud29ybGRWZXJ0aWNlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBxdWF0LnZtdWx0KHZlcnRzW2ldLCB3b3JsZFZlcnRzW2ldKTtcbiAgICAgIHBvc2l0aW9uLnZhZGQod29ybGRWZXJ0c1tpXSwgd29ybGRWZXJ0c1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy53b3JsZFZlcnRpY2VzTmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgfVxuXG4gIGNvbXB1dGVMb2NhbEFBQkIoYWFiYm1pbiwgYWFiYm1heCkge1xuICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcbiAgICBhYWJibWluLnNldChOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICBhYWJibWF4LnNldCgtTnVtYmVyLk1BWF9WQUxVRSwgLU51bWJlci5NQVhfVkFMVUUsIC1OdW1iZXIuTUFYX1ZBTFVFKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdiA9IHZlcnRpY2VzW2ldO1xuXG4gICAgICBpZiAodi54IDwgYWFiYm1pbi54KSB7XG4gICAgICAgIGFhYmJtaW4ueCA9IHYueDtcbiAgICAgIH0gZWxzZSBpZiAodi54ID4gYWFiYm1heC54KSB7XG4gICAgICAgIGFhYmJtYXgueCA9IHYueDtcbiAgICAgIH1cblxuICAgICAgaWYgKHYueSA8IGFhYmJtaW4ueSkge1xuICAgICAgICBhYWJibWluLnkgPSB2Lnk7XG4gICAgICB9IGVsc2UgaWYgKHYueSA+IGFhYmJtYXgueSkge1xuICAgICAgICBhYWJibWF4LnkgPSB2Lnk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2LnogPCBhYWJibWluLnopIHtcbiAgICAgICAgYWFiYm1pbi56ID0gdi56O1xuICAgICAgfSBlbHNlIGlmICh2LnogPiBhYWJibWF4LnopIHtcbiAgICAgICAgYWFiYm1heC56ID0gdi56O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBgd29ybGRWZXJ0aWNlc2AgYW5kIHNldHMgYHdvcmxkVmVydGljZXNOZWVkc1VwZGF0ZWAgdG8gZmFsc2UuXG4gICAqL1xuXG5cbiAgY29tcHV0ZVdvcmxkRmFjZU5vcm1hbHMocXVhdCkge1xuICAgIGNvbnN0IE4gPSB0aGlzLmZhY2VOb3JtYWxzLmxlbmd0aDtcblxuICAgIHdoaWxlICh0aGlzLndvcmxkRmFjZU5vcm1hbHMubGVuZ3RoIDwgTikge1xuICAgICAgdGhpcy53b3JsZEZhY2VOb3JtYWxzLnB1c2gobmV3IFZlYzMkMSgpKTtcbiAgICB9XG5cbiAgICBjb25zdCBub3JtYWxzID0gdGhpcy5mYWNlTm9ybWFscztcbiAgICBjb25zdCB3b3JsZE5vcm1hbHMgPSB0aGlzLndvcmxkRmFjZU5vcm1hbHM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gTjsgaSsrKSB7XG4gICAgICBxdWF0LnZtdWx0KG5vcm1hbHNbaV0sIHdvcmxkTm9ybWFsc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy53b3JsZEZhY2VOb3JtYWxzTmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogdXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXNcbiAgICovXG5cblxuICB1cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpIHtcbiAgICAvLyBBc3N1bWUgcG9pbnRzIGFyZSBkaXN0cmlidXRlZCB3aXRoIGxvY2FsICgwLDAsMCkgYXMgY2VudGVyXG4gICAgbGV0IG1heDIgPSAwO1xuICAgIGNvbnN0IHZlcnRzID0gdGhpcy52ZXJ0aWNlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSB2ZXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9ybTIgPSB2ZXJ0c1tpXS5sZW5ndGhTcXVhcmVkKCk7XG5cbiAgICAgIGlmIChub3JtMiA+IG1heDIpIHtcbiAgICAgICAgbWF4MiA9IG5vcm0yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSBNYXRoLnNxcnQobWF4Mik7XG4gIH1cbiAgLyoqXG4gICAqIGNhbGN1bGF0ZVdvcmxkQUFCQlxuICAgKi9cblxuXG4gIGNhbGN1bGF0ZVdvcmxkQUFCQihwb3MsIHF1YXQsIG1pbiwgbWF4KSB7XG4gICAgY29uc3QgdmVydHMgPSB0aGlzLnZlcnRpY2VzO1xuICAgIGxldCBtaW54O1xuICAgIGxldCBtaW55O1xuICAgIGxldCBtaW56O1xuICAgIGxldCBtYXh4O1xuICAgIGxldCBtYXh5O1xuICAgIGxldCBtYXh6O1xuICAgIGxldCB0ZW1wV29ybGRWZXJ0ZXggPSBuZXcgVmVjMyQxKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0ZW1wV29ybGRWZXJ0ZXguY29weSh2ZXJ0c1tpXSk7XG4gICAgICBxdWF0LnZtdWx0KHRlbXBXb3JsZFZlcnRleCwgdGVtcFdvcmxkVmVydGV4KTtcbiAgICAgIHBvcy52YWRkKHRlbXBXb3JsZFZlcnRleCwgdGVtcFdvcmxkVmVydGV4KTtcbiAgICAgIGNvbnN0IHYgPSB0ZW1wV29ybGRWZXJ0ZXg7XG5cbiAgICAgIGlmIChtaW54ID09PSB1bmRlZmluZWQgfHwgdi54IDwgbWlueCkge1xuICAgICAgICBtaW54ID0gdi54O1xuICAgICAgfVxuXG4gICAgICBpZiAobWF4eCA9PT0gdW5kZWZpbmVkIHx8IHYueCA+IG1heHgpIHtcbiAgICAgICAgbWF4eCA9IHYueDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1pbnkgPT09IHVuZGVmaW5lZCB8fCB2LnkgPCBtaW55KSB7XG4gICAgICAgIG1pbnkgPSB2Lnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXh5ID09PSB1bmRlZmluZWQgfHwgdi55ID4gbWF4eSkge1xuICAgICAgICBtYXh5ID0gdi55O1xuICAgICAgfVxuXG4gICAgICBpZiAobWlueiA9PT0gdW5kZWZpbmVkIHx8IHYueiA8IG1pbnopIHtcbiAgICAgICAgbWlueiA9IHYuejtcbiAgICAgIH1cblxuICAgICAgaWYgKG1heHogPT09IHVuZGVmaW5lZCB8fCB2LnogPiBtYXh6KSB7XG4gICAgICAgIG1heHogPSB2Lno7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWluLnNldChtaW54LCBtaW55LCBtaW56KTtcbiAgICBtYXguc2V0KG1heHgsIG1heHksIG1heHopO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYXBwcm94aW1hdGUgY29udmV4IHZvbHVtZVxuICAgKi9cblxuXG4gIHZvbHVtZSgpIHtcbiAgICByZXR1cm4gNC4wICogTWF0aC5QSSAqIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgLyAzLjA7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBhdmVyYWdlIG9mIGFsbCB0aGUgdmVydGljZXMgcG9zaXRpb25zXG4gICAqL1xuXG5cbiAgZ2V0QXZlcmFnZVBvaW50TG9jYWwodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMyQxKCk7XG4gICAgfVxuXG4gICAgY29uc3QgdmVydHMgPSB0aGlzLnZlcnRpY2VzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0LnZhZGQodmVydHNbaV0sIHRhcmdldCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0LnNjYWxlKDEgLyB2ZXJ0cy5sZW5ndGgsIHRhcmdldCk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogVHJhbnNmb3JtIGFsbCBsb2NhbCBwb2ludHMuIFdpbGwgY2hhbmdlIHRoZSAudmVydGljZXNcbiAgICovXG5cblxuICB0cmFuc2Zvcm1BbGxQb2ludHMob2Zmc2V0LCBxdWF0KSB7XG4gICAgY29uc3QgbiA9IHRoaXMudmVydGljZXMubGVuZ3RoO1xuICAgIGNvbnN0IHZlcnRzID0gdGhpcy52ZXJ0aWNlczsgLy8gQXBwbHkgcm90YXRpb25cblxuICAgIGlmIChxdWF0KSB7XG4gICAgICAvLyBSb3RhdGUgdmVydGljZXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHYgPSB2ZXJ0c1tpXTtcbiAgICAgICAgcXVhdC52bXVsdCh2LCB2KTtcbiAgICAgIH0gLy8gUm90YXRlIGZhY2Ugbm9ybWFsc1xuXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mYWNlTm9ybWFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2ID0gdGhpcy5mYWNlTm9ybWFsc1tpXTtcbiAgICAgICAgcXVhdC52bXVsdCh2LCB2KTtcbiAgICAgIH1cbiAgICAgIC8qXG4gICAgICAgICAgICAvLyBSb3RhdGUgZWRnZXNcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPHRoaXMudW5pcXVlRWRnZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLnVuaXF1ZUVkZ2VzW2ldO1xuICAgICAgICAgICAgICAgIHF1YXQudm11bHQodix2KTtcbiAgICAgICAgICAgIH0qL1xuXG4gICAgfSAvLyBBcHBseSBvZmZzZXRcblxuXG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgY29uc3QgdiA9IHZlcnRzW2ldO1xuICAgICAgICB2LnZhZGQob2Zmc2V0LCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHAgaXMgaW5zaWRlIHRoZSBwb2x5aGVkcmEuIE11c3QgYmUgaW4gbG9jYWwgY29vcmRzLlxuICAgKiBUaGUgcG9pbnQgbGllcyBvdXRzaWRlIG9mIHRoZSBjb252ZXggaHVsbCBvZiB0aGUgb3RoZXIgcG9pbnRzIGlmIGFuZCBvbmx5IGlmIHRoZSBkaXJlY3Rpb25cbiAgICogb2YgYWxsIHRoZSB2ZWN0b3JzIGZyb20gaXQgdG8gdGhvc2Ugb3RoZXIgcG9pbnRzIGFyZSBvbiBsZXNzIHRoYW4gb25lIGhhbGYgb2YgYSBzcGhlcmUgYXJvdW5kIGl0LlxuICAgKiBAcGFyYW0gcCBBIHBvaW50IGdpdmVuIGluIGxvY2FsIGNvb3JkaW5hdGVzXG4gICAqL1xuXG5cbiAgcG9pbnRJc0luc2lkZShwKSB7XG4gICAgY29uc3QgdmVydHMgPSB0aGlzLnZlcnRpY2VzO1xuICAgIGNvbnN0IGZhY2VzID0gdGhpcy5mYWNlcztcbiAgICBjb25zdCBub3JtYWxzID0gdGhpcy5mYWNlTm9ybWFscztcbiAgICBjb25zdCBwb3NpdGl2ZVJlc3VsdCA9IG51bGw7XG4gICAgY29uc3QgcG9pbnRJbnNpZGUgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5nZXRBdmVyYWdlUG9pbnRMb2NhbChwb2ludEluc2lkZSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuID0gbm9ybWFsc1tpXTtcbiAgICAgIGNvbnN0IHYgPSB2ZXJ0c1tmYWNlc1tpXVswXV07IC8vIFdlIG9ubHkgbmVlZCBvbmUgcG9pbnQgaW4gdGhlIGZhY2VcbiAgICAgIC8vIFRoaXMgZG90IHByb2R1Y3QgZGV0ZXJtaW5lcyB3aGljaCBzaWRlIG9mIHRoZSBlZGdlIHRoZSBwb2ludCBpc1xuXG4gICAgICBjb25zdCB2VG9QID0gbmV3IFZlYzMkMSgpO1xuICAgICAgcC52c3ViKHYsIHZUb1ApO1xuICAgICAgY29uc3QgcjEgPSBuLmRvdCh2VG9QKTtcbiAgICAgIGNvbnN0IHZUb1BvaW50SW5zaWRlID0gbmV3IFZlYzMkMSgpO1xuICAgICAgcG9pbnRJbnNpZGUudnN1Yih2LCB2VG9Qb2ludEluc2lkZSk7XG4gICAgICBjb25zdCByMiA9IG4uZG90KHZUb1BvaW50SW5zaWRlKTtcblxuICAgICAgaWYgKHIxIDwgMCAmJiByMiA+IDAgfHwgcjEgPiAwICYmIHIyIDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEVuY291bnRlcmVkIHNvbWUgb3RoZXIgc2lnbi4gRXhpdC5cbiAgICAgIH1cbiAgICB9IC8vIElmIHdlIGdvdCBoZXJlLCBhbGwgZG90IHByb2R1Y3RzIHdlcmUgb2YgdGhlIHNhbWUgc2lnbi5cblxuXG4gICAgcmV0dXJuIHBvc2l0aXZlUmVzdWx0ID8gMSA6IC0xO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgbWF4IGFuZCBtaW4gZG90IHByb2R1Y3Qgb2YgYSBjb252ZXggaHVsbCBhdCBwb3NpdGlvbiAocG9zLHF1YXQpIHByb2plY3RlZCBvbnRvIGFuIGF4aXMuXG4gICAqIFJlc3VsdHMgYXJlIHNhdmVkIGluIHRoZSBhcnJheSBtYXhtaW4uXG4gICAqIEBwYXJhbSByZXN1bHQgcmVzdWx0WzBdIGFuZCByZXN1bHRbMV0gd2lsbCBiZSBzZXQgdG8gbWF4aW11bSBhbmQgbWluaW11bSwgcmVzcGVjdGl2ZWx5LlxuICAgKi9cblxuXG4gIHN0YXRpYyBwcm9qZWN0KHNoYXBlLCBheGlzLCBwb3MsIHF1YXQsIHJlc3VsdCkge1xuICAgIGNvbnN0IG4gPSBzaGFwZS52ZXJ0aWNlcy5sZW5ndGg7XG4gICAgY29uc3QgbG9jYWxBeGlzID0gcHJvamVjdF9sb2NhbEF4aXM7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgbGV0IG1pbiA9IDA7XG4gICAgY29uc3QgbG9jYWxPcmlnaW4gPSBwcm9qZWN0X2xvY2FsT3JpZ2luO1xuICAgIGNvbnN0IHZzID0gc2hhcGUudmVydGljZXM7XG4gICAgbG9jYWxPcmlnaW4uc2V0WmVybygpOyAvLyBUcmFuc2Zvcm0gdGhlIGF4aXMgdG8gbG9jYWxcblxuICAgIFRyYW5zZm9ybSQxLnZlY3RvclRvTG9jYWxGcmFtZShwb3MsIHF1YXQsIGF4aXMsIGxvY2FsQXhpcyk7XG4gICAgVHJhbnNmb3JtJDEucG9pbnRUb0xvY2FsRnJhbWUocG9zLCBxdWF0LCBsb2NhbE9yaWdpbiwgbG9jYWxPcmlnaW4pO1xuICAgIGNvbnN0IGFkZCA9IGxvY2FsT3JpZ2luLmRvdChsb2NhbEF4aXMpO1xuICAgIG1pbiA9IG1heCA9IHZzWzBdLmRvdChsb2NhbEF4aXMpO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbCA9IHZzW2ldLmRvdChsb2NhbEF4aXMpO1xuXG4gICAgICBpZiAodmFsID4gbWF4KSB7XG4gICAgICAgIG1heCA9IHZhbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbCA8IG1pbikge1xuICAgICAgICBtaW4gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWluIC09IGFkZDtcbiAgICBtYXggLT0gYWRkO1xuXG4gICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgLy8gSW5jb25zaXN0ZW50IC0gc3dhcFxuICAgICAgY29uc3QgdGVtcCA9IG1pbjtcbiAgICAgIG1pbiA9IG1heDtcbiAgICAgIG1heCA9IHRlbXA7XG4gICAgfSAvLyBPdXRwdXRcblxuXG4gICAgcmVzdWx0WzBdID0gbWF4O1xuICAgIHJlc3VsdFsxXSA9IG1pbjtcbiAgfVxuXG59XG5jb25zdCBtYXhtaW5BID0gW107XG5jb25zdCBtYXhtaW5CID0gW107XG5uZXcgVmVjMyQxKCk7XG5jb25zdCBwcm9qZWN0X2xvY2FsQXhpcyA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IHByb2plY3RfbG9jYWxPcmlnaW4gPSBuZXcgVmVjMyQxKCk7XG5cbi8qKlxuICogQSAzZCBib3ggc2hhcGUuXG4gKiBAZXhhbXBsZVxuICogICAgIGNvbnN0IHNpemUgPSAxXG4gKiAgICAgY29uc3QgaGFsZkV4dGVudHMgPSBuZXcgQ0FOTk9OLlZlYzMoc2l6ZSwgc2l6ZSwgc2l6ZSlcbiAqICAgICBjb25zdCBib3hTaGFwZSA9IG5ldyBDQU5OT04uQm94KGhhbGZFeHRlbnRzKVxuICogICAgIGNvbnN0IGJveEJvZHkgPSBuZXcgQ0FOTk9OLkJvZHkoeyBtYXNzOiAxLCBzaGFwZTogYm94U2hhcGUgfSlcbiAqICAgICB3b3JsZC5hZGRCb2R5KGJveEJvZHkpXG4gKi9cbmNsYXNzIEJveCBleHRlbmRzIFNoYXBlJDEge1xuICAvKipcbiAgICogVGhlIGhhbGYgZXh0ZW50cyBvZiB0aGUgYm94LlxuICAgKi9cblxuICAvKipcbiAgICogVXNlZCBieSB0aGUgY29udGFjdCBnZW5lcmF0b3IgdG8gbWFrZSBjb250YWN0cyB3aXRoIG90aGVyIGNvbnZleCBwb2x5aGVkcmEgZm9yIGV4YW1wbGUuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihoYWxmRXh0ZW50cykge1xuICAgIHN1cGVyKHtcbiAgICAgIHR5cGU6IFNoYXBlJDEudHlwZXMuQk9YXG4gICAgfSk7XG4gICAgdGhpcy5oYWxmRXh0ZW50cyA9IGhhbGZFeHRlbnRzO1xuICAgIHRoaXMuY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uID0gbnVsbDtcbiAgICB0aGlzLnVwZGF0ZUNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbigpO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgbG9jYWwgY29udmV4IHBvbHloZWRyb24gcmVwcmVzZW50YXRpb24gdXNlZCBmb3Igc29tZSBjb2xsaXNpb25zLlxuICAgKi9cblxuXG4gIHVwZGF0ZUNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbigpIHtcbiAgICBjb25zdCBzeCA9IHRoaXMuaGFsZkV4dGVudHMueDtcbiAgICBjb25zdCBzeSA9IHRoaXMuaGFsZkV4dGVudHMueTtcbiAgICBjb25zdCBzeiA9IHRoaXMuaGFsZkV4dGVudHMuejtcbiAgICBjb25zdCBWID0gVmVjMyQxO1xuICAgIGNvbnN0IHZlcnRpY2VzID0gW25ldyBWKC1zeCwgLXN5LCAtc3opLCBuZXcgVihzeCwgLXN5LCAtc3opLCBuZXcgVihzeCwgc3ksIC1zeiksIG5ldyBWKC1zeCwgc3ksIC1zeiksIG5ldyBWKC1zeCwgLXN5LCBzeiksIG5ldyBWKHN4LCAtc3ksIHN6KSwgbmV3IFYoc3gsIHN5LCBzeiksIG5ldyBWKC1zeCwgc3ksIHN6KV07XG4gICAgY29uc3QgZmFjZXMgPSBbWzMsIDIsIDEsIDBdLCAvLyAtelxuICAgIFs0LCA1LCA2LCA3XSwgLy8gK3pcbiAgICBbNSwgNCwgMCwgMV0sIC8vIC15XG4gICAgWzIsIDMsIDcsIDZdLCAvLyAreVxuICAgIFswLCA0LCA3LCAzXSwgLy8gLXhcbiAgICBbMSwgMiwgNiwgNV0gLy8gK3hcbiAgICBdO1xuICAgIGNvbnN0IGF4ZXMgPSBbbmV3IFYoMCwgMCwgMSksIG5ldyBWKDAsIDEsIDApLCBuZXcgVigxLCAwLCAwKV07XG4gICAgY29uc3QgaCA9IG5ldyBDb252ZXhQb2x5aGVkcm9uKHtcbiAgICAgIHZlcnRpY2VzLFxuICAgICAgZmFjZXMsXG4gICAgICBheGVzXG4gICAgfSk7XG4gICAgdGhpcy5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24gPSBoO1xuICAgIGgubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGluZXJ0aWEgb2YgdGhlIGJveC5cbiAgICovXG5cblxuICBjYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMyQxKCk7XG4gICAgfVxuXG4gICAgQm94LmNhbGN1bGF0ZUluZXJ0aWEodGhpcy5oYWxmRXh0ZW50cywgbWFzcywgdGFyZ2V0KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgc3RhdGljIGNhbGN1bGF0ZUluZXJ0aWEoaGFsZkV4dGVudHMsIG1hc3MsIHRhcmdldCkge1xuICAgIGNvbnN0IGUgPSBoYWxmRXh0ZW50cztcbiAgICB0YXJnZXQueCA9IDEuMCAvIDEyLjAgKiBtYXNzICogKDIgKiBlLnkgKiAyICogZS55ICsgMiAqIGUueiAqIDIgKiBlLnopO1xuICAgIHRhcmdldC55ID0gMS4wIC8gMTIuMCAqIG1hc3MgKiAoMiAqIGUueCAqIDIgKiBlLnggKyAyICogZS56ICogMiAqIGUueik7XG4gICAgdGFyZ2V0LnogPSAxLjAgLyAxMi4wICogbWFzcyAqICgyICogZS55ICogMiAqIGUueSArIDIgKiBlLnggKiAyICogZS54KTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBib3ggNiBzaWRlIG5vcm1hbHNcbiAgICogQHBhcmFtIHNpeFRhcmdldFZlY3RvcnMgQW4gYXJyYXkgb2YgNiB2ZWN0b3JzLCB0byBzdG9yZSB0aGUgcmVzdWx0aW5nIHNpZGUgbm9ybWFscyBpbi5cbiAgICogQHBhcmFtIHF1YXQgT3JpZW50YXRpb24gdG8gYXBwbHkgdG8gdGhlIG5vcm1hbCB2ZWN0b3JzLiBJZiBub3QgcHJvdmlkZWQsIHRoZSB2ZWN0b3JzIHdpbGwgYmUgaW4gcmVzcGVjdCB0byB0aGUgbG9jYWwgZnJhbWUuXG4gICAqL1xuXG5cbiAgZ2V0U2lkZU5vcm1hbHMoc2l4VGFyZ2V0VmVjdG9ycywgcXVhdCkge1xuICAgIGNvbnN0IHNpZGVzID0gc2l4VGFyZ2V0VmVjdG9ycztcbiAgICBjb25zdCBleCA9IHRoaXMuaGFsZkV4dGVudHM7XG4gICAgc2lkZXNbMF0uc2V0KGV4LngsIDAsIDApO1xuICAgIHNpZGVzWzFdLnNldCgwLCBleC55LCAwKTtcbiAgICBzaWRlc1syXS5zZXQoMCwgMCwgZXgueik7XG4gICAgc2lkZXNbM10uc2V0KC1leC54LCAwLCAwKTtcbiAgICBzaWRlc1s0XS5zZXQoMCwgLWV4LnksIDApO1xuICAgIHNpZGVzWzVdLnNldCgwLCAwLCAtZXgueik7XG5cbiAgICBpZiAocXVhdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gc2lkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcXVhdC52bXVsdChzaWRlc1tpXSwgc2lkZXNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaWRlcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdm9sdW1lIG9mIHRoZSBib3guXG4gICAqL1xuXG5cbiAgdm9sdW1lKCkge1xuICAgIHJldHVybiA4LjAgKiB0aGlzLmhhbGZFeHRlbnRzLnggKiB0aGlzLmhhbGZFeHRlbnRzLnkgKiB0aGlzLmhhbGZFeHRlbnRzLno7XG4gIH1cbiAgLyoqXG4gICAqIHVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzXG4gICAqL1xuXG5cbiAgdXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKSB7XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IHRoaXMuaGFsZkV4dGVudHMubGVuZ3RoKCk7XG4gIH1cbiAgLyoqXG4gICAqIGZvckVhY2hXb3JsZENvcm5lclxuICAgKi9cblxuXG4gIGZvckVhY2hXb3JsZENvcm5lcihwb3MsIHF1YXQsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuaGFsZkV4dGVudHM7XG4gICAgY29uc3QgY29ybmVycyA9IFtbZS54LCBlLnksIGUuel0sIFstZS54LCBlLnksIGUuel0sIFstZS54LCAtZS55LCBlLnpdLCBbLWUueCwgLWUueSwgLWUuel0sIFtlLngsIC1lLnksIC1lLnpdLCBbZS54LCBlLnksIC1lLnpdLCBbLWUueCwgZS55LCAtZS56XSwgW2UueCwgLWUueSwgZS56XV07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvcm5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdvcmxkQ29ybmVyVGVtcFBvcy5zZXQoY29ybmVyc1tpXVswXSwgY29ybmVyc1tpXVsxXSwgY29ybmVyc1tpXVsyXSk7XG4gICAgICBxdWF0LnZtdWx0KHdvcmxkQ29ybmVyVGVtcFBvcywgd29ybGRDb3JuZXJUZW1wUG9zKTtcbiAgICAgIHBvcy52YWRkKHdvcmxkQ29ybmVyVGVtcFBvcywgd29ybGRDb3JuZXJUZW1wUG9zKTtcbiAgICAgIGNhbGxiYWNrKHdvcmxkQ29ybmVyVGVtcFBvcy54LCB3b3JsZENvcm5lclRlbXBQb3MueSwgd29ybGRDb3JuZXJUZW1wUG9zLnopO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogY2FsY3VsYXRlV29ybGRBQUJCXG4gICAqL1xuXG5cbiAgY2FsY3VsYXRlV29ybGRBQUJCKHBvcywgcXVhdCwgbWluLCBtYXgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5oYWxmRXh0ZW50cztcbiAgICB3b3JsZENvcm5lcnNUZW1wWzBdLnNldChlLngsIGUueSwgZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzFdLnNldCgtZS54LCBlLnksIGUueik7XG4gICAgd29ybGRDb3JuZXJzVGVtcFsyXS5zZXQoLWUueCwgLWUueSwgZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzNdLnNldCgtZS54LCAtZS55LCAtZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzRdLnNldChlLngsIC1lLnksIC1lLnopO1xuICAgIHdvcmxkQ29ybmVyc1RlbXBbNV0uc2V0KGUueCwgZS55LCAtZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzZdLnNldCgtZS54LCBlLnksIC1lLnopO1xuICAgIHdvcmxkQ29ybmVyc1RlbXBbN10uc2V0KGUueCwgLWUueSwgZS56KTtcbiAgICBjb25zdCB3YyA9IHdvcmxkQ29ybmVyc1RlbXBbMF07XG4gICAgcXVhdC52bXVsdCh3Yywgd2MpO1xuICAgIHBvcy52YWRkKHdjLCB3Yyk7XG4gICAgbWF4LmNvcHkod2MpO1xuICAgIG1pbi5jb3B5KHdjKTtcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgODsgaSsrKSB7XG4gICAgICBjb25zdCB3YyA9IHdvcmxkQ29ybmVyc1RlbXBbaV07XG4gICAgICBxdWF0LnZtdWx0KHdjLCB3Yyk7XG4gICAgICBwb3MudmFkZCh3Yywgd2MpO1xuICAgICAgY29uc3QgeCA9IHdjLng7XG4gICAgICBjb25zdCB5ID0gd2MueTtcbiAgICAgIGNvbnN0IHogPSB3Yy56O1xuXG4gICAgICBpZiAoeCA+IG1heC54KSB7XG4gICAgICAgIG1heC54ID0geDtcbiAgICAgIH1cblxuICAgICAgaWYgKHkgPiBtYXgueSkge1xuICAgICAgICBtYXgueSA9IHk7XG4gICAgICB9XG5cbiAgICAgIGlmICh6ID4gbWF4LnopIHtcbiAgICAgICAgbWF4LnogPSB6O1xuICAgICAgfVxuXG4gICAgICBpZiAoeCA8IG1pbi54KSB7XG4gICAgICAgIG1pbi54ID0geDtcbiAgICAgIH1cblxuICAgICAgaWYgKHkgPCBtaW4ueSkge1xuICAgICAgICBtaW4ueSA9IHk7XG4gICAgICB9XG5cbiAgICAgIGlmICh6IDwgbWluLnopIHtcbiAgICAgICAgbWluLnogPSB6O1xuICAgICAgfVxuICAgIH0gLy8gR2V0IGVhY2ggYXhpcyBtYXhcbiAgICAvLyBtaW4uc2V0KEluZmluaXR5LEluZmluaXR5LEluZmluaXR5KTtcbiAgICAvLyBtYXguc2V0KC1JbmZpbml0eSwtSW5maW5pdHksLUluZmluaXR5KTtcbiAgICAvLyB0aGlzLmZvckVhY2hXb3JsZENvcm5lcihwb3MscXVhdCxmdW5jdGlvbih4LHkseil7XG4gICAgLy8gICAgIGlmKHggPiBtYXgueCl7XG4gICAgLy8gICAgICAgICBtYXgueCA9IHg7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYoeSA+IG1heC55KXtcbiAgICAvLyAgICAgICAgIG1heC55ID0geTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZih6ID4gbWF4Lnope1xuICAgIC8vICAgICAgICAgbWF4LnogPSB6O1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKHggPCBtaW4ueCl7XG4gICAgLy8gICAgICAgICBtaW4ueCA9IHg7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYoeSA8IG1pbi55KXtcbiAgICAvLyAgICAgICAgIG1pbi55ID0geTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZih6IDwgbWluLnope1xuICAgIC8vICAgICAgICAgbWluLnogPSB6O1xuICAgIC8vICAgICB9XG4gICAgLy8gfSk7XG5cbiAgfVxuXG59XG5jb25zdCB3b3JsZENvcm5lclRlbXBQb3MgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCB3b3JsZENvcm5lcnNUZW1wID0gW25ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpLCBuZXcgVmVjMyQxKCksIG5ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpLCBuZXcgVmVjMyQxKCksIG5ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpXTtcblxuLyoqXG4gKiBCT0RZX1RZUEVTXG4gKi9cbmNvbnN0IEJPRFlfVFlQRVMgPSB7XG4gIC8qKiBEWU5BTUlDICovXG4gIERZTkFNSUM6IDEsXG5cbiAgLyoqIFNUQVRJQyAqL1xuICBTVEFUSUM6IDIsXG5cbiAgLyoqIEtJTkVNQVRJQyAqL1xuICBLSU5FTUFUSUM6IDRcbn07XG4vKipcbiAqIEJvZHlUeXBlXG4gKi9cblxuLyoqXG4gKiBCT0RZX1NMRUVQX1NUQVRFU1xuICovXG5jb25zdCBCT0RZX1NMRUVQX1NUQVRFUyA9IHtcbiAgLyoqIEFXQUtFICovXG4gIEFXQUtFOiAwLFxuXG4gIC8qKiBTTEVFUFkgKi9cbiAgU0xFRVBZOiAxLFxuXG4gIC8qKiBTTEVFUElORyAqL1xuICBTTEVFUElORzogMlxufTtcbi8qKlxuICogQm9keVNsZWVwU3RhdGVcbiAqL1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBib2R5IHR5cGVzLlxuICogQGV4YW1wbGVcbiAqICAgICBjb25zdCBzaGFwZSA9IG5ldyBDQU5OT04uU3BoZXJlKDEpXG4gKiAgICAgY29uc3QgYm9keSA9IG5ldyBDQU5OT04uQm9keSh7XG4gKiAgICAgICBtYXNzOiAxLFxuICogICAgICAgc2hhcGUsXG4gKiAgICAgfSlcbiAqICAgICB3b3JsZC5hZGRCb2R5KGJvZHkpXG4gKi9cbmNsYXNzIEJvZHkgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVkIGFmdGVyIHR3byBib2RpZXMgY29sbGlkZS4gVGhpcyBldmVudCBpcyBkaXNwYXRjaGVkIG9uIGVhY2hcbiAgICogb2YgdGhlIHR3byBib2RpZXMgaW52b2x2ZWQgaW4gdGhlIGNvbGxpc2lvbi5cbiAgICogQGV2ZW50IGNvbGxpZGVcbiAgICogQHBhcmFtIGJvZHkgVGhlIGJvZHkgdGhhdCB3YXMgaW52b2x2ZWQgaW4gdGhlIGNvbGxpc2lvbi5cbiAgICogQHBhcmFtIGNvbnRhY3QgVGhlIGRldGFpbHMgb2YgdGhlIGNvbGxpc2lvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEgZHluYW1pYyBib2R5IGlzIGZ1bGx5IHNpbXVsYXRlZC4gQ2FuIGJlIG1vdmVkIG1hbnVhbGx5IGJ5IHRoZSB1c2VyLCBidXQgbm9ybWFsbHkgdGhleSBtb3ZlIGFjY29yZGluZyB0byBmb3JjZXMuIEEgZHluYW1pYyBib2R5IGNhbiBjb2xsaWRlIHdpdGggYWxsIGJvZHkgdHlwZXMuIEEgZHluYW1pYyBib2R5IGFsd2F5cyBoYXMgZmluaXRlLCBub24temVybyBtYXNzLlxuICAgKi9cblxuICAvKipcbiAgICogQSBzdGF0aWMgYm9keSBkb2VzIG5vdCBtb3ZlIGR1cmluZyBzaW11bGF0aW9uIGFuZCBiZWhhdmVzIGFzIGlmIGl0IGhhcyBpbmZpbml0ZSBtYXNzLiBTdGF0aWMgYm9kaWVzIGNhbiBiZSBtb3ZlZCBtYW51YWxseSBieSBzZXR0aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgYm9keS4gVGhlIHZlbG9jaXR5IG9mIGEgc3RhdGljIGJvZHkgaXMgYWx3YXlzIHplcm8uIFN0YXRpYyBib2RpZXMgZG8gbm90IGNvbGxpZGUgd2l0aCBvdGhlciBzdGF0aWMgb3Iga2luZW1hdGljIGJvZGllcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEga2luZW1hdGljIGJvZHkgbW92ZXMgdW5kZXIgc2ltdWxhdGlvbiBhY2NvcmRpbmcgdG8gaXRzIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCByZXNwb25kIHRvIGZvcmNlcy4gVGhleSBjYW4gYmUgbW92ZWQgbWFudWFsbHksIGJ1dCBub3JtYWxseSBhIGtpbmVtYXRpYyBib2R5IGlzIG1vdmVkIGJ5IHNldHRpbmcgaXRzIHZlbG9jaXR5LiBBIGtpbmVtYXRpYyBib2R5IGJlaGF2ZXMgYXMgaWYgaXQgaGFzIGluZmluaXRlIG1hc3MuIEtpbmVtYXRpYyBib2RpZXMgZG8gbm90IGNvbGxpZGUgd2l0aCBvdGhlciBzdGF0aWMgb3Iga2luZW1hdGljIGJvZGllcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFXQUtFXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTTEVFUFlcbiAgICovXG5cbiAgLyoqXG4gICAqIFNMRUVQSU5HXG4gICAqL1xuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVkIGFmdGVyIGEgc2xlZXBpbmcgYm9keSBoYXMgd29rZW4gdXAuXG4gICAqIEBldmVudCB3YWtldXBcbiAgICovXG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZWQgYWZ0ZXIgYSBib2R5IGhhcyBnb25lIGluIHRvIHRoZSBzbGVlcHkgc3RhdGUuXG4gICAqIEBldmVudCBzbGVlcHlcbiAgICovXG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZWQgYWZ0ZXIgYSBib2R5IGhhcyBmYWxsZW4gYXNsZWVwLlxuICAgKiBAZXZlbnQgc2xlZXBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlkID0gQm9keS5pZENvdW50ZXIrKztcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgdGhpcy53b3JsZCA9IG51bGw7XG4gICAgdGhpcy52bGFtYmRhID0gbmV3IFZlYzMkMSgpO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgPSB0eXBlb2Ygb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJHcm91cCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwIDogMTtcbiAgICB0aGlzLmNvbGxpc2lvbkZpbHRlck1hc2sgPSB0eXBlb2Ygb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJNYXNrID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzayA6IC0xO1xuICAgIHRoaXMuY29sbGlzaW9uUmVzcG9uc2UgPSB0eXBlb2Ygb3B0aW9ucy5jb2xsaXNpb25SZXNwb25zZSA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5jb2xsaXNpb25SZXNwb25zZSA6IHRydWU7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLnByZXZpb3VzUG9zaXRpb24gPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZWRQb3NpdGlvbiA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLmluaXRQb3NpdGlvbiA9IG5ldyBWZWMzJDEoKTtcblxuICAgIGlmIChvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uLmNvcHkob3B0aW9ucy5wb3NpdGlvbik7XG4gICAgICB0aGlzLnByZXZpb3VzUG9zaXRpb24uY29weShvcHRpb25zLnBvc2l0aW9uKTtcbiAgICAgIHRoaXMuaW50ZXJwb2xhdGVkUG9zaXRpb24uY29weShvcHRpb25zLnBvc2l0aW9uKTtcbiAgICAgIHRoaXMuaW5pdFBvc2l0aW9uLmNvcHkob3B0aW9ucy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWMzJDEoKTtcblxuICAgIGlmIChvcHRpb25zLnZlbG9jaXR5KSB7XG4gICAgICB0aGlzLnZlbG9jaXR5LmNvcHkob3B0aW9ucy52ZWxvY2l0eSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0VmVsb2NpdHkgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5mb3JjZSA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBtYXNzID0gdHlwZW9mIG9wdGlvbnMubWFzcyA9PT0gJ251bWJlcicgPyBvcHRpb25zLm1hc3MgOiAwO1xuICAgIHRoaXMubWFzcyA9IG1hc3M7XG4gICAgdGhpcy5pbnZNYXNzID0gbWFzcyA+IDAgPyAxLjAgLyBtYXNzIDogMDtcbiAgICB0aGlzLm1hdGVyaWFsID0gb3B0aW9ucy5tYXRlcmlhbCB8fCBudWxsO1xuICAgIHRoaXMubGluZWFyRGFtcGluZyA9IHR5cGVvZiBvcHRpb25zLmxpbmVhckRhbXBpbmcgPT09ICdudW1iZXInID8gb3B0aW9ucy5saW5lYXJEYW1waW5nIDogMC4wMTtcbiAgICB0aGlzLnR5cGUgPSBtYXNzIDw9IDAuMCA/IEJvZHkuU1RBVElDIDogQm9keS5EWU5BTUlDO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnR5cGUgPT09IHR5cGVvZiBCb2R5LlNUQVRJQykge1xuICAgICAgdGhpcy50eXBlID0gb3B0aW9ucy50eXBlO1xuICAgIH1cblxuICAgIHRoaXMuYWxsb3dTbGVlcCA9IHR5cGVvZiBvcHRpb25zLmFsbG93U2xlZXAgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5hbGxvd1NsZWVwIDogdHJ1ZTtcbiAgICB0aGlzLnNsZWVwU3RhdGUgPSBCb2R5LkFXQUtFO1xuICAgIHRoaXMuc2xlZXBTcGVlZExpbWl0ID0gdHlwZW9mIG9wdGlvbnMuc2xlZXBTcGVlZExpbWl0ICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuc2xlZXBTcGVlZExpbWl0IDogMC4xO1xuICAgIHRoaXMuc2xlZXBUaW1lTGltaXQgPSB0eXBlb2Ygb3B0aW9ucy5zbGVlcFRpbWVMaW1pdCAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnNsZWVwVGltZUxpbWl0IDogMTtcbiAgICB0aGlzLnRpbWVMYXN0U2xlZXB5ID0gMDtcbiAgICB0aGlzLndha2VVcEFmdGVyTmFycm93cGhhc2UgPSBmYWxzZTtcbiAgICB0aGlzLnRvcnF1ZSA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLnF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbiQxKCk7XG4gICAgdGhpcy5pbml0UXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uJDEoKTtcbiAgICB0aGlzLnByZXZpb3VzUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uJDEoKTtcbiAgICB0aGlzLmludGVycG9sYXRlZFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbiQxKCk7XG5cbiAgICBpZiAob3B0aW9ucy5xdWF0ZXJuaW9uKSB7XG4gICAgICB0aGlzLnF1YXRlcm5pb24uY29weShvcHRpb25zLnF1YXRlcm5pb24pO1xuICAgICAgdGhpcy5pbml0UXVhdGVybmlvbi5jb3B5KG9wdGlvbnMucXVhdGVybmlvbik7XG4gICAgICB0aGlzLnByZXZpb3VzUXVhdGVybmlvbi5jb3B5KG9wdGlvbnMucXVhdGVybmlvbik7XG4gICAgICB0aGlzLmludGVycG9sYXRlZFF1YXRlcm5pb24uY29weShvcHRpb25zLnF1YXRlcm5pb24pO1xuICAgIH1cblxuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gbmV3IFZlYzMkMSgpO1xuXG4gICAgaWYgKG9wdGlvbnMuYW5ndWxhclZlbG9jaXR5KSB7XG4gICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eS5jb3B5KG9wdGlvbnMuYW5ndWxhclZlbG9jaXR5KTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRBbmd1bGFyVmVsb2NpdHkgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5zaGFwZXMgPSBbXTtcbiAgICB0aGlzLnNoYXBlT2Zmc2V0cyA9IFtdO1xuICAgIHRoaXMuc2hhcGVPcmllbnRhdGlvbnMgPSBbXTtcbiAgICB0aGlzLmluZXJ0aWEgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5pbnZJbmVydGlhID0gbmV3IFZlYzMkMSgpO1xuICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkID0gbmV3IE1hdDMkMSgpO1xuICAgIHRoaXMuaW52TWFzc1NvbHZlID0gMDtcbiAgICB0aGlzLmludkluZXJ0aWFTb2x2ZSA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLmludkluZXJ0aWFXb3JsZFNvbHZlID0gbmV3IE1hdDMkMSgpO1xuICAgIHRoaXMuZml4ZWRSb3RhdGlvbiA9IHR5cGVvZiBvcHRpb25zLmZpeGVkUm90YXRpb24gIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5maXhlZFJvdGF0aW9uIDogZmFsc2U7XG4gICAgdGhpcy5hbmd1bGFyRGFtcGluZyA9IHR5cGVvZiBvcHRpb25zLmFuZ3VsYXJEYW1waW5nICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuYW5ndWxhckRhbXBpbmcgOiAwLjAxO1xuICAgIHRoaXMubGluZWFyRmFjdG9yID0gbmV3IFZlYzMkMSgxLCAxLCAxKTtcblxuICAgIGlmIChvcHRpb25zLmxpbmVhckZhY3Rvcikge1xuICAgICAgdGhpcy5saW5lYXJGYWN0b3IuY29weShvcHRpb25zLmxpbmVhckZhY3Rvcik7XG4gICAgfVxuXG4gICAgdGhpcy5hbmd1bGFyRmFjdG9yID0gbmV3IFZlYzMkMSgxLCAxLCAxKTtcblxuICAgIGlmIChvcHRpb25zLmFuZ3VsYXJGYWN0b3IpIHtcbiAgICAgIHRoaXMuYW5ndWxhckZhY3Rvci5jb3B5KG9wdGlvbnMuYW5ndWxhckZhY3Rvcik7XG4gICAgfVxuXG4gICAgdGhpcy5hYWJiID0gbmV3IEFBQkIkMSgpO1xuICAgIHRoaXMuYWFiYk5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmJvdW5kaW5nUmFkaXVzID0gMDtcbiAgICB0aGlzLndsYW1iZGEgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5pc1RyaWdnZXIgPSBCb29sZWFuKG9wdGlvbnMuaXNUcmlnZ2VyKTtcblxuICAgIGlmIChvcHRpb25zLnNoYXBlKSB7XG4gICAgICB0aGlzLmFkZFNoYXBlKG9wdGlvbnMuc2hhcGUpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlTWFzc1Byb3BlcnRpZXMoKTtcbiAgfVxuICAvKipcbiAgICogV2FrZSB0aGUgYm9keSB1cC5cbiAgICovXG5cblxuICB3YWtlVXAoKSB7XG4gICAgY29uc3QgcHJldlN0YXRlID0gdGhpcy5zbGVlcFN0YXRlO1xuICAgIHRoaXMuc2xlZXBTdGF0ZSA9IEJvZHkuQVdBS0U7XG4gICAgdGhpcy53YWtlVXBBZnRlck5hcnJvd3BoYXNlID0gZmFsc2U7XG5cbiAgICBpZiAocHJldlN0YXRlID09PSBCb2R5LlNMRUVQSU5HKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoQm9keS53YWtldXBFdmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBGb3JjZSBib2R5IHNsZWVwXG4gICAqL1xuXG5cbiAgc2xlZXAoKSB7XG4gICAgdGhpcy5zbGVlcFN0YXRlID0gQm9keS5TTEVFUElORztcbiAgICB0aGlzLnZlbG9jaXR5LnNldCgwLCAwLCAwKTtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eS5zZXQoMCwgMCwgMCk7XG4gICAgdGhpcy53YWtlVXBBZnRlck5hcnJvd3BoYXNlID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCBldmVyeSB0aW1lc3RlcCB0byB1cGRhdGUgaW50ZXJuYWwgc2xlZXAgdGltZXIgYW5kIGNoYW5nZSBzbGVlcCBzdGF0ZSBpZiBuZWVkZWQuXG4gICAqIEBwYXJhbSB0aW1lIFRoZSB3b3JsZCB0aW1lIGluIHNlY29uZHNcbiAgICovXG5cblxuICBzbGVlcFRpY2sodGltZSkge1xuICAgIGlmICh0aGlzLmFsbG93U2xlZXApIHtcbiAgICAgIGNvbnN0IHNsZWVwU3RhdGUgPSB0aGlzLnNsZWVwU3RhdGU7XG4gICAgICBjb25zdCBzcGVlZFNxdWFyZWQgPSB0aGlzLnZlbG9jaXR5Lmxlbmd0aFNxdWFyZWQoKSArIHRoaXMuYW5ndWxhclZlbG9jaXR5Lmxlbmd0aFNxdWFyZWQoKTtcbiAgICAgIGNvbnN0IHNwZWVkTGltaXRTcXVhcmVkID0gdGhpcy5zbGVlcFNwZWVkTGltaXQgKiogMjtcblxuICAgICAgaWYgKHNsZWVwU3RhdGUgPT09IEJvZHkuQVdBS0UgJiYgc3BlZWRTcXVhcmVkIDwgc3BlZWRMaW1pdFNxdWFyZWQpIHtcbiAgICAgICAgdGhpcy5zbGVlcFN0YXRlID0gQm9keS5TTEVFUFk7IC8vIFNsZWVweVxuXG4gICAgICAgIHRoaXMudGltZUxhc3RTbGVlcHkgPSB0aW1lO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoQm9keS5zbGVlcHlFdmVudCk7XG4gICAgICB9IGVsc2UgaWYgKHNsZWVwU3RhdGUgPT09IEJvZHkuU0xFRVBZICYmIHNwZWVkU3F1YXJlZCA+IHNwZWVkTGltaXRTcXVhcmVkKSB7XG4gICAgICAgIHRoaXMud2FrZVVwKCk7IC8vIFdha2UgdXBcbiAgICAgIH0gZWxzZSBpZiAoc2xlZXBTdGF0ZSA9PT0gQm9keS5TTEVFUFkgJiYgdGltZSAtIHRoaXMudGltZUxhc3RTbGVlcHkgPiB0aGlzLnNsZWVwVGltZUxpbWl0KSB7XG4gICAgICAgIHRoaXMuc2xlZXAoKTsgLy8gU2xlZXBpbmdcblxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoQm9keS5zbGVlcEV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBib2R5IGlzIHNsZWVwaW5nLCBpdCBzaG91bGQgYmUgaW1tb3ZhYmxlIC8gaGF2ZSBpbmZpbml0ZSBtYXNzIGR1cmluZyBzb2x2ZS4gV2Ugc29sdmUgaXQgYnkgaGF2aW5nIGEgc2VwYXJhdGUgXCJzb2x2ZSBtYXNzXCIuXG4gICAqL1xuXG5cbiAgdXBkYXRlU29sdmVNYXNzUHJvcGVydGllcygpIHtcbiAgICBpZiAodGhpcy5zbGVlcFN0YXRlID09PSBCb2R5LlNMRUVQSU5HIHx8IHRoaXMudHlwZSA9PT0gQm9keS5LSU5FTUFUSUMpIHtcbiAgICAgIHRoaXMuaW52TWFzc1NvbHZlID0gMDtcbiAgICAgIHRoaXMuaW52SW5lcnRpYVNvbHZlLnNldFplcm8oKTtcbiAgICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkU29sdmUuc2V0WmVybygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmludk1hc3NTb2x2ZSA9IHRoaXMuaW52TWFzcztcbiAgICAgIHRoaXMuaW52SW5lcnRpYVNvbHZlLmNvcHkodGhpcy5pbnZJbmVydGlhKTtcbiAgICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkU29sdmUuY29weSh0aGlzLmludkluZXJ0aWFXb3JsZCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgd29ybGQgcG9pbnQgdG8gbG9jYWwgYm9keSBmcmFtZS5cbiAgICovXG5cblxuICBwb2ludFRvTG9jYWxGcmFtZSh3b3JsZFBvaW50LCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICB3b3JsZFBvaW50LnZzdWIodGhpcy5wb3NpdGlvbiwgcmVzdWx0KTtcbiAgICB0aGlzLnF1YXRlcm5pb24uY29uanVnYXRlKCkudm11bHQocmVzdWx0LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYSB3b3JsZCB2ZWN0b3IgdG8gbG9jYWwgYm9keSBmcmFtZS5cbiAgICovXG5cblxuICB2ZWN0b3JUb0xvY2FsRnJhbWUod29ybGRWZWN0b3IsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRoaXMucXVhdGVybmlvbi5jb25qdWdhdGUoKS52bXVsdCh3b3JsZFZlY3RvciwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgbG9jYWwgYm9keSBwb2ludCB0byB3b3JsZCBmcmFtZS5cbiAgICovXG5cblxuICBwb2ludFRvV29ybGRGcmFtZShsb2NhbFBvaW50LCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICB0aGlzLnF1YXRlcm5pb24udm11bHQobG9jYWxQb2ludCwgcmVzdWx0KTtcbiAgICByZXN1bHQudmFkZCh0aGlzLnBvc2l0aW9uLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBsb2NhbCBib2R5IHBvaW50IHRvIHdvcmxkIGZyYW1lLlxuICAgKi9cblxuXG4gIHZlY3RvclRvV29ybGRGcmFtZShsb2NhbFZlY3RvciwgcmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQgPSBuZXcgVmVjMyQxKCk7XG4gICAgfVxuXG4gICAgdGhpcy5xdWF0ZXJuaW9uLnZtdWx0KGxvY2FsVmVjdG9yLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHNoYXBlIHRvIHRoZSBib2R5IHdpdGggYSBsb2NhbCBvZmZzZXQgYW5kIG9yaWVudGF0aW9uLlxuICAgKiBAcmV0dXJuIFRoZSBib2R5IG9iamVjdCwgZm9yIGNoYWluYWJpbGl0eS5cbiAgICovXG5cblxuICBhZGRTaGFwZShzaGFwZSwgX29mZnNldCwgX29yaWVudGF0aW9uKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIGNvbnN0IG9yaWVudGF0aW9uID0gbmV3IFF1YXRlcm5pb24kMSgpO1xuXG4gICAgaWYgKF9vZmZzZXQpIHtcbiAgICAgIG9mZnNldC5jb3B5KF9vZmZzZXQpO1xuICAgIH1cblxuICAgIGlmIChfb3JpZW50YXRpb24pIHtcbiAgICAgIG9yaWVudGF0aW9uLmNvcHkoX29yaWVudGF0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLnNoYXBlcy5wdXNoKHNoYXBlKTtcbiAgICB0aGlzLnNoYXBlT2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gICAgdGhpcy5zaGFwZU9yaWVudGF0aW9ucy5wdXNoKG9yaWVudGF0aW9uKTtcbiAgICB0aGlzLnVwZGF0ZU1hc3NQcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy51cGRhdGVCb3VuZGluZ1JhZGl1cygpO1xuICAgIHRoaXMuYWFiYk5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICBzaGFwZS5ib2R5ID0gdGhpcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgc2hhcGUgZnJvbSB0aGUgYm9keS5cbiAgICogQHJldHVybiBUaGUgYm9keSBvYmplY3QsIGZvciBjaGFpbmFiaWxpdHkuXG4gICAqL1xuXG5cbiAgcmVtb3ZlU2hhcGUoc2hhcGUpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc2hhcGVzLmluZGV4T2Yoc2hhcGUpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgY29uc29sZS53YXJuKCdTaGFwZSBkb2VzIG5vdCBiZWxvbmcgdG8gdGhlIGJvZHknKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuc2hhcGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgdGhpcy5zaGFwZU9mZnNldHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLnNoYXBlT3JpZW50YXRpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgdGhpcy51cGRhdGVNYXNzUHJvcGVydGllcygpO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdSYWRpdXMoKTtcbiAgICB0aGlzLmFhYmJOZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgc2hhcGUuYm9keSA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYm91bmRpbmcgcmFkaXVzIG9mIHRoZSBib2R5LiBTaG91bGQgYmUgZG9uZSBpZiBhbnkgb2YgdGhlIHNoYXBlcyBhcmUgY2hhbmdlZC5cbiAgICovXG5cblxuICB1cGRhdGVCb3VuZGluZ1JhZGl1cygpIHtcbiAgICBjb25zdCBzaGFwZXMgPSB0aGlzLnNoYXBlcztcbiAgICBjb25zdCBzaGFwZU9mZnNldHMgPSB0aGlzLnNoYXBlT2Zmc2V0cztcbiAgICBjb25zdCBOID0gc2hhcGVzLmxlbmd0aDtcbiAgICBsZXQgcmFkaXVzID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBOOyBpKyspIHtcbiAgICAgIGNvbnN0IHNoYXBlID0gc2hhcGVzW2ldO1xuICAgICAgc2hhcGUudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHNoYXBlT2Zmc2V0c1tpXS5sZW5ndGgoKTtcbiAgICAgIGNvbnN0IHIgPSBzaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cztcblxuICAgICAgaWYgKG9mZnNldCArIHIgPiByYWRpdXMpIHtcbiAgICAgICAgcmFkaXVzID0gb2Zmc2V0ICsgcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmJvdW5kaW5nUmFkaXVzID0gcmFkaXVzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSAuYWFiYlxuICAgKi9cblxuXG4gIHVwZGF0ZUFBQkIoKSB7XG4gICAgY29uc3Qgc2hhcGVzID0gdGhpcy5zaGFwZXM7XG4gICAgY29uc3Qgc2hhcGVPZmZzZXRzID0gdGhpcy5zaGFwZU9mZnNldHM7XG4gICAgY29uc3Qgc2hhcGVPcmllbnRhdGlvbnMgPSB0aGlzLnNoYXBlT3JpZW50YXRpb25zO1xuICAgIGNvbnN0IE4gPSBzaGFwZXMubGVuZ3RoO1xuICAgIGNvbnN0IG9mZnNldCA9IHRtcFZlYztcbiAgICBjb25zdCBvcmllbnRhdGlvbiA9IHRtcFF1YXQ7XG4gICAgY29uc3QgYm9keVF1YXQgPSB0aGlzLnF1YXRlcm5pb247XG4gICAgY29uc3QgYWFiYiA9IHRoaXMuYWFiYjtcbiAgICBjb25zdCBzaGFwZUFBQkIgPSB1cGRhdGVBQUJCX3NoYXBlQUFCQjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBOOyBpKyspIHtcbiAgICAgIGNvbnN0IHNoYXBlID0gc2hhcGVzW2ldOyAvLyBHZXQgc2hhcGUgd29ybGQgcG9zaXRpb25cblxuICAgICAgYm9keVF1YXQudm11bHQoc2hhcGVPZmZzZXRzW2ldLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0LnZhZGQodGhpcy5wb3NpdGlvbiwgb2Zmc2V0KTsgLy8gR2V0IHNoYXBlIHdvcmxkIHF1YXRlcm5pb25cblxuICAgICAgYm9keVF1YXQubXVsdChzaGFwZU9yaWVudGF0aW9uc1tpXSwgb3JpZW50YXRpb24pOyAvLyBHZXQgc2hhcGUgQUFCQlxuXG4gICAgICBzaGFwZS5jYWxjdWxhdGVXb3JsZEFBQkIob2Zmc2V0LCBvcmllbnRhdGlvbiwgc2hhcGVBQUJCLmxvd2VyQm91bmQsIHNoYXBlQUFCQi51cHBlckJvdW5kKTtcblxuICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgYWFiYi5jb3B5KHNoYXBlQUFCQik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhYWJiLmV4dGVuZChzaGFwZUFBQkIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYWFiYk5lZWRzVXBkYXRlID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBgLmluZXJ0aWFXb3JsZGAgYW5kIGAuaW52SW5lcnRpYVdvcmxkYFxuICAgKi9cblxuXG4gIHVwZGF0ZUluZXJ0aWFXb3JsZChmb3JjZSkge1xuICAgIGNvbnN0IEkgPSB0aGlzLmludkluZXJ0aWE7XG5cbiAgICBpZiAoSS54ID09PSBJLnkgJiYgSS55ID09PSBJLnogJiYgIWZvcmNlKSA7IGVsc2Uge1xuICAgICAgY29uc3QgbTEgPSB1aXdfbTE7XG4gICAgICBjb25zdCBtMiA9IHVpd19tMjtcbiAgICAgIG0xLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICAgIG0xLnRyYW5zcG9zZShtMik7XG4gICAgICBtMS5zY2FsZShJLCBtMSk7XG4gICAgICBtMS5tbXVsdChtMiwgdGhpcy5pbnZJbmVydGlhV29ybGQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQXBwbHkgZm9yY2UgdG8gYSBwb2ludCBvZiB0aGUgYm9keS4gVGhpcyBjb3VsZCBmb3IgZXhhbXBsZSBiZSBhIHBvaW50IG9uIHRoZSBCb2R5IHN1cmZhY2UuXG4gICAqIEFwcGx5aW5nIGZvcmNlIHRoaXMgd2F5IHdpbGwgYWRkIHRvIEJvZHkuZm9yY2UgYW5kIEJvZHkudG9ycXVlLlxuICAgKiBAcGFyYW0gZm9yY2UgVGhlIGFtb3VudCBvZiBmb3JjZSB0byBhZGQuXG4gICAqIEBwYXJhbSByZWxhdGl2ZVBvaW50IEEgcG9pbnQgcmVsYXRpdmUgdG8gdGhlIGNlbnRlciBvZiBtYXNzIHRvIGFwcGx5IHRoZSBmb3JjZSBvbi5cbiAgICovXG5cblxuICBhcHBseUZvcmNlKGZvcmNlLCByZWxhdGl2ZVBvaW50KSB7XG4gICAgaWYgKHJlbGF0aXZlUG9pbnQgPT09IHZvaWQgMCkge1xuICAgICAgcmVsYXRpdmVQb2ludCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICAvLyBOZWVkZWQ/XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gQm9keS5EWU5BTUlDKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2xlZXBTdGF0ZSA9PT0gQm9keS5TTEVFUElORykge1xuICAgICAgdGhpcy53YWtlVXAoKTtcbiAgICB9IC8vIENvbXB1dGUgcHJvZHVjZWQgcm90YXRpb25hbCBmb3JjZVxuXG5cbiAgICBjb25zdCByb3RGb3JjZSA9IEJvZHlfYXBwbHlGb3JjZV9yb3RGb3JjZTtcbiAgICByZWxhdGl2ZVBvaW50LmNyb3NzKGZvcmNlLCByb3RGb3JjZSk7IC8vIEFkZCBsaW5lYXIgZm9yY2VcblxuICAgIHRoaXMuZm9yY2UudmFkZChmb3JjZSwgdGhpcy5mb3JjZSk7IC8vIEFkZCByb3RhdGlvbmFsIGZvcmNlXG5cbiAgICB0aGlzLnRvcnF1ZS52YWRkKHJvdEZvcmNlLCB0aGlzLnRvcnF1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGx5IGZvcmNlIHRvIGEgbG9jYWwgcG9pbnQgaW4gdGhlIGJvZHkuXG4gICAqIEBwYXJhbSBmb3JjZSBUaGUgZm9yY2UgdmVjdG9yIHRvIGFwcGx5LCBkZWZpbmVkIGxvY2FsbHkgaW4gdGhlIGJvZHkgZnJhbWUuXG4gICAqIEBwYXJhbSBsb2NhbFBvaW50IEEgbG9jYWwgcG9pbnQgaW4gdGhlIGJvZHkgdG8gYXBwbHkgdGhlIGZvcmNlIG9uLlxuICAgKi9cblxuXG4gIGFwcGx5TG9jYWxGb3JjZShsb2NhbEZvcmNlLCBsb2NhbFBvaW50KSB7XG4gICAgaWYgKGxvY2FsUG9pbnQgPT09IHZvaWQgMCkge1xuICAgICAgbG9jYWxQb2ludCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50eXBlICE9PSBCb2R5LkRZTkFNSUMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB3b3JsZEZvcmNlID0gQm9keV9hcHBseUxvY2FsRm9yY2Vfd29ybGRGb3JjZTtcbiAgICBjb25zdCByZWxhdGl2ZVBvaW50V29ybGQgPSBCb2R5X2FwcGx5TG9jYWxGb3JjZV9yZWxhdGl2ZVBvaW50V29ybGQ7IC8vIFRyYW5zZm9ybSB0aGUgZm9yY2UgdmVjdG9yIHRvIHdvcmxkIHNwYWNlXG5cbiAgICB0aGlzLnZlY3RvclRvV29ybGRGcmFtZShsb2NhbEZvcmNlLCB3b3JsZEZvcmNlKTtcbiAgICB0aGlzLnZlY3RvclRvV29ybGRGcmFtZShsb2NhbFBvaW50LCByZWxhdGl2ZVBvaW50V29ybGQpO1xuICAgIHRoaXMuYXBwbHlGb3JjZSh3b3JsZEZvcmNlLCByZWxhdGl2ZVBvaW50V29ybGQpO1xuICB9XG4gIC8qKlxuICAgKiBBcHBseSB0b3JxdWUgdG8gdGhlIGJvZHkuXG4gICAqIEBwYXJhbSB0b3JxdWUgVGhlIGFtb3VudCBvZiB0b3JxdWUgdG8gYWRkLlxuICAgKi9cblxuXG4gIGFwcGx5VG9ycXVlKHRvcnF1ZSkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09IEJvZHkuRFlOQU1JQykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNsZWVwU3RhdGUgPT09IEJvZHkuU0xFRVBJTkcpIHtcbiAgICAgIHRoaXMud2FrZVVwKCk7XG4gICAgfSAvLyBBZGQgcm90YXRpb25hbCBmb3JjZVxuXG5cbiAgICB0aGlzLnRvcnF1ZS52YWRkKHRvcnF1ZSwgdGhpcy50b3JxdWUpO1xuICB9XG4gIC8qKlxuICAgKiBBcHBseSBpbXB1bHNlIHRvIGEgcG9pbnQgb2YgdGhlIGJvZHkuIFRoaXMgY291bGQgZm9yIGV4YW1wbGUgYmUgYSBwb2ludCBvbiB0aGUgQm9keSBzdXJmYWNlLlxuICAgKiBBbiBpbXB1bHNlIGlzIGEgZm9yY2UgYWRkZWQgdG8gYSBib2R5IGR1cmluZyBhIHNob3J0IHBlcmlvZCBvZiB0aW1lIChpbXB1bHNlID0gZm9yY2UgKiB0aW1lKS5cbiAgICogSW1wdWxzZXMgd2lsbCBiZSBhZGRlZCB0byBCb2R5LnZlbG9jaXR5IGFuZCBCb2R5LmFuZ3VsYXJWZWxvY2l0eS5cbiAgICogQHBhcmFtIGltcHVsc2UgVGhlIGFtb3VudCBvZiBpbXB1bHNlIHRvIGFkZC5cbiAgICogQHBhcmFtIHJlbGF0aXZlUG9pbnQgQSBwb2ludCByZWxhdGl2ZSB0byB0aGUgY2VudGVyIG9mIG1hc3MgdG8gYXBwbHkgdGhlIGZvcmNlIG9uLlxuICAgKi9cblxuXG4gIGFwcGx5SW1wdWxzZShpbXB1bHNlLCByZWxhdGl2ZVBvaW50KSB7XG4gICAgaWYgKHJlbGF0aXZlUG9pbnQgPT09IHZvaWQgMCkge1xuICAgICAgcmVsYXRpdmVQb2ludCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50eXBlICE9PSBCb2R5LkRZTkFNSUMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zbGVlcFN0YXRlID09PSBCb2R5LlNMRUVQSU5HKSB7XG4gICAgICB0aGlzLndha2VVcCgpO1xuICAgIH0gLy8gQ29tcHV0ZSBwb2ludCBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgYm9keSBjZW50ZXJcblxuXG4gICAgY29uc3QgciA9IHJlbGF0aXZlUG9pbnQ7IC8vIENvbXB1dGUgcHJvZHVjZWQgY2VudHJhbCBpbXB1bHNlIHZlbG9jaXR5XG5cbiAgICBjb25zdCB2ZWxvID0gQm9keV9hcHBseUltcHVsc2VfdmVsbztcbiAgICB2ZWxvLmNvcHkoaW1wdWxzZSk7XG4gICAgdmVsby5zY2FsZSh0aGlzLmludk1hc3MsIHZlbG8pOyAvLyBBZGQgbGluZWFyIGltcHVsc2VcblxuICAgIHRoaXMudmVsb2NpdHkudmFkZCh2ZWxvLCB0aGlzLnZlbG9jaXR5KTsgLy8gQ29tcHV0ZSBwcm9kdWNlZCByb3RhdGlvbmFsIGltcHVsc2UgdmVsb2NpdHlcblxuICAgIGNvbnN0IHJvdFZlbG8gPSBCb2R5X2FwcGx5SW1wdWxzZV9yb3RWZWxvO1xuICAgIHIuY3Jvc3MoaW1wdWxzZSwgcm90VmVsbyk7XG4gICAgLypcbiAgICAgcm90VmVsby54ICo9IHRoaXMuaW52SW5lcnRpYS54O1xuICAgICByb3RWZWxvLnkgKj0gdGhpcy5pbnZJbmVydGlhLnk7XG4gICAgIHJvdFZlbG8ueiAqPSB0aGlzLmludkluZXJ0aWEuejtcbiAgICAgKi9cblxuICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkLnZtdWx0KHJvdFZlbG8sIHJvdFZlbG8pOyAvLyBBZGQgcm90YXRpb25hbCBJbXB1bHNlXG5cbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eS52YWRkKHJvdFZlbG8sIHRoaXMuYW5ndWxhclZlbG9jaXR5KTtcbiAgfVxuICAvKipcbiAgICogQXBwbHkgbG9jYWxseS1kZWZpbmVkIGltcHVsc2UgdG8gYSBsb2NhbCBwb2ludCBpbiB0aGUgYm9keS5cbiAgICogQHBhcmFtIGZvcmNlIFRoZSBmb3JjZSB2ZWN0b3IgdG8gYXBwbHksIGRlZmluZWQgbG9jYWxseSBpbiB0aGUgYm9keSBmcmFtZS5cbiAgICogQHBhcmFtIGxvY2FsUG9pbnQgQSBsb2NhbCBwb2ludCBpbiB0aGUgYm9keSB0byBhcHBseSB0aGUgZm9yY2Ugb24uXG4gICAqL1xuXG5cbiAgYXBwbHlMb2NhbEltcHVsc2UobG9jYWxJbXB1bHNlLCBsb2NhbFBvaW50KSB7XG4gICAgaWYgKGxvY2FsUG9pbnQgPT09IHZvaWQgMCkge1xuICAgICAgbG9jYWxQb2ludCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50eXBlICE9PSBCb2R5LkRZTkFNSUMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB3b3JsZEltcHVsc2UgPSBCb2R5X2FwcGx5TG9jYWxJbXB1bHNlX3dvcmxkSW1wdWxzZTtcbiAgICBjb25zdCByZWxhdGl2ZVBvaW50V29ybGQgPSBCb2R5X2FwcGx5TG9jYWxJbXB1bHNlX3JlbGF0aXZlUG9pbnQ7IC8vIFRyYW5zZm9ybSB0aGUgZm9yY2UgdmVjdG9yIHRvIHdvcmxkIHNwYWNlXG5cbiAgICB0aGlzLnZlY3RvclRvV29ybGRGcmFtZShsb2NhbEltcHVsc2UsIHdvcmxkSW1wdWxzZSk7XG4gICAgdGhpcy52ZWN0b3JUb1dvcmxkRnJhbWUobG9jYWxQb2ludCwgcmVsYXRpdmVQb2ludFdvcmxkKTtcbiAgICB0aGlzLmFwcGx5SW1wdWxzZSh3b3JsZEltcHVsc2UsIHJlbGF0aXZlUG9pbnRXb3JsZCk7XG4gIH1cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgd2hlbmV2ZXIgeW91IGNoYW5nZSB0aGUgYm9keSBzaGFwZSBvciBtYXNzLlxuICAgKi9cblxuXG4gIHVwZGF0ZU1hc3NQcm9wZXJ0aWVzKCkge1xuICAgIGNvbnN0IGhhbGZFeHRlbnRzID0gQm9keV91cGRhdGVNYXNzUHJvcGVydGllc19oYWxmRXh0ZW50cztcbiAgICB0aGlzLmludk1hc3MgPSB0aGlzLm1hc3MgPiAwID8gMS4wIC8gdGhpcy5tYXNzIDogMDtcbiAgICBjb25zdCBJID0gdGhpcy5pbmVydGlhO1xuICAgIGNvbnN0IGZpeGVkID0gdGhpcy5maXhlZFJvdGF0aW9uOyAvLyBBcHByb3hpbWF0ZSB3aXRoIEFBQkIgYm94XG5cbiAgICB0aGlzLnVwZGF0ZUFBQkIoKTtcbiAgICBoYWxmRXh0ZW50cy5zZXQoKHRoaXMuYWFiYi51cHBlckJvdW5kLnggLSB0aGlzLmFhYmIubG93ZXJCb3VuZC54KSAvIDIsICh0aGlzLmFhYmIudXBwZXJCb3VuZC55IC0gdGhpcy5hYWJiLmxvd2VyQm91bmQueSkgLyAyLCAodGhpcy5hYWJiLnVwcGVyQm91bmQueiAtIHRoaXMuYWFiYi5sb3dlckJvdW5kLnopIC8gMik7XG4gICAgQm94LmNhbGN1bGF0ZUluZXJ0aWEoaGFsZkV4dGVudHMsIHRoaXMubWFzcywgSSk7XG4gICAgdGhpcy5pbnZJbmVydGlhLnNldChJLnggPiAwICYmICFmaXhlZCA/IDEuMCAvIEkueCA6IDAsIEkueSA+IDAgJiYgIWZpeGVkID8gMS4wIC8gSS55IDogMCwgSS56ID4gMCAmJiAhZml4ZWQgPyAxLjAgLyBJLnogOiAwKTtcbiAgICB0aGlzLnVwZGF0ZUluZXJ0aWFXb3JsZCh0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHdvcmxkIHZlbG9jaXR5IG9mIGEgcG9pbnQgaW4gdGhlIGJvZHkuXG4gICAqIEBwYXJhbSB3b3JsZFBvaW50XG4gICAqIEBwYXJhbSByZXN1bHRcbiAgICogQHJldHVybiBUaGUgcmVzdWx0IHZlY3Rvci5cbiAgICovXG5cblxuICBnZXRWZWxvY2l0eUF0V29ybGRQb2ludCh3b3JsZFBvaW50LCByZXN1bHQpIHtcbiAgICBjb25zdCByID0gbmV3IFZlYzMkMSgpO1xuICAgIHdvcmxkUG9pbnQudnN1Yih0aGlzLnBvc2l0aW9uLCByKTtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eS5jcm9zcyhyLCByZXN1bHQpO1xuICAgIHRoaXMudmVsb2NpdHkudmFkZChyZXN1bHQsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogTW92ZSB0aGUgYm9keSBmb3J3YXJkIGluIHRpbWUuXG4gICAqIEBwYXJhbSBkdCBUaW1lIHN0ZXBcbiAgICogQHBhcmFtIHF1YXROb3JtYWxpemUgU2V0IHRvIHRydWUgdG8gbm9ybWFsaXplIHRoZSBib2R5IHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHF1YXROb3JtYWxpemVGYXN0IElmIHRoZSBxdWF0ZXJuaW9uIHNob3VsZCBiZSBub3JtYWxpemVkIHVzaW5nIFwiZmFzdFwiIHF1YXRlcm5pb24gbm9ybWFsaXphdGlvblxuICAgKi9cblxuXG4gIGludGVncmF0ZShkdCwgcXVhdE5vcm1hbGl6ZSwgcXVhdE5vcm1hbGl6ZUZhc3QpIHtcbiAgICAvLyBTYXZlIHByZXZpb3VzIHBvc2l0aW9uXG4gICAgdGhpcy5wcmV2aW91c1Bvc2l0aW9uLmNvcHkodGhpcy5wb3NpdGlvbik7XG4gICAgdGhpcy5wcmV2aW91c1F1YXRlcm5pb24uY29weSh0aGlzLnF1YXRlcm5pb24pO1xuXG4gICAgaWYgKCEodGhpcy50eXBlID09PSBCb2R5LkRZTkFNSUMgfHwgdGhpcy50eXBlID09PSBCb2R5LktJTkVNQVRJQykgfHwgdGhpcy5zbGVlcFN0YXRlID09PSBCb2R5LlNMRUVQSU5HKSB7XG4gICAgICAvLyBPbmx5IGZvciBkeW5hbWljXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmVsbyA9IHRoaXMudmVsb2NpdHk7XG4gICAgY29uc3QgYW5ndWxhclZlbG8gPSB0aGlzLmFuZ3VsYXJWZWxvY2l0eTtcbiAgICBjb25zdCBwb3MgPSB0aGlzLnBvc2l0aW9uO1xuICAgIGNvbnN0IGZvcmNlID0gdGhpcy5mb3JjZTtcbiAgICBjb25zdCB0b3JxdWUgPSB0aGlzLnRvcnF1ZTtcbiAgICBjb25zdCBxdWF0ID0gdGhpcy5xdWF0ZXJuaW9uO1xuICAgIGNvbnN0IGludk1hc3MgPSB0aGlzLmludk1hc3M7XG4gICAgY29uc3QgaW52SW5lcnRpYSA9IHRoaXMuaW52SW5lcnRpYVdvcmxkO1xuICAgIGNvbnN0IGxpbmVhckZhY3RvciA9IHRoaXMubGluZWFyRmFjdG9yO1xuICAgIGNvbnN0IGlNZHQgPSBpbnZNYXNzICogZHQ7XG4gICAgdmVsby54ICs9IGZvcmNlLnggKiBpTWR0ICogbGluZWFyRmFjdG9yLng7XG4gICAgdmVsby55ICs9IGZvcmNlLnkgKiBpTWR0ICogbGluZWFyRmFjdG9yLnk7XG4gICAgdmVsby56ICs9IGZvcmNlLnogKiBpTWR0ICogbGluZWFyRmFjdG9yLno7XG4gICAgY29uc3QgZSA9IGludkluZXJ0aWEuZWxlbWVudHM7XG4gICAgY29uc3QgYW5ndWxhckZhY3RvciA9IHRoaXMuYW5ndWxhckZhY3RvcjtcbiAgICBjb25zdCB0eCA9IHRvcnF1ZS54ICogYW5ndWxhckZhY3Rvci54O1xuICAgIGNvbnN0IHR5ID0gdG9ycXVlLnkgKiBhbmd1bGFyRmFjdG9yLnk7XG4gICAgY29uc3QgdHogPSB0b3JxdWUueiAqIGFuZ3VsYXJGYWN0b3IuejtcbiAgICBhbmd1bGFyVmVsby54ICs9IGR0ICogKGVbMF0gKiB0eCArIGVbMV0gKiB0eSArIGVbMl0gKiB0eik7XG4gICAgYW5ndWxhclZlbG8ueSArPSBkdCAqIChlWzNdICogdHggKyBlWzRdICogdHkgKyBlWzVdICogdHopO1xuICAgIGFuZ3VsYXJWZWxvLnogKz0gZHQgKiAoZVs2XSAqIHR4ICsgZVs3XSAqIHR5ICsgZVs4XSAqIHR6KTsgLy8gVXNlIG5ldyB2ZWxvY2l0eSAgLSBsZWFwIGZyb2dcblxuICAgIHBvcy54ICs9IHZlbG8ueCAqIGR0O1xuICAgIHBvcy55ICs9IHZlbG8ueSAqIGR0O1xuICAgIHBvcy56ICs9IHZlbG8ueiAqIGR0O1xuICAgIHF1YXQuaW50ZWdyYXRlKHRoaXMuYW5ndWxhclZlbG9jaXR5LCBkdCwgdGhpcy5hbmd1bGFyRmFjdG9yLCBxdWF0KTtcblxuICAgIGlmIChxdWF0Tm9ybWFsaXplKSB7XG4gICAgICBpZiAocXVhdE5vcm1hbGl6ZUZhc3QpIHtcbiAgICAgICAgcXVhdC5ub3JtYWxpemVGYXN0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWF0Lm5vcm1hbGl6ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYWFiYk5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gVXBkYXRlIHdvcmxkIGluZXJ0aWFcblxuICAgIHRoaXMudXBkYXRlSW5lcnRpYVdvcmxkKCk7XG4gIH1cblxufVxuQm9keS5pZENvdW50ZXIgPSAwO1xuQm9keS5DT0xMSURFX0VWRU5UX05BTUUgPSAnY29sbGlkZSc7XG5Cb2R5LkRZTkFNSUMgPSBCT0RZX1RZUEVTLkRZTkFNSUM7XG5Cb2R5LlNUQVRJQyA9IEJPRFlfVFlQRVMuU1RBVElDO1xuQm9keS5LSU5FTUFUSUMgPSBCT0RZX1RZUEVTLktJTkVNQVRJQztcbkJvZHkuQVdBS0UgPSBCT0RZX1NMRUVQX1NUQVRFUy5BV0FLRTtcbkJvZHkuU0xFRVBZID0gQk9EWV9TTEVFUF9TVEFURVMuU0xFRVBZO1xuQm9keS5TTEVFUElORyA9IEJPRFlfU0xFRVBfU1RBVEVTLlNMRUVQSU5HO1xuQm9keS53YWtldXBFdmVudCA9IHtcbiAgdHlwZTogJ3dha2V1cCdcbn07XG5Cb2R5LnNsZWVweUV2ZW50ID0ge1xuICB0eXBlOiAnc2xlZXB5J1xufTtcbkJvZHkuc2xlZXBFdmVudCA9IHtcbiAgdHlwZTogJ3NsZWVwJ1xufTtcbmNvbnN0IHRtcFZlYyA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IHRtcFF1YXQgPSBuZXcgUXVhdGVybmlvbiQxKCk7XG5jb25zdCB1cGRhdGVBQUJCX3NoYXBlQUFCQiA9IG5ldyBBQUJCJDEoKTtcbmNvbnN0IHVpd19tMSA9IG5ldyBNYXQzJDEoKTtcbmNvbnN0IHVpd19tMiA9IG5ldyBNYXQzJDEoKTtcbm5ldyBNYXQzJDEoKTtcbmNvbnN0IEJvZHlfYXBwbHlGb3JjZV9yb3RGb3JjZSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IEJvZHlfYXBwbHlMb2NhbEZvcmNlX3dvcmxkRm9yY2UgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBCb2R5X2FwcGx5TG9jYWxGb3JjZV9yZWxhdGl2ZVBvaW50V29ybGQgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBCb2R5X2FwcGx5SW1wdWxzZV92ZWxvID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgQm9keV9hcHBseUltcHVsc2Vfcm90VmVsbyA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IEJvZHlfYXBwbHlMb2NhbEltcHVsc2Vfd29ybGRJbXB1bHNlID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgQm9keV9hcHBseUxvY2FsSW1wdWxzZV9yZWxhdGl2ZVBvaW50ID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgQm9keV91cGRhdGVNYXNzUHJvcGVydGllc19oYWxmRXh0ZW50cyA9IG5ldyBWZWMzJDEoKTtcblxubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFF1YXRlcm5pb24kMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xuXG4vKipcbiAqIFN0b3JhZ2UgZm9yIFJheSBjYXN0aW5nIGRhdGFcbiAqL1xuY2xhc3MgUmF5Y2FzdFJlc3VsdCQxIHtcbiAgLyoqXG4gICAqIHJheUZyb21Xb3JsZFxuICAgKi9cblxuICAvKipcbiAgICogcmF5VG9Xb3JsZFxuICAgKi9cblxuICAvKipcbiAgICogaGl0Tm9ybWFsV29ybGRcbiAgICovXG5cbiAgLyoqXG4gICAqIGhpdFBvaW50V29ybGRcbiAgICovXG5cbiAgLyoqXG4gICAqIGhhc0hpdFxuICAgKi9cblxuICAvKipcbiAgICogc2hhcGVcbiAgICovXG5cbiAgLyoqXG4gICAqIGJvZHlcbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgaGl0IHRyaWFuZ2xlLCBpZiB0aGUgaGl0IHNoYXBlIHdhcyBhIHRyaW1lc2hcbiAgICovXG5cbiAgLyoqXG4gICAqIERpc3RhbmNlIHRvIHRoZSBoaXQuIFdpbGwgYmUgc2V0IHRvIC0xIGlmIHRoZXJlIHdhcyBubyBoaXRcbiAgICovXG5cbiAgLyoqXG4gICAqIElmIHRoZSByYXkgc2hvdWxkIHN0b3AgdHJhdmVyc2luZyB0aGUgYm9kaWVzXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJheUZyb21Xb3JsZCA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLnJheVRvV29ybGQgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5oaXROb3JtYWxXb3JsZCA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLmhpdFBvaW50V29ybGQgPSBuZXcgVmVjMyQxKCk7XG4gICAgdGhpcy5oYXNIaXQgPSBmYWxzZTtcbiAgICB0aGlzLnNoYXBlID0gbnVsbDtcbiAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgIHRoaXMuaGl0RmFjZUluZGV4ID0gLTE7XG4gICAgdGhpcy5kaXN0YW5jZSA9IC0xO1xuICAgIHRoaXMuc2hvdWxkU3RvcCA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCBhbGwgcmVzdWx0IGRhdGEuXG4gICAqL1xuXG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yYXlGcm9tV29ybGQuc2V0WmVybygpO1xuICAgIHRoaXMucmF5VG9Xb3JsZC5zZXRaZXJvKCk7XG4gICAgdGhpcy5oaXROb3JtYWxXb3JsZC5zZXRaZXJvKCk7XG4gICAgdGhpcy5oaXRQb2ludFdvcmxkLnNldFplcm8oKTtcbiAgICB0aGlzLmhhc0hpdCA9IGZhbHNlO1xuICAgIHRoaXMuc2hhcGUgPSBudWxsO1xuICAgIHRoaXMuYm9keSA9IG51bGw7XG4gICAgdGhpcy5oaXRGYWNlSW5kZXggPSAtMTtcbiAgICB0aGlzLmRpc3RhbmNlID0gLTE7XG4gICAgdGhpcy5zaG91bGRTdG9wID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIGFib3J0XG4gICAqL1xuXG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5zaG91bGRTdG9wID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogU2V0IHJlc3VsdCBkYXRhLlxuICAgKi9cblxuXG4gIHNldChyYXlGcm9tV29ybGQsIHJheVRvV29ybGQsIGhpdE5vcm1hbFdvcmxkLCBoaXRQb2ludFdvcmxkLCBzaGFwZSwgYm9keSwgZGlzdGFuY2UpIHtcbiAgICB0aGlzLnJheUZyb21Xb3JsZC5jb3B5KHJheUZyb21Xb3JsZCk7XG4gICAgdGhpcy5yYXlUb1dvcmxkLmNvcHkocmF5VG9Xb3JsZCk7XG4gICAgdGhpcy5oaXROb3JtYWxXb3JsZC5jb3B5KGhpdE5vcm1hbFdvcmxkKTtcbiAgICB0aGlzLmhpdFBvaW50V29ybGQuY29weShoaXRQb2ludFdvcmxkKTtcbiAgICB0aGlzLnNoYXBlID0gc2hhcGU7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gIH1cblxufVxuXG5sZXQgX1NoYXBlJHR5cGVzJFNQSEVSRSQxLCBfU2hhcGUkdHlwZXMkUExBTkUkMSwgX1NoYXBlJHR5cGVzJEJPWCQxLCBfU2hhcGUkdHlwZXMkQ1lMSU5ERVIkMSwgX1NoYXBlJHR5cGVzJENPTlZFWFBPJDEsIF9TaGFwZSR0eXBlcyRIRUlHSFRGSSQxLCBfU2hhcGUkdHlwZXMkVFJJTUVTSCQxO1xuXG4vKipcbiAqIFJBWV9NT0RFU1xuICovXG5jb25zdCBSQVlfTU9ERVMkMSA9IHtcbiAgLyoqIENMT1NFU1QgKi9cbiAgQ0xPU0VTVDogMSxcblxuICAvKiogQU5ZICovXG4gIEFOWTogMixcblxuICAvKiogQUxMICovXG4gIEFMTDogNFxufTtcbi8qKlxuICogUmF5TW9kZVxuICovXG5cbl9TaGFwZSR0eXBlcyRTUEhFUkUkMSA9IFNoYXBlJDEudHlwZXMuU1BIRVJFO1xuX1NoYXBlJHR5cGVzJFBMQU5FJDEgPSBTaGFwZSQxLnR5cGVzLlBMQU5FO1xuX1NoYXBlJHR5cGVzJEJPWCQxID0gU2hhcGUkMS50eXBlcy5CT1g7XG5fU2hhcGUkdHlwZXMkQ1lMSU5ERVIkMSA9IFNoYXBlJDEudHlwZXMuQ1lMSU5ERVI7XG5fU2hhcGUkdHlwZXMkQ09OVkVYUE8kMSA9IFNoYXBlJDEudHlwZXMuQ09OVkVYUE9MWUhFRFJPTjtcbl9TaGFwZSR0eXBlcyRIRUlHSFRGSSQxID0gU2hhcGUkMS50eXBlcy5IRUlHSFRGSUVMRDtcbl9TaGFwZSR0eXBlcyRUUklNRVNIJDEgPSBTaGFwZSQxLnR5cGVzLlRSSU1FU0g7XG5cbi8qKlxuICogQSBsaW5lIGluIDNEIHNwYWNlIHRoYXQgaW50ZXJzZWN0cyBib2RpZXMgYW5kIHJldHVybiBwb2ludHMuXG4gKi9cbmNsYXNzIFJheSQxIHtcbiAgLyoqXG4gICAqIGZyb21cbiAgICovXG5cbiAgLyoqXG4gICAqIHRvXG4gICAqL1xuXG4gIC8qKlxuICAgKiBkaXJlY3Rpb25cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBwcmVjaXNpb24gb2YgdGhlIHJheS4gVXNlZCB3aGVuIGNoZWNraW5nIHBhcmFsbGVsaXR5IGV0Yy5cbiAgICogQGRlZmF1bHQgMC4wMDAxXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTZXQgdG8gYGZhbHNlYCBpZiB5b3UgZG9uJ3Qgd2FudCB0aGUgUmF5IHRvIHRha2UgYGNvbGxpc2lvblJlc3BvbnNlYCBmbGFncyBpbnRvIGFjY291bnQgb24gYm9kaWVzIGFuZCBzaGFwZXMuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG5cbiAgLyoqXG4gICAqIElmIHNldCB0byBgdHJ1ZWAsIHRoZSByYXkgc2tpcHMgYW55IGhpdHMgd2l0aCBub3JtYWwuZG90KHJheURpcmVjdGlvbikgPCAwLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cblxuICAvKipcbiAgICogY29sbGlzaW9uRmlsdGVyTWFza1xuICAgKiBAZGVmYXVsdCAtMVxuICAgKi9cblxuICAvKipcbiAgICogY29sbGlzaW9uRmlsdGVyR3JvdXBcbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBpbnRlcnNlY3Rpb24gbW9kZS4gU2hvdWxkIGJlIFJheS5BTlksIFJheS5BTEwgb3IgUmF5LkNMT1NFU1QuXG4gICAqIEBkZWZhdWx0IFJBWS5BTllcbiAgICovXG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgcmVzdWx0IG9iamVjdC5cbiAgICovXG5cbiAgLyoqXG4gICAqIFdpbGwgYmUgc2V0IHRvIGB0cnVlYCBkdXJpbmcgaW50ZXJzZWN0V29ybGQoKSBpZiB0aGUgcmF5IGhpdCBhbnl0aGluZy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFVzZXItcHJvdmlkZWQgcmVzdWx0IGNhbGxiYWNrLiBXaWxsIGJlIHVzZWQgaWYgbW9kZSBpcyBSYXkuQUxMLlxuICAgKi9cblxuICAvKipcbiAgICogQ0xPU0VTVFxuICAgKi9cblxuICAvKipcbiAgICogQU5ZXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBTExcbiAgICovXG4gIGdldCBbX1NoYXBlJHR5cGVzJFNQSEVSRSQxXSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJzZWN0U3BoZXJlO1xuICB9XG5cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkUExBTkUkMV0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdFBsYW5lO1xuICB9XG5cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkQk9YJDFdKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnNlY3RCb3g7XG4gIH1cblxuICBnZXQgW19TaGFwZSR0eXBlcyRDWUxJTkRFUiQxXSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJzZWN0Q29udmV4O1xuICB9XG5cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkQ09OVkVYUE8kMV0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdENvbnZleDtcbiAgfVxuXG4gIGdldCBbX1NoYXBlJHR5cGVzJEhFSUdIVEZJJDFdKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnNlY3RIZWlnaHRmaWVsZDtcbiAgfVxuXG4gIGdldCBbX1NoYXBlJHR5cGVzJFRSSU1FU0gkMV0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdFRyaW1lc2g7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihmcm9tLCB0bykge1xuICAgIGlmIChmcm9tID09PSB2b2lkIDApIHtcbiAgICAgIGZyb20gPSBuZXcgVmVjMyQxKCk7XG4gICAgfVxuXG4gICAgaWYgKHRvID09PSB2b2lkIDApIHtcbiAgICAgIHRvID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRoaXMuZnJvbSA9IGZyb20uY2xvbmUoKTtcbiAgICB0aGlzLnRvID0gdG8uY2xvbmUoKTtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLnByZWNpc2lvbiA9IDAuMDAwMTtcbiAgICB0aGlzLmNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgPSB0cnVlO1xuICAgIHRoaXMuc2tpcEJhY2tmYWNlcyA9IGZhbHNlO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyTWFzayA9IC0xO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgPSAtMTtcbiAgICB0aGlzLm1vZGUgPSBSYXkkMS5BTlk7XG4gICAgdGhpcy5yZXN1bHQgPSBuZXcgUmF5Y2FzdFJlc3VsdCQxKCk7XG4gICAgdGhpcy5oYXNIaXQgPSBmYWxzZTtcblxuICAgIHRoaXMuY2FsbGJhY2sgPSByZXN1bHQgPT4ge307XG4gIH1cbiAgLyoqXG4gICAqIERvIGl0ZXJzZWN0aW9uIGFnYWluc3QgYWxsIGJvZGllcyBpbiB0aGUgZ2l2ZW4gV29ybGQuXG4gICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgcmF5IGhpdCBhbnl0aGluZywgb3RoZXJ3aXNlIGZhbHNlLlxuICAgKi9cblxuXG4gIGludGVyc2VjdFdvcmxkKHdvcmxkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IFJheSQxLkFOWTtcbiAgICB0aGlzLnJlc3VsdCA9IG9wdGlvbnMucmVzdWx0IHx8IG5ldyBSYXljYXN0UmVzdWx0JDEoKTtcbiAgICB0aGlzLnNraXBCYWNrZmFjZXMgPSAhIW9wdGlvbnMuc2tpcEJhY2tmYWNlcztcbiAgICB0aGlzLmNvbGxpc2lvbkZpbHRlck1hc2sgPSB0eXBlb2Ygb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJNYXNrICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzayA6IC0xO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgPSB0eXBlb2Ygb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJHcm91cCAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwIDogLTE7XG4gICAgdGhpcy5jaGVja0NvbGxpc2lvblJlc3BvbnNlID0gdHlwZW9mIG9wdGlvbnMuY2hlY2tDb2xsaXNpb25SZXNwb25zZSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgOiB0cnVlO1xuXG4gICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgdGhpcy5mcm9tLmNvcHkob3B0aW9ucy5mcm9tKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50bykge1xuICAgICAgdGhpcy50by5jb3B5KG9wdGlvbnMudG8pO1xuICAgIH1cblxuICAgIHRoaXMuY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrIHx8ICgoKSA9PiB7fSk7XG5cbiAgICB0aGlzLmhhc0hpdCA9IGZhbHNlO1xuICAgIHRoaXMucmVzdWx0LnJlc2V0KCk7XG4gICAgdGhpcy51cGRhdGVEaXJlY3Rpb24oKTtcbiAgICB0aGlzLmdldEFBQkIodG1wQUFCQiQxJDEpO1xuICAgIHRtcEFycmF5JDEubGVuZ3RoID0gMDtcbiAgICB3b3JsZC5icm9hZHBoYXNlLmFhYmJRdWVyeSh3b3JsZCwgdG1wQUFCQiQxJDEsIHRtcEFycmF5JDEpO1xuICAgIHRoaXMuaW50ZXJzZWN0Qm9kaWVzKHRtcEFycmF5JDEpO1xuICAgIHJldHVybiB0aGlzLmhhc0hpdDtcbiAgfVxuICAvKipcbiAgICogU2hvb3QgYSByYXkgYXQgYSBib2R5LCBnZXQgYmFjayBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaGl0LlxuICAgKiBAZGVwcmVjYXRlZCBAcGFyYW0gcmVzdWx0IHNldCB0aGUgcmVzdWx0IHByb3BlcnR5IG9mIHRoZSBSYXkgaW5zdGVhZC5cbiAgICovXG5cblxuICBpbnRlcnNlY3RCb2R5KGJvZHksIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgdGhpcy51cGRhdGVEaXJlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja0NvbGxpc2lvblJlc3BvbnNlID0gdGhpcy5jaGVja0NvbGxpc2lvblJlc3BvbnNlO1xuXG4gICAgaWYgKGNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgJiYgIWJvZHkuY29sbGlzaW9uUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgJiBib2R5LmNvbGxpc2lvbkZpbHRlck1hc2spID09PSAwIHx8IChib2R5LmNvbGxpc2lvbkZpbHRlckdyb3VwICYgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrKSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHhpID0gaW50ZXJzZWN0Qm9keV94aSQxO1xuICAgIGNvbnN0IHFpID0gaW50ZXJzZWN0Qm9keV9xaSQxO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIE4gPSBib2R5LnNoYXBlcy5sZW5ndGg7IGkgPCBOOyBpKyspIHtcbiAgICAgIGNvbnN0IHNoYXBlID0gYm9keS5zaGFwZXNbaV07XG5cbiAgICAgIGlmIChjaGVja0NvbGxpc2lvblJlc3BvbnNlICYmICFzaGFwZS5jb2xsaXNpb25SZXNwb25zZSkge1xuICAgICAgICBjb250aW51ZTsgLy8gU2tpcFxuICAgICAgfVxuXG4gICAgICBib2R5LnF1YXRlcm5pb24ubXVsdChib2R5LnNoYXBlT3JpZW50YXRpb25zW2ldLCBxaSk7XG4gICAgICBib2R5LnF1YXRlcm5pb24udm11bHQoYm9keS5zaGFwZU9mZnNldHNbaV0sIHhpKTtcbiAgICAgIHhpLnZhZGQoYm9keS5wb3NpdGlvbiwgeGkpO1xuICAgICAgdGhpcy5pbnRlcnNlY3RTaGFwZShzaGFwZSwgcWksIHhpLCBib2R5KTtcblxuICAgICAgaWYgKHRoaXMucmVzdWx0LnNob3VsZFN0b3ApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTaG9vdCBhIHJheSBhdCBhbiBhcnJheSBib2RpZXMsIGdldCBiYWNrIGluZm9ybWF0aW9uIGFib3V0IHRoZSBoaXQuXG4gICAqIEBwYXJhbSBib2RpZXMgQW4gYXJyYXkgb2YgQm9keSBvYmplY3RzLlxuICAgKiBAZGVwcmVjYXRlZCBAcGFyYW0gcmVzdWx0IHNldCB0aGUgcmVzdWx0IHByb3BlcnR5IG9mIHRoZSBSYXkgaW5zdGVhZC5cbiAgICpcbiAgICovXG5cblxuICBpbnRlcnNlY3RCb2RpZXMoYm9kaWVzLCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgIHRoaXMudXBkYXRlRGlyZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBib2RpZXMubGVuZ3RoOyAhdGhpcy5yZXN1bHQuc2hvdWxkU3RvcCAmJiBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLmludGVyc2VjdEJvZHkoYm9kaWVzW2ldKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGRpcmVjdGlvbiB2ZWN0b3IuXG4gICAqL1xuXG5cbiAgdXBkYXRlRGlyZWN0aW9uKCkge1xuICAgIHRoaXMudG8udnN1Yih0aGlzLmZyb20sIHRoaXMuZGlyZWN0aW9uKTtcbiAgICB0aGlzLmRpcmVjdGlvbi5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIGludGVyc2VjdFNoYXBlKHNoYXBlLCBxdWF0LCBwb3NpdGlvbiwgYm9keSkge1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLmZyb207IC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlXG5cbiAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlRnJvbUludGVyc2VjdGlvbiQxKGZyb20sIHRoaXMuZGlyZWN0aW9uLCBwb3NpdGlvbik7XG5cbiAgICBpZiAoZGlzdGFuY2UgPiBzaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGludGVyc2VjdE1ldGhvZCA9IHRoaXNbc2hhcGUudHlwZV07XG5cbiAgICBpZiAoaW50ZXJzZWN0TWV0aG9kKSB7XG4gICAgICBpbnRlcnNlY3RNZXRob2QuY2FsbCh0aGlzLCBzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHNoYXBlKTtcbiAgICB9XG4gIH1cblxuICBfaW50ZXJzZWN0Qm94KGJveCwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHJlcG9ydGVkU2hhcGUpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJzZWN0Q29udmV4KGJveC5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24sIHF1YXQsIHBvc2l0aW9uLCBib2R5LCByZXBvcnRlZFNoYXBlKTtcbiAgfVxuXG4gIF9pbnRlcnNlY3RQbGFuZShzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHJlcG9ydGVkU2hhcGUpIHtcbiAgICBjb25zdCBmcm9tID0gdGhpcy5mcm9tO1xuICAgIGNvbnN0IHRvID0gdGhpcy50bztcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjsgLy8gR2V0IHBsYW5lIG5vcm1hbFxuXG4gICAgY29uc3Qgd29ybGROb3JtYWwgPSBuZXcgVmVjMyQxKDAsIDAsIDEpO1xuICAgIHF1YXQudm11bHQod29ybGROb3JtYWwsIHdvcmxkTm9ybWFsKTtcbiAgICBjb25zdCBsZW4gPSBuZXcgVmVjMyQxKCk7XG4gICAgZnJvbS52c3ViKHBvc2l0aW9uLCBsZW4pO1xuICAgIGNvbnN0IHBsYW5lVG9Gcm9tID0gbGVuLmRvdCh3b3JsZE5vcm1hbCk7XG4gICAgdG8udnN1Yihwb3NpdGlvbiwgbGVuKTtcbiAgICBjb25zdCBwbGFuZVRvVG8gPSBsZW4uZG90KHdvcmxkTm9ybWFsKTtcblxuICAgIGlmIChwbGFuZVRvRnJvbSAqIHBsYW5lVG9UbyA+IDApIHtcbiAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgYXJlIG9uIHRoZSBzYW1lIHNpZGUgb2YgdGhlIHBsYW5lLi4uIGJhaWwgb3V0XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZyb20uZGlzdGFuY2VUbyh0bykgPCBwbGFuZVRvRnJvbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5fZG90X2RpciA9IHdvcmxkTm9ybWFsLmRvdChkaXJlY3Rpb24pO1xuXG4gICAgaWYgKE1hdGguYWJzKG5fZG90X2RpcikgPCB0aGlzLnByZWNpc2lvbikge1xuICAgICAgLy8gTm8gaW50ZXJzZWN0aW9uXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGxhbmVQb2ludFRvRnJvbSA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBkaXJfc2NhbGVkX3dpdGhfdCA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBoaXRQb2ludFdvcmxkID0gbmV3IFZlYzMkMSgpO1xuICAgIGZyb20udnN1Yihwb3NpdGlvbiwgcGxhbmVQb2ludFRvRnJvbSk7XG4gICAgY29uc3QgdCA9IC13b3JsZE5vcm1hbC5kb3QocGxhbmVQb2ludFRvRnJvbSkgLyBuX2RvdF9kaXI7XG4gICAgZGlyZWN0aW9uLnNjYWxlKHQsIGRpcl9zY2FsZWRfd2l0aF90KTtcbiAgICBmcm9tLnZhZGQoZGlyX3NjYWxlZF93aXRoX3QsIGhpdFBvaW50V29ybGQpO1xuICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKHdvcmxkTm9ybWFsLCBoaXRQb2ludFdvcmxkLCByZXBvcnRlZFNoYXBlLCBib2R5LCAtMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgd29ybGQgQUFCQiBvZiB0aGUgcmF5LlxuICAgKi9cblxuXG4gIGdldEFBQkIoYWFiYikge1xuICAgIGNvbnN0IHtcbiAgICAgIGxvd2VyQm91bmQsXG4gICAgICB1cHBlckJvdW5kXG4gICAgfSA9IGFhYmI7XG4gICAgY29uc3QgdG8gPSB0aGlzLnRvO1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLmZyb207XG4gICAgbG93ZXJCb3VuZC54ID0gTWF0aC5taW4odG8ueCwgZnJvbS54KTtcbiAgICBsb3dlckJvdW5kLnkgPSBNYXRoLm1pbih0by55LCBmcm9tLnkpO1xuICAgIGxvd2VyQm91bmQueiA9IE1hdGgubWluKHRvLnosIGZyb20ueik7XG4gICAgdXBwZXJCb3VuZC54ID0gTWF0aC5tYXgodG8ueCwgZnJvbS54KTtcbiAgICB1cHBlckJvdW5kLnkgPSBNYXRoLm1heCh0by55LCBmcm9tLnkpO1xuICAgIHVwcGVyQm91bmQueiA9IE1hdGgubWF4KHRvLnosIGZyb20ueik7XG4gIH1cblxuICBfaW50ZXJzZWN0SGVpZ2h0ZmllbGQoc2hhcGUsIHF1YXQsIHBvc2l0aW9uLCBib2R5LCByZXBvcnRlZFNoYXBlKSB7XG4gICAgc2hhcGUuZGF0YTtcbiAgICBzaGFwZS5lbGVtZW50U2l6ZTsgLy8gQ29udmVydCB0aGUgcmF5IHRvIGxvY2FsIGhlaWdodGZpZWxkIGNvb3JkaW5hdGVzXG5cbiAgICBjb25zdCBsb2NhbFJheSA9IGludGVyc2VjdEhlaWdodGZpZWxkX2xvY2FsUmF5JDE7IC8vbmV3IFJheSh0aGlzLmZyb20sIHRoaXMudG8pO1xuXG4gICAgbG9jYWxSYXkuZnJvbS5jb3B5KHRoaXMuZnJvbSk7XG4gICAgbG9jYWxSYXkudG8uY29weSh0aGlzLnRvKTtcbiAgICBUcmFuc2Zvcm0kMS5wb2ludFRvTG9jYWxGcmFtZShwb3NpdGlvbiwgcXVhdCwgbG9jYWxSYXkuZnJvbSwgbG9jYWxSYXkuZnJvbSk7XG4gICAgVHJhbnNmb3JtJDEucG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIGxvY2FsUmF5LnRvLCBsb2NhbFJheS50byk7XG4gICAgbG9jYWxSYXkudXBkYXRlRGlyZWN0aW9uKCk7IC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRhdGEgcG9pbnRzIHRvIHRlc3QgYWdhaW5zdFxuXG4gICAgY29uc3QgaW5kZXggPSBpbnRlcnNlY3RIZWlnaHRmaWVsZF9pbmRleCQxO1xuICAgIGxldCBpTWluWDtcbiAgICBsZXQgaU1pblk7XG4gICAgbGV0IGlNYXhYO1xuICAgIGxldCBpTWF4WTsgLy8gU2V0IHRvIG1heFxuXG4gICAgaU1pblggPSBpTWluWSA9IDA7XG4gICAgaU1heFggPSBpTWF4WSA9IHNoYXBlLmRhdGEubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBhYWJiID0gbmV3IEFBQkIkMSgpO1xuICAgIGxvY2FsUmF5LmdldEFBQkIoYWFiYik7XG4gICAgc2hhcGUuZ2V0SW5kZXhPZlBvc2l0aW9uKGFhYmIubG93ZXJCb3VuZC54LCBhYWJiLmxvd2VyQm91bmQueSwgaW5kZXgsIHRydWUpO1xuICAgIGlNaW5YID0gTWF0aC5tYXgoaU1pblgsIGluZGV4WzBdKTtcbiAgICBpTWluWSA9IE1hdGgubWF4KGlNaW5ZLCBpbmRleFsxXSk7XG4gICAgc2hhcGUuZ2V0SW5kZXhPZlBvc2l0aW9uKGFhYmIudXBwZXJCb3VuZC54LCBhYWJiLnVwcGVyQm91bmQueSwgaW5kZXgsIHRydWUpO1xuICAgIGlNYXhYID0gTWF0aC5taW4oaU1heFgsIGluZGV4WzBdICsgMSk7XG4gICAgaU1heFkgPSBNYXRoLm1pbihpTWF4WSwgaW5kZXhbMV0gKyAxKTtcblxuICAgIGZvciAobGV0IGkgPSBpTWluWDsgaSA8IGlNYXhYOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSBpTWluWTsgaiA8IGlNYXhZOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0LnNob3VsZFN0b3ApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZS5nZXRBYWJiQXRJbmRleChpLCBqLCBhYWJiKTtcblxuICAgICAgICBpZiAoIWFhYmIub3ZlcmxhcHNSYXkobG9jYWxSYXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gTG93ZXIgdHJpYW5nbGVcblxuXG4gICAgICAgIHNoYXBlLmdldENvbnZleFRyaWFuZ2xlUGlsbGFyKGksIGosIGZhbHNlKTtcbiAgICAgICAgVHJhbnNmb3JtJDEucG9pbnRUb1dvcmxkRnJhbWUocG9zaXRpb24sIHF1YXQsIHNoYXBlLnBpbGxhck9mZnNldCwgd29ybGRQaWxsYXJPZmZzZXQkMSk7XG5cbiAgICAgICAgdGhpcy5faW50ZXJzZWN0Q29udmV4KHNoYXBlLnBpbGxhckNvbnZleCwgcXVhdCwgd29ybGRQaWxsYXJPZmZzZXQkMSwgYm9keSwgcmVwb3J0ZWRTaGFwZSwgaW50ZXJzZWN0Q29udmV4T3B0aW9ucyQxKTtcblxuICAgICAgICBpZiAodGhpcy5yZXN1bHQuc2hvdWxkU3RvcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBVcHBlciB0cmlhbmdsZVxuXG5cbiAgICAgICAgc2hhcGUuZ2V0Q29udmV4VHJpYW5nbGVQaWxsYXIoaSwgaiwgdHJ1ZSk7XG4gICAgICAgIFRyYW5zZm9ybSQxLnBvaW50VG9Xb3JsZEZyYW1lKHBvc2l0aW9uLCBxdWF0LCBzaGFwZS5waWxsYXJPZmZzZXQsIHdvcmxkUGlsbGFyT2Zmc2V0JDEpO1xuXG4gICAgICAgIHRoaXMuX2ludGVyc2VjdENvbnZleChzaGFwZS5waWxsYXJDb252ZXgsIHF1YXQsIHdvcmxkUGlsbGFyT2Zmc2V0JDEsIGJvZHksIHJlcG9ydGVkU2hhcGUsIGludGVyc2VjdENvbnZleE9wdGlvbnMkMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2ludGVyc2VjdFNwaGVyZShzcGhlcmUsIHF1YXQsIHBvc2l0aW9uLCBib2R5LCByZXBvcnRlZFNoYXBlKSB7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZnJvbTtcbiAgICBjb25zdCB0byA9IHRoaXMudG87XG4gICAgY29uc3QgciA9IHNwaGVyZS5yYWRpdXM7XG4gICAgY29uc3QgYSA9ICh0by54IC0gZnJvbS54KSAqKiAyICsgKHRvLnkgLSBmcm9tLnkpICoqIDIgKyAodG8ueiAtIGZyb20ueikgKiogMjtcbiAgICBjb25zdCBiID0gMiAqICgodG8ueCAtIGZyb20ueCkgKiAoZnJvbS54IC0gcG9zaXRpb24ueCkgKyAodG8ueSAtIGZyb20ueSkgKiAoZnJvbS55IC0gcG9zaXRpb24ueSkgKyAodG8ueiAtIGZyb20ueikgKiAoZnJvbS56IC0gcG9zaXRpb24ueikpO1xuICAgIGNvbnN0IGMgPSAoZnJvbS54IC0gcG9zaXRpb24ueCkgKiogMiArIChmcm9tLnkgLSBwb3NpdGlvbi55KSAqKiAyICsgKGZyb20ueiAtIHBvc2l0aW9uLnopICoqIDIgLSByICoqIDI7XG4gICAgY29uc3QgZGVsdGEgPSBiICoqIDIgLSA0ICogYSAqIGM7XG4gICAgY29uc3QgaW50ZXJzZWN0aW9uUG9pbnQgPSBSYXlfaW50ZXJzZWN0U3BoZXJlX2ludGVyc2VjdGlvblBvaW50JDE7XG4gICAgY29uc3Qgbm9ybWFsID0gUmF5X2ludGVyc2VjdFNwaGVyZV9ub3JtYWwkMTtcblxuICAgIGlmIChkZWx0YSA8IDApIHtcbiAgICAgIC8vIE5vIGludGVyc2VjdGlvblxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoZGVsdGEgPT09IDApIHtcbiAgICAgIC8vIHNpbmdsZSBpbnRlcnNlY3Rpb24gcG9pbnRcbiAgICAgIGZyb20ubGVycCh0bywgZGVsdGEsIGludGVyc2VjdGlvblBvaW50KTtcbiAgICAgIGludGVyc2VjdGlvblBvaW50LnZzdWIocG9zaXRpb24sIG5vcm1hbCk7XG4gICAgICBub3JtYWwubm9ybWFsaXplKCk7XG4gICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGludGVyc2VjdGlvblBvaW50LCByZXBvcnRlZFNoYXBlLCBib2R5LCAtMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGQxID0gKC1iIC0gTWF0aC5zcXJ0KGRlbHRhKSkgLyAoMiAqIGEpO1xuICAgICAgY29uc3QgZDIgPSAoLWIgKyBNYXRoLnNxcnQoZGVsdGEpKSAvICgyICogYSk7XG5cbiAgICAgIGlmIChkMSA+PSAwICYmIGQxIDw9IDEpIHtcbiAgICAgICAgZnJvbS5sZXJwKHRvLCBkMSwgaW50ZXJzZWN0aW9uUG9pbnQpO1xuICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludC52c3ViKHBvc2l0aW9uLCBub3JtYWwpO1xuICAgICAgICBub3JtYWwubm9ybWFsaXplKCk7XG4gICAgICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKG5vcm1hbCwgaW50ZXJzZWN0aW9uUG9pbnQsIHJlcG9ydGVkU2hhcGUsIGJvZHksIC0xKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucmVzdWx0LnNob3VsZFN0b3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZDIgPj0gMCAmJiBkMiA8PSAxKSB7XG4gICAgICAgIGZyb20ubGVycCh0bywgZDIsIGludGVyc2VjdGlvblBvaW50KTtcbiAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQudnN1Yihwb3NpdGlvbiwgbm9ybWFsKTtcbiAgICAgICAgbm9ybWFsLm5vcm1hbGl6ZSgpO1xuICAgICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGludGVyc2VjdGlvblBvaW50LCByZXBvcnRlZFNoYXBlLCBib2R5LCAtMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2ludGVyc2VjdENvbnZleChzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHJlcG9ydGVkU2hhcGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBub3JtYWwgPSBpbnRlcnNlY3RDb252ZXhfbm9ybWFsJDE7XG4gICAgY29uc3QgdmVjdG9yID0gaW50ZXJzZWN0Q29udmV4X3ZlY3RvciQxO1xuICAgIGNvbnN0IGZhY2VMaXN0ID0gb3B0aW9ucyAmJiBvcHRpb25zLmZhY2VMaXN0IHx8IG51bGw7IC8vIENoZWNraW5nIGZhY2VzXG5cbiAgICBjb25zdCBmYWNlcyA9IHNoYXBlLmZhY2VzO1xuICAgIGNvbnN0IHZlcnRpY2VzID0gc2hhcGUudmVydGljZXM7XG4gICAgY29uc3Qgbm9ybWFscyA9IHNoYXBlLmZhY2VOb3JtYWxzO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uO1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLmZyb207XG4gICAgY29uc3QgdG8gPSB0aGlzLnRvO1xuICAgIGNvbnN0IGZyb21Ub0Rpc3RhbmNlID0gZnJvbS5kaXN0YW5jZVRvKHRvKTtcbiAgICBjb25zdCBOZmFjZXMgPSBmYWNlTGlzdCA/IGZhY2VMaXN0Lmxlbmd0aCA6IGZhY2VzLmxlbmd0aDtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdDtcblxuICAgIGZvciAobGV0IGogPSAwOyAhcmVzdWx0LnNob3VsZFN0b3AgJiYgaiA8IE5mYWNlczsgaisrKSB7XG4gICAgICBjb25zdCBmaSA9IGZhY2VMaXN0ID8gZmFjZUxpc3Rbal0gOiBqO1xuICAgICAgY29uc3QgZmFjZSA9IGZhY2VzW2ZpXTtcbiAgICAgIGNvbnN0IGZhY2VOb3JtYWwgPSBub3JtYWxzW2ZpXTtcbiAgICAgIGNvbnN0IHEgPSBxdWF0O1xuICAgICAgY29uc3QgeCA9IHBvc2l0aW9uOyAvLyBkZXRlcm1pbmUgaWYgcmF5IGludGVyc2VjdHMgdGhlIHBsYW5lIG9mIHRoZSBmYWNlXG4gICAgICAvLyBub3RlOiB0aGlzIHdvcmtzIHJlZ2FyZGxlc3Mgb2YgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZmFjZSBub3JtYWxcbiAgICAgIC8vIEdldCBwbGFuZSBwb2ludCBpbiB3b3JsZCBjb29yZGluYXRlcy4uLlxuXG4gICAgICB2ZWN0b3IuY29weSh2ZXJ0aWNlc1tmYWNlWzBdXSk7XG4gICAgICBxLnZtdWx0KHZlY3RvciwgdmVjdG9yKTtcbiAgICAgIHZlY3Rvci52YWRkKHgsIHZlY3Rvcik7IC8vIC4uLmJ1dCBtYWtlIGl0IHJlbGF0aXZlIHRvIHRoZSByYXkgZnJvbS4gV2UnbGwgZml4IHRoaXMgbGF0ZXIuXG5cbiAgICAgIHZlY3Rvci52c3ViKGZyb20sIHZlY3Rvcik7IC8vIEdldCBwbGFuZSBub3JtYWxcblxuICAgICAgcS52bXVsdChmYWNlTm9ybWFsLCBub3JtYWwpOyAvLyBJZiB0aGlzIGRvdCBwcm9kdWN0IGlzIG5lZ2F0aXZlLCB3ZSBoYXZlIHNvbWV0aGluZyBpbnRlcmVzdGluZ1xuXG4gICAgICBjb25zdCBkb3QgPSBkaXJlY3Rpb24uZG90KG5vcm1hbCk7IC8vIEJhaWwgb3V0IGlmIHJheSBhbmQgcGxhbmUgYXJlIHBhcmFsbGVsXG5cbiAgICAgIGlmIChNYXRoLmFicyhkb3QpIDwgdGhpcy5wcmVjaXNpb24pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIGNhbGMgZGlzdGFuY2UgdG8gcGxhbmVcblxuXG4gICAgICBjb25zdCBzY2FsYXIgPSBub3JtYWwuZG90KHZlY3RvcikgLyBkb3Q7IC8vIGlmIG5lZ2F0aXZlIGRpc3RhbmNlLCB0aGVuIHBsYW5lIGlzIGJlaGluZCByYXlcblxuICAgICAgaWYgKHNjYWxhciA8IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIGlmIChkb3QgPCAwKSB7XG4gICAgICAvLyBJbnRlcnNlY3Rpb24gcG9pbnQgaXMgZnJvbSArIGRpcmVjdGlvbiAqIHNjYWxhclxuXG5cbiAgICAgIGRpcmVjdGlvbi5zY2FsZShzY2FsYXIsIGludGVyc2VjdFBvaW50JDEpO1xuICAgICAgaW50ZXJzZWN0UG9pbnQkMS52YWRkKGZyb20sIGludGVyc2VjdFBvaW50JDEpOyAvLyBhIGlzIHRoZSBwb2ludCB3ZSBjb21wYXJlIHBvaW50cyBiIGFuZCBjIHdpdGguXG5cbiAgICAgIGEkMS5jb3B5KHZlcnRpY2VzW2ZhY2VbMF1dKTtcbiAgICAgIHEudm11bHQoYSQxLCBhJDEpO1xuICAgICAgeC52YWRkKGEkMSwgYSQxKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDE7ICFyZXN1bHQuc2hvdWxkU3RvcCAmJiBpIDwgZmFjZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgLy8gVHJhbnNmb3JtIDMgdmVydGljZXMgdG8gd29ybGQgY29vcmRzXG4gICAgICAgIGIkMS5jb3B5KHZlcnRpY2VzW2ZhY2VbaV1dKTtcbiAgICAgICAgYyQxLmNvcHkodmVydGljZXNbZmFjZVtpICsgMV1dKTtcbiAgICAgICAgcS52bXVsdChiJDEsIGIkMSk7XG4gICAgICAgIHEudm11bHQoYyQxLCBjJDEpO1xuICAgICAgICB4LnZhZGQoYiQxLCBiJDEpO1xuICAgICAgICB4LnZhZGQoYyQxLCBjJDEpO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGludGVyc2VjdFBvaW50JDEuZGlzdGFuY2VUbyhmcm9tKTtcblxuICAgICAgICBpZiAoIShSYXkkMS5wb2ludEluVHJpYW5nbGUoaW50ZXJzZWN0UG9pbnQkMSwgYSQxLCBiJDEsIGMkMSkgfHwgUmF5JDEucG9pbnRJblRyaWFuZ2xlKGludGVyc2VjdFBvaW50JDEsIGIkMSwgYSQxLCBjJDEpKSB8fCBkaXN0YW5jZSA+IGZyb21Ub0Rpc3RhbmNlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGludGVyc2VjdFBvaW50JDEsIHJlcG9ydGVkU2hhcGUsIGJvZHksIGZpKTtcbiAgICAgIH0gLy8gfVxuXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAdG9kbyBPcHRpbWl6ZSBieSB0cmFuc2Zvcm1pbmcgdGhlIHdvcmxkIHRvIGxvY2FsIHNwYWNlIGZpcnN0LlxuICAgKiBAdG9kbyBVc2UgT2N0cmVlIGxvb2t1cFxuICAgKi9cblxuXG4gIF9pbnRlcnNlY3RUcmltZXNoKG1lc2gsIHF1YXQsIHBvc2l0aW9uLCBib2R5LCByZXBvcnRlZFNoYXBlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgbm9ybWFsID0gaW50ZXJzZWN0VHJpbWVzaF9ub3JtYWwkMTtcbiAgICBjb25zdCB0cmlhbmdsZXMgPSBpbnRlcnNlY3RUcmltZXNoX3RyaWFuZ2xlcyQxO1xuICAgIGNvbnN0IHRyZWVUcmFuc2Zvcm0gPSBpbnRlcnNlY3RUcmltZXNoX3RyZWVUcmFuc2Zvcm0kMTtcbiAgICBjb25zdCB2ZWN0b3IgPSBpbnRlcnNlY3RDb252ZXhfdmVjdG9yJDE7XG4gICAgY29uc3QgbG9jYWxEaXJlY3Rpb24gPSBpbnRlcnNlY3RUcmltZXNoX2xvY2FsRGlyZWN0aW9uJDE7XG4gICAgY29uc3QgbG9jYWxGcm9tID0gaW50ZXJzZWN0VHJpbWVzaF9sb2NhbEZyb20kMTtcbiAgICBjb25zdCBsb2NhbFRvID0gaW50ZXJzZWN0VHJpbWVzaF9sb2NhbFRvJDE7XG4gICAgY29uc3Qgd29ybGRJbnRlcnNlY3RQb2ludCA9IGludGVyc2VjdFRyaW1lc2hfd29ybGRJbnRlcnNlY3RQb2ludCQxO1xuICAgIGNvbnN0IHdvcmxkTm9ybWFsID0gaW50ZXJzZWN0VHJpbWVzaF93b3JsZE5vcm1hbCQxOyAvLyBDaGVja2luZyBmYWNlc1xuXG4gICAgY29uc3QgaW5kaWNlcyA9IG1lc2guaW5kaWNlcztcbiAgICBtZXNoLnZlcnRpY2VzOyAvLyBjb25zdCBub3JtYWxzID0gbWVzaC5mYWNlTm9ybWFsc1xuXG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZnJvbTtcbiAgICBjb25zdCB0byA9IHRoaXMudG87XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb247XG4gICAgdHJlZVRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKTtcbiAgICB0cmVlVHJhbnNmb3JtLnF1YXRlcm5pb24uY29weShxdWF0KTsgLy8gVHJhbnNmb3JtIHJheSB0byBsb2NhbCBzcGFjZSFcblxuICAgIFRyYW5zZm9ybSQxLnZlY3RvclRvTG9jYWxGcmFtZShwb3NpdGlvbiwgcXVhdCwgZGlyZWN0aW9uLCBsb2NhbERpcmVjdGlvbik7XG4gICAgVHJhbnNmb3JtJDEucG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIGZyb20sIGxvY2FsRnJvbSk7XG4gICAgVHJhbnNmb3JtJDEucG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIHRvLCBsb2NhbFRvKTtcbiAgICBsb2NhbFRvLnggKj0gbWVzaC5zY2FsZS54O1xuICAgIGxvY2FsVG8ueSAqPSBtZXNoLnNjYWxlLnk7XG4gICAgbG9jYWxUby56ICo9IG1lc2guc2NhbGUuejtcbiAgICBsb2NhbEZyb20ueCAqPSBtZXNoLnNjYWxlLng7XG4gICAgbG9jYWxGcm9tLnkgKj0gbWVzaC5zY2FsZS55O1xuICAgIGxvY2FsRnJvbS56ICo9IG1lc2guc2NhbGUuejtcbiAgICBsb2NhbFRvLnZzdWIobG9jYWxGcm9tLCBsb2NhbERpcmVjdGlvbik7XG4gICAgbG9jYWxEaXJlY3Rpb24ubm9ybWFsaXplKCk7XG4gICAgY29uc3QgZnJvbVRvRGlzdGFuY2VTcXVhcmVkID0gbG9jYWxGcm9tLmRpc3RhbmNlU3F1YXJlZChsb2NhbFRvKTtcbiAgICBtZXNoLnRyZWUucmF5UXVlcnkodGhpcywgdHJlZVRyYW5zZm9ybSwgdHJpYW5nbGVzKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBOID0gdHJpYW5nbGVzLmxlbmd0aDsgIXRoaXMucmVzdWx0LnNob3VsZFN0b3AgJiYgaSAhPT0gTjsgaSsrKSB7XG4gICAgICBjb25zdCB0cmlhbmdsZXNJbmRleCA9IHRyaWFuZ2xlc1tpXTtcbiAgICAgIG1lc2guZ2V0Tm9ybWFsKHRyaWFuZ2xlc0luZGV4LCBub3JtYWwpOyAvLyBkZXRlcm1pbmUgaWYgcmF5IGludGVyc2VjdHMgdGhlIHBsYW5lIG9mIHRoZSBmYWNlXG4gICAgICAvLyBub3RlOiB0aGlzIHdvcmtzIHJlZ2FyZGxlc3Mgb2YgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZmFjZSBub3JtYWxcbiAgICAgIC8vIEdldCBwbGFuZSBwb2ludCBpbiB3b3JsZCBjb29yZGluYXRlcy4uLlxuXG4gICAgICBtZXNoLmdldFZlcnRleChpbmRpY2VzW3RyaWFuZ2xlc0luZGV4ICogM10sIGEkMSk7IC8vIC4uLmJ1dCBtYWtlIGl0IHJlbGF0aXZlIHRvIHRoZSByYXkgZnJvbS4gV2UnbGwgZml4IHRoaXMgbGF0ZXIuXG5cbiAgICAgIGEkMS52c3ViKGxvY2FsRnJvbSwgdmVjdG9yKTsgLy8gSWYgdGhpcyBkb3QgcHJvZHVjdCBpcyBuZWdhdGl2ZSwgd2UgaGF2ZSBzb21ldGhpbmcgaW50ZXJlc3RpbmdcblxuICAgICAgY29uc3QgZG90ID0gbG9jYWxEaXJlY3Rpb24uZG90KG5vcm1hbCk7IC8vIEJhaWwgb3V0IGlmIHJheSBhbmQgcGxhbmUgYXJlIHBhcmFsbGVsXG4gICAgICAvLyBpZiAoTWF0aC5hYnMoIGRvdCApIDwgdGhpcy5wcmVjaXNpb24pe1xuICAgICAgLy8gICAgIGNvbnRpbnVlO1xuICAgICAgLy8gfVxuICAgICAgLy8gY2FsYyBkaXN0YW5jZSB0byBwbGFuZVxuXG4gICAgICBjb25zdCBzY2FsYXIgPSBub3JtYWwuZG90KHZlY3RvcikgLyBkb3Q7IC8vIGlmIG5lZ2F0aXZlIGRpc3RhbmNlLCB0aGVuIHBsYW5lIGlzIGJlaGluZCByYXlcblxuICAgICAgaWYgKHNjYWxhciA8IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIEludGVyc2VjdGlvbiBwb2ludCBpcyBmcm9tICsgZGlyZWN0aW9uICogc2NhbGFyXG5cblxuICAgICAgbG9jYWxEaXJlY3Rpb24uc2NhbGUoc2NhbGFyLCBpbnRlcnNlY3RQb2ludCQxKTtcbiAgICAgIGludGVyc2VjdFBvaW50JDEudmFkZChsb2NhbEZyb20sIGludGVyc2VjdFBvaW50JDEpOyAvLyBHZXQgdHJpYW5nbGUgdmVydGljZXNcblxuICAgICAgbWVzaC5nZXRWZXJ0ZXgoaW5kaWNlc1t0cmlhbmdsZXNJbmRleCAqIDMgKyAxXSwgYiQxKTtcbiAgICAgIG1lc2guZ2V0VmVydGV4KGluZGljZXNbdHJpYW5nbGVzSW5kZXggKiAzICsgMl0sIGMkMSk7XG4gICAgICBjb25zdCBzcXVhcmVkRGlzdGFuY2UgPSBpbnRlcnNlY3RQb2ludCQxLmRpc3RhbmNlU3F1YXJlZChsb2NhbEZyb20pO1xuXG4gICAgICBpZiAoIShSYXkkMS5wb2ludEluVHJpYW5nbGUoaW50ZXJzZWN0UG9pbnQkMSwgYiQxLCBhJDEsIGMkMSkgfHwgUmF5JDEucG9pbnRJblRyaWFuZ2xlKGludGVyc2VjdFBvaW50JDEsIGEkMSwgYiQxLCBjJDEpKSB8fCBzcXVhcmVkRGlzdGFuY2UgPiBmcm9tVG9EaXN0YW5jZVNxdWFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIHRyYW5zZm9ybSBpbnRlcnNlY3Rwb2ludCBhbmQgbm9ybWFsIHRvIHdvcmxkXG5cblxuICAgICAgVHJhbnNmb3JtJDEudmVjdG9yVG9Xb3JsZEZyYW1lKHF1YXQsIG5vcm1hbCwgd29ybGROb3JtYWwpO1xuICAgICAgVHJhbnNmb3JtJDEucG9pbnRUb1dvcmxkRnJhbWUocG9zaXRpb24sIHF1YXQsIGludGVyc2VjdFBvaW50JDEsIHdvcmxkSW50ZXJzZWN0UG9pbnQpO1xuICAgICAgdGhpcy5yZXBvcnRJbnRlcnNlY3Rpb24od29ybGROb3JtYWwsIHdvcmxkSW50ZXJzZWN0UG9pbnQsIHJlcG9ydGVkU2hhcGUsIGJvZHksIHRyaWFuZ2xlc0luZGV4KTtcbiAgICB9XG5cbiAgICB0cmlhbmdsZXMubGVuZ3RoID0gMDtcbiAgfVxuICAvKipcbiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBpbnRlcnNlY3Rpb25zIHNob3VsZCBjb250aW51ZVxuICAgKi9cblxuXG4gIHJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGhpdFBvaW50V29ybGQsIHNoYXBlLCBib2R5LCBoaXRGYWNlSW5kZXgpIHtcbiAgICBjb25zdCBmcm9tID0gdGhpcy5mcm9tO1xuICAgIGNvbnN0IHRvID0gdGhpcy50bztcbiAgICBjb25zdCBkaXN0YW5jZSA9IGZyb20uZGlzdGFuY2VUbyhoaXRQb2ludFdvcmxkKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdDsgLy8gU2tpcCBiYWNrIGZhY2VzP1xuXG4gICAgaWYgKHRoaXMuc2tpcEJhY2tmYWNlcyAmJiBub3JtYWwuZG90KHRoaXMuZGlyZWN0aW9uKSA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN1bHQuaGl0RmFjZUluZGV4ID0gdHlwZW9mIGhpdEZhY2VJbmRleCAhPT0gJ3VuZGVmaW5lZCcgPyBoaXRGYWNlSW5kZXggOiAtMTtcblxuICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgICBjYXNlIFJheSQxLkFMTDpcbiAgICAgICAgdGhpcy5oYXNIaXQgPSB0cnVlO1xuICAgICAgICByZXN1bHQuc2V0KGZyb20sIHRvLCBub3JtYWwsIGhpdFBvaW50V29ybGQsIHNoYXBlLCBib2R5LCBkaXN0YW5jZSk7XG4gICAgICAgIHJlc3VsdC5oYXNIaXQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFJheSQxLkNMT1NFU1Q6XG4gICAgICAgIC8vIFN0b3JlIGlmIGNsb3NlciB0aGFuIGN1cnJlbnQgY2xvc2VzdFxuICAgICAgICBpZiAoZGlzdGFuY2UgPCByZXN1bHQuZGlzdGFuY2UgfHwgIXJlc3VsdC5oYXNIaXQpIHtcbiAgICAgICAgICB0aGlzLmhhc0hpdCA9IHRydWU7XG4gICAgICAgICAgcmVzdWx0Lmhhc0hpdCA9IHRydWU7XG4gICAgICAgICAgcmVzdWx0LnNldChmcm9tLCB0bywgbm9ybWFsLCBoaXRQb2ludFdvcmxkLCBzaGFwZSwgYm9keSwgZGlzdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUmF5JDEuQU5ZOlxuICAgICAgICAvLyBSZXBvcnQgYW5kIHN0b3AuXG4gICAgICAgIHRoaXMuaGFzSGl0ID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0Lmhhc0hpdCA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5zZXQoZnJvbSwgdG8sIG5vcm1hbCwgaGl0UG9pbnRXb3JsZCwgc2hhcGUsIGJvZHksIGRpc3RhbmNlKTtcbiAgICAgICAgcmVzdWx0LnNob3VsZFN0b3AgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFzIHBlciBcIkJhcnljZW50cmljIFRlY2huaXF1ZVwiIGFzIG5hbWVkXG4gICAqIHtAbGluayBodHRwczovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbCBoZXJlfSBidXQgd2l0aG91dCB0aGUgZGl2aXNpb25cbiAgICovXG5cblxuICBzdGF0aWMgcG9pbnRJblRyaWFuZ2xlKHAsIGEsIGIsIGMpIHtcbiAgICBjLnZzdWIoYSwgdjAkMSk7XG4gICAgYi52c3ViKGEsIHYxJDEpO1xuICAgIHAudnN1YihhLCB2MiQxKTtcbiAgICBjb25zdCBkb3QwMCA9IHYwJDEuZG90KHYwJDEpO1xuICAgIGNvbnN0IGRvdDAxID0gdjAkMS5kb3QodjEkMSk7XG4gICAgY29uc3QgZG90MDIgPSB2MCQxLmRvdCh2MiQxKTtcbiAgICBjb25zdCBkb3QxMSA9IHYxJDEuZG90KHYxJDEpO1xuICAgIGNvbnN0IGRvdDEyID0gdjEkMS5kb3QodjIkMSk7XG4gICAgbGV0IHU7XG4gICAgbGV0IHY7XG4gICAgcmV0dXJuICh1ID0gZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIpID49IDAgJiYgKHYgPSBkb3QwMCAqIGRvdDEyIC0gZG90MDEgKiBkb3QwMikgPj0gMCAmJiB1ICsgdiA8IGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxO1xuICB9XG5cbn1cblJheSQxLkNMT1NFU1QgPSBSQVlfTU9ERVMkMS5DTE9TRVNUO1xuUmF5JDEuQU5ZID0gUkFZX01PREVTJDEuQU5ZO1xuUmF5JDEuQUxMID0gUkFZX01PREVTJDEuQUxMO1xuY29uc3QgdG1wQUFCQiQxJDEgPSBuZXcgQUFCQiQxKCk7XG5jb25zdCB0bXBBcnJheSQxID0gW107XG5jb25zdCB2MSQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgdjIkMSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGludGVyc2VjdEJvZHlfeGkkMSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGludGVyc2VjdEJvZHlfcWkkMSA9IG5ldyBRdWF0ZXJuaW9uJDEoKTtcbmNvbnN0IGludGVyc2VjdFBvaW50JDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBhJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBiJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBjJDEgPSBuZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgUmF5Y2FzdFJlc3VsdCQxKCk7XG5jb25zdCBpbnRlcnNlY3RDb252ZXhPcHRpb25zJDEgPSB7XG4gIGZhY2VMaXN0OiBbMF1cbn07XG5jb25zdCB3b3JsZFBpbGxhck9mZnNldCQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgaW50ZXJzZWN0SGVpZ2h0ZmllbGRfbG9jYWxSYXkkMSA9IG5ldyBSYXkkMSgpO1xuY29uc3QgaW50ZXJzZWN0SGVpZ2h0ZmllbGRfaW5kZXgkMSA9IFtdO1xuY29uc3QgUmF5X2ludGVyc2VjdFNwaGVyZV9pbnRlcnNlY3Rpb25Qb2ludCQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgUmF5X2ludGVyc2VjdFNwaGVyZV9ub3JtYWwkMSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGludGVyc2VjdENvbnZleF9ub3JtYWwkMSA9IG5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbmNvbnN0IGludGVyc2VjdENvbnZleF92ZWN0b3IkMSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGludGVyc2VjdFRyaW1lc2hfbm9ybWFsJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBpbnRlcnNlY3RUcmltZXNoX2xvY2FsRGlyZWN0aW9uJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBpbnRlcnNlY3RUcmltZXNoX2xvY2FsRnJvbSQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgaW50ZXJzZWN0VHJpbWVzaF9sb2NhbFRvJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBpbnRlcnNlY3RUcmltZXNoX3dvcmxkTm9ybWFsJDEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBpbnRlcnNlY3RUcmltZXNoX3dvcmxkSW50ZXJzZWN0UG9pbnQkMSA9IG5ldyBWZWMzJDEoKTtcbm5ldyBBQUJCJDEoKTtcbmNvbnN0IGludGVyc2VjdFRyaW1lc2hfdHJpYW5nbGVzJDEgPSBbXTtcbmNvbnN0IGludGVyc2VjdFRyaW1lc2hfdHJlZVRyYW5zZm9ybSQxID0gbmV3IFRyYW5zZm9ybSQxKCk7XG5jb25zdCB2MCQxID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgaW50ZXJzZWN0JDEgPSBuZXcgVmVjMyQxKCk7XG5cbmZ1bmN0aW9uIGRpc3RhbmNlRnJvbUludGVyc2VjdGlvbiQxKGZyb20sIGRpcmVjdGlvbiwgcG9zaXRpb24pIHtcbiAgLy8gdjAgaXMgdmVjdG9yIGZyb20gZnJvbSB0byBwb3NpdGlvblxuICBwb3NpdGlvbi52c3ViKGZyb20sIHYwJDEpO1xuICBjb25zdCBkb3QgPSB2MCQxLmRvdChkaXJlY3Rpb24pOyAvLyBpbnRlcnNlY3QgPSBkaXJlY3Rpb24qZG90ICsgZnJvbVxuXG4gIGRpcmVjdGlvbi5zY2FsZShkb3QsIGludGVyc2VjdCQxKTtcbiAgaW50ZXJzZWN0JDEudmFkZChmcm9tLCBpbnRlcnNlY3QkMSk7XG4gIGNvbnN0IGRpc3RhbmNlID0gcG9zaXRpb24uZGlzdGFuY2VUbyhpbnRlcnNlY3QkMSk7XG4gIHJldHVybiBkaXN0YW5jZTtcbn1cblxuY2xhc3MgVXRpbHMge1xuICAvKipcbiAgICogRXh0ZW5kIGFuIG9wdGlvbnMgb2JqZWN0IHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIG9iamVjdC4gTWF5IGJlIGZhbHN5OiBpbiB0aGlzIGNhc2UsIGEgbmV3IG9iamVjdCBpcyBjcmVhdGVkIGFuZCByZXR1cm5lZC5cbiAgICogQHBhcmFtIGRlZmF1bHRzIEFuIG9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBAcmV0dXJuIFRoZSBtb2RpZmllZCBvcHRpb25zIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0cyhvcHRpb25zLCBkZWZhdWx0cykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBvcHRpb25zKSkge1xuICAgICAgICBvcHRpb25zW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbn1cbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTsgLy8gVGVtcCB2ZWN0b3JzXG5cbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcblxuLyoqXG4gKiBEZWZpbmVzIGEgcGh5c2ljcyBtYXRlcmlhbC5cbiAqL1xuY2xhc3MgTWF0ZXJpYWwge1xuICAvKipcbiAgICogTWF0ZXJpYWwgbmFtZS5cbiAgICogSWYgb3B0aW9ucyBpcyBhIHN0cmluZywgbmFtZSB3aWxsIGJlIHNldCB0byB0aGF0IHN0cmluZy5cbiAgICogQHRvZG8gRGVwcmVjYXRlIHRoaXNcbiAgICovXG5cbiAgLyoqIE1hdGVyaWFsIGlkLiAqL1xuXG4gIC8qKlxuICAgKiBGcmljdGlvbiBmb3IgdGhpcyBtYXRlcmlhbC5cbiAgICogSWYgbm9uLW5lZ2F0aXZlLCBpdCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgZnJpY3Rpb24gZ2l2ZW4gYnkgQ29udGFjdE1hdGVyaWFscy4gSWYgdGhlcmUncyBubyBtYXRjaGluZyBDb250YWN0TWF0ZXJpYWwsIHRoZSB2YWx1ZSBmcm9tIGBkZWZhdWx0Q29udGFjdE1hdGVyaWFsYCBpbiB0aGUgV29ybGQgd2lsbCBiZSB1c2VkLlxuICAgKi9cblxuICAvKipcbiAgICogUmVzdGl0dXRpb24gZm9yIHRoaXMgbWF0ZXJpYWwuXG4gICAqIElmIG5vbi1uZWdhdGl2ZSwgaXQgd2lsbCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIHJlc3RpdHV0aW9uIGdpdmVuIGJ5IENvbnRhY3RNYXRlcmlhbHMuIElmIHRoZXJlJ3Mgbm8gbWF0Y2hpbmcgQ29udGFjdE1hdGVyaWFsLCB0aGUgdmFsdWUgZnJvbSBgZGVmYXVsdENvbnRhY3RNYXRlcmlhbGAgaW4gdGhlIFdvcmxkIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgbGV0IG5hbWUgPSAnJzsgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZml4XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvL2NvbnNvbGUud2FybihgUGFzc2luZyBhIHN0cmluZyB0byBNYXRlcmlhbE9wdGlvbnMgaXMgZGVwcmVjYXRlZCwgYW5kIGhhcyBubyBlZmZlY3RgKVxuICAgICAgbmFtZSA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmlkID0gTWF0ZXJpYWwuaWRDb3VudGVyKys7XG4gICAgdGhpcy5mcmljdGlvbiA9IHR5cGVvZiBvcHRpb25zLmZyaWN0aW9uICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuZnJpY3Rpb24gOiAtMTtcbiAgICB0aGlzLnJlc3RpdHV0aW9uID0gdHlwZW9mIG9wdGlvbnMucmVzdGl0dXRpb24gIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5yZXN0aXR1dGlvbiA6IC0xO1xuICB9XG5cbn1cbk1hdGVyaWFsLmlkQ291bnRlciA9IDA7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgUmF5JDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbltuZXcgVmVjMyQxKDEsIDAsIDApLCBuZXcgVmVjMyQxKDAsIDEsIDApLCBuZXcgVmVjMyQxKDAsIDAsIDEpXTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcblxubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xuXG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7IC8vIGJpbGF0ZXJhbCBjb25zdHJhaW50IGJldHdlZW4gdHdvIGR5bmFtaWMgb2JqZWN0c1xuXG4vKipcbiAqIFNwaGVyaWNhbCBzaGFwZVxuICogQGV4YW1wbGVcbiAqICAgICBjb25zdCByYWRpdXMgPSAxXG4gKiAgICAgY29uc3Qgc3BoZXJlU2hhcGUgPSBuZXcgQ0FOTk9OLlNwaGVyZShyYWRpdXMpXG4gKiAgICAgY29uc3Qgc3BoZXJlQm9keSA9IG5ldyBDQU5OT04uQm9keSh7IG1hc3M6IDEsIHNoYXBlOiBzcGhlcmVTaGFwZSB9KVxuICogICAgIHdvcmxkLmFkZEJvZHkoc3BoZXJlQm9keSlcbiAqL1xuY2xhc3MgU3BoZXJlIGV4dGVuZHMgU2hhcGUkMSB7XG4gIC8qKlxuICAgKiBUaGUgcmFkaXVzIG9mIHRoZSBzcGhlcmUuXG4gICAqL1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcmFkaXVzIFRoZSByYWRpdXMgb2YgdGhlIHNwaGVyZSwgYSBub24tbmVnYXRpdmUgbnVtYmVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IocmFkaXVzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgdHlwZTogU2hhcGUkMS50eXBlcy5TUEhFUkVcbiAgICB9KTtcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cyAhPT0gdW5kZWZpbmVkID8gcmFkaXVzIDogMS4wO1xuXG4gICAgaWYgKHRoaXMucmFkaXVzIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc3BoZXJlIHJhZGl1cyBjYW5ub3QgYmUgbmVnYXRpdmUuJyk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpO1xuICB9XG4gIC8qKiBjYWxjdWxhdGVMb2NhbEluZXJ0aWEgKi9cblxuXG4gIGNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICBjb25zdCBJID0gMi4wICogbWFzcyAqIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgLyA1LjA7XG4gICAgdGFyZ2V0LnggPSBJO1xuICAgIHRhcmdldC55ID0gSTtcbiAgICB0YXJnZXQueiA9IEk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKiogdm9sdW1lICovXG5cblxuICB2b2x1bWUoKSB7XG4gICAgcmV0dXJuIDQuMCAqIE1hdGguUEkgKiBNYXRoLnBvdyh0aGlzLnJhZGl1cywgMykgLyAzLjA7XG4gIH1cblxuICB1cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpIHtcbiAgICB0aGlzLmJvdW5kaW5nU3BoZXJlUmFkaXVzID0gdGhpcy5yYWRpdXM7XG4gIH1cblxuICBjYWxjdWxhdGVXb3JsZEFBQkIocG9zLCBxdWF0LCBtaW4sIG1heCkge1xuICAgIGNvbnN0IHIgPSB0aGlzLnJhZGl1cztcbiAgICBjb25zdCBheGVzID0gWyd4JywgJ3knLCAneiddO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBheCA9IGF4ZXNbaV07XG4gICAgICBtaW5bYXhdID0gcG9zW2F4XSAtIHI7XG4gICAgICBtYXhbYXhdID0gcG9zW2F4XSArIHI7XG4gICAgfVxuICB9XG5cbn1cbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTsgLy8gVGVtcCB2ZWN0b3JzIGZvciBjYWxjdWxhdGlvblxuXG5uZXcgVmVjMyQxKCk7IC8vIFJlbGF0aXZlIHZlbG9jaXR5XG5cbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcblxuLyoqXG4gKiBDeWxpbmRlciBjbGFzcy5cbiAqIEBleGFtcGxlXG4gKiAgICAgY29uc3QgcmFkaXVzVG9wID0gMC41XG4gKiAgICAgY29uc3QgcmFkaXVzQm90dG9tID0gMC41XG4gKiAgICAgY29uc3QgaGVpZ2h0ID0gMlxuICogICAgIGNvbnN0IG51bVNlZ21lbnRzID0gMTJcbiAqICAgICBjb25zdCBjeWxpbmRlclNoYXBlID0gbmV3IENBTk5PTi5DeWxpbmRlcihyYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCBudW1TZWdtZW50cylcbiAqICAgICBjb25zdCBjeWxpbmRlckJvZHkgPSBuZXcgQ0FOTk9OLkJvZHkoeyBtYXNzOiAxLCBzaGFwZTogY3lsaW5kZXJTaGFwZSB9KVxuICogICAgIHdvcmxkLmFkZEJvZHkoY3lsaW5kZXJCb2R5KVxuICovXG5cbmNsYXNzIEN5bGluZGVyIGV4dGVuZHMgQ29udmV4UG9seWhlZHJvbiB7XG4gIC8qKiBUaGUgcmFkaXVzIG9mIHRoZSB0b3Agb2YgdGhlIEN5bGluZGVyLiAqL1xuXG4gIC8qKiBUaGUgcmFkaXVzIG9mIHRoZSBib3R0b20gb2YgdGhlIEN5bGluZGVyLiAqL1xuXG4gIC8qKiBUaGUgaGVpZ2h0IG9mIHRoZSBDeWxpbmRlci4gKi9cblxuICAvKiogVGhlIG51bWJlciBvZiBzZWdtZW50cyB0byBidWlsZCB0aGUgY3lsaW5kZXIgb3V0IG9mLiAqL1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gcmFkaXVzVG9wIFRoZSByYWRpdXMgb2YgdGhlIHRvcCBvZiB0aGUgQ3lsaW5kZXIuXG4gICAqIEBwYXJhbSByYWRpdXNCb3R0b20gVGhlIHJhZGl1cyBvZiB0aGUgYm90dG9tIG9mIHRoZSBDeWxpbmRlci5cbiAgICogQHBhcmFtIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBDeWxpbmRlci5cbiAgICogQHBhcmFtIG51bVNlZ21lbnRzIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgdG8gYnVpbGQgdGhlIGN5bGluZGVyIG91dCBvZi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIG51bVNlZ21lbnRzKSB7XG4gICAgaWYgKHJhZGl1c1RvcCA9PT0gdm9pZCAwKSB7XG4gICAgICByYWRpdXNUb3AgPSAxO1xuICAgIH1cblxuICAgIGlmIChyYWRpdXNCb3R0b20gPT09IHZvaWQgMCkge1xuICAgICAgcmFkaXVzQm90dG9tID0gMTtcbiAgICB9XG5cbiAgICBpZiAoaGVpZ2h0ID09PSB2b2lkIDApIHtcbiAgICAgIGhlaWdodCA9IDE7XG4gICAgfVxuXG4gICAgaWYgKG51bVNlZ21lbnRzID09PSB2b2lkIDApIHtcbiAgICAgIG51bVNlZ21lbnRzID0gODtcbiAgICB9XG5cbiAgICBpZiAocmFkaXVzVG9wIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3lsaW5kZXIgcmFkaXVzVG9wIGNhbm5vdCBiZSBuZWdhdGl2ZS4nKTtcbiAgICB9XG5cbiAgICBpZiAocmFkaXVzQm90dG9tIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3lsaW5kZXIgcmFkaXVzQm90dG9tIGNhbm5vdCBiZSBuZWdhdGl2ZS4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBOID0gbnVtU2VnbWVudHM7XG4gICAgY29uc3QgdmVydGljZXMgPSBbXTtcbiAgICBjb25zdCBheGVzID0gW107XG4gICAgY29uc3QgZmFjZXMgPSBbXTtcbiAgICBjb25zdCBib3R0b21mYWNlID0gW107XG4gICAgY29uc3QgdG9wZmFjZSA9IFtdO1xuICAgIGNvbnN0IGNvcyA9IE1hdGguY29zO1xuICAgIGNvbnN0IHNpbiA9IE1hdGguc2luOyAvLyBGaXJzdCBib3R0b20gcG9pbnRcblxuICAgIHZlcnRpY2VzLnB1c2gobmV3IFZlYzMkMSgtcmFkaXVzQm90dG9tICogc2luKDApLCAtaGVpZ2h0ICogMC41LCByYWRpdXNCb3R0b20gKiBjb3MoMCkpKTtcbiAgICBib3R0b21mYWNlLnB1c2goMCk7IC8vIEZpcnN0IHRvcCBwb2ludFxuXG4gICAgdmVydGljZXMucHVzaChuZXcgVmVjMyQxKC1yYWRpdXNUb3AgKiBzaW4oMCksIGhlaWdodCAqIDAuNSwgcmFkaXVzVG9wICogY29zKDApKSk7XG4gICAgdG9wZmFjZS5wdXNoKDEpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGNvbnN0IHRoZXRhID0gMiAqIE1hdGguUEkgLyBOICogKGkgKyAxKTtcbiAgICAgIGNvbnN0IHRoZXRhTiA9IDIgKiBNYXRoLlBJIC8gTiAqIChpICsgMC41KTtcblxuICAgICAgaWYgKGkgPCBOIC0gMSkge1xuICAgICAgICAvLyBCb3R0b21cbiAgICAgICAgdmVydGljZXMucHVzaChuZXcgVmVjMyQxKC1yYWRpdXNCb3R0b20gKiBzaW4odGhldGEpLCAtaGVpZ2h0ICogMC41LCByYWRpdXNCb3R0b20gKiBjb3ModGhldGEpKSk7XG4gICAgICAgIGJvdHRvbWZhY2UucHVzaCgyICogaSArIDIpOyAvLyBUb3BcblxuICAgICAgICB2ZXJ0aWNlcy5wdXNoKG5ldyBWZWMzJDEoLXJhZGl1c1RvcCAqIHNpbih0aGV0YSksIGhlaWdodCAqIDAuNSwgcmFkaXVzVG9wICogY29zKHRoZXRhKSkpO1xuICAgICAgICB0b3BmYWNlLnB1c2goMiAqIGkgKyAzKTsgLy8gRmFjZVxuXG4gICAgICAgIGZhY2VzLnB1c2goWzIgKiBpLCAyICogaSArIDEsIDIgKiBpICsgMywgMiAqIGkgKyAyXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYWNlcy5wdXNoKFsyICogaSwgMiAqIGkgKyAxLCAxLCAwXSk7IC8vIENvbm5lY3RcbiAgICAgIH0gLy8gQXhpczogd2UgY2FuIGN1dCBvZmYgaGFsZiBvZiB0aGVtIGlmIHdlIGhhdmUgZXZlbiBudW1iZXIgb2Ygc2VnbWVudHNcblxuXG4gICAgICBpZiAoTiAlIDIgPT09IDEgfHwgaSA8IE4gLyAyKSB7XG4gICAgICAgIGF4ZXMucHVzaChuZXcgVmVjMyQxKC1zaW4odGhldGFOKSwgMCwgY29zKHRoZXRhTikpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmYWNlcy5wdXNoKGJvdHRvbWZhY2UpO1xuICAgIGF4ZXMucHVzaChuZXcgVmVjMyQxKDAsIDEsIDApKTsgLy8gUmVvcmRlciB0b3AgZmFjZVxuXG4gICAgY29uc3QgdGVtcCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3BmYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0ZW1wLnB1c2godG9wZmFjZVt0b3BmYWNlLmxlbmd0aCAtIGkgLSAxXSk7XG4gICAgfVxuXG4gICAgZmFjZXMucHVzaCh0ZW1wKTtcbiAgICBzdXBlcih7XG4gICAgICB2ZXJ0aWNlcyxcbiAgICAgIGZhY2VzLFxuICAgICAgYXhlc1xuICAgIH0pO1xuICAgIHRoaXMudHlwZSA9IFNoYXBlJDEudHlwZXMuQ1lMSU5ERVI7XG4gICAgdGhpcy5yYWRpdXNUb3AgPSByYWRpdXNUb3A7XG4gICAgdGhpcy5yYWRpdXNCb3R0b20gPSByYWRpdXNCb3R0b207XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5udW1TZWdtZW50cyA9IG51bVNlZ21lbnRzO1xuICB9XG5cbn1cblxuLyoqXG4gKiBQYXJ0aWNsZSBzaGFwZS5cbiAqIEBleGFtcGxlXG4gKiAgICAgY29uc3QgcGFydGljbGVTaGFwZSA9IG5ldyBDQU5OT04uUGFydGljbGUoKVxuICogICAgIGNvbnN0IHBhcnRpY2xlQm9keSA9IG5ldyBDQU5OT04uQm9keSh7IG1hc3M6IDEsIHNoYXBlOiBwYXJ0aWNsZVNoYXBlIH0pXG4gKiAgICAgd29ybGQuYWRkQm9keShwYXJ0aWNsZUJvZHkpXG4gKi9cbmNsYXNzIFBhcnRpY2xlIGV4dGVuZHMgU2hhcGUkMSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIHR5cGU6IFNoYXBlJDEudHlwZXMuUEFSVElDTEVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogY2FsY3VsYXRlTG9jYWxJbmVydGlhXG4gICAqL1xuXG5cbiAgY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMkMSgpO1xuICAgIH1cblxuICAgIHRhcmdldC5zZXQoMCwgMCwgMCk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIHZvbHVtZSgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCkge1xuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSAwO1xuICB9XG5cbiAgY2FsY3VsYXRlV29ybGRBQUJCKHBvcywgcXVhdCwgbWluLCBtYXgpIHtcbiAgICAvLyBHZXQgZWFjaCBheGlzIG1heFxuICAgIG1pbi5jb3B5KHBvcyk7XG4gICAgbWF4LmNvcHkocG9zKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQSBwbGFuZSwgZmFjaW5nIGluIHRoZSBaIGRpcmVjdGlvbi4gVGhlIHBsYW5lIGhhcyBpdHMgc3VyZmFjZSBhdCB6PTAgYW5kIGV2ZXJ5dGhpbmcgYmVsb3cgej0wIGlzIGFzc3VtZWQgdG8gYmUgc29saWQgcGxhbmUuIFRvIG1ha2UgdGhlIHBsYW5lIGZhY2UgaW4gc29tZSBvdGhlciBkaXJlY3Rpb24gdGhhbiB6LCB5b3UgbXVzdCBwdXQgaXQgaW5zaWRlIGEgQm9keSBhbmQgcm90YXRlIHRoYXQgYm9keS4gU2VlIHRoZSBkZW1vcy5cbiAqIEBleGFtcGxlXG4gKiAgICAgY29uc3QgcGxhbmVTaGFwZSA9IG5ldyBDQU5OT04uUGxhbmUoKVxuICogICAgIGNvbnN0IHBsYW5lQm9keSA9IG5ldyBDQU5OT04uQm9keSh7IG1hc3M6IDAsIHNoYXBlOiAgcGxhbmVTaGFwZSB9KVxuICogICAgIHBsYW5lQm9keS5xdWF0ZXJuaW9uLnNldEZyb21FdWxlcigtTWF0aC5QSSAvIDIsIDAsIDApIC8vIG1ha2UgaXQgZmFjZSB1cFxuICogICAgIHdvcmxkLmFkZEJvZHkocGxhbmVCb2R5KVxuICovXG5jbGFzcyBQbGFuZSBleHRlbmRzIFNoYXBlJDEge1xuICAvKiogd29ybGROb3JtYWwgKi9cblxuICAvKiogd29ybGROb3JtYWxOZWVkc1VwZGF0ZSAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICB0eXBlOiBTaGFwZSQxLnR5cGVzLlBMQU5FXG4gICAgfSk7IC8vIFdvcmxkIG9yaWVudGVkIG5vcm1hbFxuXG4gICAgdGhpcy53b3JsZE5vcm1hbCA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLndvcmxkTm9ybWFsTmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICB9XG4gIC8qKiBjb21wdXRlV29ybGROb3JtYWwgKi9cblxuXG4gIGNvbXB1dGVXb3JsZE5vcm1hbChxdWF0KSB7XG4gICAgY29uc3QgbiA9IHRoaXMud29ybGROb3JtYWw7XG4gICAgbi5zZXQoMCwgMCwgMSk7XG4gICAgcXVhdC52bXVsdChuLCBuKTtcbiAgICB0aGlzLndvcmxkTm9ybWFsTmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgdm9sdW1lKCkge1xuICAgIHJldHVybiAoLy8gVGhlIHBsYW5lIGlzIGluZmluaXRlLi4uXG4gICAgICBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVdvcmxkQUFCQihwb3MsIHF1YXQsIG1pbiwgbWF4KSB7XG4gICAgLy8gVGhlIHBsYW5lIEFBQkIgaXMgaW5maW5pdGUsIGV4Y2VwdCBpZiB0aGUgbm9ybWFsIGlzIHBvaW50aW5nIGFsb25nIGFueSBheGlzXG4gICAgdGVtcE5vcm1hbC5zZXQoMCwgMCwgMSk7IC8vIERlZmF1bHQgcGxhbmUgbm9ybWFsIGlzIHpcblxuICAgIHF1YXQudm11bHQodGVtcE5vcm1hbCwgdGVtcE5vcm1hbCk7XG4gICAgY29uc3QgbWF4VmFsID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBtaW4uc2V0KC1tYXhWYWwsIC1tYXhWYWwsIC1tYXhWYWwpO1xuICAgIG1heC5zZXQobWF4VmFsLCBtYXhWYWwsIG1heFZhbCk7XG5cbiAgICBpZiAodGVtcE5vcm1hbC54ID09PSAxKSB7XG4gICAgICBtYXgueCA9IHBvcy54O1xuICAgIH0gZWxzZSBpZiAodGVtcE5vcm1hbC54ID09PSAtMSkge1xuICAgICAgbWluLnggPSBwb3MueDtcbiAgICB9XG5cbiAgICBpZiAodGVtcE5vcm1hbC55ID09PSAxKSB7XG4gICAgICBtYXgueSA9IHBvcy55O1xuICAgIH0gZWxzZSBpZiAodGVtcE5vcm1hbC55ID09PSAtMSkge1xuICAgICAgbWluLnkgPSBwb3MueTtcbiAgICB9XG5cbiAgICBpZiAodGVtcE5vcm1hbC56ID09PSAxKSB7XG4gICAgICBtYXgueiA9IHBvcy56O1xuICAgIH0gZWxzZSBpZiAodGVtcE5vcm1hbC56ID09PSAtMSkge1xuICAgICAgbWluLnogPSBwb3MuejtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpIHtcbiAgICB0aGlzLmJvdW5kaW5nU3BoZXJlUmFkaXVzID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgfVxuXG59XG5jb25zdCB0ZW1wTm9ybWFsID0gbmV3IFZlYzMkMSgpO1xuXG4vKipcbiAqIEhlaWdodGZpZWxkIHNoYXBlIGNsYXNzLiBIZWlnaHQgZGF0YSBpcyBnaXZlbiBhcyBhbiBhcnJheS4gVGhlc2UgZGF0YSBwb2ludHMgYXJlIHNwcmVhZCBvdXQgZXZlbmx5IHdpdGggYSBnaXZlbiBkaXN0YW5jZS5cbiAqIEB0b2RvIFNob3VsZCBiZSBwb3NzaWJsZSB0byB1c2UgYWxvbmcgYWxsIGF4ZXMsIG5vdCBqdXN0IHlcbiAqIEB0b2RvIHNob3VsZCBiZSBwb3NzaWJsZSB0byBzY2FsZSBhbG9uZyBhbGwgYXhlc1xuICogQHRvZG8gUmVmYWN0b3IgZWxlbWVudFNpemUgdG8gZWxlbWVudFNpemVYIGFuZCBlbGVtZW50U2l6ZVlcbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIC8vIEdlbmVyYXRlIHNvbWUgaGVpZ2h0IGRhdGEgKHktdmFsdWVzKS5cbiAqICAgICBjb25zdCBkYXRhID0gW11cbiAqICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDA7IGkrKykge1xuICogICAgICAgICBjb25zdCB5ID0gMC41ICogTWF0aC5jb3MoMC4yICogaSlcbiAqICAgICAgICAgZGF0YS5wdXNoKHkpXG4gKiAgICAgfVxuICpcbiAqICAgICAvLyBDcmVhdGUgdGhlIGhlaWdodGZpZWxkIHNoYXBlXG4gKiAgICAgY29uc3QgaGVpZ2h0ZmllbGRTaGFwZSA9IG5ldyBDQU5OT04uSGVpZ2h0ZmllbGQoZGF0YSwge1xuICogICAgICAgICBlbGVtZW50U2l6ZTogMSAvLyBEaXN0YW5jZSBiZXR3ZWVuIHRoZSBkYXRhIHBvaW50cyBpbiBYIGFuZCBZIGRpcmVjdGlvbnNcbiAqICAgICB9KVxuICogICAgIGNvbnN0IGhlaWdodGZpZWxkQm9keSA9IG5ldyBDQU5OT04uQm9keSh7IHNoYXBlOiBoZWlnaHRmaWVsZFNoYXBlIH0pXG4gKiAgICAgd29ybGQuYWRkQm9keShoZWlnaHRmaWVsZEJvZHkpXG4gKi9cbmNsYXNzIEhlaWdodGZpZWxkIGV4dGVuZHMgU2hhcGUkMSB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBudW1iZXJzLCBvciBoZWlnaHQgdmFsdWVzLCB0aGF0IGFyZSBzcHJlYWQgb3V0IGFsb25nIHRoZSB4IGF4aXMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBNYXggdmFsdWUgb2YgdGhlIGRhdGEgcG9pbnRzIGluIHRoZSBkYXRhIGFycmF5LlxuICAgKi9cblxuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBvZiB0aGUgZGF0YSBwb2ludHMgaW4gdGhlIGRhdGEgYXJyYXkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBXb3JsZCBzcGFjaW5nIGJldHdlZW4gdGhlIGRhdGEgcG9pbnRzIGluIFggYW5kIFkgZGlyZWN0aW9uLlxuICAgKiBAdG9kbyBlbGVtZW50U2l6ZVggYW5kIFlcbiAgICogQGRlZmF1bHQgMVxuICAgKi9cblxuICAvKipcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cblxuICAvKipcbiAgICogQHBhcmFtIGRhdGEgQW4gYXJyYXkgb2YgbnVtYmVycywgb3IgaGVpZ2h0IHZhbHVlcywgdGhhdCBhcmUgc3ByZWFkIG91dCBhbG9uZyB0aGUgeCBheGlzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gVXRpbHMuZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgbWF4VmFsdWU6IG51bGwsXG4gICAgICBtaW5WYWx1ZTogbnVsbCxcbiAgICAgIGVsZW1lbnRTaXplOiAxXG4gICAgfSk7XG4gICAgc3VwZXIoe1xuICAgICAgdHlwZTogU2hhcGUkMS50eXBlcy5IRUlHSFRGSUVMRFxuICAgIH0pO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5tYXhWYWx1ZSA9IG9wdGlvbnMubWF4VmFsdWU7XG4gICAgdGhpcy5taW5WYWx1ZSA9IG9wdGlvbnMubWluVmFsdWU7XG4gICAgdGhpcy5lbGVtZW50U2l6ZSA9IG9wdGlvbnMuZWxlbWVudFNpemU7XG5cbiAgICBpZiAob3B0aW9ucy5taW5WYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVNaW5WYWx1ZSgpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1heFZhbHVlID09PSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZU1heFZhbHVlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jYWNoZUVuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMucGlsbGFyQ29udmV4ID0gbmV3IENvbnZleFBvbHloZWRyb24oKTtcbiAgICB0aGlzLnBpbGxhck9mZnNldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB0aGlzLnVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCk7IC8vIFwiaV9qX2lzVXBwZXJcIiA9PiB7IGNvbnZleDogLi4uLCBvZmZzZXQ6IC4uLiB9XG4gICAgLy8gZm9yIGV4YW1wbGU6XG4gICAgLy8gX2NhY2hlZFBpbGxhcnNbXCIwXzJfMVwiXVxuXG4gICAgdGhpcy5fY2FjaGVkUGlsbGFycyA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIHdoZW5ldmVyIHlvdSBjaGFuZ2UgdGhlIGRhdGEgYXJyYXkuXG4gICAqL1xuXG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuX2NhY2hlZFBpbGxhcnMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBgbWluVmFsdWVgIHByb3BlcnR5XG4gICAqL1xuXG5cbiAgdXBkYXRlTWluVmFsdWUoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBsZXQgbWluVmFsdWUgPSBkYXRhWzBdWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqICE9PSBkYXRhW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHYgPSBkYXRhW2ldW2pdO1xuXG4gICAgICAgIGlmICh2IDwgbWluVmFsdWUpIHtcbiAgICAgICAgICBtaW5WYWx1ZSA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1pblZhbHVlID0gbWluVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYG1heFZhbHVlYCBwcm9wZXJ0eVxuICAgKi9cblxuXG4gIHVwZGF0ZU1heFZhbHVlKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgbGV0IG1heFZhbHVlID0gZGF0YVswXVswXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiAhPT0gZGF0YVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCB2ID0gZGF0YVtpXVtqXTtcblxuICAgICAgICBpZiAodiA+IG1heFZhbHVlKSB7XG4gICAgICAgICAgbWF4VmFsdWUgPSB2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXhWYWx1ZSA9IG1heFZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGhlaWdodCB2YWx1ZSBhdCBhbiBpbmRleC4gRG9uJ3QgZm9yZ2V0IHRvIHVwZGF0ZSBtYXhWYWx1ZSBhbmQgbWluVmFsdWUgYWZ0ZXIgeW91J3JlIGRvbmUuXG4gICAqL1xuXG5cbiAgc2V0SGVpZ2h0VmFsdWVBdEluZGV4KHhpLCB5aSwgdmFsdWUpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGRhdGFbeGldW3lpXSA9IHZhbHVlOyAvLyBJbnZhbGlkYXRlIGNhY2hlXG5cbiAgICB0aGlzLmNsZWFyQ2FjaGVkQ29udmV4VHJpYW5nbGVQaWxsYXIoeGksIHlpLCBmYWxzZSk7XG5cbiAgICBpZiAoeGkgPiAwKSB7XG4gICAgICB0aGlzLmNsZWFyQ2FjaGVkQ29udmV4VHJpYW5nbGVQaWxsYXIoeGkgLSAxLCB5aSwgdHJ1ZSk7XG4gICAgICB0aGlzLmNsZWFyQ2FjaGVkQ29udmV4VHJpYW5nbGVQaWxsYXIoeGkgLSAxLCB5aSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICh5aSA+IDApIHtcbiAgICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWkgLSAxLCB0cnVlKTtcbiAgICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWkgLSAxLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHlpID4gMCAmJiB4aSA+IDApIHtcbiAgICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSAtIDEsIHlpIC0gMSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgbWF4L21pbiBpbiBhIHJlY3RhbmdsZSBpbiB0aGUgbWF0cml4IGRhdGFcbiAgICogQHBhcmFtIHJlc3VsdCBBbiBhcnJheSB0byBzdG9yZSB0aGUgcmVzdWx0cyBpbi5cbiAgICogQHJldHVybiBUaGUgcmVzdWx0IGFycmF5LCBpZiBpdCB3YXMgcGFzc2VkIGluLiBNaW5pbXVtIHdpbGwgYmUgYXQgcG9zaXRpb24gMCBhbmQgbWF4IGF0IDEuXG4gICAqL1xuXG5cbiAgZ2V0UmVjdE1pbk1heChpTWluWCwgaU1pblksIGlNYXhYLCBpTWF4WSwgcmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBHZXQgbWF4IGFuZCBtaW4gb2YgdGhlIGRhdGFcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhOyAvLyBTZXQgZmlyc3QgdmFsdWVcblxuICAgIGxldCBtYXggPSB0aGlzLm1pblZhbHVlO1xuXG4gICAgZm9yIChsZXQgaSA9IGlNaW5YOyBpIDw9IGlNYXhYOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSBpTWluWTsgaiA8PSBpTWF4WTsgaisrKSB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGRhdGFbaV1bal07XG5cbiAgICAgICAgaWYgKGhlaWdodCA+IG1heCkge1xuICAgICAgICAgIG1heCA9IGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VsdFswXSA9IHRoaXMubWluVmFsdWU7XG4gICAgcmVzdWx0WzFdID0gbWF4O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGluZGV4IG9mIGEgbG9jYWwgcG9zaXRpb24gb24gdGhlIGhlaWdodGZpZWxkLiBUaGUgaW5kZXhlcyBpbmRpY2F0ZSB0aGUgcmVjdGFuZ2xlcywgc28gaWYgeW91ciB0ZXJyYWluIGlzIG1hZGUgb2YgTiB4IE4gaGVpZ2h0IGRhdGEgcG9pbnRzLCB5b3Ugd2lsbCBoYXZlIHJlY3RhbmdsZSBpbmRleGVzIHJhbmdpbmcgZnJvbSAwIHRvIE4tMS5cbiAgICogQHBhcmFtIHJlc3VsdCBUd28tZWxlbWVudCBhcnJheVxuICAgKiBAcGFyYW0gY2xhbXAgSWYgdGhlIHBvc2l0aW9uIHNob3VsZCBiZSBjbGFtcGVkIHRvIHRoZSBoZWlnaHRmaWVsZCBlZGdlLlxuICAgKi9cblxuXG4gIGdldEluZGV4T2ZQb3NpdGlvbih4LCB5LCByZXN1bHQsIGNsYW1wKSB7XG4gICAgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZGF0YSBwb2ludHMgdG8gdGVzdCBhZ2FpbnN0XG4gICAgY29uc3QgdyA9IHRoaXMuZWxlbWVudFNpemU7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBsZXQgeGkgPSBNYXRoLmZsb29yKHggLyB3KTtcbiAgICBsZXQgeWkgPSBNYXRoLmZsb29yKHkgLyB3KTtcbiAgICByZXN1bHRbMF0gPSB4aTtcbiAgICByZXN1bHRbMV0gPSB5aTtcblxuICAgIGlmIChjbGFtcCkge1xuICAgICAgLy8gQ2xhbXAgaW5kZXggdG8gZWRnZXNcbiAgICAgIGlmICh4aSA8IDApIHtcbiAgICAgICAgeGkgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoeWkgPCAwKSB7XG4gICAgICAgIHlpID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHhpID49IGRhdGEubGVuZ3RoIC0gMSkge1xuICAgICAgICB4aSA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHlpID49IGRhdGFbMF0ubGVuZ3RoIC0gMSkge1xuICAgICAgICB5aSA9IGRhdGFbMF0ubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9IC8vIEJhaWwgb3V0IGlmIHdlIGFyZSBvdXQgb2YgdGhlIHRlcnJhaW5cblxuXG4gICAgaWYgKHhpIDwgMCB8fCB5aSA8IDAgfHwgeGkgPj0gZGF0YS5sZW5ndGggLSAxIHx8IHlpID49IGRhdGFbMF0ubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0VHJpYW5nbGVBdCh4LCB5LCBlZGdlQ2xhbXAsIGEsIGIsIGMpIHtcbiAgICBjb25zdCBpZHggPSBnZXRIZWlnaHRBdF9pZHg7XG4gICAgdGhpcy5nZXRJbmRleE9mUG9zaXRpb24oeCwgeSwgaWR4LCBlZGdlQ2xhbXApO1xuICAgIGxldCB4aSA9IGlkeFswXTtcbiAgICBsZXQgeWkgPSBpZHhbMV07XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcblxuICAgIGlmIChlZGdlQ2xhbXApIHtcbiAgICAgIHhpID0gTWF0aC5taW4oZGF0YS5sZW5ndGggLSAyLCBNYXRoLm1heCgwLCB4aSkpO1xuICAgICAgeWkgPSBNYXRoLm1pbihkYXRhWzBdLmxlbmd0aCAtIDIsIE1hdGgubWF4KDAsIHlpKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudFNpemUgPSB0aGlzLmVsZW1lbnRTaXplO1xuICAgIGNvbnN0IGxvd2VyRGlzdDIgPSAoeCAvIGVsZW1lbnRTaXplIC0geGkpICoqIDIgKyAoeSAvIGVsZW1lbnRTaXplIC0geWkpICoqIDI7XG4gICAgY29uc3QgdXBwZXJEaXN0MiA9ICh4IC8gZWxlbWVudFNpemUgLSAoeGkgKyAxKSkgKiogMiArICh5IC8gZWxlbWVudFNpemUgLSAoeWkgKyAxKSkgKiogMjtcbiAgICBjb25zdCB1cHBlciA9IGxvd2VyRGlzdDIgPiB1cHBlckRpc3QyO1xuICAgIHRoaXMuZ2V0VHJpYW5nbGUoeGksIHlpLCB1cHBlciwgYSwgYiwgYyk7XG4gICAgcmV0dXJuIHVwcGVyO1xuICB9XG5cbiAgZ2V0Tm9ybWFsQXQoeCwgeSwgZWRnZUNsYW1wLCByZXN1bHQpIHtcbiAgICBjb25zdCBhID0gZ2V0Tm9ybWFsQXRfYTtcbiAgICBjb25zdCBiID0gZ2V0Tm9ybWFsQXRfYjtcbiAgICBjb25zdCBjID0gZ2V0Tm9ybWFsQXRfYztcbiAgICBjb25zdCBlMCA9IGdldE5vcm1hbEF0X2UwO1xuICAgIGNvbnN0IGUxID0gZ2V0Tm9ybWFsQXRfZTE7XG4gICAgdGhpcy5nZXRUcmlhbmdsZUF0KHgsIHksIGVkZ2VDbGFtcCwgYSwgYiwgYyk7XG4gICAgYi52c3ViKGEsIGUwKTtcbiAgICBjLnZzdWIoYSwgZTEpO1xuICAgIGUwLmNyb3NzKGUxLCByZXN1bHQpO1xuICAgIHJlc3VsdC5ub3JtYWxpemUoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIEFBQkIgb2YgYSBzcXVhcmUgaW4gdGhlIGhlaWdodGZpZWxkXG4gICAqIEBwYXJhbSB4aVxuICAgKiBAcGFyYW0geWlcbiAgICogQHBhcmFtIHJlc3VsdFxuICAgKi9cblxuXG4gIGdldEFhYmJBdEluZGV4KHhpLCB5aSwgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBsb3dlckJvdW5kLFxuICAgICAgdXBwZXJCb3VuZFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgZWxlbWVudFNpemUgPSB0aGlzLmVsZW1lbnRTaXplO1xuICAgIGxvd2VyQm91bmQuc2V0KHhpICogZWxlbWVudFNpemUsIHlpICogZWxlbWVudFNpemUsIGRhdGFbeGldW3lpXSk7XG4gICAgdXBwZXJCb3VuZC5zZXQoKHhpICsgMSkgKiBlbGVtZW50U2l6ZSwgKHlpICsgMSkgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aSArIDFdW3lpICsgMV0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGhlaWdodCBpbiB0aGUgaGVpZ2h0ZmllbGQgYXQgYSBnaXZlbiBwb3NpdGlvblxuICAgKi9cblxuXG4gIGdldEhlaWdodEF0KHgsIHksIGVkZ2VDbGFtcCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgYSA9IGdldEhlaWdodEF0X2E7XG4gICAgY29uc3QgYiA9IGdldEhlaWdodEF0X2I7XG4gICAgY29uc3QgYyA9IGdldEhlaWdodEF0X2M7XG4gICAgY29uc3QgaWR4ID0gZ2V0SGVpZ2h0QXRfaWR4O1xuICAgIHRoaXMuZ2V0SW5kZXhPZlBvc2l0aW9uKHgsIHksIGlkeCwgZWRnZUNsYW1wKTtcbiAgICBsZXQgeGkgPSBpZHhbMF07XG4gICAgbGV0IHlpID0gaWR4WzFdO1xuXG4gICAgaWYgKGVkZ2VDbGFtcCkge1xuICAgICAgeGkgPSBNYXRoLm1pbihkYXRhLmxlbmd0aCAtIDIsIE1hdGgubWF4KDAsIHhpKSk7XG4gICAgICB5aSA9IE1hdGgubWluKGRhdGFbMF0ubGVuZ3RoIC0gMiwgTWF0aC5tYXgoMCwgeWkpKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cHBlciA9IHRoaXMuZ2V0VHJpYW5nbGVBdCh4LCB5LCBlZGdlQ2xhbXAsIGEsIGIsIGMpO1xuICAgIGJhcnljZW50cmljV2VpZ2h0cyh4LCB5LCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBnZXRIZWlnaHRBdF93ZWlnaHRzKTtcbiAgICBjb25zdCB3ID0gZ2V0SGVpZ2h0QXRfd2VpZ2h0cztcblxuICAgIGlmICh1cHBlcikge1xuICAgICAgLy8gVG9wIHRyaWFuZ2xlIHZlcnRzXG4gICAgICByZXR1cm4gZGF0YVt4aSArIDFdW3lpICsgMV0gKiB3LnggKyBkYXRhW3hpXVt5aSArIDFdICogdy55ICsgZGF0YVt4aSArIDFdW3lpXSAqIHcuejtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVG9wIHRyaWFuZ2xlIHZlcnRzXG4gICAgICByZXR1cm4gZGF0YVt4aV1beWldICogdy54ICsgZGF0YVt4aSArIDFdW3lpXSAqIHcueSArIGRhdGFbeGldW3lpICsgMV0gKiB3Lno7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2FjaGVDb252ZXhUcmlhbmdsZVBpbGxhcktleSh4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUpIHtcbiAgICByZXR1cm4gYCR7eGl9XyR7eWl9XyR7Z2V0VXBwZXJUcmlhbmdsZSA/IDEgOiAwfWA7XG4gIH1cblxuICBnZXRDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkUGlsbGFyc1t0aGlzLmdldENhY2hlQ29udmV4VHJpYW5nbGVQaWxsYXJLZXkoeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKV07XG4gIH1cblxuICBzZXRDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUsIGNvbnZleCwgb2Zmc2V0KSB7XG4gICAgdGhpcy5fY2FjaGVkUGlsbGFyc1t0aGlzLmdldENhY2hlQ29udmV4VHJpYW5nbGVQaWxsYXJLZXkoeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKV0gPSB7XG4gICAgICBjb252ZXgsXG4gICAgICBvZmZzZXRcbiAgICB9O1xuICB9XG5cbiAgY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUpIHtcbiAgICBkZWxldGUgdGhpcy5fY2FjaGVkUGlsbGFyc1t0aGlzLmdldENhY2hlQ29udmV4VHJpYW5nbGVQaWxsYXJLZXkoeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHRyaWFuZ2xlIGZyb20gdGhlIGhlaWdodGZpZWxkXG4gICAqL1xuXG5cbiAgZ2V0VHJpYW5nbGUoeGksIHlpLCB1cHBlciwgYSwgYiwgYykge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgZWxlbWVudFNpemUgPSB0aGlzLmVsZW1lbnRTaXplO1xuXG4gICAgaWYgKHVwcGVyKSB7XG4gICAgICAvLyBUb3AgdHJpYW5nbGUgdmVydHNcbiAgICAgIGEuc2V0KCh4aSArIDEpICogZWxlbWVudFNpemUsICh5aSArIDEpICogZWxlbWVudFNpemUsIGRhdGFbeGkgKyAxXVt5aSArIDFdKTtcbiAgICAgIGIuc2V0KHhpICogZWxlbWVudFNpemUsICh5aSArIDEpICogZWxlbWVudFNpemUsIGRhdGFbeGldW3lpICsgMV0pO1xuICAgICAgYy5zZXQoKHhpICsgMSkgKiBlbGVtZW50U2l6ZSwgeWkgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aSArIDFdW3lpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRvcCB0cmlhbmdsZSB2ZXJ0c1xuICAgICAgYS5zZXQoeGkgKiBlbGVtZW50U2l6ZSwgeWkgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aV1beWldKTtcbiAgICAgIGIuc2V0KCh4aSArIDEpICogZWxlbWVudFNpemUsIHlpICogZWxlbWVudFNpemUsIGRhdGFbeGkgKyAxXVt5aV0pO1xuICAgICAgYy5zZXQoeGkgKiBlbGVtZW50U2l6ZSwgKHlpICsgMSkgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aV1beWkgKyAxXSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgYSB0cmlhbmdsZSBpbiB0aGUgdGVycmFpbiBpbiB0aGUgZm9ybSBvZiBhIHRyaWFuZ3VsYXIgY29udmV4IHNoYXBlLlxuICAgKi9cblxuXG4gIGdldENvbnZleFRyaWFuZ2xlUGlsbGFyKHhpLCB5aSwgZ2V0VXBwZXJUcmlhbmdsZSkge1xuICAgIGxldCByZXN1bHQgPSB0aGlzLnBpbGxhckNvbnZleDtcbiAgICBsZXQgb2Zmc2V0UmVzdWx0ID0gdGhpcy5waWxsYXJPZmZzZXQ7XG5cbiAgICBpZiAodGhpcy5jYWNoZUVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldENhY2hlZENvbnZleFRyaWFuZ2xlUGlsbGFyKHhpLCB5aSwgZ2V0VXBwZXJUcmlhbmdsZSk7XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHRoaXMucGlsbGFyQ29udmV4ID0gZGF0YS5jb252ZXg7XG4gICAgICAgIHRoaXMucGlsbGFyT2Zmc2V0ID0gZGF0YS5vZmZzZXQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gbmV3IENvbnZleFBvbHloZWRyb24oKTtcbiAgICAgIG9mZnNldFJlc3VsdCA9IG5ldyBWZWMzJDEoKTtcbiAgICAgIHRoaXMucGlsbGFyQ29udmV4ID0gcmVzdWx0O1xuICAgICAgdGhpcy5waWxsYXJPZmZzZXQgPSBvZmZzZXRSZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCBlbGVtZW50U2l6ZSA9IHRoaXMuZWxlbWVudFNpemU7XG4gICAgY29uc3QgZmFjZXMgPSByZXN1bHQuZmFjZXM7IC8vIFJldXNlIHZlcnRzIGlmIHBvc3NpYmxlXG5cbiAgICByZXN1bHQudmVydGljZXMubGVuZ3RoID0gNjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICBpZiAoIXJlc3VsdC52ZXJ0aWNlc1tpXSkge1xuICAgICAgICByZXN1bHQudmVydGljZXNbaV0gPSBuZXcgVmVjMyQxKCk7XG4gICAgICB9XG4gICAgfSAvLyBSZXVzZSBmYWNlcyBpZiBwb3NzaWJsZVxuXG5cbiAgICBmYWNlcy5sZW5ndGggPSA1O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIGlmICghZmFjZXNbaV0pIHtcbiAgICAgICAgZmFjZXNbaV0gPSBbXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0cyA9IHJlc3VsdC52ZXJ0aWNlcztcbiAgICBjb25zdCBoID0gKE1hdGgubWluKGRhdGFbeGldW3lpXSwgZGF0YVt4aSArIDFdW3lpXSwgZGF0YVt4aV1beWkgKyAxXSwgZGF0YVt4aSArIDFdW3lpICsgMV0pIC0gdGhpcy5taW5WYWx1ZSkgLyAyICsgdGhpcy5taW5WYWx1ZTtcblxuICAgIGlmICghZ2V0VXBwZXJUcmlhbmdsZSkge1xuICAgICAgLy8gQ2VudGVyIG9mIHRoZSB0cmlhbmdsZSBwaWxsYXIgLSBhbGwgcG9seWdvbnMgYXJlIGdpdmVuIHJlbGF0aXZlIHRvIHRoaXMgb25lXG4gICAgICBvZmZzZXRSZXN1bHQuc2V0KCh4aSArIDAuMjUpICogZWxlbWVudFNpemUsIC8vIHNvcnQgb2YgY2VudGVyIG9mIGEgdHJpYW5nbGVcbiAgICAgICh5aSArIDAuMjUpICogZWxlbWVudFNpemUsIGggLy8gdmVydGljYWwgY2VudGVyXG4gICAgICApOyAvLyBUb3AgdHJpYW5nbGUgdmVydHNcblxuICAgICAgdmVydHNbMF0uc2V0KC0wLjI1ICogZWxlbWVudFNpemUsIC0wLjI1ICogZWxlbWVudFNpemUsIGRhdGFbeGldW3lpXSAtIGgpO1xuICAgICAgdmVydHNbMV0uc2V0KDAuNzUgKiBlbGVtZW50U2l6ZSwgLTAuMjUgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aSArIDFdW3lpXSAtIGgpO1xuICAgICAgdmVydHNbMl0uc2V0KC0wLjI1ICogZWxlbWVudFNpemUsIDAuNzUgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aV1beWkgKyAxXSAtIGgpOyAvLyBib3R0b20gdHJpYW5nbGUgdmVydHNcblxuICAgICAgdmVydHNbM10uc2V0KC0wLjI1ICogZWxlbWVudFNpemUsIC0wLjI1ICogZWxlbWVudFNpemUsIC1NYXRoLmFicyhoKSAtIDEpO1xuICAgICAgdmVydHNbNF0uc2V0KDAuNzUgKiBlbGVtZW50U2l6ZSwgLTAuMjUgKiBlbGVtZW50U2l6ZSwgLU1hdGguYWJzKGgpIC0gMSk7XG4gICAgICB2ZXJ0c1s1XS5zZXQoLTAuMjUgKiBlbGVtZW50U2l6ZSwgMC43NSAqIGVsZW1lbnRTaXplLCAtTWF0aC5hYnMoaCkgLSAxKTsgLy8gdG9wIHRyaWFuZ2xlXG5cbiAgICAgIGZhY2VzWzBdWzBdID0gMDtcbiAgICAgIGZhY2VzWzBdWzFdID0gMTtcbiAgICAgIGZhY2VzWzBdWzJdID0gMjsgLy8gYm90dG9tIHRyaWFuZ2xlXG5cbiAgICAgIGZhY2VzWzFdWzBdID0gNTtcbiAgICAgIGZhY2VzWzFdWzFdID0gNDtcbiAgICAgIGZhY2VzWzFdWzJdID0gMzsgLy8gLXggZmFjaW5nIHF1YWRcblxuICAgICAgZmFjZXNbMl1bMF0gPSAwO1xuICAgICAgZmFjZXNbMl1bMV0gPSAyO1xuICAgICAgZmFjZXNbMl1bMl0gPSA1O1xuICAgICAgZmFjZXNbMl1bM10gPSAzOyAvLyAteSBmYWNpbmcgcXVhZFxuXG4gICAgICBmYWNlc1szXVswXSA9IDE7XG4gICAgICBmYWNlc1szXVsxXSA9IDA7XG4gICAgICBmYWNlc1szXVsyXSA9IDM7XG4gICAgICBmYWNlc1szXVszXSA9IDQ7IC8vICt4eSBmYWNpbmcgcXVhZFxuXG4gICAgICBmYWNlc1s0XVswXSA9IDQ7XG4gICAgICBmYWNlc1s0XVsxXSA9IDU7XG4gICAgICBmYWNlc1s0XVsyXSA9IDI7XG4gICAgICBmYWNlc1s0XVszXSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENlbnRlciBvZiB0aGUgdHJpYW5nbGUgcGlsbGFyIC0gYWxsIHBvbHlnb25zIGFyZSBnaXZlbiByZWxhdGl2ZSB0byB0aGlzIG9uZVxuICAgICAgb2Zmc2V0UmVzdWx0LnNldCgoeGkgKyAwLjc1KSAqIGVsZW1lbnRTaXplLCAvLyBzb3J0IG9mIGNlbnRlciBvZiBhIHRyaWFuZ2xlXG4gICAgICAoeWkgKyAwLjc1KSAqIGVsZW1lbnRTaXplLCBoIC8vIHZlcnRpY2FsIGNlbnRlclxuICAgICAgKTsgLy8gVG9wIHRyaWFuZ2xlIHZlcnRzXG5cbiAgICAgIHZlcnRzWzBdLnNldCgwLjI1ICogZWxlbWVudFNpemUsIDAuMjUgKiBlbGVtZW50U2l6ZSwgZGF0YVt4aSArIDFdW3lpICsgMV0gLSBoKTtcbiAgICAgIHZlcnRzWzFdLnNldCgtMC43NSAqIGVsZW1lbnRTaXplLCAwLjI1ICogZWxlbWVudFNpemUsIGRhdGFbeGldW3lpICsgMV0gLSBoKTtcbiAgICAgIHZlcnRzWzJdLnNldCgwLjI1ICogZWxlbWVudFNpemUsIC0wLjc1ICogZWxlbWVudFNpemUsIGRhdGFbeGkgKyAxXVt5aV0gLSBoKTsgLy8gYm90dG9tIHRyaWFuZ2xlIHZlcnRzXG5cbiAgICAgIHZlcnRzWzNdLnNldCgwLjI1ICogZWxlbWVudFNpemUsIDAuMjUgKiBlbGVtZW50U2l6ZSwgLU1hdGguYWJzKGgpIC0gMSk7XG4gICAgICB2ZXJ0c1s0XS5zZXQoLTAuNzUgKiBlbGVtZW50U2l6ZSwgMC4yNSAqIGVsZW1lbnRTaXplLCAtTWF0aC5hYnMoaCkgLSAxKTtcbiAgICAgIHZlcnRzWzVdLnNldCgwLjI1ICogZWxlbWVudFNpemUsIC0wLjc1ICogZWxlbWVudFNpemUsIC1NYXRoLmFicyhoKSAtIDEpOyAvLyBUb3AgdHJpYW5nbGVcblxuICAgICAgZmFjZXNbMF1bMF0gPSAwO1xuICAgICAgZmFjZXNbMF1bMV0gPSAxO1xuICAgICAgZmFjZXNbMF1bMl0gPSAyOyAvLyBib3R0b20gdHJpYW5nbGVcblxuICAgICAgZmFjZXNbMV1bMF0gPSA1O1xuICAgICAgZmFjZXNbMV1bMV0gPSA0O1xuICAgICAgZmFjZXNbMV1bMl0gPSAzOyAvLyAreCBmYWNpbmcgcXVhZFxuXG4gICAgICBmYWNlc1syXVswXSA9IDI7XG4gICAgICBmYWNlc1syXVsxXSA9IDU7XG4gICAgICBmYWNlc1syXVsyXSA9IDM7XG4gICAgICBmYWNlc1syXVszXSA9IDA7IC8vICt5IGZhY2luZyBxdWFkXG5cbiAgICAgIGZhY2VzWzNdWzBdID0gMztcbiAgICAgIGZhY2VzWzNdWzFdID0gNDtcbiAgICAgIGZhY2VzWzNdWzJdID0gMTtcbiAgICAgIGZhY2VzWzNdWzNdID0gMDsgLy8gLXh5IGZhY2luZyBxdWFkXG5cbiAgICAgIGZhY2VzWzRdWzBdID0gMTtcbiAgICAgIGZhY2VzWzRdWzFdID0gNDtcbiAgICAgIGZhY2VzWzRdWzJdID0gNTtcbiAgICAgIGZhY2VzWzRdWzNdID0gMjtcbiAgICB9XG5cbiAgICByZXN1bHQuY29tcHV0ZU5vcm1hbHMoKTtcbiAgICByZXN1bHQuY29tcHV0ZUVkZ2VzKCk7XG4gICAgcmVzdWx0LnVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCk7XG4gICAgdGhpcy5zZXRDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUsIHJlc3VsdCwgb2Zmc2V0UmVzdWx0KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBWZWMzJDEoKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuc2V0KDAsIDAsIDApO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICB2b2x1bWUoKSB7XG4gICAgcmV0dXJuICgvLyBUaGUgdGVycmFpbiBpcyBpbmZpbml0ZVxuICAgICAgTnVtYmVyLk1BWF9WQUxVRVxuICAgICk7XG4gIH1cblxuICBjYWxjdWxhdGVXb3JsZEFBQkIocG9zLCBxdWF0LCBtaW4sIG1heCkge1xuICAgIC8qKiBAVE9ETyBkbyBpdCBwcm9wZXJseSAqL1xuICAgIG1pbi5zZXQoLU51bWJlci5NQVhfVkFMVUUsIC1OdW1iZXIuTUFYX1ZBTFVFLCAtTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgbWF4LnNldChOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgfVxuXG4gIHVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCkge1xuICAgIC8vIFVzZSB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBtaW4vbWF4IHZhbHVlc1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgcyA9IHRoaXMuZWxlbWVudFNpemU7XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IG5ldyBWZWMzJDEoZGF0YS5sZW5ndGggKiBzLCBkYXRhWzBdLmxlbmd0aCAqIHMsIE1hdGgubWF4KE1hdGguYWJzKHRoaXMubWF4VmFsdWUpLCBNYXRoLmFicyh0aGlzLm1pblZhbHVlKSkpLmxlbmd0aCgpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoZWlnaHQgdmFsdWVzIGZyb20gYW4gaW1hZ2UuIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBpbiBicm93c2VyLlxuICAgKi9cblxuXG4gIHNldEhlaWdodHNGcm9tSW1hZ2UoaW1hZ2UsIHNjYWxlKSB7XG4gICAgY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHosXG4gICAgICB5XG4gICAgfSA9IHNjYWxlO1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICBjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcbiAgICBjb25zdCBtYXRyaXggPSB0aGlzLmRhdGE7XG4gICAgbWF0cml4Lmxlbmd0aCA9IDA7XG4gICAgdGhpcy5lbGVtZW50U2l6ZSA9IE1hdGguYWJzKHgpIC8gaW1hZ2VEYXRhLndpZHRoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZURhdGEuaGVpZ2h0OyBpKyspIHtcbiAgICAgIGNvbnN0IHJvdyA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGltYWdlRGF0YS53aWR0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGEgPSBpbWFnZURhdGEuZGF0YVsoaSAqIGltYWdlRGF0YS5oZWlnaHQgKyBqKSAqIDRdO1xuICAgICAgICBjb25zdCBiID0gaW1hZ2VEYXRhLmRhdGFbKGkgKiBpbWFnZURhdGEuaGVpZ2h0ICsgaikgKiA0ICsgMV07XG4gICAgICAgIGNvbnN0IGMgPSBpbWFnZURhdGEuZGF0YVsoaSAqIGltYWdlRGF0YS5oZWlnaHQgKyBqKSAqIDQgKyAyXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gKGEgKyBiICsgYykgLyA0IC8gMjU1ICogejtcblxuICAgICAgICBpZiAoeCA8IDApIHtcbiAgICAgICAgICByb3cucHVzaChoZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdy51bnNoaWZ0KGhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHkgPCAwKSB7XG4gICAgICAgIG1hdHJpeC51bnNoaWZ0KHJvdyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRyaXgucHVzaChyb3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlTWF4VmFsdWUoKTtcbiAgICB0aGlzLnVwZGF0ZU1pblZhbHVlKCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG59XG5jb25zdCBnZXRIZWlnaHRBdF9pZHggPSBbXTtcbmNvbnN0IGdldEhlaWdodEF0X3dlaWdodHMgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBnZXRIZWlnaHRBdF9hID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgZ2V0SGVpZ2h0QXRfYiA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGdldEhlaWdodEF0X2MgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBnZXROb3JtYWxBdF9hID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgZ2V0Tm9ybWFsQXRfYiA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGdldE5vcm1hbEF0X2MgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBnZXROb3JtYWxBdF9lMCA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGdldE5vcm1hbEF0X2UxID0gbmV3IFZlYzMkMSgpOyAvLyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JhcnljZW50cmljX2Nvb3JkaW5hdGVfc3lzdGVtXG5cbmZ1bmN0aW9uIGJhcnljZW50cmljV2VpZ2h0cyh4LCB5LCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCByZXN1bHQpIHtcbiAgcmVzdWx0LnggPSAoKGJ5IC0gY3kpICogKHggLSBjeCkgKyAoY3ggLSBieCkgKiAoeSAtIGN5KSkgLyAoKGJ5IC0gY3kpICogKGF4IC0gY3gpICsgKGN4IC0gYngpICogKGF5IC0gY3kpKTtcbiAgcmVzdWx0LnkgPSAoKGN5IC0gYXkpICogKHggLSBjeCkgKyAoYXggLSBjeCkgKiAoeSAtIGN5KSkgLyAoKGJ5IC0gY3kpICogKGF4IC0gY3gpICsgKGN4IC0gYngpICogKGF5IC0gY3kpKTtcbiAgcmVzdWx0LnogPSAxIC0gcmVzdWx0LnggLSByZXN1bHQueTtcbn1cblxuLyoqXG4gKiBPY3RyZWVOb2RlXG4gKi9cbmNsYXNzIE9jdHJlZU5vZGUge1xuICAvKiogVGhlIHJvb3Qgbm9kZSAqL1xuXG4gIC8qKiBCb3VuZGFyeSBvZiB0aGlzIG5vZGUgKi9cblxuICAvKiogQ29udGFpbmVkIGRhdGEgYXQgdGhlIGN1cnJlbnQgbm9kZSBsZXZlbCAqL1xuXG4gIC8qKiBDaGlsZHJlbiB0byB0aGlzIG5vZGUgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLnJvb3QgPSBvcHRpb25zLnJvb3QgfHwgbnVsbDtcbiAgICB0aGlzLmFhYmIgPSBvcHRpb25zLmFhYmIgPyBvcHRpb25zLmFhYmIuY2xvbmUoKSA6IG5ldyBBQUJCJDEoKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gIH1cbiAgLyoqXG4gICAqIHJlc2V0XG4gICAqL1xuXG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGRhdGEgaW50byB0aGlzIG5vZGVcbiAgICogQHJldHVybiBUcnVlIGlmIHN1Y2Nlc3NmdWwsIG90aGVyd2lzZSBmYWxzZVxuICAgKi9cblxuXG4gIGluc2VydChhYWJiLCBlbGVtZW50RGF0YSwgbGV2ZWwpIHtcbiAgICBpZiAobGV2ZWwgPT09IHZvaWQgMCkge1xuICAgICAgbGV2ZWwgPSAwO1xuICAgIH1cblxuICAgIGNvbnN0IG5vZGVEYXRhID0gdGhpcy5kYXRhOyAvLyBJZ25vcmUgb2JqZWN0cyB0aGF0IGRvIG5vdCBiZWxvbmcgaW4gdGhpcyBub2RlXG5cbiAgICBpZiAoIXRoaXMuYWFiYi5jb250YWlucyhhYWJiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvYmplY3QgY2Fubm90IGJlIGFkZGVkXG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIGNvbnN0IG1heERlcHRoID0gdGhpcy5tYXhEZXB0aCB8fCB0aGlzLnJvb3QubWF4RGVwdGg7XG5cbiAgICBpZiAobGV2ZWwgPCBtYXhEZXB0aCkge1xuICAgICAgLy8gU3ViZGl2aWRlIGlmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB5ZXRcbiAgICAgIGxldCBzdWJkaXZpZGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc3ViZGl2aWRlKCk7XG4gICAgICAgIHN1YmRpdmlkZWQgPSB0cnVlO1xuICAgICAgfSAvLyBhZGQgdG8gd2hpY2hldmVyIG5vZGUgd2lsbCBhY2NlcHQgaXRcblxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gODsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltpXS5pbnNlcnQoYWFiYiwgZWxlbWVudERhdGEsIGxldmVsICsgMSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3ViZGl2aWRlZCkge1xuICAgICAgICAvLyBObyBjaGlsZHJlbiBhY2NlcHRlZCEgTWlnaHQgYXMgd2VsbCBqdXN0IHJlbW92ZSBlbSBzaW5jZSB0aGV5IGNvbnRhaW4gbm9uZVxuICAgICAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0gLy8gVG9vIGRlZXAsIG9yIGNoaWxkcmVuIGRpZG50IHdhbnQgaXQuIGFkZCBpdCBpbiBjdXJyZW50IG5vZGVcblxuXG4gICAgbm9kZURhdGEucHVzaChlbGVtZW50RGF0YSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSA4IGVxdWFsbHkgc2l6ZWQgY2hpbGRyZW4gbm9kZXMgYW5kIHB1dCB0aGVtIGluIHRoZSBgY2hpbGRyZW5gIGFycmF5LlxuICAgKi9cblxuXG4gIHN1YmRpdmlkZSgpIHtcbiAgICBjb25zdCBhYWJiID0gdGhpcy5hYWJiO1xuICAgIGNvbnN0IGwgPSBhYWJiLmxvd2VyQm91bmQ7XG4gICAgY29uc3QgdSA9IGFhYmIudXBwZXJCb3VuZDtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgY2hpbGRyZW4ucHVzaChuZXcgT2N0cmVlTm9kZSh7XG4gICAgICBhYWJiOiBuZXcgQUFCQiQxKHtcbiAgICAgICAgbG93ZXJCb3VuZDogbmV3IFZlYzMkMSgwLCAwLCAwKVxuICAgICAgfSlcbiAgICB9KSwgbmV3IE9jdHJlZU5vZGUoe1xuICAgICAgYWFiYjogbmV3IEFBQkIkMSh7XG4gICAgICAgIGxvd2VyQm91bmQ6IG5ldyBWZWMzJDEoMSwgMCwgMClcbiAgICAgIH0pXG4gICAgfSksIG5ldyBPY3RyZWVOb2RlKHtcbiAgICAgIGFhYmI6IG5ldyBBQUJCJDEoe1xuICAgICAgICBsb3dlckJvdW5kOiBuZXcgVmVjMyQxKDEsIDEsIDApXG4gICAgICB9KVxuICAgIH0pLCBuZXcgT2N0cmVlTm9kZSh7XG4gICAgICBhYWJiOiBuZXcgQUFCQiQxKHtcbiAgICAgICAgbG93ZXJCb3VuZDogbmV3IFZlYzMkMSgxLCAxLCAxKVxuICAgICAgfSlcbiAgICB9KSwgbmV3IE9jdHJlZU5vZGUoe1xuICAgICAgYWFiYjogbmV3IEFBQkIkMSh7XG4gICAgICAgIGxvd2VyQm91bmQ6IG5ldyBWZWMzJDEoMCwgMSwgMSlcbiAgICAgIH0pXG4gICAgfSksIG5ldyBPY3RyZWVOb2RlKHtcbiAgICAgIGFhYmI6IG5ldyBBQUJCJDEoe1xuICAgICAgICBsb3dlckJvdW5kOiBuZXcgVmVjMyQxKDAsIDAsIDEpXG4gICAgICB9KVxuICAgIH0pLCBuZXcgT2N0cmVlTm9kZSh7XG4gICAgICBhYWJiOiBuZXcgQUFCQiQxKHtcbiAgICAgICAgbG93ZXJCb3VuZDogbmV3IFZlYzMkMSgxLCAwLCAxKVxuICAgICAgfSlcbiAgICB9KSwgbmV3IE9jdHJlZU5vZGUoe1xuICAgICAgYWFiYjogbmV3IEFBQkIkMSh7XG4gICAgICAgIGxvd2VyQm91bmQ6IG5ldyBWZWMzJDEoMCwgMSwgMClcbiAgICAgIH0pXG4gICAgfSkpO1xuICAgIHUudnN1YihsLCBoYWxmRGlhZ29uYWwpO1xuICAgIGhhbGZEaWFnb25hbC5zY2FsZSgwLjUsIGhhbGZEaWFnb25hbCk7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMucm9vdCB8fCB0aGlzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IDg7IGkrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTsgLy8gU2V0IGN1cnJlbnQgbm9kZSBhcyByb290XG5cbiAgICAgIGNoaWxkLnJvb3QgPSByb290OyAvLyBDb21wdXRlIGJvdW5kc1xuXG4gICAgICBjb25zdCBsb3dlckJvdW5kID0gY2hpbGQuYWFiYi5sb3dlckJvdW5kO1xuICAgICAgbG93ZXJCb3VuZC54ICo9IGhhbGZEaWFnb25hbC54O1xuICAgICAgbG93ZXJCb3VuZC55ICo9IGhhbGZEaWFnb25hbC55O1xuICAgICAgbG93ZXJCb3VuZC56ICo9IGhhbGZEaWFnb25hbC56O1xuICAgICAgbG93ZXJCb3VuZC52YWRkKGwsIGxvd2VyQm91bmQpOyAvLyBVcHBlciBib3VuZCBpcyBhbHdheXMgbG93ZXIgYm91bmQgKyBoYWxmRGlhZ29uYWxcblxuICAgICAgbG93ZXJCb3VuZC52YWRkKGhhbGZEaWFnb25hbCwgY2hpbGQuYWFiYi51cHBlckJvdW5kKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgZGF0YSwgcG90ZW50aWFsbHkgd2l0aGluIGFuIEFBQkJcbiAgICogQHJldHVybiBUaGUgXCJyZXN1bHRcIiBvYmplY3RcbiAgICovXG5cblxuICBhYWJiUXVlcnkoYWFiYiwgcmVzdWx0KSB7XG4gICAgdGhpcy5kYXRhOyAvLyBhYm9ydCBpZiB0aGUgcmFuZ2UgZG9lcyBub3QgaW50ZXJzZWN0IHRoaXMgbm9kZVxuICAgIC8vIGlmICghdGhpcy5hYWJiLm92ZXJsYXBzKGFhYmIpKXtcbiAgICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAvLyB9XG4gICAgLy8gQWRkIG9iamVjdHMgYXQgdGhpcyBsZXZlbFxuICAgIC8vIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJlc3VsdCwgbm9kZURhdGEpO1xuICAgIC8vIEFkZCBjaGlsZCBkYXRhXG4gICAgLy8gQHRvZG8gdW53cmFwIHJlY3Vyc2lvbiBpbnRvIGEgcXVldWUgLyBsb29wLCB0aGF0J3MgZmFzdGVyIGluIEpTXG5cbiAgICB0aGlzLmNoaWxkcmVuOyAvLyBmb3IgKGxldCBpID0gMCwgTiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICE9PSBOOyBpKyspIHtcbiAgICAvLyAgICAgY2hpbGRyZW5baV0uYWFiYlF1ZXJ5KGFhYmIsIHJlc3VsdCk7XG4gICAgLy8gfVxuXG4gICAgY29uc3QgcXVldWUgPSBbdGhpc107XG5cbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBub2RlID0gcXVldWUucG9wKCk7XG5cbiAgICAgIGlmIChub2RlLmFhYmIub3ZlcmxhcHMoYWFiYikpIHtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkocmVzdWx0LCBub2RlLmRhdGEpO1xuICAgICAgfVxuXG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShxdWV1ZSwgbm9kZS5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBkYXRhLCBwb3RlbnRpYWxseSBpbnRlcnNlY3RlZCBieSBhIHJheS5cbiAgICogQHJldHVybiBUaGUgXCJyZXN1bHRcIiBvYmplY3RcbiAgICovXG5cblxuICByYXlRdWVyeShyYXksIHRyZWVUcmFuc2Zvcm0sIHJlc3VsdCkge1xuICAgIC8vIFVzZSBhYWJiIHF1ZXJ5IGZvciBub3cuXG5cbiAgICAvKiogQHRvZG8gaW1wbGVtZW50IHJlYWwgcmF5IHF1ZXJ5IHdoaWNoIG5lZWRzIGxlc3MgbG9va3VwcyAqL1xuICAgIHJheS5nZXRBQUJCKHRtcEFBQkIpO1xuICAgIHRtcEFBQkIudG9Mb2NhbEZyYW1lKHRyZWVUcmFuc2Zvcm0sIHRtcEFBQkIpO1xuICAgIHRoaXMuYWFiYlF1ZXJ5KHRtcEFBQkIsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogcmVtb3ZlRW1wdHlOb2Rlc1xuICAgKi9cblxuXG4gIHJlbW92ZUVtcHR5Tm9kZXMoKSB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMuY2hpbGRyZW5baV0ucmVtb3ZlRW1wdHlOb2RlcygpO1xuXG4gICAgICBpZiAoIXRoaXMuY2hpbGRyZW5baV0uY2hpbGRyZW4ubGVuZ3RoICYmICF0aGlzLmNoaWxkcmVuW2ldLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIE9jdHJlZVxuICovXG5cblxuY2xhc3MgT2N0cmVlIGV4dGVuZHMgT2N0cmVlTm9kZSB7XG4gIC8qKlxuICAgKiBNYXhpbXVtIHN1YmRpdmlzaW9uIGRlcHRoXG4gICAqIEBkZWZhdWx0IDhcbiAgICovXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhYWJiIFRoZSB0b3RhbCBBQUJCIG9mIHRoZSB0cmVlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhYWJiLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHN1cGVyKHtcbiAgICAgIHJvb3Q6IG51bGwsXG4gICAgICBhYWJiXG4gICAgfSk7XG4gICAgdGhpcy5tYXhEZXB0aCA9IHR5cGVvZiBvcHRpb25zLm1heERlcHRoICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMubWF4RGVwdGggOiA4O1xuICB9XG5cbn1cbmNvbnN0IGhhbGZEaWFnb25hbCA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IHRtcEFBQkIgPSBuZXcgQUFCQiQxKCk7XG5cbi8qKlxuICogVHJpbWVzaC5cbiAqIEBleGFtcGxlXG4gKiAgICAgLy8gSG93IHRvIG1ha2UgYSBtZXNoIHdpdGggYSBzaW5nbGUgdHJpYW5nbGVcbiAqICAgICBjb25zdCB2ZXJ0aWNlcyA9IFtcbiAqICAgICAgICAgMCwgMCwgMCwgLy8gdmVydGV4IDBcbiAqICAgICAgICAgMSwgMCwgMCwgLy8gdmVydGV4IDFcbiAqICAgICAgICAgMCwgMSwgMCAgLy8gdmVydGV4IDJcbiAqICAgICBdXG4gKiAgICAgY29uc3QgaW5kaWNlcyA9IFtcbiAqICAgICAgICAgMCwgMSwgMiAgLy8gdHJpYW5nbGUgMFxuICogICAgIF1cbiAqICAgICBjb25zdCB0cmltZXNoU2hhcGUgPSBuZXcgQ0FOTk9OLlRyaW1lc2godmVydGljZXMsIGluZGljZXMpXG4gKi9cbmNsYXNzIFRyaW1lc2ggZXh0ZW5kcyBTaGFwZSQxIHtcbiAgLyoqXG4gICAqIHZlcnRpY2VzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBpbnRlZ2VycywgaW5kaWNhdGluZyB3aGljaCB2ZXJ0aWNlcyBlYWNoIHRyaWFuZ2xlIGNvbnNpc3RzIG9mLiBUaGUgbGVuZ3RoIG9mIHRoaXMgYXJyYXkgaXMgdGh1cyAzIHRpbWVzIHRoZSBudW1iZXIgb2YgdHJpYW5nbGVzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIG5vcm1hbHMgZGF0YS5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBsb2NhbCBBQUJCIG9mIHRoZSBtZXNoLlxuICAgKi9cblxuICAvKipcbiAgICogUmVmZXJlbmNlcyB0byB2ZXJ0ZXggcGFpcnMsIG1ha2luZyB1cCBhbGwgdW5pcXVlIGVkZ2VzIGluIHRoZSB0cmltZXNoLlxuICAgKi9cblxuICAvKipcbiAgICogTG9jYWwgc2NhbGluZyBvZiB0aGUgbWVzaC4gVXNlIC5zZXRTY2FsZSgpIHRvIHNldCBpdC5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleGVkIHRyaWFuZ2xlcy4gVXNlIC51cGRhdGVUcmVlKCkgdG8gdXBkYXRlIGl0LlxuICAgKi9cbiAgY29uc3RydWN0b3IodmVydGljZXMsIGluZGljZXMpIHtcbiAgICBzdXBlcih7XG4gICAgICB0eXBlOiBTaGFwZSQxLnR5cGVzLlRSSU1FU0hcbiAgICB9KTtcbiAgICB0aGlzLnZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyk7XG4gICAgdGhpcy5pbmRpY2VzID0gbmV3IEludDE2QXJyYXkoaW5kaWNlcyk7XG4gICAgdGhpcy5ub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShpbmRpY2VzLmxlbmd0aCk7XG4gICAgdGhpcy5hYWJiID0gbmV3IEFBQkIkMSgpO1xuICAgIHRoaXMuZWRnZXMgPSBudWxsO1xuICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMyQxKDEsIDEsIDEpO1xuICAgIHRoaXMudHJlZSA9IG5ldyBPY3RyZWUoKTtcbiAgICB0aGlzLnVwZGF0ZUVkZ2VzKCk7XG4gICAgdGhpcy51cGRhdGVOb3JtYWxzKCk7XG4gICAgdGhpcy51cGRhdGVBQUJCKCk7XG4gICAgdGhpcy51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpO1xuICAgIHRoaXMudXBkYXRlVHJlZSgpO1xuICB9XG4gIC8qKlxuICAgKiB1cGRhdGVUcmVlXG4gICAqL1xuXG5cbiAgdXBkYXRlVHJlZSgpIHtcbiAgICBjb25zdCB0cmVlID0gdGhpcy50cmVlO1xuICAgIHRyZWUucmVzZXQoKTtcbiAgICB0cmVlLmFhYmIuY29weSh0aGlzLmFhYmIpO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5zY2FsZTsgLy8gVGhlIGxvY2FsIG1lc2ggQUFCQiBpcyBzY2FsZWQsIGJ1dCB0aGUgb2N0cmVlIEFBQkIgc2hvdWxkIGJlIHVuc2NhbGVkXG5cbiAgICB0cmVlLmFhYmIubG93ZXJCb3VuZC54ICo9IDEgLyBzY2FsZS54O1xuICAgIHRyZWUuYWFiYi5sb3dlckJvdW5kLnkgKj0gMSAvIHNjYWxlLnk7XG4gICAgdHJlZS5hYWJiLmxvd2VyQm91bmQueiAqPSAxIC8gc2NhbGUuejtcbiAgICB0cmVlLmFhYmIudXBwZXJCb3VuZC54ICo9IDEgLyBzY2FsZS54O1xuICAgIHRyZWUuYWFiYi51cHBlckJvdW5kLnkgKj0gMSAvIHNjYWxlLnk7XG4gICAgdHJlZS5hYWJiLnVwcGVyQm91bmQueiAqPSAxIC8gc2NhbGUuejsgLy8gSW5zZXJ0IGFsbCB0cmlhbmdsZXNcblxuICAgIGNvbnN0IHRyaWFuZ2xlQUFCQiA9IG5ldyBBQUJCJDEoKTtcbiAgICBjb25zdCBhID0gbmV3IFZlYzMkMSgpO1xuICAgIGNvbnN0IGIgPSBuZXcgVmVjMyQxKCk7XG4gICAgY29uc3QgYyA9IG5ldyBWZWMzJDEoKTtcbiAgICBjb25zdCBwb2ludHMgPSBbYSwgYiwgY107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5kaWNlcy5sZW5ndGggLyAzOyBpKyspIHtcbiAgICAgIC8vdGhpcy5nZXRUcmlhbmdsZVZlcnRpY2VzKGksIGEsIGIsIGMpO1xuICAgICAgLy8gR2V0IHVuc2NhbGVkIHRyaWFuZ2xlIHZlcnRzXG4gICAgICBjb25zdCBpMyA9IGkgKiAzO1xuXG4gICAgICB0aGlzLl9nZXRVbnNjYWxlZFZlcnRleCh0aGlzLmluZGljZXNbaTNdLCBhKTtcblxuICAgICAgdGhpcy5fZ2V0VW5zY2FsZWRWZXJ0ZXgodGhpcy5pbmRpY2VzW2kzICsgMV0sIGIpO1xuXG4gICAgICB0aGlzLl9nZXRVbnNjYWxlZFZlcnRleCh0aGlzLmluZGljZXNbaTMgKyAyXSwgYyk7XG5cbiAgICAgIHRyaWFuZ2xlQUFCQi5zZXRGcm9tUG9pbnRzKHBvaW50cyk7XG4gICAgICB0cmVlLmluc2VydCh0cmlhbmdsZUFBQkIsIGkpO1xuICAgIH1cblxuICAgIHRyZWUucmVtb3ZlRW1wdHlOb2RlcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdHJpYW5nbGVzIGluIGEgbG9jYWwgQUFCQiBmcm9tIHRoZSB0cmltZXNoLlxuICAgKiBAcGFyYW0gcmVzdWx0IEFuIGFycmF5IG9mIGludGVnZXJzLCByZWZlcmVuY2luZyB0aGUgcXVlcmllZCB0cmlhbmdsZXMuXG4gICAqL1xuXG5cbiAgZ2V0VHJpYW5nbGVzSW5BQUJCKGFhYmIsIHJlc3VsdCkge1xuICAgIHVuc2NhbGVkQUFCQi5jb3B5KGFhYmIpOyAvLyBTY2FsZSBpdCB0byBsb2NhbFxuXG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgIGNvbnN0IGlzeCA9IHNjYWxlLng7XG4gICAgY29uc3QgaXN5ID0gc2NhbGUueTtcbiAgICBjb25zdCBpc3ogPSBzY2FsZS56O1xuICAgIGNvbnN0IGwgPSB1bnNjYWxlZEFBQkIubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1ID0gdW5zY2FsZWRBQUJCLnVwcGVyQm91bmQ7XG4gICAgbC54IC89IGlzeDtcbiAgICBsLnkgLz0gaXN5O1xuICAgIGwueiAvPSBpc3o7XG4gICAgdS54IC89IGlzeDtcbiAgICB1LnkgLz0gaXN5O1xuICAgIHUueiAvPSBpc3o7XG4gICAgcmV0dXJuIHRoaXMudHJlZS5hYWJiUXVlcnkodW5zY2FsZWRBQUJCLCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBzZXRTY2FsZVxuICAgKi9cblxuXG4gIHNldFNjYWxlKHNjYWxlKSB7XG4gICAgY29uc3Qgd2FzVW5pZm9ybSA9IHRoaXMuc2NhbGUueCA9PT0gdGhpcy5zY2FsZS55ICYmIHRoaXMuc2NhbGUueSA9PT0gdGhpcy5zY2FsZS56O1xuICAgIGNvbnN0IGlzVW5pZm9ybSA9IHNjYWxlLnggPT09IHNjYWxlLnkgJiYgc2NhbGUueSA9PT0gc2NhbGUuejtcblxuICAgIGlmICghKHdhc1VuaWZvcm0gJiYgaXNVbmlmb3JtKSkge1xuICAgICAgLy8gTm9uLXVuaWZvcm0gc2NhbGluZy4gTmVlZCB0byB1cGRhdGUgbm9ybWFscy5cbiAgICAgIHRoaXMudXBkYXRlTm9ybWFscygpO1xuICAgIH1cblxuICAgIHRoaXMuc2NhbGUuY29weShzY2FsZSk7XG4gICAgdGhpcy51cGRhdGVBQUJCKCk7XG4gICAgdGhpcy51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpO1xuICB9XG4gIC8qKlxuICAgKiBDb21wdXRlIHRoZSBub3JtYWxzIG9mIHRoZSBmYWNlcy4gV2lsbCBzYXZlIGluIHRoZSBgLm5vcm1hbHNgIGFycmF5LlxuICAgKi9cblxuXG4gIHVwZGF0ZU5vcm1hbHMoKSB7XG4gICAgY29uc3QgbiA9IGNvbXB1dGVOb3JtYWxzX247IC8vIEdlbmVyYXRlIG5vcm1hbHNcblxuICAgIGNvbnN0IG5vcm1hbHMgPSB0aGlzLm5vcm1hbHM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5kaWNlcy5sZW5ndGggLyAzOyBpKyspIHtcbiAgICAgIGNvbnN0IGkzID0gaSAqIDM7XG4gICAgICBjb25zdCBhID0gdGhpcy5pbmRpY2VzW2kzXTtcbiAgICAgIGNvbnN0IGIgPSB0aGlzLmluZGljZXNbaTMgKyAxXTtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLmluZGljZXNbaTMgKyAyXTtcbiAgICAgIHRoaXMuZ2V0VmVydGV4KGEsIHZhKTtcbiAgICAgIHRoaXMuZ2V0VmVydGV4KGIsIHZiKTtcbiAgICAgIHRoaXMuZ2V0VmVydGV4KGMsIHZjKTtcbiAgICAgIFRyaW1lc2guY29tcHV0ZU5vcm1hbCh2YiwgdmEsIHZjLCBuKTtcbiAgICAgIG5vcm1hbHNbaTNdID0gbi54O1xuICAgICAgbm9ybWFsc1tpMyArIDFdID0gbi55O1xuICAgICAgbm9ybWFsc1tpMyArIDJdID0gbi56O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBgLmVkZ2VzYCBwcm9wZXJ0eVxuICAgKi9cblxuXG4gIHVwZGF0ZUVkZ2VzKCkge1xuICAgIGNvbnN0IGVkZ2VzID0ge307XG5cbiAgICBjb25zdCBhZGQgPSAoYSwgYikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gYSA8IGIgPyBgJHthfV8ke2J9YCA6IGAke2J9XyR7YX1gO1xuICAgICAgZWRnZXNba2V5XSA9IHRydWU7XG4gICAgfTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbmRpY2VzLmxlbmd0aCAvIDM7IGkrKykge1xuICAgICAgY29uc3QgaTMgPSBpICogMztcbiAgICAgIGNvbnN0IGEgPSB0aGlzLmluZGljZXNbaTNdO1xuICAgICAgY29uc3QgYiA9IHRoaXMuaW5kaWNlc1tpMyArIDFdO1xuICAgICAgY29uc3QgYyA9IHRoaXMuaW5kaWNlc1tpMyArIDJdO1xuICAgICAgYWRkKGEsIGIpO1xuICAgICAgYWRkKGIsIGMpO1xuICAgICAgYWRkKGMsIGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhlZGdlcyk7XG4gICAgdGhpcy5lZGdlcyA9IG5ldyBJbnQxNkFycmF5KGtleXMubGVuZ3RoICogMik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGluZGljZXMgPSBrZXlzW2ldLnNwbGl0KCdfJyk7XG4gICAgICB0aGlzLmVkZ2VzWzIgKiBpXSA9IHBhcnNlSW50KGluZGljZXNbMF0sIDEwKTtcbiAgICAgIHRoaXMuZWRnZXNbMiAqIGkgKyAxXSA9IHBhcnNlSW50KGluZGljZXNbMV0sIDEwKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBlZGdlIHZlcnRleFxuICAgKiBAcGFyYW0gZmlyc3RPclNlY29uZCAwIG9yIDEsIGRlcGVuZGluZyBvbiB3aGljaCBvbmUgb2YgdGhlIHZlcnRpY2VzIHlvdSBuZWVkLlxuICAgKiBAcGFyYW0gdmVydGV4U3RvcmUgV2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKi9cblxuXG4gIGdldEVkZ2VWZXJ0ZXgoZWRnZUluZGV4LCBmaXJzdE9yU2Vjb25kLCB2ZXJ0ZXhTdG9yZSkge1xuICAgIGNvbnN0IHZlcnRleEluZGV4ID0gdGhpcy5lZGdlc1tlZGdlSW5kZXggKiAyICsgKGZpcnN0T3JTZWNvbmQgPyAxIDogMCldO1xuICAgIHRoaXMuZ2V0VmVydGV4KHZlcnRleEluZGV4LCB2ZXJ0ZXhTdG9yZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHZlY3RvciBhbG9uZyBhbiBlZGdlLlxuICAgKi9cblxuXG4gIGdldEVkZ2VWZWN0b3IoZWRnZUluZGV4LCB2ZWN0b3JTdG9yZSkge1xuICAgIGNvbnN0IHZhID0gZ2V0RWRnZVZlY3Rvcl92YTtcbiAgICBjb25zdCB2YiA9IGdldEVkZ2VWZWN0b3JfdmI7XG4gICAgdGhpcy5nZXRFZGdlVmVydGV4KGVkZ2VJbmRleCwgMCwgdmEpO1xuICAgIHRoaXMuZ2V0RWRnZVZlcnRleChlZGdlSW5kZXgsIDEsIHZiKTtcbiAgICB2Yi52c3ViKHZhLCB2ZWN0b3JTdG9yZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBmYWNlIG5vcm1hbCBnaXZlbiAzIHZlcnRpY2VzXG4gICAqL1xuXG5cbiAgc3RhdGljIGNvbXB1dGVOb3JtYWwodmEsIHZiLCB2YywgdGFyZ2V0KSB7XG4gICAgdmIudnN1Yih2YSwgYWIpO1xuICAgIHZjLnZzdWIodmIsIGNiKTtcbiAgICBjYi5jcm9zcyhhYiwgdGFyZ2V0KTtcblxuICAgIGlmICghdGFyZ2V0LmlzWmVybygpKSB7XG4gICAgICB0YXJnZXQubm9ybWFsaXplKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdmVydGV4IGkuXG4gICAqIEByZXR1cm4gVGhlIFwib3V0XCIgdmVjdG9yIG9iamVjdFxuICAgKi9cblxuXG4gIGdldFZlcnRleChpLCBvdXQpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuc2NhbGU7XG5cbiAgICB0aGlzLl9nZXRVbnNjYWxlZFZlcnRleChpLCBvdXQpO1xuXG4gICAgb3V0LnggKj0gc2NhbGUueDtcbiAgICBvdXQueSAqPSBzY2FsZS55O1xuICAgIG91dC56ICo9IHNjYWxlLno7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICAvKipcbiAgICogR2V0IHJhdyB2ZXJ0ZXggaVxuICAgKiBAcmV0dXJuIFRoZSBcIm91dFwiIHZlY3RvciBvYmplY3RcbiAgICovXG5cblxuICBfZ2V0VW5zY2FsZWRWZXJ0ZXgoaSwgb3V0KSB7XG4gICAgY29uc3QgaTMgPSBpICogMztcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IHRoaXMudmVydGljZXM7XG4gICAgcmV0dXJuIG91dC5zZXQodmVydGljZXNbaTNdLCB2ZXJ0aWNlc1tpMyArIDFdLCB2ZXJ0aWNlc1tpMyArIDJdKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgdmVydGV4IGZyb20gdGhlIHRyaW1lc2gsdHJhbnNmb3JtZWQgYnkgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCBxdWF0ZXJuaW9uLlxuICAgKiBAcmV0dXJuIFRoZSBcIm91dFwiIHZlY3RvciBvYmplY3RcbiAgICovXG5cblxuICBnZXRXb3JsZFZlcnRleChpLCBwb3MsIHF1YXQsIG91dCkge1xuICAgIHRoaXMuZ2V0VmVydGV4KGksIG91dCk7XG4gICAgVHJhbnNmb3JtJDEucG9pbnRUb1dvcmxkRnJhbWUocG9zLCBxdWF0LCBvdXQsIG91dCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB0aHJlZSB2ZXJ0aWNlcyBmb3IgdHJpYW5nbGUgaS5cbiAgICovXG5cblxuICBnZXRUcmlhbmdsZVZlcnRpY2VzKGksIGEsIGIsIGMpIHtcbiAgICBjb25zdCBpMyA9IGkgKiAzO1xuICAgIHRoaXMuZ2V0VmVydGV4KHRoaXMuaW5kaWNlc1tpM10sIGEpO1xuICAgIHRoaXMuZ2V0VmVydGV4KHRoaXMuaW5kaWNlc1tpMyArIDFdLCBiKTtcbiAgICB0aGlzLmdldFZlcnRleCh0aGlzLmluZGljZXNbaTMgKyAyXSwgYyk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIG5vcm1hbCBvZiB0cmlhbmdsZSBpLlxuICAgKiBAcmV0dXJuIFRoZSBcInRhcmdldFwiIHZlY3RvciBvYmplY3RcbiAgICovXG5cblxuICBnZXROb3JtYWwoaSwgdGFyZ2V0KSB7XG4gICAgY29uc3QgaTMgPSBpICogMztcbiAgICByZXR1cm4gdGFyZ2V0LnNldCh0aGlzLm5vcm1hbHNbaTNdLCB0aGlzLm5vcm1hbHNbaTMgKyAxXSwgdGhpcy5ub3JtYWxzW2kzICsgMl0pO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIFRoZSBcInRhcmdldFwiIHZlY3RvciBvYmplY3RcbiAgICovXG5cblxuICBjYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgdGFyZ2V0KSB7XG4gICAgLy8gQXBwcm94aW1hdGUgd2l0aCBib3ggaW5lcnRpYVxuICAgIC8vIEV4YWN0IGluZXJ0aWEgY2FsY3VsYXRpb24gaXMgb3ZlcmtpbGwsIGJ1dCBzZWUgaHR0cDovL2dlb21ldHJpY3Rvb2xzLmNvbS9Eb2N1bWVudGF0aW9uL1BvbHloZWRyYWxNYXNzUHJvcGVydGllcy5wZGYgZm9yIHRoZSBjb3JyZWN0IHdheSB0byBkbyBpdFxuICAgIHRoaXMuY29tcHV0ZUxvY2FsQUFCQihjbGlfYWFiYik7XG4gICAgY29uc3QgeCA9IGNsaV9hYWJiLnVwcGVyQm91bmQueCAtIGNsaV9hYWJiLmxvd2VyQm91bmQueDtcbiAgICBjb25zdCB5ID0gY2xpX2FhYmIudXBwZXJCb3VuZC55IC0gY2xpX2FhYmIubG93ZXJCb3VuZC55O1xuICAgIGNvbnN0IHogPSBjbGlfYWFiYi51cHBlckJvdW5kLnogLSBjbGlfYWFiYi5sb3dlckJvdW5kLno7XG4gICAgcmV0dXJuIHRhcmdldC5zZXQoMS4wIC8gMTIuMCAqIG1hc3MgKiAoMiAqIHkgKiAyICogeSArIDIgKiB6ICogMiAqIHopLCAxLjAgLyAxMi4wICogbWFzcyAqICgyICogeCAqIDIgKiB4ICsgMiAqIHogKiAyICogeiksIDEuMCAvIDEyLjAgKiBtYXNzICogKDIgKiB5ICogMiAqIHkgKyAyICogeCAqIDIgKiB4KSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIGxvY2FsIEFBQkIgZm9yIHRoZSB0cmltZXNoXG4gICAqL1xuXG5cbiAgY29tcHV0ZUxvY2FsQUFCQihhYWJiKSB7XG4gICAgY29uc3QgbCA9IGFhYmIubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1ID0gYWFiYi51cHBlckJvdW5kO1xuICAgIGNvbnN0IG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcbiAgICB0aGlzLnZlcnRpY2VzO1xuICAgIGNvbnN0IHYgPSBjb21wdXRlTG9jYWxBQUJCX3dvcmxkVmVydDtcbiAgICB0aGlzLmdldFZlcnRleCgwLCB2KTtcbiAgICBsLmNvcHkodik7XG4gICAgdS5jb3B5KHYpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IG47IGkrKykge1xuICAgICAgdGhpcy5nZXRWZXJ0ZXgoaSwgdik7XG5cbiAgICAgIGlmICh2LnggPCBsLngpIHtcbiAgICAgICAgbC54ID0gdi54O1xuICAgICAgfSBlbHNlIGlmICh2LnggPiB1LngpIHtcbiAgICAgICAgdS54ID0gdi54O1xuICAgICAgfVxuXG4gICAgICBpZiAodi55IDwgbC55KSB7XG4gICAgICAgIGwueSA9IHYueTtcbiAgICAgIH0gZWxzZSBpZiAodi55ID4gdS55KSB7XG4gICAgICAgIHUueSA9IHYueTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYueiA8IGwueikge1xuICAgICAgICBsLnogPSB2Lno7XG4gICAgICB9IGVsc2UgaWYgKHYueiA+IHUueikge1xuICAgICAgICB1LnogPSB2Lno7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGAuYWFiYmAgcHJvcGVydHlcbiAgICovXG5cblxuICB1cGRhdGVBQUJCKCkge1xuICAgIHRoaXMuY29tcHV0ZUxvY2FsQUFCQih0aGlzLmFhYmIpO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIHVwZGF0ZSB0aGUgYC5ib3VuZGluZ1NwaGVyZVJhZGl1c2AgcHJvcGVydHlcbiAgICovXG5cblxuICB1cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpIHtcbiAgICAvLyBBc3N1bWUgcG9pbnRzIGFyZSBkaXN0cmlidXRlZCB3aXRoIGxvY2FsICgwLDAsMCkgYXMgY2VudGVyXG4gICAgbGV0IG1heDIgPSAwO1xuICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcbiAgICBjb25zdCB2ID0gbmV3IFZlYzMkMSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIE4gPSB2ZXJ0aWNlcy5sZW5ndGggLyAzOyBpICE9PSBOOyBpKyspIHtcbiAgICAgIHRoaXMuZ2V0VmVydGV4KGksIHYpO1xuICAgICAgY29uc3Qgbm9ybTIgPSB2Lmxlbmd0aFNxdWFyZWQoKTtcblxuICAgICAgaWYgKG5vcm0yID4gbWF4Mikge1xuICAgICAgICBtYXgyID0gbm9ybTI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IE1hdGguc3FydChtYXgyKTtcbiAgfVxuICAvKipcbiAgICogY2FsY3VsYXRlV29ybGRBQUJCXG4gICAqL1xuXG5cbiAgY2FsY3VsYXRlV29ybGRBQUJCKHBvcywgcXVhdCwgbWluLCBtYXgpIHtcbiAgICAvKlxuICAgICAgICBjb25zdCBuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLyAzLFxuICAgICAgICAgICAgdmVydHMgPSB0aGlzLnZlcnRpY2VzO1xuICAgICAgICBjb25zdCBtaW54LG1pbnksbWlueixtYXh4LG1heHksbWF4ejtcbiAgICAgICAgIGNvbnN0IHYgPSB0ZW1wV29ybGRWZXJ0ZXg7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPG47IGkrKyl7XG4gICAgICAgICAgICB0aGlzLmdldFZlcnRleChpLCB2KTtcbiAgICAgICAgICAgIHF1YXQudm11bHQodiwgdik7XG4gICAgICAgICAgICBwb3MudmFkZCh2LCB2KTtcbiAgICAgICAgICAgIGlmICh2LnggPCBtaW54IHx8IG1pbng9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIG1pbnggPSB2Lng7XG4gICAgICAgICAgICB9IGVsc2UgaWYodi54ID4gbWF4eCB8fCBtYXh4PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBtYXh4ID0gdi54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGlmICh2LnkgPCBtaW55IHx8IG1pbnk9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIG1pbnkgPSB2Lnk7XG4gICAgICAgICAgICB9IGVsc2UgaWYodi55ID4gbWF4eSB8fCBtYXh5PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBtYXh5ID0gdi55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGlmICh2LnogPCBtaW56IHx8IG1pbno9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIG1pbnogPSB2Lno7XG4gICAgICAgICAgICB9IGVsc2UgaWYodi56ID4gbWF4eiB8fCBtYXh6PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBtYXh6ID0gdi56O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbi5zZXQobWlueCxtaW55LG1pbnopO1xuICAgICAgICBtYXguc2V0KG1heHgsbWF4eSxtYXh6KTtcbiAgICAgICAgKi9cbiAgICAvLyBGYXN0ZXIgYXBwcm94aW1hdGlvbiB1c2luZyBsb2NhbCBBQUJCXG4gICAgY29uc3QgZnJhbWUgPSBjYWxjdWxhdGVXb3JsZEFBQkJfZnJhbWU7XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRlV29ybGRBQUJCX2FhYmI7XG4gICAgZnJhbWUucG9zaXRpb24gPSBwb3M7XG4gICAgZnJhbWUucXVhdGVybmlvbiA9IHF1YXQ7XG4gICAgdGhpcy5hYWJiLnRvV29ybGRGcmFtZShmcmFtZSwgcmVzdWx0KTtcbiAgICBtaW4uY29weShyZXN1bHQubG93ZXJCb3VuZCk7XG4gICAgbWF4LmNvcHkocmVzdWx0LnVwcGVyQm91bmQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYXBwcm94aW1hdGUgdm9sdW1lXG4gICAqL1xuXG5cbiAgdm9sdW1lKCkge1xuICAgIHJldHVybiA0LjAgKiBNYXRoLlBJICogdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyAvIDMuMDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgVHJpbWVzaCBpbnN0YW5jZSwgc2hhcGVkIGFzIGEgdG9ydXMuXG4gICAqL1xuXG5cbiAgc3RhdGljIGNyZWF0ZVRvcnVzKHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjKSB7XG4gICAgaWYgKHJhZGl1cyA9PT0gdm9pZCAwKSB7XG4gICAgICByYWRpdXMgPSAxO1xuICAgIH1cblxuICAgIGlmICh0dWJlID09PSB2b2lkIDApIHtcbiAgICAgIHR1YmUgPSAwLjU7XG4gICAgfVxuXG4gICAgaWYgKHJhZGlhbFNlZ21lbnRzID09PSB2b2lkIDApIHtcbiAgICAgIHJhZGlhbFNlZ21lbnRzID0gODtcbiAgICB9XG5cbiAgICBpZiAodHVidWxhclNlZ21lbnRzID09PSB2b2lkIDApIHtcbiAgICAgIHR1YnVsYXJTZWdtZW50cyA9IDY7XG4gICAgfVxuXG4gICAgaWYgKGFyYyA9PT0gdm9pZCAwKSB7XG4gICAgICBhcmMgPSBNYXRoLlBJICogMjtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqKyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogYXJjO1xuICAgICAgICBjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG4gICAgICAgIGNvbnN0IHggPSAocmFkaXVzICsgdHViZSAqIE1hdGguY29zKHYpKSAqIE1hdGguY29zKHUpO1xuICAgICAgICBjb25zdCB5ID0gKHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyh2KSkgKiBNYXRoLnNpbih1KTtcbiAgICAgICAgY29uc3QgeiA9IHR1YmUgKiBNYXRoLnNpbih2KTtcbiAgICAgICAgdmVydGljZXMucHVzaCh4LCB5LCB6KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBqID0gMTsgaiA8PSByYWRpYWxTZWdtZW50czsgaisrKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkrKykge1xuICAgICAgICBjb25zdCBhID0gKHR1YnVsYXJTZWdtZW50cyArIDEpICogaiArIGkgLSAxO1xuICAgICAgICBjb25zdCBiID0gKHR1YnVsYXJTZWdtZW50cyArIDEpICogKGogLSAxKSArIGkgLSAxO1xuICAgICAgICBjb25zdCBjID0gKHR1YnVsYXJTZWdtZW50cyArIDEpICogKGogLSAxKSArIGk7XG4gICAgICAgIGNvbnN0IGQgPSAodHVidWxhclNlZ21lbnRzICsgMSkgKiBqICsgaTtcbiAgICAgICAgaW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xuICAgICAgICBpbmRpY2VzLnB1c2goYiwgYywgZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmltZXNoKHZlcnRpY2VzLCBpbmRpY2VzKTtcbiAgfVxuXG59XG5jb25zdCBjb21wdXRlTm9ybWFsc19uID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgdW5zY2FsZWRBQUJCID0gbmV3IEFBQkIkMSgpO1xuY29uc3QgZ2V0RWRnZVZlY3Rvcl92YSA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGdldEVkZ2VWZWN0b3JfdmIgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCBjYiA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGFiID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgdmEgPSBuZXcgVmVjMyQxKCk7XG5jb25zdCB2YiA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IHZjID0gbmV3IFZlYzMkMSgpO1xuY29uc3QgY2xpX2FhYmIgPSBuZXcgQUFCQiQxKCk7XG5jb25zdCBjb21wdXRlTG9jYWxBQUJCX3dvcmxkVmVydCA9IG5ldyBWZWMzJDEoKTtcbmNvbnN0IGNhbGN1bGF0ZVdvcmxkQUFCQl9mcmFtZSA9IG5ldyBUcmFuc2Zvcm0kMSgpO1xuY29uc3QgY2FsY3VsYXRlV29ybGRBQUJCX2FhYmIgPSBuZXcgQUFCQiQxKCk7XG5cbi8vIE5hbWluZyBydWxlOiBiYXNlZCBvZiB0aGUgb3JkZXIgaW4gU0hBUEVfVFlQRVMsXG4vLyB0aGUgZmlyc3QgcGFydCBvZiB0aGUgbWV0aG9kIGlzIGZvcm1lZCBieSB0aGVcbi8vIHNoYXBlIHR5cGUgdGhhdCBjb21lcyBiZWZvcmUsIGluIHRoZSBzZWNvbmQgcGFydFxuLy8gdGhlcmUgaXMgdGhlIHNoYXBlIHR5cGUgdGhhdCBjb21lcyBhZnRlciBpbiB0aGUgU0hBUEVfVFlQRVMgbGlzdFxuKHtcbiAgc3BoZXJlU3BoZXJlOiBTaGFwZSQxLnR5cGVzLlNQSEVSRSxcbiAgc3BoZXJlUGxhbmU6IFNoYXBlJDEudHlwZXMuU1BIRVJFIHwgU2hhcGUkMS50eXBlcy5QTEFORSxcbiAgYm94Qm94OiBTaGFwZSQxLnR5cGVzLkJPWCB8IFNoYXBlJDEudHlwZXMuQk9YLFxuICBzcGhlcmVCb3g6IFNoYXBlJDEudHlwZXMuU1BIRVJFIHwgU2hhcGUkMS50eXBlcy5CT1gsXG4gIHBsYW5lQm94OiBTaGFwZSQxLnR5cGVzLlBMQU5FIHwgU2hhcGUkMS50eXBlcy5CT1gsXG4gIGNvbnZleENvbnZleDogU2hhcGUkMS50eXBlcy5DT05WRVhQT0xZSEVEUk9OLFxuICBzcGhlcmVDb252ZXg6IFNoYXBlJDEudHlwZXMuU1BIRVJFIHwgU2hhcGUkMS50eXBlcy5DT05WRVhQT0xZSEVEUk9OLFxuICBwbGFuZUNvbnZleDogU2hhcGUkMS50eXBlcy5QTEFORSB8IFNoYXBlJDEudHlwZXMuQ09OVkVYUE9MWUhFRFJPTixcbiAgYm94Q29udmV4OiBTaGFwZSQxLnR5cGVzLkJPWCB8IFNoYXBlJDEudHlwZXMuQ09OVkVYUE9MWUhFRFJPTixcbiAgc3BoZXJlSGVpZ2h0ZmllbGQ6IFNoYXBlJDEudHlwZXMuU1BIRVJFIHwgU2hhcGUkMS50eXBlcy5IRUlHSFRGSUVMRCxcbiAgYm94SGVpZ2h0ZmllbGQ6IFNoYXBlJDEudHlwZXMuQk9YIHwgU2hhcGUkMS50eXBlcy5IRUlHSFRGSUVMRCxcbiAgY29udmV4SGVpZ2h0ZmllbGQ6IFNoYXBlJDEudHlwZXMuQ09OVkVYUE9MWUhFRFJPTiB8IFNoYXBlJDEudHlwZXMuSEVJR0hURklFTEQsXG4gIHNwaGVyZVBhcnRpY2xlOiBTaGFwZSQxLnR5cGVzLlBBUlRJQ0xFIHwgU2hhcGUkMS50eXBlcy5TUEhFUkUsXG4gIHBsYW5lUGFydGljbGU6IFNoYXBlJDEudHlwZXMuUExBTkUgfCBTaGFwZSQxLnR5cGVzLlBBUlRJQ0xFLFxuICBib3hQYXJ0aWNsZTogU2hhcGUkMS50eXBlcy5CT1ggfCBTaGFwZSQxLnR5cGVzLlBBUlRJQ0xFLFxuICBjb252ZXhQYXJ0aWNsZTogU2hhcGUkMS50eXBlcy5QQVJUSUNMRSB8IFNoYXBlJDEudHlwZXMuQ09OVkVYUE9MWUhFRFJPTixcbiAgY3lsaW5kZXJDeWxpbmRlcjogU2hhcGUkMS50eXBlcy5DWUxJTkRFUixcbiAgc3BoZXJlQ3lsaW5kZXI6IFNoYXBlJDEudHlwZXMuU1BIRVJFIHwgU2hhcGUkMS50eXBlcy5DWUxJTkRFUixcbiAgcGxhbmVDeWxpbmRlcjogU2hhcGUkMS50eXBlcy5QTEFORSB8IFNoYXBlJDEudHlwZXMuQ1lMSU5ERVIsXG4gIGJveEN5bGluZGVyOiBTaGFwZSQxLnR5cGVzLkJPWCB8IFNoYXBlJDEudHlwZXMuQ1lMSU5ERVIsXG4gIGNvbnZleEN5bGluZGVyOiBTaGFwZSQxLnR5cGVzLkNPTlZFWFBPTFlIRURST04gfCBTaGFwZSQxLnR5cGVzLkNZTElOREVSLFxuICBoZWlnaHRmaWVsZEN5bGluZGVyOiBTaGFwZSQxLnR5cGVzLkhFSUdIVEZJRUxEIHwgU2hhcGUkMS50eXBlcy5DWUxJTkRFUixcbiAgcGFydGljbGVDeWxpbmRlcjogU2hhcGUkMS50eXBlcy5QQVJUSUNMRSB8IFNoYXBlJDEudHlwZXMuQ1lMSU5ERVIsXG4gIHNwaGVyZVRyaW1lc2g6IFNoYXBlJDEudHlwZXMuU1BIRVJFIHwgU2hhcGUkMS50eXBlcy5UUklNRVNILFxuICBwbGFuZVRyaW1lc2g6IFNoYXBlJDEudHlwZXMuUExBTkUgfCBTaGFwZSQxLnR5cGVzLlRSSU1FU0hcbn0pO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFF1YXRlcm5pb24kMSgpO1xubmV3IFF1YXRlcm5pb24kMSgpO1xuXG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgQUFCQiQxKCk7XG5uZXcgVmVjMyQxKCk7XG5uZXcgVmVjMyQxKCk7IC8vIFNlZSBodHRwOi8vYnVsbGV0cGh5c2ljcy5jb20vQnVsbGV0L0J1bGxldEZ1bGwvU3BoZXJlVHJpYW5nbGVEZXRlY3Rvcl84Y3BwX3NvdXJjZS5odG1sXG5cbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcbm5ldyBWZWMzJDEoKTtcblxubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xuW25ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpLCBuZXcgVmVjMyQxKCksIG5ldyBWZWMzJDEoKSwgbmV3IFZlYzMkMSgpLCBuZXcgVmVjMyQxKCldO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpOyAvLyBXSVBcblxubmV3IFF1YXRlcm5pb24kMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xubmV3IFZlYzMkMSgpO1xuXG5uZXcgQUFCQiQxKCk7XG5uZXcgUmF5JDEoKTsgLy8gcGVyZm9ybWFuY2Uubm93KCkgZmFsbGJhY2sgb24gRGF0ZS5ub3coKVxuXG5jb25zdCBwZXJmb3JtYW5jZSQxID0gZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZSB8fCB7fTtcblxuaWYgKCFwZXJmb3JtYW5jZSQxLm5vdykge1xuICBsZXQgbm93T2Zmc2V0ID0gRGF0ZS5ub3coKTtcblxuICBpZiAocGVyZm9ybWFuY2UkMS50aW1pbmcgJiYgcGVyZm9ybWFuY2UkMS50aW1pbmcubmF2aWdhdGlvblN0YXJ0KSB7XG4gICAgbm93T2Zmc2V0ID0gcGVyZm9ybWFuY2UkMS50aW1pbmcubmF2aWdhdGlvblN0YXJ0O1xuICB9XG5cbiAgcGVyZm9ybWFuY2UkMS5ub3cgPSAoKSA9PiBEYXRlLm5vdygpIC0gbm93T2Zmc2V0O1xufVxuXG5uZXcgVmVjMyQxKCk7IC8vIERpc3BhdGNoZWQgYWZ0ZXIgdGhlIHdvcmxkIGhhcyBzdGVwcGVkIGZvcndhcmQgaW4gdGltZS5cblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnY2Fubm9uLWVzJykuTWF0ZXJpYWxPcHRpb25zIH0gTWF0ZXJpYWxPcHRpb25zXG4gKi9cblxuY29uc3QgbWFrZVZlYzMgPSBfcmVmID0+IHtcbiAgbGV0IFt4LCB5LCB6XSA9IF9yZWY7XG4gIHJldHVybiBuZXcgVmVjMyQxKHgsIHksIHopO1xufTtcbmNvbnN0IHByZXBhcmVTcGhlcmUgPSBhcmdzID0+IEFycmF5LmlzQXJyYXkoYXJncykgPyBhcmdzIDogW2FyZ3NdO1xuY29uc3QgcHJlcGFyZUNvbnZleFBvbHloZWRyb24gPSBfcmVmMiA9PiB7XG4gIGxldCBbdiwgZmFjZXMsIG4sIGEsIGJvdW5kaW5nU3BoZXJlUmFkaXVzXSA9IF9yZWYyO1xuICByZXR1cm4gW3tcbiAgICBheGVzOiBhID8gYS5tYXAobWFrZVZlYzMpIDogdW5kZWZpbmVkLFxuICAgIGJvdW5kaW5nU3BoZXJlUmFkaXVzLFxuICAgIGZhY2VzLFxuICAgIG5vcm1hbHM6IG4gPyBuLm1hcChtYWtlVmVjMykgOiB1bmRlZmluZWQsXG4gICAgdmVydGljZXM6IHYgPyB2Lm1hcChtYWtlVmVjMykgOiB1bmRlZmluZWRcbiAgfV07XG59O1xuZnVuY3Rpb24gY3JlYXRlU2hhcGUodHlwZSwgYXJncykge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdCb3gnOlxuICAgICAgcmV0dXJuIG5ldyBCb3gobmV3IFZlYzMkMSguLi5hcmdzLm1hcCh2ID0+IHYgLyAyKSkpO1xuICAgIC8vIGV4dGVudHMgPT4gaGFsZkV4dGVudHNcbiAgICBjYXNlICdDb252ZXhQb2x5aGVkcm9uJzpcbiAgICAgIHJldHVybiBuZXcgQ29udmV4UG9seWhlZHJvbiguLi5wcmVwYXJlQ29udmV4UG9seWhlZHJvbihhcmdzKSk7XG4gICAgY2FzZSAnQ3lsaW5kZXInOlxuICAgICAgcmV0dXJuIG5ldyBDeWxpbmRlciguLi5hcmdzKTtcbiAgICAvLyBbIHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIG51bVNlZ21lbnRzIF0gPSBhcmdzXG4gICAgY2FzZSAnSGVpZ2h0ZmllbGQnOlxuICAgICAgcmV0dXJuIG5ldyBIZWlnaHRmaWVsZCguLi5hcmdzKTtcbiAgICAvLyBbIEFycmF5IGRhdGEsIG9wdGlvbnM6IHttaW5WYWx1ZSwgbWF4VmFsdWUsIGVsZW1lbnRTaXplfSAgXSA9IGFyZ3NcbiAgICBjYXNlICdQYXJ0aWNsZSc6XG4gICAgICByZXR1cm4gbmV3IFBhcnRpY2xlKCk7XG4gICAgLy8gbm8gYXJnc1xuICAgIGNhc2UgJ1BsYW5lJzpcbiAgICAgIHJldHVybiBuZXcgUGxhbmUoKTtcbiAgICAvLyBubyBhcmdzLCBpbmZpbml0ZSB4IGFuZCB5XG4gICAgY2FzZSAnU3BoZXJlJzpcbiAgICAgIHJldHVybiBuZXcgU3BoZXJlKC4uLnByZXBhcmVTcGhlcmUoYXJncykpO1xuICAgIC8vIHJhZGl1cyA9IGFyZ3NcbiAgICBjYXNlICdUcmltZXNoJzpcbiAgICAgIHJldHVybiBuZXcgVHJpbWVzaCguLi5hcmdzKTtcbiAgICAvLyBbdmVydGljZXMsIGluZGljZXNdID0gYXJnc1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtUSFJFRS5RdWF0ZXJuaW9ufSB0YXJnZXRcbiAqIEBwYXJhbSB7eyByb3RhdGlvbj86IFRIUkVFLlZlY3RvcjNUdXBsZSBxdWF0ZXJuaW9uPzogVEhSRUUuVmVjdG9yNFR1cGxlIH19IHByb3BzXG4gKiBAcmV0dXJucyB7VEhSRUUuUXVhdGVybmlvbn1cbiAqL1xuY29uc3Qgc2V0UXVhdGVybmlvbiA9ICh0YXJnZXQsIF9yZWYzKSA9PiB7XG4gIGxldCB7XG4gICAgcXVhdGVybmlvbixcbiAgICByb3RhdGlvblxuICB9ID0gX3JlZjM7XG4gIGlmIChxdWF0ZXJuaW9uKSB7XG4gICAgdGFyZ2V0LnNldCguLi5xdWF0ZXJuaW9uKTtcbiAgfSBlbHNlIGlmIChyb3RhdGlvbikge1xuICAgIHRhcmdldC5zZXRGcm9tRXVsZXIoLi4ucm90YXRpb24pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnV1aWRcbiAqIEBwYXJhbSB7Qm9keVByb3BzfSBvcHRpb25zLnByb3BzXG4gKiBAcGFyYW0ge0JvZHlTaGFwZVR5cGV9IG9wdGlvbnMudHlwZVxuICogQHBhcmFtIHsobWF0ZXJpYWxPcHRpb25zOiBNYXRlcmlhbE9wdGlvbnMpID0+IE1hdGVyaWFsID19IG9wdGlvbnMuY3JlYXRlTWF0ZXJpYWxcbiAqIEByZXR1cm5zIHtCb2R5fVxuICovXG5jb25zdCBwcm9wc1RvQm9keSA9IG9wdGlvbnMgPT4ge1xuICBjb25zdCB7XG4gICAgdXVpZCxcbiAgICBwcm9wcyxcbiAgICB0eXBlLFxuICAgIGNyZWF0ZU1hdGVyaWFsID0gbWF0ZXJpYWxPcHRpb25zID0+IG5ldyBNYXRlcmlhbChtYXRlcmlhbE9wdGlvbnMpXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCB7XG4gICAgYW5ndWxhckZhY3RvciA9IFsxLCAxLCAxXSxcbiAgICBhbmd1bGFyVmVsb2NpdHkgPSBbMCwgMCwgMF0sXG4gICAgYXJncyA9IFtdLFxuICAgIGNvbGxpc2lvblJlc3BvbnNlLFxuICAgIGxpbmVhckZhY3RvciA9IFsxLCAxLCAxXSxcbiAgICBtYXNzLFxuICAgIG1hdGVyaWFsLFxuICAgIG9uQ29sbGlkZSxcbiAgICBwb3NpdGlvbiA9IFswLCAwLCAwXSxcbiAgICByb3RhdGlvbixcbiAgICBxdWF0ZXJuaW9uLFxuICAgIHNoYXBlcyxcbiAgICB0eXBlOiBib2R5VHlwZSxcbiAgICB2ZWxvY2l0eSA9IFswLCAwLCAwXSxcbiAgICAuLi5leHRyYVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGJvZHkgPSBuZXcgQm9keSh7XG4gICAgLi4uZXh0cmEsXG4gICAgbWFzczogYm9keVR5cGUgPT09ICdTdGF0aWMnID8gMCA6IG1hc3MsXG4gICAgbWF0ZXJpYWw6IG1hdGVyaWFsID8gY3JlYXRlTWF0ZXJpYWwobWF0ZXJpYWwpIDogdW5kZWZpbmVkLFxuICAgIHR5cGU6IGJvZHlUeXBlID8gQm9keVtib2R5VHlwZS50b1VwcGVyQ2FzZSgpXSA6IHVuZGVmaW5lZFxuICB9KTtcbiAgYm9keS51dWlkID0gdXVpZDtcbiAgaWYgKGNvbGxpc2lvblJlc3BvbnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICBib2R5LmNvbGxpc2lvblJlc3BvbnNlID0gY29sbGlzaW9uUmVzcG9uc2U7XG4gIH1cbiAgaWYgKHR5cGUgPT09ICdDb21wb3VuZCcpIHtcbiAgICBzaGFwZXMuZm9yRWFjaChfcmVmNCA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICB0eXBlLFxuICAgICAgICBhcmdzLFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgcm90YXRpb24sXG4gICAgICAgIHF1YXRlcm5pb24sXG4gICAgICAgIG1hdGVyaWFsLFxuICAgICAgICAuLi5leHRyYVxuICAgICAgfSA9IF9yZWY0O1xuICAgICAgY29uc3Qgc2hhcGVCb2R5ID0gYm9keS5hZGRTaGFwZShjcmVhdGVTaGFwZSh0eXBlLCBhcmdzKSwgcG9zaXRpb24gPyBuZXcgVmVjMyQxKC4uLnBvc2l0aW9uKSA6IHVuZGVmaW5lZCwgc2V0UXVhdGVybmlvbihuZXcgUXVhdGVybmlvbiQxKDAsIDAsIDAsIDEpLCB7XG4gICAgICAgIHF1YXRlcm5pb24sXG4gICAgICAgIHJvdGF0aW9uXG4gICAgICB9KSk7XG4gICAgICBpZiAobWF0ZXJpYWwpIHNoYXBlQm9keS5tYXRlcmlhbCA9IGNyZWF0ZU1hdGVyaWFsKG1hdGVyaWFsKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oc2hhcGVCb2R5LCBleHRyYSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYm9keS5hZGRTaGFwZShjcmVhdGVTaGFwZSh0eXBlLCBhcmdzKSk7XG4gIH1cbiAgYm9keS5wb3NpdGlvbi5zZXQocG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSk7XG4gIGJvZHkudmVsb2NpdHkuc2V0KHZlbG9jaXR5WzBdLCB2ZWxvY2l0eVsxXSwgdmVsb2NpdHlbMl0pO1xuICBib2R5LmFuZ3VsYXJWZWxvY2l0eS5zZXQoYW5ndWxhclZlbG9jaXR5WzBdLCBhbmd1bGFyVmVsb2NpdHlbMV0sIGFuZ3VsYXJWZWxvY2l0eVsyXSk7XG4gIGJvZHkubGluZWFyRmFjdG9yLnNldChsaW5lYXJGYWN0b3JbMF0sIGxpbmVhckZhY3RvclsxXSwgbGluZWFyRmFjdG9yWzJdKTtcbiAgYm9keS5hbmd1bGFyRmFjdG9yLnNldChhbmd1bGFyRmFjdG9yWzBdLCBhbmd1bGFyRmFjdG9yWzFdLCBhbmd1bGFyRmFjdG9yWzJdKTtcbiAgc2V0UXVhdGVybmlvbihib2R5LnF1YXRlcm5pb24sIHtcbiAgICBxdWF0ZXJuaW9uLFxuICAgIHJvdGF0aW9uXG4gIH0pO1xuICByZXR1cm4gYm9keTtcbn07XG5cbi8qKlxuICogUmVjb3JkcyB3aGF0IG9iamVjdHMgYXJlIGNvbGxpZGluZyB3aXRoIGVhY2ggb3RoZXJcbiAqL1xuXG4vKipcbiAqIEEgM3gzIG1hdHJpeC5cbiAqIEF1dGhvcmVkIGJ5IHtAbGluayBodHRwOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZS8gc2NodGVwcGV9XG4gKi9cbmNsYXNzIE1hdDMge1xuICAvKipcbiAgICogQSB2ZWN0b3Igb2YgbGVuZ3RoIDksIGNvbnRhaW5pbmcgYWxsIG1hdHJpeCBlbGVtZW50cy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBlbGVtZW50cyBBIHZlY3RvciBvZiBsZW5ndGggOSwgY29udGFpbmluZyBhbGwgbWF0cml4IGVsZW1lbnRzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudHMpIHtcbiAgICBpZiAoZWxlbWVudHMgPT09IHZvaWQgMCkge1xuICAgICAgZWxlbWVudHMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBtYXRyaXggdG8gaWRlbnRpdHlcbiAgICogQHRvZG8gU2hvdWxkIHBlcmhhcHMgYmUgcmVuYW1lZCB0byBgc2V0SWRlbnRpdHkoKWAgdG8gYmUgbW9yZSBjbGVhci5cbiAgICogQHRvZG8gQ3JlYXRlIGFub3RoZXIgZnVuY3Rpb24gdGhhdCBpbW1lZGlhdGVseSBjcmVhdGVzIGFuIGlkZW50aXR5IG1hdHJpeCBlZy4gYGV5ZSgpYFxuICAgKi9cblxuXG4gIGlkZW50aXR5KCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGVbMF0gPSAxO1xuICAgIGVbMV0gPSAwO1xuICAgIGVbMl0gPSAwO1xuICAgIGVbM10gPSAwO1xuICAgIGVbNF0gPSAxO1xuICAgIGVbNV0gPSAwO1xuICAgIGVbNl0gPSAwO1xuICAgIGVbN10gPSAwO1xuICAgIGVbOF0gPSAxO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgYWxsIGVsZW1lbnRzIHRvIHplcm9cbiAgICovXG5cblxuICBzZXRaZXJvKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGVbMF0gPSAwO1xuICAgIGVbMV0gPSAwO1xuICAgIGVbMl0gPSAwO1xuICAgIGVbM10gPSAwO1xuICAgIGVbNF0gPSAwO1xuICAgIGVbNV0gPSAwO1xuICAgIGVbNl0gPSAwO1xuICAgIGVbN10gPSAwO1xuICAgIGVbOF0gPSAwO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBtYXRyaXggZGlhZ29uYWwgZWxlbWVudHMgZnJvbSBhIFZlYzNcbiAgICovXG5cblxuICBzZXRUcmFjZSh2ZWN0b3IpIHtcbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcbiAgICBlWzBdID0gdmVjdG9yLng7XG4gICAgZVs0XSA9IHZlY3Rvci55O1xuICAgIGVbOF0gPSB2ZWN0b3IuejtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgbWF0cml4IGRpYWdvbmFsIGVsZW1lbnRzXG4gICAqL1xuXG5cbiAgZ2V0VHJhY2UodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIHRhcmdldC54ID0gZVswXTtcbiAgICB0YXJnZXQueSA9IGVbNF07XG4gICAgdGFyZ2V0LnogPSBlWzhdO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIE1hdHJpeC1WZWN0b3IgbXVsdGlwbGljYXRpb25cbiAgICogQHBhcmFtIHYgVGhlIHZlY3RvciB0byBtdWx0aXBseSB3aXRoXG4gICAqIEBwYXJhbSB0YXJnZXQgT3B0aW9uYWwsIHRhcmdldCB0byBzYXZlIHRoZSByZXN1bHQgaW4uXG4gICAqL1xuXG5cbiAgdm11bHQodiwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGNvbnN0IHggPSB2Lng7XG4gICAgY29uc3QgeSA9IHYueTtcbiAgICBjb25zdCB6ID0gdi56O1xuICAgIHRhcmdldC54ID0gZVswXSAqIHggKyBlWzFdICogeSArIGVbMl0gKiB6O1xuICAgIHRhcmdldC55ID0gZVszXSAqIHggKyBlWzRdICogeSArIGVbNV0gKiB6O1xuICAgIHRhcmdldC56ID0gZVs2XSAqIHggKyBlWzddICogeSArIGVbOF0gKiB6O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIE1hdHJpeC1zY2FsYXIgbXVsdGlwbGljYXRpb25cbiAgICovXG5cblxuICBzbXVsdChzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzW2ldICo9IHM7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBNYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICogQHBhcmFtIG1hdHJpeCBNYXRyaXggdG8gbXVsdGlwbHkgd2l0aCBmcm9tIGxlZnQgc2lkZS5cbiAgICovXG5cblxuICBtbXVsdChtYXRyaXgsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IE1hdDMoKTtcbiAgICB9XG5cbiAgICBjb25zdCBBID0gdGhpcy5lbGVtZW50cztcbiAgICBjb25zdCBCID0gbWF0cml4LmVsZW1lbnRzO1xuICAgIGNvbnN0IFQgPSB0YXJnZXQuZWxlbWVudHM7XG4gICAgY29uc3QgYTExID0gQVswXSxcbiAgICAgICAgICBhMTIgPSBBWzFdLFxuICAgICAgICAgIGExMyA9IEFbMl0sXG4gICAgICAgICAgYTIxID0gQVszXSxcbiAgICAgICAgICBhMjIgPSBBWzRdLFxuICAgICAgICAgIGEyMyA9IEFbNV0sXG4gICAgICAgICAgYTMxID0gQVs2XSxcbiAgICAgICAgICBhMzIgPSBBWzddLFxuICAgICAgICAgIGEzMyA9IEFbOF07XG4gICAgY29uc3QgYjExID0gQlswXSxcbiAgICAgICAgICBiMTIgPSBCWzFdLFxuICAgICAgICAgIGIxMyA9IEJbMl0sXG4gICAgICAgICAgYjIxID0gQlszXSxcbiAgICAgICAgICBiMjIgPSBCWzRdLFxuICAgICAgICAgIGIyMyA9IEJbNV0sXG4gICAgICAgICAgYjMxID0gQls2XSxcbiAgICAgICAgICBiMzIgPSBCWzddLFxuICAgICAgICAgIGIzMyA9IEJbOF07XG4gICAgVFswXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcbiAgICBUWzFdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuICAgIFRbMl0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7XG4gICAgVFszXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTtcbiAgICBUWzRdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xuICAgIFRbNV0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XG4gICAgVFs2XSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMTtcbiAgICBUWzddID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyO1xuICAgIFRbOF0gPSBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzM7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogU2NhbGUgZWFjaCBjb2x1bW4gb2YgdGhlIG1hdHJpeFxuICAgKi9cblxuXG4gIHNjYWxlKHZlY3RvciwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgTWF0MygpO1xuICAgIH1cblxuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGNvbnN0IHQgPSB0YXJnZXQuZWxlbWVudHM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0gMzsgaSsrKSB7XG4gICAgICB0WzMgKiBpICsgMF0gPSB2ZWN0b3IueCAqIGVbMyAqIGkgKyAwXTtcbiAgICAgIHRbMyAqIGkgKyAxXSA9IHZlY3Rvci55ICogZVszICogaSArIDFdO1xuICAgICAgdFszICogaSArIDJdID0gdmVjdG9yLnogKiBlWzMgKiBpICsgMl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogU29sdmUgQXg9YlxuICAgKiBAcGFyYW0gYiBUaGUgcmlnaHQgaGFuZCBzaWRlXG4gICAqIEBwYXJhbSB0YXJnZXQgT3B0aW9uYWwuIFRhcmdldCB2ZWN0b3IgdG8gc2F2ZSBpbi5cbiAgICogQHJldHVybiBUaGUgc29sdXRpb24geFxuICAgKiBAdG9kbyBzaG91bGQgcmV1c2UgYXJyYXlzXG4gICAqL1xuXG5cbiAgc29sdmUoYiwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdCBlcXVhdGlvbnNcbiAgICBjb25zdCBuciA9IDM7IC8vIG51bSByb3dzXG5cbiAgICBjb25zdCBuYyA9IDQ7IC8vIG51bSBjb2xzXG5cbiAgICBjb25zdCBlcW5zID0gW107XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbnIgKiBuYzsgaSsrKSB7XG4gICAgICBlcW5zLnB1c2goMCk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgICBlcW5zW2kgKyBuYyAqIGpdID0gdGhpcy5lbGVtZW50c1tpICsgMyAqIGpdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVxbnNbMyArIDQgKiAwXSA9IGIueDtcbiAgICBlcW5zWzMgKyA0ICogMV0gPSBiLnk7XG4gICAgZXFuc1szICsgNCAqIDJdID0gYi56OyAvLyBDb21wdXRlIHJpZ2h0IHVwcGVyIHRyaWFuZ3VsYXIgdmVyc2lvbiBvZiB0aGUgbWF0cml4IC0gR2F1c3MgZWxpbWluYXRpb25cblxuICAgIGxldCBuID0gMztcbiAgICBjb25zdCBrID0gbjtcbiAgICBsZXQgbnA7XG4gICAgY29uc3Qga3AgPSA0OyAvLyBudW0gcm93c1xuXG4gICAgbGV0IHA7XG5cbiAgICBkbyB7XG4gICAgICBpID0gayAtIG47XG5cbiAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGldID09PSAwKSB7XG4gICAgICAgIC8vIHRoZSBwaXZvdCBpcyBudWxsLCBzd2FwIGxpbmVzXG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgaWYgKGVxbnNbaSArIG5jICogal0gIT09IDApIHtcbiAgICAgICAgICAgIG5wID0ga3A7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgLy8gZG8gbGlnbmUoIGkgKSA9IGxpZ25lKCBpICkgKyBsaWduZSggayApXG4gICAgICAgICAgICAgIHAgPSBrcCAtIG5wO1xuICAgICAgICAgICAgICBlcW5zW3AgKyBuYyAqIGldICs9IGVxbnNbcCArIG5jICogal07XG4gICAgICAgICAgICB9IHdoaWxlICgtLW5wKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGldICE9PSAwKSB7XG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IGVxbnNbaSArIG5jICogal0gLyBlcW5zW2kgKyBuYyAqIGldO1xuICAgICAgICAgIG5wID0ga3A7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBkbyBsaWduZSggayApID0gbGlnbmUoIGsgKSAtIG11bHRpcGxpZXIgKiBsaWduZSggaSApXG4gICAgICAgICAgICBwID0ga3AgLSBucDtcbiAgICAgICAgICAgIGVxbnNbcCArIG5jICogal0gPSBwIDw9IGkgPyAwIDogZXFuc1twICsgbmMgKiBqXSAtIGVxbnNbcCArIG5jICogaV0gKiBtdWx0aXBsaWVyO1xuICAgICAgICAgIH0gd2hpbGUgKC0tbnApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAoLS1uKTsgLy8gR2V0IHRoZSBzb2x1dGlvblxuXG5cbiAgICB0YXJnZXQueiA9IGVxbnNbMiAqIG5jICsgM10gLyBlcW5zWzIgKiBuYyArIDJdO1xuICAgIHRhcmdldC55ID0gKGVxbnNbMSAqIG5jICsgM10gLSBlcW5zWzEgKiBuYyArIDJdICogdGFyZ2V0LnopIC8gZXFuc1sxICogbmMgKyAxXTtcbiAgICB0YXJnZXQueCA9IChlcW5zWzAgKiBuYyArIDNdIC0gZXFuc1swICogbmMgKyAyXSAqIHRhcmdldC56IC0gZXFuc1swICogbmMgKyAxXSAqIHRhcmdldC55KSAvIGVxbnNbMCAqIG5jICsgMF07XG5cbiAgICBpZiAoaXNOYU4odGFyZ2V0LngpIHx8IGlzTmFOKHRhcmdldC55KSB8fCBpc05hTih0YXJnZXQueikgfHwgdGFyZ2V0LnggPT09IEluZmluaXR5IHx8IHRhcmdldC55ID09PSBJbmZpbml0eSB8fCB0YXJnZXQueiA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHRocm93IGBDb3VsZCBub3Qgc29sdmUgZXF1YXRpb24hIEdvdCB4PVske3RhcmdldC50b1N0cmluZygpfV0sIGI9WyR7Yi50b1N0cmluZygpfV0sIEE9WyR7dGhpcy50b1N0cmluZygpfV1gO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBlbGVtZW50IGluIHRoZSBtYXRyaXggYnkgaW5kZXguIEluZGV4IHN0YXJ0cyBhdCAwLCBub3QgMSEhIVxuICAgKiBAcGFyYW0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZSBtYXRyaXggZWxlbWVudCB3aWxsIGJlIHNldCB0byB0aGlzIHZhbHVlLlxuICAgKi9cblxuXG4gIGUocm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2NvbHVtbiArIDMgKiByb3ddO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgdmFsdWVcbiAgICAgIHRoaXMuZWxlbWVudHNbY29sdW1uICsgMyAqIHJvd10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvcHkgYW5vdGhlciBtYXRyaXggaW50byB0aGlzIG1hdHJpeCBvYmplY3QuXG4gICAqL1xuXG5cbiAgY29weShtYXRyaXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5lbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5lbGVtZW50c1tpXSA9IG1hdHJpeC5lbGVtZW50c1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4LlxuICAgKi9cblxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCByID0gJyc7XG4gICAgY29uc3Qgc2VwID0gJywnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgIHIgKz0gdGhpcy5lbGVtZW50c1tpXSArIHNlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfVxuICAvKipcbiAgICogcmV2ZXJzZSB0aGUgbWF0cml4XG4gICAqIEBwYXJhbSB0YXJnZXQgVGFyZ2V0IG1hdHJpeCB0byBzYXZlIGluLlxuICAgKiBAcmV0dXJuIFRoZSBzb2x1dGlvbiB4XG4gICAqL1xuXG5cbiAgcmV2ZXJzZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBNYXQzKCk7XG4gICAgfVxuXG4gICAgLy8gQ29uc3RydWN0IGVxdWF0aW9uc1xuICAgIGNvbnN0IG5yID0gMzsgLy8gbnVtIHJvd3NcblxuICAgIGNvbnN0IG5jID0gNjsgLy8gbnVtIGNvbHNcblxuICAgIGNvbnN0IGVxbnMgPSByZXZlcnNlX2VxbnM7XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgIGVxbnNbaSArIG5jICogal0gPSB0aGlzLmVsZW1lbnRzW2kgKyAzICogal07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXFuc1szICsgNiAqIDBdID0gMTtcbiAgICBlcW5zWzMgKyA2ICogMV0gPSAwO1xuICAgIGVxbnNbMyArIDYgKiAyXSA9IDA7XG4gICAgZXFuc1s0ICsgNiAqIDBdID0gMDtcbiAgICBlcW5zWzQgKyA2ICogMV0gPSAxO1xuICAgIGVxbnNbNCArIDYgKiAyXSA9IDA7XG4gICAgZXFuc1s1ICsgNiAqIDBdID0gMDtcbiAgICBlcW5zWzUgKyA2ICogMV0gPSAwO1xuICAgIGVxbnNbNSArIDYgKiAyXSA9IDE7IC8vIENvbXB1dGUgcmlnaHQgdXBwZXIgdHJpYW5ndWxhciB2ZXJzaW9uIG9mIHRoZSBtYXRyaXggLSBHYXVzcyBlbGltaW5hdGlvblxuXG4gICAgbGV0IG4gPSAzO1xuICAgIGNvbnN0IGsgPSBuO1xuICAgIGxldCBucDtcbiAgICBjb25zdCBrcCA9IG5jOyAvLyBudW0gcm93c1xuXG4gICAgbGV0IHA7XG5cbiAgICBkbyB7XG4gICAgICBpID0gayAtIG47XG5cbiAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGldID09PSAwKSB7XG4gICAgICAgIC8vIHRoZSBwaXZvdCBpcyBudWxsLCBzd2FwIGxpbmVzXG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgaWYgKGVxbnNbaSArIG5jICogal0gIT09IDApIHtcbiAgICAgICAgICAgIG5wID0ga3A7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgLy8gZG8gbGluZSggaSApID0gbGluZSggaSApICsgbGluZSggayApXG4gICAgICAgICAgICAgIHAgPSBrcCAtIG5wO1xuICAgICAgICAgICAgICBlcW5zW3AgKyBuYyAqIGldICs9IGVxbnNbcCArIG5jICogal07XG4gICAgICAgICAgICB9IHdoaWxlICgtLW5wKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcW5zW2kgKyBuYyAqIGldICE9PSAwKSB7XG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IGVxbnNbaSArIG5jICogal0gLyBlcW5zW2kgKyBuYyAqIGldO1xuICAgICAgICAgIG5wID0ga3A7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBkbyBsaW5lKCBrICkgPSBsaW5lKCBrICkgLSBtdWx0aXBsaWVyICogbGluZSggaSApXG4gICAgICAgICAgICBwID0ga3AgLSBucDtcbiAgICAgICAgICAgIGVxbnNbcCArIG5jICogal0gPSBwIDw9IGkgPyAwIDogZXFuc1twICsgbmMgKiBqXSAtIGVxbnNbcCArIG5jICogaV0gKiBtdWx0aXBsaWVyO1xuICAgICAgICAgIH0gd2hpbGUgKC0tbnApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAoLS1uKTsgLy8gZWxpbWluYXRlIHRoZSB1cHBlciBsZWZ0IHRyaWFuZ2xlIG9mIHRoZSBtYXRyaXhcblxuXG4gICAgaSA9IDI7XG5cbiAgICBkbyB7XG4gICAgICBqID0gaSAtIDE7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IGVxbnNbaSArIG5jICogal0gLyBlcW5zW2kgKyBuYyAqIGldO1xuICAgICAgICBucCA9IG5jO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBwID0gbmMgLSBucDtcbiAgICAgICAgICBlcW5zW3AgKyBuYyAqIGpdID0gZXFuc1twICsgbmMgKiBqXSAtIGVxbnNbcCArIG5jICogaV0gKiBtdWx0aXBsaWVyO1xuICAgICAgICB9IHdoaWxlICgtLW5wKTtcbiAgICAgIH0gd2hpbGUgKGotLSk7XG4gICAgfSB3aGlsZSAoLS1pKTsgLy8gb3BlcmF0aW9ucyBvbiB0aGUgZGlhZ29uYWxcblxuXG4gICAgaSA9IDI7XG5cbiAgICBkbyB7XG4gICAgICBjb25zdCBtdWx0aXBsaWVyID0gMSAvIGVxbnNbaSArIG5jICogaV07XG4gICAgICBucCA9IG5jO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHAgPSBuYyAtIG5wO1xuICAgICAgICBlcW5zW3AgKyBuYyAqIGldID0gZXFuc1twICsgbmMgKiBpXSAqIG11bHRpcGxpZXI7XG4gICAgICB9IHdoaWxlICgtLW5wKTtcbiAgICB9IHdoaWxlIChpLS0pO1xuXG4gICAgaSA9IDI7XG5cbiAgICBkbyB7XG4gICAgICBqID0gMjtcblxuICAgICAgZG8ge1xuICAgICAgICBwID0gZXFuc1tuciArIGogKyBuYyAqIGldO1xuXG4gICAgICAgIGlmIChpc05hTihwKSB8fCBwID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHRocm93IGBDb3VsZCBub3QgcmV2ZXJzZSEgQT1bJHt0aGlzLnRvU3RyaW5nKCl9XWA7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuZShpLCBqLCBwKTtcbiAgICAgIH0gd2hpbGUgKGotLSk7XG4gICAgfSB3aGlsZSAoaS0tKTtcblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgbWF0cml4IGZyb20gYSBxdWF0ZXJpb25cbiAgICovXG5cblxuICBzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHEpIHtcbiAgICBjb25zdCB4ID0gcS54O1xuICAgIGNvbnN0IHkgPSBxLnk7XG4gICAgY29uc3QgeiA9IHEuejtcbiAgICBjb25zdCB3ID0gcS53O1xuICAgIGNvbnN0IHgyID0geCArIHg7XG4gICAgY29uc3QgeTIgPSB5ICsgeTtcbiAgICBjb25zdCB6MiA9IHogKyB6O1xuICAgIGNvbnN0IHh4ID0geCAqIHgyO1xuICAgIGNvbnN0IHh5ID0geCAqIHkyO1xuICAgIGNvbnN0IHh6ID0geCAqIHoyO1xuICAgIGNvbnN0IHl5ID0geSAqIHkyO1xuICAgIGNvbnN0IHl6ID0geSAqIHoyO1xuICAgIGNvbnN0IHp6ID0geiAqIHoyO1xuICAgIGNvbnN0IHd4ID0gdyAqIHgyO1xuICAgIGNvbnN0IHd5ID0gdyAqIHkyO1xuICAgIGNvbnN0IHd6ID0gdyAqIHoyO1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGVbMyAqIDAgKyAwXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgZVszICogMCArIDFdID0geHkgLSB3ejtcbiAgICBlWzMgKiAwICsgMl0gPSB4eiArIHd5O1xuICAgIGVbMyAqIDEgKyAwXSA9IHh5ICsgd3o7XG4gICAgZVszICogMSArIDFdID0gMSAtICh4eCArIHp6KTtcbiAgICBlWzMgKiAxICsgMl0gPSB5eiAtIHd4O1xuICAgIGVbMyAqIDIgKyAwXSA9IHh6IC0gd3k7XG4gICAgZVszICogMiArIDFdID0geXogKyB3eDtcbiAgICBlWzMgKiAyICsgMl0gPSAxIC0gKHh4ICsgeXkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBUcmFuc3Bvc2UgdGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gdGFyZ2V0IE9wdGlvbmFsLiBXaGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0LlxuICAgKiBAcmV0dXJuIFRoZSB0YXJnZXQgTWF0Mywgb3IgYSBuZXcgTWF0MyBpZiB0YXJnZXQgd2FzIG9taXR0ZWQuXG4gICAqL1xuXG5cbiAgdHJhbnNwb3NlKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IE1hdDMoKTtcbiAgICB9XG5cbiAgICBjb25zdCBNID0gdGhpcy5lbGVtZW50cztcbiAgICBjb25zdCBUID0gdGFyZ2V0LmVsZW1lbnRzO1xuICAgIGxldCB0bXA7IC8vU2V0IGRpYWdvbmFsc1xuXG4gICAgVFswXSA9IE1bMF07XG4gICAgVFs0XSA9IE1bNF07XG4gICAgVFs4XSA9IE1bOF07XG4gICAgdG1wID0gTVsxXTtcbiAgICBUWzFdID0gTVszXTtcbiAgICBUWzNdID0gdG1wO1xuICAgIHRtcCA9IE1bMl07XG4gICAgVFsyXSA9IE1bNl07XG4gICAgVFs2XSA9IHRtcDtcbiAgICB0bXAgPSBNWzVdO1xuICAgIFRbNV0gPSBNWzddO1xuICAgIFRbN10gPSB0bXA7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG59XG5jb25zdCByZXZlcnNlX2VxbnMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG5cbi8qKlxuICogMy1kaW1lbnNpb25hbCB2ZWN0b3JcbiAqIEBleGFtcGxlXG4gKiAgICAgY29uc3QgdiA9IG5ldyBWZWMzKDEsIDIsIDMpXG4gKiAgICAgY29uc29sZS5sb2coJ3g9JyArIHYueCkgLy8geD0xXG4gKi9cblxuY2xhc3MgVmVjMyB7XG4gIGNvbnN0cnVjdG9yKHgsIHksIHopIHtcbiAgICBpZiAoeCA9PT0gdm9pZCAwKSB7XG4gICAgICB4ID0gMC4wO1xuICAgIH1cblxuICAgIGlmICh5ID09PSB2b2lkIDApIHtcbiAgICAgIHkgPSAwLjA7XG4gICAgfVxuXG4gICAgaWYgKHogPT09IHZvaWQgMCkge1xuICAgICAgeiA9IDAuMDtcbiAgICB9XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcbiAgfVxuICAvKipcbiAgICogVmVjdG9yIGNyb3NzIHByb2R1Y3RcbiAgICogQHBhcmFtIHRhcmdldCBPcHRpb25hbCB0YXJnZXQgdG8gc2F2ZSBpbi5cbiAgICovXG5cblxuICBjcm9zcyh2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICBjb25zdCB2eCA9IHZlY3Rvci54O1xuICAgIGNvbnN0IHZ5ID0gdmVjdG9yLnk7XG4gICAgY29uc3QgdnogPSB2ZWN0b3IuejtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICB0YXJnZXQueCA9IHkgKiB2eiAtIHogKiB2eTtcbiAgICB0YXJnZXQueSA9IHogKiB2eCAtIHggKiB2ejtcbiAgICB0YXJnZXQueiA9IHggKiB2eSAtIHkgKiB2eDtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZlY3RvcnMnIDMgZWxlbWVudHNcbiAgICovXG5cblxuICBzZXQoeCwgeSwgeikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgYWxsIGNvbXBvbmVudHMgb2YgdGhlIHZlY3RvciB0byB6ZXJvLlxuICAgKi9cblxuXG4gIHNldFplcm8oKSB7XG4gICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy56ID0gMDtcbiAgfVxuICAvKipcbiAgICogVmVjdG9yIGFkZGl0aW9uXG4gICAqL1xuXG5cbiAgdmFkZCh2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldC54ID0gdmVjdG9yLnggKyB0aGlzLng7XG4gICAgICB0YXJnZXQueSA9IHZlY3Rvci55ICsgdGhpcy55O1xuICAgICAgdGFyZ2V0LnogPSB2ZWN0b3IueiArIHRoaXMuejtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCArIHZlY3Rvci54LCB0aGlzLnkgKyB2ZWN0b3IueSwgdGhpcy56ICsgdmVjdG9yLnopO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVmVjdG9yIHN1YnRyYWN0aW9uXG4gICAqIEBwYXJhbSB0YXJnZXQgT3B0aW9uYWwgdGFyZ2V0IHRvIHNhdmUgaW4uXG4gICAqL1xuXG5cbiAgdnN1Yih2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldC54ID0gdGhpcy54IC0gdmVjdG9yLng7XG4gICAgICB0YXJnZXQueSA9IHRoaXMueSAtIHZlY3Rvci55O1xuICAgICAgdGFyZ2V0LnogPSB0aGlzLnogLSB2ZWN0b3IuejtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCAtIHZlY3Rvci54LCB0aGlzLnkgLSB2ZWN0b3IueSwgdGhpcy56IC0gdmVjdG9yLnopO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjcm9zcyBwcm9kdWN0IG1hdHJpeCBhX2Nyb3NzIGZyb20gYSB2ZWN0b3IsIHN1Y2ggdGhhdCBhIHggYiA9IGFfY3Jvc3MgKiBiID0gY1xuICAgKlxuICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vd3d3OC5jcy51bXUuc2Uva3Vyc2VyL1REQkQyNC9WVDA2L2xlY3R1cmVzL0xlY3R1cmU2LnBkZiBVbWXDpSBVbml2ZXJzaXR5IExlY3R1cmV9XG4gICAqL1xuXG5cbiAgY3Jvc3NtYXQoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXQzKFswLCAtdGhpcy56LCB0aGlzLnksIHRoaXMueiwgMCwgLXRoaXMueCwgLXRoaXMueSwgdGhpcy54LCAwXSk7XG4gIH1cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSB0aGUgdmVjdG9yLiBOb3RlIHRoYXQgdGhpcyBjaGFuZ2VzIHRoZSB2YWx1ZXMgaW4gdGhlIHZlY3Rvci5cbiAgICAqIEByZXR1cm4gUmV0dXJucyB0aGUgbm9ybSBvZiB0aGUgdmVjdG9yXG4gICAqL1xuXG5cbiAgbm9ybWFsaXplKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgIGNvbnN0IG4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcblxuICAgIGlmIChuID4gMC4wKSB7XG4gICAgICBjb25zdCBpbnZOID0gMSAvIG47XG4gICAgICB0aGlzLnggKj0gaW52TjtcbiAgICAgIHRoaXMueSAqPSBpbnZOO1xuICAgICAgdGhpcy56ICo9IGludk47XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1ha2Ugc29tZXRoaW5nIHVwXG4gICAgICB0aGlzLnggPSAwO1xuICAgICAgdGhpcy55ID0gMDtcbiAgICAgIHRoaXMueiA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmVyc2lvbiBvZiB0aGlzIHZlY3RvciB0aGF0IGlzIG9mIGxlbmd0aCAxLlxuICAgKiBAcGFyYW0gdGFyZ2V0IE9wdGlvbmFsIHRhcmdldCB0byBzYXZlIGluXG4gICAqIEByZXR1cm4gUmV0dXJucyB0aGUgdW5pdCB2ZWN0b3JcbiAgICovXG5cblxuICB1bml0KHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICBsZXQgbmludiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xuXG4gICAgaWYgKG5pbnYgPiAwLjApIHtcbiAgICAgIG5pbnYgPSAxLjAgLyBuaW52O1xuICAgICAgdGFyZ2V0LnggPSB4ICogbmludjtcbiAgICAgIHRhcmdldC55ID0geSAqIG5pbnY7XG4gICAgICB0YXJnZXQueiA9IHogKiBuaW52O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQueCA9IDE7XG4gICAgICB0YXJnZXQueSA9IDA7XG4gICAgICB0YXJnZXQueiA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBsZW5ndGggb2YgdGhlIHZlY3RvclxuICAgKi9cblxuXG4gIGxlbmd0aCgpIHtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhlIHZlY3Rvci5cbiAgICovXG5cblxuICBsZW5ndGhTcXVhcmVkKCkge1xuICAgIHJldHVybiB0aGlzLmRvdCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGRpc3RhbmNlIGZyb20gdGhpcyBwb2ludCB0byBhbm90aGVyIHBvaW50XG4gICAqL1xuXG5cbiAgZGlzdGFuY2VUbyhwKSB7XG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgY29uc3QgcHggPSBwLng7XG4gICAgY29uc3QgcHkgPSBwLnk7XG4gICAgY29uc3QgcHogPSBwLno7XG4gICAgcmV0dXJuIE1hdGguc3FydCgocHggLSB4KSAqIChweCAtIHgpICsgKHB5IC0geSkgKiAocHkgLSB5KSArIChweiAtIHopICogKHB6IC0geikpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgc3F1YXJlZCBkaXN0YW5jZSBmcm9tIHRoaXMgcG9pbnQgdG8gYW5vdGhlciBwb2ludFxuICAgKi9cblxuXG4gIGRpc3RhbmNlU3F1YXJlZChwKSB7XG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgY29uc3QgcHggPSBwLng7XG4gICAgY29uc3QgcHkgPSBwLnk7XG4gICAgY29uc3QgcHogPSBwLno7XG4gICAgcmV0dXJuIChweCAtIHgpICogKHB4IC0geCkgKyAocHkgLSB5KSAqIChweSAtIHkpICsgKHB6IC0geikgKiAocHogLSB6KTtcbiAgfVxuICAvKipcbiAgICogTXVsdGlwbHkgYWxsIHRoZSBjb21wb25lbnRzIG9mIHRoZSB2ZWN0b3Igd2l0aCBhIHNjYWxhci5cbiAgICogQHBhcmFtIHRhcmdldCBUaGUgdmVjdG9yIHRvIHNhdmUgdGhlIHJlc3VsdCBpbi5cbiAgICovXG5cblxuICBzY2FsZShzY2FsYXIsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICB0YXJnZXQueCA9IHNjYWxhciAqIHg7XG4gICAgdGFyZ2V0LnkgPSBzY2FsYXIgKiB5O1xuICAgIHRhcmdldC56ID0gc2NhbGFyICogejtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGUgdmVjdG9yIHdpdGggYW4gb3RoZXIgdmVjdG9yLCBjb21wb25lbnQtd2lzZS5cbiAgICogQHBhcmFtIHRhcmdldCBUaGUgdmVjdG9yIHRvIHNhdmUgdGhlIHJlc3VsdCBpbi5cbiAgICovXG5cblxuICB2bXVsKHZlY3RvciwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIHRhcmdldC54ID0gdmVjdG9yLnggKiB0aGlzLng7XG4gICAgdGFyZ2V0LnkgPSB2ZWN0b3IueSAqIHRoaXMueTtcbiAgICB0YXJnZXQueiA9IHZlY3Rvci56ICogdGhpcy56O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFNjYWxlIGEgdmVjdG9yIGFuZCBhZGQgaXQgdG8gdGhpcyB2ZWN0b3IuIFNhdmUgdGhlIHJlc3VsdCBpbiBcInRhcmdldFwiLiAodGFyZ2V0ID0gdGhpcyArIHZlY3RvciAqIHNjYWxhcilcbiAgICogQHBhcmFtIHRhcmdldCBUaGUgdmVjdG9yIHRvIHNhdmUgdGhlIHJlc3VsdCBpbi5cbiAgICovXG5cblxuICBhZGRTY2FsZWRWZWN0b3Ioc2NhbGFyLCB2ZWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICB0YXJnZXQueCA9IHRoaXMueCArIHNjYWxhciAqIHZlY3Rvci54O1xuICAgIHRhcmdldC55ID0gdGhpcy55ICsgc2NhbGFyICogdmVjdG9yLnk7XG4gICAgdGFyZ2V0LnogPSB0aGlzLnogKyBzY2FsYXIgKiB2ZWN0b3IuejtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgZG90IHByb2R1Y3RcbiAgICogQHBhcmFtIHZlY3RvclxuICAgKi9cblxuXG4gIGRvdCh2ZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy54ICogdmVjdG9yLnggKyB0aGlzLnkgKiB2ZWN0b3IueSArIHRoaXMueiAqIHZlY3Rvci56O1xuICB9XG5cbiAgaXNaZXJvKCkge1xuICAgIHJldHVybiB0aGlzLnggPT09IDAgJiYgdGhpcy55ID09PSAwICYmIHRoaXMueiA9PT0gMDtcbiAgfVxuICAvKipcbiAgICogTWFrZSB0aGUgdmVjdG9yIHBvaW50IGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4gICAqIEBwYXJhbSB0YXJnZXQgT3B0aW9uYWwgdGFyZ2V0IHRvIHNhdmUgaW5cbiAgICovXG5cblxuICBuZWdhdGUodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIHRhcmdldC54ID0gLXRoaXMueDtcbiAgICB0YXJnZXQueSA9IC10aGlzLnk7XG4gICAgdGFyZ2V0LnogPSAtdGhpcy56O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdHdvIGFydGlmaWNpYWwgdGFuZ2VudHMgdG8gdGhlIHZlY3RvclxuICAgKiBAcGFyYW0gdDEgVmVjdG9yIG9iamVjdCB0byBzYXZlIHRoZSBmaXJzdCB0YW5nZW50IGluXG4gICAqIEBwYXJhbSB0MiBWZWN0b3Igb2JqZWN0IHRvIHNhdmUgdGhlIHNlY29uZCB0YW5nZW50IGluXG4gICAqL1xuXG5cbiAgdGFuZ2VudHModDEsIHQyKSB7XG4gICAgY29uc3Qgbm9ybSA9IHRoaXMubGVuZ3RoKCk7XG5cbiAgICBpZiAobm9ybSA+IDAuMCkge1xuICAgICAgY29uc3QgbiA9IFZlYzNfdGFuZ2VudHNfbjtcbiAgICAgIGNvbnN0IGlub3JtID0gMSAvIG5vcm07XG4gICAgICBuLnNldCh0aGlzLnggKiBpbm9ybSwgdGhpcy55ICogaW5vcm0sIHRoaXMueiAqIGlub3JtKTtcbiAgICAgIGNvbnN0IHJhbmRWZWMgPSBWZWMzX3RhbmdlbnRzX3JhbmRWZWM7XG5cbiAgICAgIGlmIChNYXRoLmFicyhuLngpIDwgMC45KSB7XG4gICAgICAgIHJhbmRWZWMuc2V0KDEsIDAsIDApO1xuICAgICAgICBuLmNyb3NzKHJhbmRWZWMsIHQxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmRWZWMuc2V0KDAsIDEsIDApO1xuICAgICAgICBuLmNyb3NzKHJhbmRWZWMsIHQxKTtcbiAgICAgIH1cblxuICAgICAgbi5jcm9zcyh0MSwgdDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgbm9ybWFsIGxlbmd0aCBpcyB6ZXJvLCBtYWtlIHNvbWV0aGluZyB1cFxuICAgICAgdDEuc2V0KDEsIDAsIDApO1xuICAgICAgdDIuc2V0KDAsIDEsIDApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdG8gYSBtb3JlIHJlYWRhYmxlIGZvcm1hdFxuICAgKi9cblxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLnh9LCR7dGhpcy55fSwke3RoaXMuen1gO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0byBhbiBhcnJheVxuICAgKi9cblxuXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56XTtcbiAgfVxuICAvKipcbiAgICogQ29waWVzIHZhbHVlIG9mIHNvdXJjZSB0byB0aGlzIHZlY3Rvci5cbiAgICovXG5cblxuICBjb3B5KHZlY3Rvcikge1xuICAgIHRoaXMueCA9IHZlY3Rvci54O1xuICAgIHRoaXMueSA9IHZlY3Rvci55O1xuICAgIHRoaXMueiA9IHZlY3Rvci56O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBEbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICogQHBhcmFtIHQgQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiAwIHdpbGwgbWFrZSB0aGlzIGZ1bmN0aW9uIHJldHVybiB1LCBhbmQgMSB3aWxsIG1ha2UgaXQgcmV0dXJuIHYuIE51bWJlcnMgaW4gYmV0d2VlbiB3aWxsIGdlbmVyYXRlIGEgdmVjdG9yIGluIGJldHdlZW4gdGhlbS5cbiAgICovXG5cblxuICBsZXJwKHZlY3RvciwgdCwgdGFyZ2V0KSB7XG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgdGFyZ2V0LnggPSB4ICsgKHZlY3Rvci54IC0geCkgKiB0O1xuICAgIHRhcmdldC55ID0geSArICh2ZWN0b3IueSAtIHkpICogdDtcbiAgICB0YXJnZXQueiA9IHogKyAodmVjdG9yLnogLSB6KSAqIHQ7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdmVjdG9yIGVxdWFscyBpcyBhbG1vc3QgZXF1YWwgdG8gYW5vdGhlciBvbmUuXG4gICAqL1xuXG5cbiAgYWxtb3N0RXF1YWxzKHZlY3RvciwgcHJlY2lzaW9uKSB7XG4gICAgaWYgKHByZWNpc2lvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBwcmVjaXNpb24gPSAxZS02O1xuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyh0aGlzLnggLSB2ZWN0b3IueCkgPiBwcmVjaXNpb24gfHwgTWF0aC5hYnModGhpcy55IC0gdmVjdG9yLnkpID4gcHJlY2lzaW9uIHx8IE1hdGguYWJzKHRoaXMueiAtIHZlY3Rvci56KSA+IHByZWNpc2lvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHZlY3RvciBpcyBhbG1vc3QgemVyb1xuICAgKi9cblxuXG4gIGFsbW9zdFplcm8ocHJlY2lzaW9uKSB7XG4gICAgaWYgKHByZWNpc2lvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBwcmVjaXNpb24gPSAxZS02O1xuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyh0aGlzLngpID4gcHJlY2lzaW9uIHx8IE1hdGguYWJzKHRoaXMueSkgPiBwcmVjaXNpb24gfHwgTWF0aC5hYnModGhpcy56KSA+IHByZWNpc2lvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdmVjdG9yIGlzIGFudGktcGFyYWxsZWwgdG8gYW5vdGhlciB2ZWN0b3IuXG4gICAqIEBwYXJhbSBwcmVjaXNpb24gU2V0IHRvIHplcm8gZm9yIGV4YWN0IGNvbXBhcmlzb25zXG4gICAqL1xuXG5cbiAgaXNBbnRpcGFyYWxsZWxUbyh2ZWN0b3IsIHByZWNpc2lvbikge1xuICAgIHRoaXMubmVnYXRlKGFudGlwX25lZyk7XG4gICAgcmV0dXJuIGFudGlwX25lZy5hbG1vc3RFcXVhbHModmVjdG9yLCBwcmVjaXNpb24pO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgdmVjdG9yXG4gICAqL1xuXG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xuICB9XG5cbn1cblZlYzMuWkVSTyA9IG5ldyBWZWMzKDAsIDAsIDApO1xuVmVjMy5VTklUX1ggPSBuZXcgVmVjMygxLCAwLCAwKTtcblZlYzMuVU5JVF9ZID0gbmV3IFZlYzMoMCwgMSwgMCk7XG5WZWMzLlVOSVRfWiA9IG5ldyBWZWMzKDAsIDAsIDEpO1xuY29uc3QgVmVjM190YW5nZW50c19uID0gbmV3IFZlYzMoKTtcbmNvbnN0IFZlYzNfdGFuZ2VudHNfcmFuZFZlYyA9IG5ldyBWZWMzKCk7XG5jb25zdCBhbnRpcF9uZWcgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEF4aXMgYWxpZ25lZCBib3VuZGluZyBib3ggY2xhc3MuXG4gKi9cbmNsYXNzIEFBQkIge1xuICAvKipcbiAgICogVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSBib3VuZGluZyBib3hcbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgYm91bmRpbmcgYm94XG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMubG93ZXJCb3VuZCA9IG5ldyBWZWMzKCk7XG4gICAgdGhpcy51cHBlckJvdW5kID0gbmV3IFZlYzMoKTtcblxuICAgIGlmIChvcHRpb25zLmxvd2VyQm91bmQpIHtcbiAgICAgIHRoaXMubG93ZXJCb3VuZC5jb3B5KG9wdGlvbnMubG93ZXJCb3VuZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudXBwZXJCb3VuZCkge1xuICAgICAgdGhpcy51cHBlckJvdW5kLmNvcHkob3B0aW9ucy51cHBlckJvdW5kKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgQUFCQiBib3VuZHMgZnJvbSBhIHNldCBvZiBwb2ludHMuXG4gICAqIEBwYXJhbSBwb2ludHMgQW4gYXJyYXkgb2YgVmVjMydzLlxuICAgKiBAcmV0dXJuIFRoZSBzZWxmIG9iamVjdFxuICAgKi9cblxuXG4gIHNldEZyb21Qb2ludHMocG9pbnRzLCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2tpblNpemUpIHtcbiAgICBjb25zdCBsID0gdGhpcy5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUgPSB0aGlzLnVwcGVyQm91bmQ7XG4gICAgY29uc3QgcSA9IHF1YXRlcm5pb247IC8vIFNldCB0byB0aGUgZmlyc3QgcG9pbnRcblxuICAgIGwuY29weShwb2ludHNbMF0pO1xuXG4gICAgaWYgKHEpIHtcbiAgICAgIHEudm11bHQobCwgbCk7XG4gICAgfVxuXG4gICAgdS5jb3B5KGwpO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwID0gcG9pbnRzW2ldO1xuXG4gICAgICBpZiAocSkge1xuICAgICAgICBxLnZtdWx0KHAsIHRtcCQxKTtcbiAgICAgICAgcCA9IHRtcCQxO1xuICAgICAgfVxuXG4gICAgICBpZiAocC54ID4gdS54KSB7XG4gICAgICAgIHUueCA9IHAueDtcbiAgICAgIH1cblxuICAgICAgaWYgKHAueCA8IGwueCkge1xuICAgICAgICBsLnggPSBwLng7XG4gICAgICB9XG5cbiAgICAgIGlmIChwLnkgPiB1LnkpIHtcbiAgICAgICAgdS55ID0gcC55O1xuICAgICAgfVxuXG4gICAgICBpZiAocC55IDwgbC55KSB7XG4gICAgICAgIGwueSA9IHAueTtcbiAgICAgIH1cblxuICAgICAgaWYgKHAueiA+IHUueikge1xuICAgICAgICB1LnogPSBwLno7XG4gICAgICB9XG5cbiAgICAgIGlmIChwLnogPCBsLnopIHtcbiAgICAgICAgbC56ID0gcC56O1xuICAgICAgfVxuICAgIH0gLy8gQWRkIG9mZnNldFxuXG5cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHBvc2l0aW9uLnZhZGQobCwgbCk7XG4gICAgICBwb3NpdGlvbi52YWRkKHUsIHUpO1xuICAgIH1cblxuICAgIGlmIChza2luU2l6ZSkge1xuICAgICAgbC54IC09IHNraW5TaXplO1xuICAgICAgbC55IC09IHNraW5TaXplO1xuICAgICAgbC56IC09IHNraW5TaXplO1xuICAgICAgdS54ICs9IHNraW5TaXplO1xuICAgICAgdS55ICs9IHNraW5TaXplO1xuICAgICAgdS56ICs9IHNraW5TaXplO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb3B5IGJvdW5kcyBmcm9tIGFuIEFBQkIgdG8gdGhpcyBBQUJCXG4gICAqIEBwYXJhbSBhYWJiIFNvdXJjZSB0byBjb3B5IGZyb21cbiAgICogQHJldHVybiBUaGUgdGhpcyBvYmplY3QsIGZvciBjaGFpbmFiaWxpdHlcbiAgICovXG5cblxuICBjb3B5KGFhYmIpIHtcbiAgICB0aGlzLmxvd2VyQm91bmQuY29weShhYWJiLmxvd2VyQm91bmQpO1xuICAgIHRoaXMudXBwZXJCb3VuZC5jb3B5KGFhYmIudXBwZXJCb3VuZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENsb25lIGFuIEFBQkJcbiAgICovXG5cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEFBQkIoKS5jb3B5KHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBFeHRlbmQgdGhpcyBBQUJCIHNvIHRoYXQgaXQgY292ZXJzIHRoZSBnaXZlbiBBQUJCIHRvby5cbiAgICovXG5cblxuICBleHRlbmQoYWFiYikge1xuICAgIHRoaXMubG93ZXJCb3VuZC54ID0gTWF0aC5taW4odGhpcy5sb3dlckJvdW5kLngsIGFhYmIubG93ZXJCb3VuZC54KTtcbiAgICB0aGlzLnVwcGVyQm91bmQueCA9IE1hdGgubWF4KHRoaXMudXBwZXJCb3VuZC54LCBhYWJiLnVwcGVyQm91bmQueCk7XG4gICAgdGhpcy5sb3dlckJvdW5kLnkgPSBNYXRoLm1pbih0aGlzLmxvd2VyQm91bmQueSwgYWFiYi5sb3dlckJvdW5kLnkpO1xuICAgIHRoaXMudXBwZXJCb3VuZC55ID0gTWF0aC5tYXgodGhpcy51cHBlckJvdW5kLnksIGFhYmIudXBwZXJCb3VuZC55KTtcbiAgICB0aGlzLmxvd2VyQm91bmQueiA9IE1hdGgubWluKHRoaXMubG93ZXJCb3VuZC56LCBhYWJiLmxvd2VyQm91bmQueik7XG4gICAgdGhpcy51cHBlckJvdW5kLnogPSBNYXRoLm1heCh0aGlzLnVwcGVyQm91bmQueiwgYWFiYi51cHBlckJvdW5kLnopO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIEFBQkIgb3ZlcmxhcHMgdGhpcyBBQUJCLlxuICAgKi9cblxuXG4gIG92ZXJsYXBzKGFhYmIpIHtcbiAgICBjb25zdCBsMSA9IHRoaXMubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1MSA9IHRoaXMudXBwZXJCb3VuZDtcbiAgICBjb25zdCBsMiA9IGFhYmIubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1MiA9IGFhYmIudXBwZXJCb3VuZDsgLy8gICAgICBsMiAgICAgICAgdTJcbiAgICAvLyAgICAgIHwtLS0tLS0tLS18XG4gICAgLy8gfC0tLS0tLS0tfFxuICAgIC8vIGwxICAgICAgIHUxXG5cbiAgICBjb25zdCBvdmVybGFwc1ggPSBsMi54IDw9IHUxLnggJiYgdTEueCA8PSB1Mi54IHx8IGwxLnggPD0gdTIueCAmJiB1Mi54IDw9IHUxLng7XG4gICAgY29uc3Qgb3ZlcmxhcHNZID0gbDIueSA8PSB1MS55ICYmIHUxLnkgPD0gdTIueSB8fCBsMS55IDw9IHUyLnkgJiYgdTIueSA8PSB1MS55O1xuICAgIGNvbnN0IG92ZXJsYXBzWiA9IGwyLnogPD0gdTEueiAmJiB1MS56IDw9IHUyLnogfHwgbDEueiA8PSB1Mi56ICYmIHUyLnogPD0gdTEuejtcbiAgICByZXR1cm4gb3ZlcmxhcHNYICYmIG92ZXJsYXBzWSAmJiBvdmVybGFwc1o7XG4gIH0gLy8gTW9zdGx5IGZvciBkZWJ1Z2dpbmdcblxuXG4gIHZvbHVtZSgpIHtcbiAgICBjb25zdCBsID0gdGhpcy5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUgPSB0aGlzLnVwcGVyQm91bmQ7XG4gICAgcmV0dXJuICh1LnggLSBsLngpICogKHUueSAtIGwueSkgKiAodS56IC0gbC56KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBBQUJCIGlzIGZ1bGx5IGNvbnRhaW5lZCBpbiB0aGlzIEFBQkIuXG4gICAqL1xuXG5cbiAgY29udGFpbnMoYWFiYikge1xuICAgIGNvbnN0IGwxID0gdGhpcy5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUxID0gdGhpcy51cHBlckJvdW5kO1xuICAgIGNvbnN0IGwyID0gYWFiYi5sb3dlckJvdW5kO1xuICAgIGNvbnN0IHUyID0gYWFiYi51cHBlckJvdW5kOyAvLyAgICAgIGwyICAgICAgICB1MlxuICAgIC8vICAgICAgfC0tLS0tLS0tLXxcbiAgICAvLyB8LS0tLS0tLS0tLS0tLS0tfFxuICAgIC8vIGwxICAgICAgICAgICAgICB1MVxuXG4gICAgcmV0dXJuIGwxLnggPD0gbDIueCAmJiB1MS54ID49IHUyLnggJiYgbDEueSA8PSBsMi55ICYmIHUxLnkgPj0gdTIueSAmJiBsMS56IDw9IGwyLnogJiYgdTEueiA+PSB1Mi56O1xuICB9XG5cbiAgZ2V0Q29ybmVycyhhLCBiLCBjLCBkLCBlLCBmLCBnLCBoKSB7XG4gICAgY29uc3QgbCA9IHRoaXMubG93ZXJCb3VuZDtcbiAgICBjb25zdCB1ID0gdGhpcy51cHBlckJvdW5kO1xuICAgIGEuY29weShsKTtcbiAgICBiLnNldCh1LngsIGwueSwgbC56KTtcbiAgICBjLnNldCh1LngsIHUueSwgbC56KTtcbiAgICBkLnNldChsLngsIHUueSwgdS56KTtcbiAgICBlLnNldCh1LngsIGwueSwgdS56KTtcbiAgICBmLnNldChsLngsIHUueSwgbC56KTtcbiAgICBnLnNldChsLngsIGwueSwgdS56KTtcbiAgICBoLmNvcHkodSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVwcmVzZW50YXRpb24gb2YgYW4gQUFCQiBpbiBhbm90aGVyIGZyYW1lLlxuICAgKiBAcmV0dXJuIFRoZSBcInRhcmdldFwiIEFBQkIgb2JqZWN0LlxuICAgKi9cblxuXG4gIHRvTG9jYWxGcmFtZShmcmFtZSwgdGFyZ2V0KSB7XG4gICAgY29uc3QgY29ybmVycyA9IHRyYW5zZm9ybUludG9GcmFtZV9jb3JuZXJzO1xuICAgIGNvbnN0IGEgPSBjb3JuZXJzWzBdO1xuICAgIGNvbnN0IGIgPSBjb3JuZXJzWzFdO1xuICAgIGNvbnN0IGMgPSBjb3JuZXJzWzJdO1xuICAgIGNvbnN0IGQgPSBjb3JuZXJzWzNdO1xuICAgIGNvbnN0IGUgPSBjb3JuZXJzWzRdO1xuICAgIGNvbnN0IGYgPSBjb3JuZXJzWzVdO1xuICAgIGNvbnN0IGcgPSBjb3JuZXJzWzZdO1xuICAgIGNvbnN0IGggPSBjb3JuZXJzWzddOyAvLyBHZXQgY29ybmVycyBpbiBjdXJyZW50IGZyYW1lXG5cbiAgICB0aGlzLmdldENvcm5lcnMoYSwgYiwgYywgZCwgZSwgZiwgZywgaCk7IC8vIFRyYW5zZm9ybSB0aGVtIHRvIG5ldyBsb2NhbCBmcmFtZVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IDg7IGkrKykge1xuICAgICAgY29uc3QgY29ybmVyID0gY29ybmVyc1tpXTtcbiAgICAgIGZyYW1lLnBvaW50VG9Mb2NhbChjb3JuZXIsIGNvcm5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldC5zZXRGcm9tUG9pbnRzKGNvcm5lcnMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHJlcHJlc2VudGF0aW9uIG9mIGFuIEFBQkIgaW4gdGhlIGdsb2JhbCBmcmFtZS5cbiAgICogQHJldHVybiBUaGUgXCJ0YXJnZXRcIiBBQUJCIG9iamVjdC5cbiAgICovXG5cblxuICB0b1dvcmxkRnJhbWUoZnJhbWUsIHRhcmdldCkge1xuICAgIGNvbnN0IGNvcm5lcnMgPSB0cmFuc2Zvcm1JbnRvRnJhbWVfY29ybmVycztcbiAgICBjb25zdCBhID0gY29ybmVyc1swXTtcbiAgICBjb25zdCBiID0gY29ybmVyc1sxXTtcbiAgICBjb25zdCBjID0gY29ybmVyc1syXTtcbiAgICBjb25zdCBkID0gY29ybmVyc1szXTtcbiAgICBjb25zdCBlID0gY29ybmVyc1s0XTtcbiAgICBjb25zdCBmID0gY29ybmVyc1s1XTtcbiAgICBjb25zdCBnID0gY29ybmVyc1s2XTtcbiAgICBjb25zdCBoID0gY29ybmVyc1s3XTsgLy8gR2V0IGNvcm5lcnMgaW4gY3VycmVudCBmcmFtZVxuXG4gICAgdGhpcy5nZXRDb3JuZXJzKGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgpOyAvLyBUcmFuc2Zvcm0gdGhlbSB0byBuZXcgbG9jYWwgZnJhbWVcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSA4OyBpKyspIHtcbiAgICAgIGNvbnN0IGNvcm5lciA9IGNvcm5lcnNbaV07XG4gICAgICBmcmFtZS5wb2ludFRvV29ybGQoY29ybmVyLCBjb3JuZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQuc2V0RnJvbVBvaW50cyhjb3JuZXJzKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIEFBQkIgaXMgaGl0IGJ5IGEgcmF5LlxuICAgKi9cblxuXG4gIG92ZXJsYXBzUmF5KHJheSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIGZyb21cbiAgICB9ID0gcmF5OyAvLyBjb25zdCB0ID0gMFxuICAgIC8vIHJheS5kaXJlY3Rpb24gaXMgdW5pdCBkaXJlY3Rpb24gdmVjdG9yIG9mIHJheVxuXG4gICAgY29uc3QgZGlyRnJhY1ggPSAxIC8gZGlyZWN0aW9uLng7XG4gICAgY29uc3QgZGlyRnJhY1kgPSAxIC8gZGlyZWN0aW9uLnk7XG4gICAgY29uc3QgZGlyRnJhY1ogPSAxIC8gZGlyZWN0aW9uLno7IC8vIHRoaXMubG93ZXJCb3VuZCBpcyB0aGUgY29ybmVyIG9mIEFBQkIgd2l0aCBtaW5pbWFsIGNvb3JkaW5hdGVzIC0gbGVmdCBib3R0b20sIHJ0IGlzIG1heGltYWwgY29ybmVyXG5cbiAgICBjb25zdCB0MSA9ICh0aGlzLmxvd2VyQm91bmQueCAtIGZyb20ueCkgKiBkaXJGcmFjWDtcbiAgICBjb25zdCB0MiA9ICh0aGlzLnVwcGVyQm91bmQueCAtIGZyb20ueCkgKiBkaXJGcmFjWDtcbiAgICBjb25zdCB0MyA9ICh0aGlzLmxvd2VyQm91bmQueSAtIGZyb20ueSkgKiBkaXJGcmFjWTtcbiAgICBjb25zdCB0NCA9ICh0aGlzLnVwcGVyQm91bmQueSAtIGZyb20ueSkgKiBkaXJGcmFjWTtcbiAgICBjb25zdCB0NSA9ICh0aGlzLmxvd2VyQm91bmQueiAtIGZyb20ueikgKiBkaXJGcmFjWjtcbiAgICBjb25zdCB0NiA9ICh0aGlzLnVwcGVyQm91bmQueiAtIGZyb20ueikgKiBkaXJGcmFjWjsgLy8gY29uc3QgdG1pbiA9IE1hdGgubWF4KE1hdGgubWF4KE1hdGgubWluKHQxLCB0MiksIE1hdGgubWluKHQzLCB0NCkpKTtcbiAgICAvLyBjb25zdCB0bWF4ID0gTWF0aC5taW4oTWF0aC5taW4oTWF0aC5tYXgodDEsIHQyKSwgTWF0aC5tYXgodDMsIHQ0KSkpO1xuXG4gICAgY29uc3QgdG1pbiA9IE1hdGgubWF4KE1hdGgubWF4KE1hdGgubWluKHQxLCB0MiksIE1hdGgubWluKHQzLCB0NCkpLCBNYXRoLm1pbih0NSwgdDYpKTtcbiAgICBjb25zdCB0bWF4ID0gTWF0aC5taW4oTWF0aC5taW4oTWF0aC5tYXgodDEsIHQyKSwgTWF0aC5tYXgodDMsIHQ0KSksIE1hdGgubWF4KHQ1LCB0NikpOyAvLyBpZiB0bWF4IDwgMCwgcmF5IChsaW5lKSBpcyBpbnRlcnNlY3RpbmcgQUFCQiwgYnV0IHdob2xlIEFBQkIgaXMgYmVoaW5nIHVzXG5cbiAgICBpZiAodG1heCA8IDApIHtcbiAgICAgIC8vdCA9IHRtYXg7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBpZiB0bWluID4gdG1heCwgcmF5IGRvZXNuJ3QgaW50ZXJzZWN0IEFBQkJcblxuXG4gICAgaWYgKHRtaW4gPiB0bWF4KSB7XG4gICAgICAvL3QgPSB0bWF4O1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cbmNvbnN0IHRtcCQxID0gbmV3IFZlYzMoKTtcbmNvbnN0IHRyYW5zZm9ybUludG9GcmFtZV9jb3JuZXJzID0gW25ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCldO1xuXG4vKipcbiAqIEEgUXVhdGVybmlvbiBkZXNjcmliZXMgYSByb3RhdGlvbiBpbiAzRCBzcGFjZS4gVGhlIFF1YXRlcm5pb24gaXMgbWF0aGVtYXRpY2FsbHkgZGVmaW5lZCBhcyBRID0geCppICsgeSpqICsgeiprICsgdywgd2hlcmUgKGksaixrKSBhcmUgaW1hZ2luYXJ5IGJhc2lzIHZlY3RvcnMuICh4LHkseikgY2FuIGJlIHNlZW4gYXMgYSB2ZWN0b3IgcmVsYXRlZCB0byB0aGUgYXhpcyBvZiByb3RhdGlvbiwgd2hpbGUgdGhlIHJlYWwgbXVsdGlwbGllciwgdywgaXMgcmVsYXRlZCB0byB0aGUgYW1vdW50IG9mIHJvdGF0aW9uLlxuICogQHBhcmFtIHggTXVsdGlwbGllciBvZiB0aGUgaW1hZ2luYXJ5IGJhc2lzIHZlY3RvciBpLlxuICogQHBhcmFtIHkgTXVsdGlwbGllciBvZiB0aGUgaW1hZ2luYXJ5IGJhc2lzIHZlY3RvciBqLlxuICogQHBhcmFtIHogTXVsdGlwbGllciBvZiB0aGUgaW1hZ2luYXJ5IGJhc2lzIHZlY3RvciBrLlxuICogQHBhcmFtIHcgTXVsdGlwbGllciBvZiB0aGUgcmVhbCBwYXJ0LlxuICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1F1YXRlcm5pb25cbiAqL1xuXG5jbGFzcyBRdWF0ZXJuaW9uIHtcbiAgY29uc3RydWN0b3IoeCwgeSwgeiwgdykge1xuICAgIGlmICh4ID09PSB2b2lkIDApIHtcbiAgICAgIHggPSAwO1xuICAgIH1cblxuICAgIGlmICh5ID09PSB2b2lkIDApIHtcbiAgICAgIHkgPSAwO1xuICAgIH1cblxuICAgIGlmICh6ID09PSB2b2lkIDApIHtcbiAgICAgIHogPSAwO1xuICAgIH1cblxuICAgIGlmICh3ID09PSB2b2lkIDApIHtcbiAgICAgIHcgPSAxO1xuICAgIH1cblxuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6O1xuICAgIHRoaXMudyA9IHc7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhlIHF1YXRlcm5pb24uXG4gICAqL1xuXG5cbiAgc2V0KHgsIHksIHosIHcpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcbiAgICB0aGlzLncgPSB3O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHRvIGEgcmVhZGFibGUgZm9ybWF0XG4gICAqIEByZXR1cm4gXCJ4LHkseix3XCJcbiAgICovXG5cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYCR7dGhpcy54fSwke3RoaXMueX0sJHt0aGlzLnp9LCR7dGhpcy53fWA7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgdG8gYW4gQXJyYXlcbiAgICogQHJldHVybiBbeCwgeSwgeiwgd11cbiAgICovXG5cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53XTtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBxdWF0ZXJuaW9uIGNvbXBvbmVudHMgZ2l2ZW4gYW4gYXhpcyBhbmQgYW4gYW5nbGUgaW4gcmFkaWFucy5cbiAgICovXG5cblxuICBzZXRGcm9tQXhpc0FuZ2xlKHZlY3RvciwgYW5nbGUpIHtcbiAgICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUgKiAwLjUpO1xuICAgIHRoaXMueCA9IHZlY3Rvci54ICogcztcbiAgICB0aGlzLnkgPSB2ZWN0b3IueSAqIHM7XG4gICAgdGhpcy56ID0gdmVjdG9yLnogKiBzO1xuICAgIHRoaXMudyA9IE1hdGguY29zKGFuZ2xlICogMC41KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHF1YXRlcm5pb24gdG8gWyBheGlzLCBhbmdsZSBdIHJlcHJlc2VudGF0aW9uLlxuICAgKiBAcGFyYW0gdGFyZ2V0QXhpcyBBIHZlY3RvciBvYmplY3QgdG8gcmV1c2UgZm9yIHN0b3JpbmcgdGhlIGF4aXMuXG4gICAqIEByZXR1cm4gQW4gYXJyYXksIGZpcnN0IGVsZW1lbnQgaXMgdGhlIGF4aXMgYW5kIHRoZSBzZWNvbmQgaXMgdGhlIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAqL1xuXG5cbiAgdG9BeGlzQW5nbGUodGFyZ2V0QXhpcykge1xuICAgIGlmICh0YXJnZXRBeGlzID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldEF4aXMgPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIHRoaXMubm9ybWFsaXplKCk7IC8vIGlmIHc+MSBhY29zIGFuZCBzcXJ0IHdpbGwgcHJvZHVjZSBlcnJvcnMsIHRoaXMgY2FudCBoYXBwZW4gaWYgcXVhdGVybmlvbiBpcyBub3JtYWxpc2VkXG5cbiAgICBjb25zdCBhbmdsZSA9IDIgKiBNYXRoLmFjb3ModGhpcy53KTtcbiAgICBjb25zdCBzID0gTWF0aC5zcXJ0KDEgLSB0aGlzLncgKiB0aGlzLncpOyAvLyBhc3N1bWluZyBxdWF0ZXJuaW9uIG5vcm1hbGlzZWQgdGhlbiB3IGlzIGxlc3MgdGhhbiAxLCBzbyB0ZXJtIGFsd2F5cyBwb3NpdGl2ZS5cblxuICAgIGlmIChzIDwgMC4wMDEpIHtcbiAgICAgIC8vIHRlc3QgdG8gYXZvaWQgZGl2aWRlIGJ5IHplcm8sIHMgaXMgYWx3YXlzIHBvc2l0aXZlIGR1ZSB0byBzcXJ0XG4gICAgICAvLyBpZiBzIGNsb3NlIHRvIHplcm8gdGhlbiBkaXJlY3Rpb24gb2YgYXhpcyBub3QgaW1wb3J0YW50XG4gICAgICB0YXJnZXRBeGlzLnggPSB0aGlzLng7IC8vIGlmIGl0IGlzIGltcG9ydGFudCB0aGF0IGF4aXMgaXMgbm9ybWFsaXNlZCB0aGVuIHJlcGxhY2Ugd2l0aCB4PTE7IHk9ej0wO1xuXG4gICAgICB0YXJnZXRBeGlzLnkgPSB0aGlzLnk7XG4gICAgICB0YXJnZXRBeGlzLnogPSB0aGlzLno7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldEF4aXMueCA9IHRoaXMueCAvIHM7IC8vIG5vcm1hbGlzZSBheGlzXG5cbiAgICAgIHRhcmdldEF4aXMueSA9IHRoaXMueSAvIHM7XG4gICAgICB0YXJnZXRBeGlzLnogPSB0aGlzLnogLyBzO1xuICAgIH1cblxuICAgIHJldHVybiBbdGFyZ2V0QXhpcywgYW5nbGVdO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHF1YXRlcm5pb24gdmFsdWUgZ2l2ZW4gdHdvIHZlY3RvcnMuIFRoZSByZXN1bHRpbmcgcm90YXRpb24gd2lsbCBiZSB0aGUgbmVlZGVkIHJvdGF0aW9uIHRvIHJvdGF0ZSB1IHRvIHYuXG4gICAqL1xuXG5cbiAgc2V0RnJvbVZlY3RvcnModSwgdikge1xuICAgIGlmICh1LmlzQW50aXBhcmFsbGVsVG8odikpIHtcbiAgICAgIGNvbnN0IHQxID0gc2Z2X3QxO1xuICAgICAgY29uc3QgdDIgPSBzZnZfdDI7XG4gICAgICB1LnRhbmdlbnRzKHQxLCB0Mik7XG4gICAgICB0aGlzLnNldEZyb21BeGlzQW5nbGUodDEsIE1hdGguUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhID0gdS5jcm9zcyh2KTtcbiAgICAgIHRoaXMueCA9IGEueDtcbiAgICAgIHRoaXMueSA9IGEueTtcbiAgICAgIHRoaXMueiA9IGEuejtcbiAgICAgIHRoaXMudyA9IE1hdGguc3FydCh1Lmxlbmd0aCgpICoqIDIgKiB2Lmxlbmd0aCgpICoqIDIpICsgdS5kb3Qodik7XG4gICAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGUgcXVhdGVybmlvbiB3aXRoIGFuIG90aGVyIHF1YXRlcm5pb24uXG4gICAqL1xuXG5cbiAgbXVsdChxdWF0LCB0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXggPSB0aGlzLng7XG4gICAgY29uc3QgYXkgPSB0aGlzLnk7XG4gICAgY29uc3QgYXogPSB0aGlzLno7XG4gICAgY29uc3QgYXcgPSB0aGlzLnc7XG4gICAgY29uc3QgYnggPSBxdWF0Lng7XG4gICAgY29uc3QgYnkgPSBxdWF0Lnk7XG4gICAgY29uc3QgYnogPSBxdWF0Lno7XG4gICAgY29uc3QgYncgPSBxdWF0Lnc7XG4gICAgdGFyZ2V0LnggPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIHRhcmdldC55ID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICB0YXJnZXQueiA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gICAgdGFyZ2V0LncgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgaW52ZXJzZSBxdWF0ZXJuaW9uIHJvdGF0aW9uLlxuICAgKi9cblxuXG4gIGludmVyc2UodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgUXVhdGVybmlvbigpO1xuICAgIH1cblxuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgIGNvbnN0IHcgPSB0aGlzLnc7XG4gICAgdGhpcy5jb25qdWdhdGUodGFyZ2V0KTtcbiAgICBjb25zdCBpbm9ybTIgPSAxIC8gKHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgICB0YXJnZXQueCAqPSBpbm9ybTI7XG4gICAgdGFyZ2V0LnkgKj0gaW5vcm0yO1xuICAgIHRhcmdldC56ICo9IGlub3JtMjtcbiAgICB0YXJnZXQudyAqPSBpbm9ybTI7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBxdWF0ZXJuaW9uIGNvbmp1Z2F0ZVxuICAgKi9cblxuXG4gIGNvbmp1Z2F0ZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0LnggPSAtdGhpcy54O1xuICAgIHRhcmdldC55ID0gLXRoaXMueTtcbiAgICB0YXJnZXQueiA9IC10aGlzLno7XG4gICAgdGFyZ2V0LncgPSB0aGlzLnc7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogTm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uLiBOb3RlIHRoYXQgdGhpcyBjaGFuZ2VzIHRoZSB2YWx1ZXMgb2YgdGhlIHF1YXRlcm5pb24uXG4gICAqL1xuXG5cbiAgbm9ybWFsaXplKCkge1xuICAgIGxldCBsID0gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyk7XG5cbiAgICBpZiAobCA9PT0gMCkge1xuICAgICAgdGhpcy54ID0gMDtcbiAgICAgIHRoaXMueSA9IDA7XG4gICAgICB0aGlzLnogPSAwO1xuICAgICAgdGhpcy53ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IDEgLyBsO1xuICAgICAgdGhpcy54ICo9IGw7XG4gICAgICB0aGlzLnkgKj0gbDtcbiAgICAgIHRoaXMueiAqPSBsO1xuICAgICAgdGhpcy53ICo9IGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFwcHJveGltYXRpb24gb2YgcXVhdGVybmlvbiBub3JtYWxpemF0aW9uLiBXb3JrcyBiZXN0IHdoZW4gcXVhdCBpcyBhbHJlYWR5IGFsbW9zdC1ub3JtYWxpemVkLlxuICAgKiBAYXV0aG9yIHVucGhhc2VkLCBodHRwczovL2dpdGh1Yi5jb20vdW5waGFzZWRcbiAgICovXG5cblxuICBub3JtYWxpemVGYXN0KCkge1xuICAgIGNvbnN0IGYgPSAoMy4wIC0gKHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudykpIC8gMi4wO1xuXG4gICAgaWYgKGYgPT09IDApIHtcbiAgICAgIHRoaXMueCA9IDA7XG4gICAgICB0aGlzLnkgPSAwO1xuICAgICAgdGhpcy56ID0gMDtcbiAgICAgIHRoaXMudyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMueCAqPSBmO1xuICAgICAgdGhpcy55ICo9IGY7XG4gICAgICB0aGlzLnogKj0gZjtcbiAgICAgIHRoaXMudyAqPSBmO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGUgcXVhdGVybmlvbiBieSBhIHZlY3RvclxuICAgKi9cblxuXG4gIHZtdWx0KHYsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICBjb25zdCB4ID0gdi54O1xuICAgIGNvbnN0IHkgPSB2Lnk7XG4gICAgY29uc3QgeiA9IHYuejtcbiAgICBjb25zdCBxeCA9IHRoaXMueDtcbiAgICBjb25zdCBxeSA9IHRoaXMueTtcbiAgICBjb25zdCBxeiA9IHRoaXMuejtcbiAgICBjb25zdCBxdyA9IHRoaXMudzsgLy8gcSp2XG5cbiAgICBjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcbiAgICBjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgICBjb25zdCBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgICBjb25zdCBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG4gICAgdGFyZ2V0LnggPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xuICAgIHRhcmdldC55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgICB0YXJnZXQueiA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogQ29waWVzIHZhbHVlIG9mIHNvdXJjZSB0byB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm4gdGhpc1xuICAgKi9cblxuXG4gIGNvcHkocXVhdCkge1xuICAgIHRoaXMueCA9IHF1YXQueDtcbiAgICB0aGlzLnkgPSBxdWF0Lnk7XG4gICAgdGhpcy56ID0gcXVhdC56O1xuICAgIHRoaXMudyA9IHF1YXQudztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0aGUgcXVhdGVybmlvbiB0byBldWxlciBhbmdsZSByZXByZXNlbnRhdGlvbi4gT3JkZXI6IFlaWCwgYXMgdGhpcyBwYWdlIGRlc2NyaWJlczogaHR0cHM6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL3N0YW5kYXJkcy9pbmRleC5odG1cbiAgICogQHBhcmFtIG9yZGVyIFRocmVlLWNoYXJhY3RlciBzdHJpbmcsIGRlZmF1bHRzIHRvIFwiWVpYXCJcbiAgICovXG5cblxuICB0b0V1bGVyKHRhcmdldCwgb3JkZXIpIHtcbiAgICBpZiAob3JkZXIgPT09IHZvaWQgMCkge1xuICAgICAgb3JkZXIgPSAnWVpYJztcbiAgICB9XG5cbiAgICBsZXQgaGVhZGluZztcbiAgICBsZXQgYXR0aXR1ZGU7XG4gICAgbGV0IGJhbms7XG4gICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgY29uc3QgdyA9IHRoaXMudztcblxuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICAgIGNhc2UgJ1laWCc6XG4gICAgICAgIGNvbnN0IHRlc3QgPSB4ICogeSArIHogKiB3O1xuXG4gICAgICAgIGlmICh0ZXN0ID4gMC40OTkpIHtcbiAgICAgICAgICAvLyBzaW5ndWxhcml0eSBhdCBub3J0aCBwb2xlXG4gICAgICAgICAgaGVhZGluZyA9IDIgKiBNYXRoLmF0YW4yKHgsIHcpO1xuICAgICAgICAgIGF0dGl0dWRlID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgYmFuayA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGVzdCA8IC0wLjQ5OSkge1xuICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IHNvdXRoIHBvbGVcbiAgICAgICAgICBoZWFkaW5nID0gLTIgKiBNYXRoLmF0YW4yKHgsIHcpO1xuICAgICAgICAgIGF0dGl0dWRlID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgIGJhbmsgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlYWRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IHNxeCA9IHggKiB4O1xuICAgICAgICAgIGNvbnN0IHNxeSA9IHkgKiB5O1xuICAgICAgICAgIGNvbnN0IHNxeiA9IHogKiB6O1xuICAgICAgICAgIGhlYWRpbmcgPSBNYXRoLmF0YW4yKDIgKiB5ICogdyAtIDIgKiB4ICogeiwgMSAtIDIgKiBzcXkgLSAyICogc3F6KTsgLy8gSGVhZGluZ1xuXG4gICAgICAgICAgYXR0aXR1ZGUgPSBNYXRoLmFzaW4oMiAqIHRlc3QpOyAvLyBhdHRpdHVkZVxuXG4gICAgICAgICAgYmFuayA9IE1hdGguYXRhbjIoMiAqIHggKiB3IC0gMiAqIHkgKiB6LCAxIC0gMiAqIHNxeCAtIDIgKiBzcXopOyAvLyBiYW5rXG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFdWxlciBvcmRlciAke29yZGVyfSBub3Qgc3VwcG9ydGVkIHlldC5gKTtcbiAgICB9XG5cbiAgICB0YXJnZXQueSA9IGhlYWRpbmc7XG4gICAgdGFyZ2V0LnogPSBhdHRpdHVkZTtcbiAgICB0YXJnZXQueCA9IGJhbms7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgcXVhdGVybmlvbiBjb21wb25lbnRzIGdpdmVuIEV1bGVyIGFuZ2xlIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gb3JkZXIgVGhlIG9yZGVyIHRvIGFwcGx5IGFuZ2xlczogJ1hZWicgb3IgJ1lYWicgb3IgYW55IG90aGVyIGNvbWJpbmF0aW9uLlxuICAgKlxuICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvMjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMgTWF0aFdvcmtzfSByZWZlcmVuY2VcbiAgICovXG5cblxuICBzZXRGcm9tRXVsZXIoeCwgeSwgeiwgb3JkZXIpIHtcbiAgICBpZiAob3JkZXIgPT09IHZvaWQgMCkge1xuICAgICAgb3JkZXIgPSAnWFlaJztcbiAgICB9XG5cbiAgICBjb25zdCBjMSA9IE1hdGguY29zKHggLyAyKTtcbiAgICBjb25zdCBjMiA9IE1hdGguY29zKHkgLyAyKTtcbiAgICBjb25zdCBjMyA9IE1hdGguY29zKHogLyAyKTtcbiAgICBjb25zdCBzMSA9IE1hdGguc2luKHggLyAyKTtcbiAgICBjb25zdCBzMiA9IE1hdGguc2luKHkgLyAyKTtcbiAgICBjb25zdCBzMyA9IE1hdGguc2luKHogLyAyKTtcblxuICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcbiAgICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcbiAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcbiAgICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcbiAgICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG4gICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG4gICAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcbiAgICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcbiAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcbiAgICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcbiAgICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuICAgICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG4gICAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxuICAgKlxuICAgKiBAcGFyYW0gdG9RdWF0IHNlY29uZCBvcGVyYW5kXG4gICAqIEBwYXJhbSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHNlbGYgcXVhdGVybmlvbiBhbmQgdG9RdWF0XG4gICAqIEBwYXJhbSB0YXJnZXQgQSBxdWF0ZXJuaW9uIHRvIHN0b3JlIHRoZSByZXN1bHQgaW4uIElmIG5vdCBwcm92aWRlZCwgYSBuZXcgb25lIHdpbGwgYmUgY3JlYXRlZC5cbiAgICogQHJldHVybnMge1F1YXRlcm5pb259IFRoZSBcInRhcmdldFwiIG9iamVjdFxuICAgKi9cblxuXG4gIHNsZXJwKHRvUXVhdCwgdCwgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSBuZXcgUXVhdGVybmlvbigpO1xuICAgIH1cblxuICAgIGNvbnN0IGF4ID0gdGhpcy54O1xuICAgIGNvbnN0IGF5ID0gdGhpcy55O1xuICAgIGNvbnN0IGF6ID0gdGhpcy56O1xuICAgIGNvbnN0IGF3ID0gdGhpcy53O1xuICAgIGxldCBieCA9IHRvUXVhdC54O1xuICAgIGxldCBieSA9IHRvUXVhdC55O1xuICAgIGxldCBieiA9IHRvUXVhdC56O1xuICAgIGxldCBidyA9IHRvUXVhdC53O1xuICAgIGxldCBvbWVnYTtcbiAgICBsZXQgY29zb207XG4gICAgbGV0IHNpbm9tO1xuICAgIGxldCBzY2FsZTA7XG4gICAgbGV0IHNjYWxlMTsgLy8gY2FsYyBjb3NpbmVcblxuICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidzsgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG5cbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgYnggPSAtYng7XG4gICAgICBieSA9IC1ieTtcbiAgICAgIGJ6ID0gLWJ6O1xuICAgICAgYncgPSAtYnc7XG4gICAgfSAvLyBjYWxjdWxhdGUgY29lZmZpY2llbnRzXG5cblxuICAgIGlmICgxLjAgLSBjb3NvbSA+IDAuMDAwMDAxKSB7XG4gICAgICAvLyBzdGFuZGFyZCBjYXNlIChzbGVycClcbiAgICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XG4gICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICBzY2FsZTEgPSB0O1xuICAgIH0gLy8gY2FsY3VsYXRlIGZpbmFsIHZhbHVlc1xuXG5cbiAgICB0YXJnZXQueCA9IHNjYWxlMCAqIGF4ICsgc2NhbGUxICogYng7XG4gICAgdGFyZ2V0LnkgPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIHRhcmdldC56ID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgICB0YXJnZXQudyA9IHNjYWxlMCAqIGF3ICsgc2NhbGUxICogYnc7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogUm90YXRlIGFuIGFic29sdXRlIG9yaWVudGF0aW9uIHF1YXRlcm5pb24gZ2l2ZW4gYW4gYW5ndWxhciB2ZWxvY2l0eSBhbmQgYSB0aW1lIHN0ZXAuXG4gICAqL1xuXG5cbiAgaW50ZWdyYXRlKGFuZ3VsYXJWZWxvY2l0eSwgZHQsIGFuZ3VsYXJGYWN0b3IsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICB9XG5cbiAgICBjb25zdCBheCA9IGFuZ3VsYXJWZWxvY2l0eS54ICogYW5ndWxhckZhY3Rvci54LFxuICAgICAgICAgIGF5ID0gYW5ndWxhclZlbG9jaXR5LnkgKiBhbmd1bGFyRmFjdG9yLnksXG4gICAgICAgICAgYXogPSBhbmd1bGFyVmVsb2NpdHkueiAqIGFuZ3VsYXJGYWN0b3IueixcbiAgICAgICAgICBieCA9IHRoaXMueCxcbiAgICAgICAgICBieSA9IHRoaXMueSxcbiAgICAgICAgICBieiA9IHRoaXMueixcbiAgICAgICAgICBidyA9IHRoaXMudztcbiAgICBjb25zdCBoYWxmX2R0ID0gZHQgKiAwLjU7XG4gICAgdGFyZ2V0LnggKz0gaGFsZl9kdCAqIChheCAqIGJ3ICsgYXkgKiBieiAtIGF6ICogYnkpO1xuICAgIHRhcmdldC55ICs9IGhhbGZfZHQgKiAoYXkgKiBidyArIGF6ICogYnggLSBheCAqIGJ6KTtcbiAgICB0YXJnZXQueiArPSBoYWxmX2R0ICogKGF6ICogYncgKyBheCAqIGJ5IC0gYXkgKiBieCk7XG4gICAgdGFyZ2V0LncgKz0gaGFsZl9kdCAqICgtYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbn1cbmNvbnN0IHNmdl90MSA9IG5ldyBWZWMzKCk7XG5jb25zdCBzZnZfdDIgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgc2hhcGUgdHlwZXMuXG4gKi9cbmNvbnN0IFNIQVBFX1RZUEVTID0ge1xuICAvKiogU1BIRVJFICovXG4gIFNQSEVSRTogMSxcblxuICAvKiogUExBTkUgKi9cbiAgUExBTkU6IDIsXG5cbiAgLyoqIEJPWCAqL1xuICBCT1g6IDQsXG5cbiAgLyoqIENPTVBPVU5EICovXG4gIENPTVBPVU5EOiA4LFxuXG4gIC8qKiBDT05WRVhQT0xZSEVEUk9OICovXG4gIENPTlZFWFBPTFlIRURST046IDE2LFxuXG4gIC8qKiBIRUlHSFRGSUVMRCAqL1xuICBIRUlHSFRGSUVMRDogMzIsXG5cbiAgLyoqIFBBUlRJQ0xFICovXG4gIFBBUlRJQ0xFOiA2NCxcblxuICAvKiogQ1lMSU5ERVIgKi9cbiAgQ1lMSU5ERVI6IDEyOCxcblxuICAvKiogVFJJTUVTSCAqL1xuICBUUklNRVNIOiAyNTZcbn07XG4vKipcbiAqIFNoYXBlVHlwZVxuICovXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3Igc2hhcGVzXG4gKi9cbmNsYXNzIFNoYXBlIHtcbiAgLyoqXG4gICAqIElkZW50aWZpZXIgb2YgdGhlIFNoYXBlLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhpcyBzaGFwZS4gTXVzdCBiZSBzZXQgdG8gYW4gaW50ID4gMCBieSBzdWJjbGFzc2VzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGxvY2FsIGJvdW5kaW5nIHNwaGVyZSByYWRpdXMgb2YgdGhpcyBzaGFwZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcHJvZHVjZSBjb250YWN0IGZvcmNlcyB3aGVuIGluIGNvbnRhY3Qgd2l0aCBvdGhlciBib2RpZXMuIE5vdGUgdGhhdCBjb250YWN0cyB3aWxsIGJlIGdlbmVyYXRlZCwgYnV0IHRoZXkgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cblxuICAvKipcbiAgICogQGRlZmF1bHQgMVxuICAgKi9cblxuICAvKipcbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIG1hdGVyaWFsIG9mIHRoZSBzaGFwZSB0aGF0IHJlZ3VsYXRlcyBjb250YWN0IHByb3BlcnRpZXMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgYm9keSB0byB3aGljaCB0aGUgc2hhcGUgaXMgYWRkZWQgdG8uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbGwgdGhlIFNoYXBlIHR5cGVzLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLmlkID0gU2hhcGUuaWRDb3VudGVyKys7XG4gICAgdGhpcy50eXBlID0gb3B0aW9ucy50eXBlIHx8IDA7XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IDA7XG4gICAgdGhpcy5jb2xsaXNpb25SZXNwb25zZSA9IG9wdGlvbnMuY29sbGlzaW9uUmVzcG9uc2UgPyBvcHRpb25zLmNvbGxpc2lvblJlc3BvbnNlIDogdHJ1ZTtcbiAgICB0aGlzLmNvbGxpc2lvbkZpbHRlckdyb3VwID0gb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJHcm91cCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJHcm91cCA6IDE7XG4gICAgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrID0gb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJNYXNrICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlck1hc2sgOiAtMTtcbiAgICB0aGlzLm1hdGVyaWFsID0gb3B0aW9ucy5tYXRlcmlhbCA/IG9wdGlvbnMubWF0ZXJpYWwgOiBudWxsO1xuICAgIHRoaXMuYm9keSA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBib3VuZGluZyBzcGhlcmUgcmFkaXVzLlxuICAgKiBUaGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB0aGUgcHJvcGVydHkgYC5ib3VuZGluZ1NwaGVyZVJhZGl1c2BcbiAgICovXG5cblxuICB1cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpIHtcbiAgICB0aHJvdyBgY29tcHV0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCkgbm90IGltcGxlbWVudGVkIGZvciBzaGFwZSB0eXBlICR7dGhpcy50eXBlfWA7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdm9sdW1lIG9mIHRoaXMgc2hhcGVcbiAgICovXG5cblxuICB2b2x1bWUoKSB7XG4gICAgdGhyb3cgYHZvbHVtZSgpIG5vdCBpbXBsZW1lbnRlZCBmb3Igc2hhcGUgdHlwZSAke3RoaXMudHlwZX1gO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBpbmVydGlhIGluIHRoZSBsb2NhbCBmcmFtZSBmb3IgdGhpcyBzaGFwZS5cbiAgICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfbW9tZW50c19vZl9pbmVydGlhXG4gICAqL1xuXG5cbiAgY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIHRhcmdldCkge1xuICAgIHRocm93IGBjYWxjdWxhdGVMb2NhbEluZXJ0aWEoKSBub3QgaW1wbGVtZW50ZWQgZm9yIHNoYXBlIHR5cGUgJHt0aGlzLnR5cGV9YDtcbiAgfVxuICAvKipcbiAgICogQHRvZG8gdXNlIGFic3RyYWN0IGZvciB0aGVzZSBraW5kIG9mIG1ldGhvZHNcbiAgICovXG5cblxuICBjYWxjdWxhdGVXb3JsZEFBQkIocG9zLCBxdWF0LCBtaW4sIG1heCkge1xuICAgIHRocm93IGBjYWxjdWxhdGVXb3JsZEFBQkIoKSBub3QgaW1wbGVtZW50ZWQgZm9yIHNoYXBlIHR5cGUgJHt0aGlzLnR5cGV9YDtcbiAgfVxuXG59XG5TaGFwZS5pZENvdW50ZXIgPSAwO1xuU2hhcGUudHlwZXMgPSBTSEFQRV9UWVBFUztcblxuLyoqXG4gKiBUcmFuc2Zvcm1hdGlvbiB1dGlsaXRpZXMuXG4gKi9cbmNsYXNzIFRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKiBwb3NpdGlvblxuICAgKi9cblxuICAvKipcbiAgICogcXVhdGVybmlvblxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlYzMoKTtcbiAgICB0aGlzLnF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG4gICAgaWYgKG9wdGlvbnMucG9zaXRpb24pIHtcbiAgICAgIHRoaXMucG9zaXRpb24uY29weShvcHRpb25zLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5xdWF0ZXJuaW9uKSB7XG4gICAgICB0aGlzLnF1YXRlcm5pb24uY29weShvcHRpb25zLnF1YXRlcm5pb24pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IGEgZ2xvYmFsIHBvaW50IGluIGxvY2FsIHRyYW5zZm9ybSBjb29yZGluYXRlcy5cbiAgICovXG5cblxuICBwb2ludFRvTG9jYWwod29ybGRQb2ludCwgcmVzdWx0KSB7XG4gICAgcmV0dXJuIFRyYW5zZm9ybS5wb2ludFRvTG9jYWxGcmFtZSh0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHdvcmxkUG9pbnQsIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIGxvY2FsIHBvaW50IGluIGdsb2JhbCB0cmFuc2Zvcm0gY29vcmRpbmF0ZXMuXG4gICAqL1xuXG5cbiAgcG9pbnRUb1dvcmxkKGxvY2FsUG9pbnQsIHJlc3VsdCkge1xuICAgIHJldHVybiBUcmFuc2Zvcm0ucG9pbnRUb1dvcmxkRnJhbWUodGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCBsb2NhbFBvaW50LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiB2ZWN0b3JUb1dvcmxkRnJhbWVcbiAgICovXG5cblxuICB2ZWN0b3JUb1dvcmxkRnJhbWUobG9jYWxWZWN0b3IsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnF1YXRlcm5pb24udm11bHQobG9jYWxWZWN0b3IsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogcG9pbnRUb0xvY2FsRnJhbWVcbiAgICovXG5cblxuICBzdGF0aWMgcG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXRlcm5pb24sIHdvcmxkUG9pbnQsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICB3b3JsZFBvaW50LnZzdWIocG9zaXRpb24sIHJlc3VsdCk7XG4gICAgcXVhdGVybmlvbi5jb25qdWdhdGUodG1wUXVhdCQxKTtcbiAgICB0bXBRdWF0JDEudm11bHQocmVzdWx0LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIHBvaW50VG9Xb3JsZEZyYW1lXG4gICAqL1xuXG5cbiAgc3RhdGljIHBvaW50VG9Xb3JsZEZyYW1lKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBsb2NhbFBvaW50LCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBWZWMzKCk7XG4gICAgfVxuXG4gICAgcXVhdGVybmlvbi52bXVsdChsb2NhbFBvaW50LCByZXN1bHQpO1xuICAgIHJlc3VsdC52YWRkKHBvc2l0aW9uLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIHZlY3RvclRvV29ybGRGcmFtZVxuICAgKi9cblxuXG4gIHN0YXRpYyB2ZWN0b3JUb1dvcmxkRnJhbWUocXVhdGVybmlvbiwgbG9jYWxWZWN0b3IsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFZlYzMoKTtcbiAgICB9XG5cbiAgICBxdWF0ZXJuaW9uLnZtdWx0KGxvY2FsVmVjdG9yLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIHZlY3RvclRvTG9jYWxGcmFtZVxuICAgKi9cblxuXG4gIHN0YXRpYyB2ZWN0b3JUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXRlcm5pb24sIHdvcmxkVmVjdG9yLCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBWZWMzKCk7XG4gICAgfVxuXG4gICAgcXVhdGVybmlvbi53ICo9IC0xO1xuICAgIHF1YXRlcm5pb24udm11bHQod29ybGRWZWN0b3IsIHJlc3VsdCk7XG4gICAgcXVhdGVybmlvbi53ICo9IC0xO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufVxuY29uc3QgdG1wUXVhdCQxID0gbmV3IFF1YXRlcm5pb24oKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5bbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKV07XG5uZXcgVmVjMygpO1xubmV3IFF1YXRlcm5pb24oKTtcbm5ldyBBQUJCKCk7XG5uZXcgTWF0MygpO1xubmV3IE1hdDMoKTtcbm5ldyBNYXQzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcblxubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgUXVhdGVybmlvbigpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcblxuLyoqXG4gKiBTdG9yYWdlIGZvciBSYXkgY2FzdGluZyBkYXRhXG4gKi9cbmNsYXNzIFJheWNhc3RSZXN1bHQge1xuICAvKipcbiAgICogcmF5RnJvbVdvcmxkXG4gICAqL1xuXG4gIC8qKlxuICAgKiByYXlUb1dvcmxkXG4gICAqL1xuXG4gIC8qKlxuICAgKiBoaXROb3JtYWxXb3JsZFxuICAgKi9cblxuICAvKipcbiAgICogaGl0UG9pbnRXb3JsZFxuICAgKi9cblxuICAvKipcbiAgICogaGFzSGl0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBzaGFwZVxuICAgKi9cblxuICAvKipcbiAgICogYm9keVxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBoaXQgdHJpYW5nbGUsIGlmIHRoZSBoaXQgc2hhcGUgd2FzIGEgdHJpbWVzaFxuICAgKi9cblxuICAvKipcbiAgICogRGlzdGFuY2UgdG8gdGhlIGhpdC4gV2lsbCBiZSBzZXQgdG8gLTEgaWYgdGhlcmUgd2FzIG5vIGhpdFxuICAgKi9cblxuICAvKipcbiAgICogSWYgdGhlIHJheSBzaG91bGQgc3RvcCB0cmF2ZXJzaW5nIHRoZSBib2RpZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmF5RnJvbVdvcmxkID0gbmV3IFZlYzMoKTtcbiAgICB0aGlzLnJheVRvV29ybGQgPSBuZXcgVmVjMygpO1xuICAgIHRoaXMuaGl0Tm9ybWFsV29ybGQgPSBuZXcgVmVjMygpO1xuICAgIHRoaXMuaGl0UG9pbnRXb3JsZCA9IG5ldyBWZWMzKCk7XG4gICAgdGhpcy5oYXNIaXQgPSBmYWxzZTtcbiAgICB0aGlzLnNoYXBlID0gbnVsbDtcbiAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgIHRoaXMuaGl0RmFjZUluZGV4ID0gLTE7XG4gICAgdGhpcy5kaXN0YW5jZSA9IC0xO1xuICAgIHRoaXMuc2hvdWxkU3RvcCA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCBhbGwgcmVzdWx0IGRhdGEuXG4gICAqL1xuXG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yYXlGcm9tV29ybGQuc2V0WmVybygpO1xuICAgIHRoaXMucmF5VG9Xb3JsZC5zZXRaZXJvKCk7XG4gICAgdGhpcy5oaXROb3JtYWxXb3JsZC5zZXRaZXJvKCk7XG4gICAgdGhpcy5oaXRQb2ludFdvcmxkLnNldFplcm8oKTtcbiAgICB0aGlzLmhhc0hpdCA9IGZhbHNlO1xuICAgIHRoaXMuc2hhcGUgPSBudWxsO1xuICAgIHRoaXMuYm9keSA9IG51bGw7XG4gICAgdGhpcy5oaXRGYWNlSW5kZXggPSAtMTtcbiAgICB0aGlzLmRpc3RhbmNlID0gLTE7XG4gICAgdGhpcy5zaG91bGRTdG9wID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIGFib3J0XG4gICAqL1xuXG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5zaG91bGRTdG9wID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogU2V0IHJlc3VsdCBkYXRhLlxuICAgKi9cblxuXG4gIHNldChyYXlGcm9tV29ybGQsIHJheVRvV29ybGQsIGhpdE5vcm1hbFdvcmxkLCBoaXRQb2ludFdvcmxkLCBzaGFwZSwgYm9keSwgZGlzdGFuY2UpIHtcbiAgICB0aGlzLnJheUZyb21Xb3JsZC5jb3B5KHJheUZyb21Xb3JsZCk7XG4gICAgdGhpcy5yYXlUb1dvcmxkLmNvcHkocmF5VG9Xb3JsZCk7XG4gICAgdGhpcy5oaXROb3JtYWxXb3JsZC5jb3B5KGhpdE5vcm1hbFdvcmxkKTtcbiAgICB0aGlzLmhpdFBvaW50V29ybGQuY29weShoaXRQb2ludFdvcmxkKTtcbiAgICB0aGlzLnNoYXBlID0gc2hhcGU7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gIH1cblxufVxuXG5sZXQgX1NoYXBlJHR5cGVzJFNQSEVSRSwgX1NoYXBlJHR5cGVzJFBMQU5FLCBfU2hhcGUkdHlwZXMkQk9YLCBfU2hhcGUkdHlwZXMkQ1lMSU5ERVIsIF9TaGFwZSR0eXBlcyRDT05WRVhQTywgX1NoYXBlJHR5cGVzJEhFSUdIVEZJLCBfU2hhcGUkdHlwZXMkVFJJTUVTSDtcblxuLyoqXG4gKiBSQVlfTU9ERVNcbiAqL1xuY29uc3QgUkFZX01PREVTID0ge1xuICAvKiogQ0xPU0VTVCAqL1xuICBDTE9TRVNUOiAxLFxuXG4gIC8qKiBBTlkgKi9cbiAgQU5ZOiAyLFxuXG4gIC8qKiBBTEwgKi9cbiAgQUxMOiA0XG59O1xuLyoqXG4gKiBSYXlNb2RlXG4gKi9cblxuX1NoYXBlJHR5cGVzJFNQSEVSRSA9IFNoYXBlLnR5cGVzLlNQSEVSRTtcbl9TaGFwZSR0eXBlcyRQTEFORSA9IFNoYXBlLnR5cGVzLlBMQU5FO1xuX1NoYXBlJHR5cGVzJEJPWCA9IFNoYXBlLnR5cGVzLkJPWDtcbl9TaGFwZSR0eXBlcyRDWUxJTkRFUiA9IFNoYXBlLnR5cGVzLkNZTElOREVSO1xuX1NoYXBlJHR5cGVzJENPTlZFWFBPID0gU2hhcGUudHlwZXMuQ09OVkVYUE9MWUhFRFJPTjtcbl9TaGFwZSR0eXBlcyRIRUlHSFRGSSA9IFNoYXBlLnR5cGVzLkhFSUdIVEZJRUxEO1xuX1NoYXBlJHR5cGVzJFRSSU1FU0ggPSBTaGFwZS50eXBlcy5UUklNRVNIO1xuXG4vKipcbiAqIEEgbGluZSBpbiAzRCBzcGFjZSB0aGF0IGludGVyc2VjdHMgYm9kaWVzIGFuZCByZXR1cm4gcG9pbnRzLlxuICovXG5jbGFzcyBSYXkge1xuICAvKipcbiAgICogZnJvbVxuICAgKi9cblxuICAvKipcbiAgICogdG9cbiAgICovXG5cbiAgLyoqXG4gICAqIGRpcmVjdGlvblxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHByZWNpc2lvbiBvZiB0aGUgcmF5LiBVc2VkIHdoZW4gY2hlY2tpbmcgcGFyYWxsZWxpdHkgZXRjLlxuICAgKiBAZGVmYXVsdCAwLjAwMDFcbiAgICovXG5cbiAgLyoqXG4gICAqIFNldCB0byBgZmFsc2VgIGlmIHlvdSBkb24ndCB3YW50IHRoZSBSYXkgdG8gdGFrZSBgY29sbGlzaW9uUmVzcG9uc2VgIGZsYWdzIGludG8gYWNjb3VudCBvbiBib2RpZXMgYW5kIHNoYXBlcy5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cblxuICAvKipcbiAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHJheSBza2lwcyBhbnkgaGl0cyB3aXRoIG5vcm1hbC5kb3QocmF5RGlyZWN0aW9uKSA8IDAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBjb2xsaXNpb25GaWx0ZXJNYXNrXG4gICAqIEBkZWZhdWx0IC0xXG4gICAqL1xuXG4gIC8qKlxuICAgKiBjb2xsaXNpb25GaWx0ZXJHcm91cFxuICAgKiBAZGVmYXVsdCAtMVxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGludGVyc2VjdGlvbiBtb2RlLiBTaG91bGQgYmUgUmF5LkFOWSwgUmF5LkFMTCBvciBSYXkuQ0xPU0VTVC5cbiAgICogQGRlZmF1bHQgUkFZLkFOWVxuICAgKi9cblxuICAvKipcbiAgICogQ3VycmVudCByZXN1bHQgb2JqZWN0LlxuICAgKi9cblxuICAvKipcbiAgICogV2lsbCBiZSBzZXQgdG8gYHRydWVgIGR1cmluZyBpbnRlcnNlY3RXb3JsZCgpIGlmIHRoZSByYXkgaGl0IGFueXRoaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogVXNlci1wcm92aWRlZCByZXN1bHQgY2FsbGJhY2suIFdpbGwgYmUgdXNlZCBpZiBtb2RlIGlzIFJheS5BTEwuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDTE9TRVNUXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBTllcbiAgICovXG5cbiAgLyoqXG4gICAqIEFMTFxuICAgKi9cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkU1BIRVJFXSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJzZWN0U3BoZXJlO1xuICB9XG5cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkUExBTkVdKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnNlY3RQbGFuZTtcbiAgfVxuXG4gIGdldCBbX1NoYXBlJHR5cGVzJEJPWF0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdEJveDtcbiAgfVxuXG4gIGdldCBbX1NoYXBlJHR5cGVzJENZTElOREVSXSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJzZWN0Q29udmV4O1xuICB9XG5cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkQ09OVkVYUE9dKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnNlY3RDb252ZXg7XG4gIH1cblxuICBnZXQgW19TaGFwZSR0eXBlcyRIRUlHSFRGSV0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdEhlaWdodGZpZWxkO1xuICB9XG5cbiAgZ2V0IFtfU2hhcGUkdHlwZXMkVFJJTUVTSF0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdFRyaW1lc2g7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihmcm9tLCB0bykge1xuICAgIGlmIChmcm9tID09PSB2b2lkIDApIHtcbiAgICAgIGZyb20gPSBuZXcgVmVjMygpO1xuICAgIH1cblxuICAgIGlmICh0byA9PT0gdm9pZCAwKSB7XG4gICAgICB0byA9IG5ldyBWZWMzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5mcm9tID0gZnJvbS5jbG9uZSgpO1xuICAgIHRoaXMudG8gPSB0by5jbG9uZSgpO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gbmV3IFZlYzMoKTtcbiAgICB0aGlzLnByZWNpc2lvbiA9IDAuMDAwMTtcbiAgICB0aGlzLmNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgPSB0cnVlO1xuICAgIHRoaXMuc2tpcEJhY2tmYWNlcyA9IGZhbHNlO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyTWFzayA9IC0xO1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgPSAtMTtcbiAgICB0aGlzLm1vZGUgPSBSYXkuQU5ZO1xuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJheWNhc3RSZXN1bHQoKTtcbiAgICB0aGlzLmhhc0hpdCA9IGZhbHNlO1xuXG4gICAgdGhpcy5jYWxsYmFjayA9IHJlc3VsdCA9PiB7fTtcbiAgfVxuICAvKipcbiAgICogRG8gaXRlcnNlY3Rpb24gYWdhaW5zdCBhbGwgYm9kaWVzIGluIHRoZSBnaXZlbiBXb3JsZC5cbiAgICogQHJldHVybiBUcnVlIGlmIHRoZSByYXkgaGl0IGFueXRoaW5nLCBvdGhlcndpc2UgZmFsc2UuXG4gICAqL1xuXG5cbiAgaW50ZXJzZWN0V29ybGQod29ybGQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgUmF5LkFOWTtcbiAgICB0aGlzLnJlc3VsdCA9IG9wdGlvbnMucmVzdWx0IHx8IG5ldyBSYXljYXN0UmVzdWx0KCk7XG4gICAgdGhpcy5za2lwQmFja2ZhY2VzID0gISFvcHRpb25zLnNraXBCYWNrZmFjZXM7XG4gICAgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrID0gdHlwZW9mIG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzayAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlck1hc2sgOiAtMTtcbiAgICB0aGlzLmNvbGxpc2lvbkZpbHRlckdyb3VwID0gdHlwZW9mIG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyR3JvdXAgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJHcm91cCA6IC0xO1xuICAgIHRoaXMuY2hlY2tDb2xsaXNpb25SZXNwb25zZSA9IHR5cGVvZiBvcHRpb25zLmNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5jaGVja0NvbGxpc2lvblJlc3BvbnNlIDogdHJ1ZTtcblxuICAgIGlmIChvcHRpb25zLmZyb20pIHtcbiAgICAgIHRoaXMuZnJvbS5jb3B5KG9wdGlvbnMuZnJvbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudG8pIHtcbiAgICAgIHRoaXMudG8uY29weShvcHRpb25zLnRvKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxiYWNrID0gb3B0aW9ucy5jYWxsYmFjayB8fCAoKCkgPT4ge30pO1xuXG4gICAgdGhpcy5oYXNIaXQgPSBmYWxzZTtcbiAgICB0aGlzLnJlc3VsdC5yZXNldCgpO1xuICAgIHRoaXMudXBkYXRlRGlyZWN0aW9uKCk7XG4gICAgdGhpcy5nZXRBQUJCKHRtcEFBQkIkMSk7XG4gICAgdG1wQXJyYXkubGVuZ3RoID0gMDtcbiAgICB3b3JsZC5icm9hZHBoYXNlLmFhYmJRdWVyeSh3b3JsZCwgdG1wQUFCQiQxLCB0bXBBcnJheSk7XG4gICAgdGhpcy5pbnRlcnNlY3RCb2RpZXModG1wQXJyYXkpO1xuICAgIHJldHVybiB0aGlzLmhhc0hpdDtcbiAgfVxuICAvKipcbiAgICogU2hvb3QgYSByYXkgYXQgYSBib2R5LCBnZXQgYmFjayBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaGl0LlxuICAgKiBAZGVwcmVjYXRlZCBAcGFyYW0gcmVzdWx0IHNldCB0aGUgcmVzdWx0IHByb3BlcnR5IG9mIHRoZSBSYXkgaW5zdGVhZC5cbiAgICovXG5cblxuICBpbnRlcnNlY3RCb2R5KGJvZHksIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgdGhpcy51cGRhdGVEaXJlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja0NvbGxpc2lvblJlc3BvbnNlID0gdGhpcy5jaGVja0NvbGxpc2lvblJlc3BvbnNlO1xuXG4gICAgaWYgKGNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgJiYgIWJvZHkuY29sbGlzaW9uUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMuY29sbGlzaW9uRmlsdGVyR3JvdXAgJiBib2R5LmNvbGxpc2lvbkZpbHRlck1hc2spID09PSAwIHx8IChib2R5LmNvbGxpc2lvbkZpbHRlckdyb3VwICYgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrKSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHhpID0gaW50ZXJzZWN0Qm9keV94aTtcbiAgICBjb25zdCBxaSA9IGludGVyc2VjdEJvZHlfcWk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgTiA9IGJvZHkuc2hhcGVzLmxlbmd0aDsgaSA8IE47IGkrKykge1xuICAgICAgY29uc3Qgc2hhcGUgPSBib2R5LnNoYXBlc1tpXTtcblxuICAgICAgaWYgKGNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgJiYgIXNoYXBlLmNvbGxpc2lvblJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnRpbnVlOyAvLyBTa2lwXG4gICAgICB9XG5cbiAgICAgIGJvZHkucXVhdGVybmlvbi5tdWx0KGJvZHkuc2hhcGVPcmllbnRhdGlvbnNbaV0sIHFpKTtcbiAgICAgIGJvZHkucXVhdGVybmlvbi52bXVsdChib2R5LnNoYXBlT2Zmc2V0c1tpXSwgeGkpO1xuICAgICAgeGkudmFkZChib2R5LnBvc2l0aW9uLCB4aSk7XG4gICAgICB0aGlzLmludGVyc2VjdFNoYXBlKHNoYXBlLCBxaSwgeGksIGJvZHkpO1xuXG4gICAgICBpZiAodGhpcy5yZXN1bHQuc2hvdWxkU3RvcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNob290IGEgcmF5IGF0IGFuIGFycmF5IGJvZGllcywgZ2V0IGJhY2sgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGhpdC5cbiAgICogQHBhcmFtIGJvZGllcyBBbiBhcnJheSBvZiBCb2R5IG9iamVjdHMuXG4gICAqIEBkZXByZWNhdGVkIEBwYXJhbSByZXN1bHQgc2V0IHRoZSByZXN1bHQgcHJvcGVydHkgb2YgdGhlIFJheSBpbnN0ZWFkLlxuICAgKlxuICAgKi9cblxuXG4gIGludGVyc2VjdEJvZGllcyhib2RpZXMsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgdGhpcy51cGRhdGVEaXJlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGJvZGllcy5sZW5ndGg7ICF0aGlzLnJlc3VsdC5zaG91bGRTdG9wICYmIGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMuaW50ZXJzZWN0Qm9keShib2RpZXNbaV0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZGlyZWN0aW9uIHZlY3Rvci5cbiAgICovXG5cblxuICB1cGRhdGVEaXJlY3Rpb24oKSB7XG4gICAgdGhpcy50by52c3ViKHRoaXMuZnJvbSwgdGhpcy5kaXJlY3Rpb24pO1xuICAgIHRoaXMuZGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgaW50ZXJzZWN0U2hhcGUoc2hhcGUsIHF1YXQsIHBvc2l0aW9uLCBib2R5KSB7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZnJvbTsgLy8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmVcblxuICAgIGNvbnN0IGRpc3RhbmNlID0gZGlzdGFuY2VGcm9tSW50ZXJzZWN0aW9uKGZyb20sIHRoaXMuZGlyZWN0aW9uLCBwb3NpdGlvbik7XG5cbiAgICBpZiAoZGlzdGFuY2UgPiBzaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGludGVyc2VjdE1ldGhvZCA9IHRoaXNbc2hhcGUudHlwZV07XG5cbiAgICBpZiAoaW50ZXJzZWN0TWV0aG9kKSB7XG4gICAgICBpbnRlcnNlY3RNZXRob2QuY2FsbCh0aGlzLCBzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHNoYXBlKTtcbiAgICB9XG4gIH1cblxuICBfaW50ZXJzZWN0Qm94KGJveCwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHJlcG9ydGVkU2hhcGUpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJzZWN0Q29udmV4KGJveC5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24sIHF1YXQsIHBvc2l0aW9uLCBib2R5LCByZXBvcnRlZFNoYXBlKTtcbiAgfVxuXG4gIF9pbnRlcnNlY3RQbGFuZShzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHJlcG9ydGVkU2hhcGUpIHtcbiAgICBjb25zdCBmcm9tID0gdGhpcy5mcm9tO1xuICAgIGNvbnN0IHRvID0gdGhpcy50bztcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjsgLy8gR2V0IHBsYW5lIG5vcm1hbFxuXG4gICAgY29uc3Qgd29ybGROb3JtYWwgPSBuZXcgVmVjMygwLCAwLCAxKTtcbiAgICBxdWF0LnZtdWx0KHdvcmxkTm9ybWFsLCB3b3JsZE5vcm1hbCk7XG4gICAgY29uc3QgbGVuID0gbmV3IFZlYzMoKTtcbiAgICBmcm9tLnZzdWIocG9zaXRpb24sIGxlbik7XG4gICAgY29uc3QgcGxhbmVUb0Zyb20gPSBsZW4uZG90KHdvcmxkTm9ybWFsKTtcbiAgICB0by52c3ViKHBvc2l0aW9uLCBsZW4pO1xuICAgIGNvbnN0IHBsYW5lVG9UbyA9IGxlbi5kb3Qod29ybGROb3JtYWwpO1xuXG4gICAgaWYgKHBsYW5lVG9Gcm9tICogcGxhbmVUb1RvID4gMCkge1xuICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBhcmUgb24gdGhlIHNhbWUgc2lkZSBvZiB0aGUgcGxhbmUuLi4gYmFpbCBvdXRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnJvbS5kaXN0YW5jZVRvKHRvKSA8IHBsYW5lVG9Gcm9tKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbl9kb3RfZGlyID0gd29ybGROb3JtYWwuZG90KGRpcmVjdGlvbik7XG5cbiAgICBpZiAoTWF0aC5hYnMobl9kb3RfZGlyKSA8IHRoaXMucHJlY2lzaW9uKSB7XG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwbGFuZVBvaW50VG9Gcm9tID0gbmV3IFZlYzMoKTtcbiAgICBjb25zdCBkaXJfc2NhbGVkX3dpdGhfdCA9IG5ldyBWZWMzKCk7XG4gICAgY29uc3QgaGl0UG9pbnRXb3JsZCA9IG5ldyBWZWMzKCk7XG4gICAgZnJvbS52c3ViKHBvc2l0aW9uLCBwbGFuZVBvaW50VG9Gcm9tKTtcbiAgICBjb25zdCB0ID0gLXdvcmxkTm9ybWFsLmRvdChwbGFuZVBvaW50VG9Gcm9tKSAvIG5fZG90X2RpcjtcbiAgICBkaXJlY3Rpb24uc2NhbGUodCwgZGlyX3NjYWxlZF93aXRoX3QpO1xuICAgIGZyb20udmFkZChkaXJfc2NhbGVkX3dpdGhfdCwgaGl0UG9pbnRXb3JsZCk7XG4gICAgdGhpcy5yZXBvcnRJbnRlcnNlY3Rpb24od29ybGROb3JtYWwsIGhpdFBvaW50V29ybGQsIHJlcG9ydGVkU2hhcGUsIGJvZHksIC0xKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB3b3JsZCBBQUJCIG9mIHRoZSByYXkuXG4gICAqL1xuXG5cbiAgZ2V0QUFCQihhYWJiKSB7XG4gICAgY29uc3Qge1xuICAgICAgbG93ZXJCb3VuZCxcbiAgICAgIHVwcGVyQm91bmRcbiAgICB9ID0gYWFiYjtcbiAgICBjb25zdCB0byA9IHRoaXMudG87XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZnJvbTtcbiAgICBsb3dlckJvdW5kLnggPSBNYXRoLm1pbih0by54LCBmcm9tLngpO1xuICAgIGxvd2VyQm91bmQueSA9IE1hdGgubWluKHRvLnksIGZyb20ueSk7XG4gICAgbG93ZXJCb3VuZC56ID0gTWF0aC5taW4odG8ueiwgZnJvbS56KTtcbiAgICB1cHBlckJvdW5kLnggPSBNYXRoLm1heCh0by54LCBmcm9tLngpO1xuICAgIHVwcGVyQm91bmQueSA9IE1hdGgubWF4KHRvLnksIGZyb20ueSk7XG4gICAgdXBwZXJCb3VuZC56ID0gTWF0aC5tYXgodG8ueiwgZnJvbS56KTtcbiAgfVxuXG4gIF9pbnRlcnNlY3RIZWlnaHRmaWVsZChzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHksIHJlcG9ydGVkU2hhcGUpIHtcbiAgICBzaGFwZS5kYXRhO1xuICAgIHNoYXBlLmVsZW1lbnRTaXplOyAvLyBDb252ZXJ0IHRoZSByYXkgdG8gbG9jYWwgaGVpZ2h0ZmllbGQgY29vcmRpbmF0ZXNcblxuICAgIGNvbnN0IGxvY2FsUmF5ID0gaW50ZXJzZWN0SGVpZ2h0ZmllbGRfbG9jYWxSYXk7IC8vbmV3IFJheSh0aGlzLmZyb20sIHRoaXMudG8pO1xuXG4gICAgbG9jYWxSYXkuZnJvbS5jb3B5KHRoaXMuZnJvbSk7XG4gICAgbG9jYWxSYXkudG8uY29weSh0aGlzLnRvKTtcbiAgICBUcmFuc2Zvcm0ucG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIGxvY2FsUmF5LmZyb20sIGxvY2FsUmF5LmZyb20pO1xuICAgIFRyYW5zZm9ybS5wb2ludFRvTG9jYWxGcmFtZShwb3NpdGlvbiwgcXVhdCwgbG9jYWxSYXkudG8sIGxvY2FsUmF5LnRvKTtcbiAgICBsb2NhbFJheS51cGRhdGVEaXJlY3Rpb24oKTsgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZGF0YSBwb2ludHMgdG8gdGVzdCBhZ2FpbnN0XG5cbiAgICBjb25zdCBpbmRleCA9IGludGVyc2VjdEhlaWdodGZpZWxkX2luZGV4O1xuICAgIGxldCBpTWluWDtcbiAgICBsZXQgaU1pblk7XG4gICAgbGV0IGlNYXhYO1xuICAgIGxldCBpTWF4WTsgLy8gU2V0IHRvIG1heFxuXG4gICAgaU1pblggPSBpTWluWSA9IDA7XG4gICAgaU1heFggPSBpTWF4WSA9IHNoYXBlLmRhdGEubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBhYWJiID0gbmV3IEFBQkIoKTtcbiAgICBsb2NhbFJheS5nZXRBQUJCKGFhYmIpO1xuICAgIHNoYXBlLmdldEluZGV4T2ZQb3NpdGlvbihhYWJiLmxvd2VyQm91bmQueCwgYWFiYi5sb3dlckJvdW5kLnksIGluZGV4LCB0cnVlKTtcbiAgICBpTWluWCA9IE1hdGgubWF4KGlNaW5YLCBpbmRleFswXSk7XG4gICAgaU1pblkgPSBNYXRoLm1heChpTWluWSwgaW5kZXhbMV0pO1xuICAgIHNoYXBlLmdldEluZGV4T2ZQb3NpdGlvbihhYWJiLnVwcGVyQm91bmQueCwgYWFiYi51cHBlckJvdW5kLnksIGluZGV4LCB0cnVlKTtcbiAgICBpTWF4WCA9IE1hdGgubWluKGlNYXhYLCBpbmRleFswXSArIDEpO1xuICAgIGlNYXhZID0gTWF0aC5taW4oaU1heFksIGluZGV4WzFdICsgMSk7XG5cbiAgICBmb3IgKGxldCBpID0gaU1pblg7IGkgPCBpTWF4WDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gaU1pblk7IGogPCBpTWF4WTsgaisrKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdC5zaG91bGRTdG9wKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGUuZ2V0QWFiYkF0SW5kZXgoaSwgaiwgYWFiYik7XG5cbiAgICAgICAgaWYgKCFhYWJiLm92ZXJsYXBzUmF5KGxvY2FsUmF5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIExvd2VyIHRyaWFuZ2xlXG5cblxuICAgICAgICBzaGFwZS5nZXRDb252ZXhUcmlhbmdsZVBpbGxhcihpLCBqLCBmYWxzZSk7XG4gICAgICAgIFRyYW5zZm9ybS5wb2ludFRvV29ybGRGcmFtZShwb3NpdGlvbiwgcXVhdCwgc2hhcGUucGlsbGFyT2Zmc2V0LCB3b3JsZFBpbGxhck9mZnNldCk7XG5cbiAgICAgICAgdGhpcy5faW50ZXJzZWN0Q29udmV4KHNoYXBlLnBpbGxhckNvbnZleCwgcXVhdCwgd29ybGRQaWxsYXJPZmZzZXQsIGJvZHksIHJlcG9ydGVkU2hhcGUsIGludGVyc2VjdENvbnZleE9wdGlvbnMpO1xuXG4gICAgICAgIGlmICh0aGlzLnJlc3VsdC5zaG91bGRTdG9wKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFVwcGVyIHRyaWFuZ2xlXG5cblxuICAgICAgICBzaGFwZS5nZXRDb252ZXhUcmlhbmdsZVBpbGxhcihpLCBqLCB0cnVlKTtcbiAgICAgICAgVHJhbnNmb3JtLnBvaW50VG9Xb3JsZEZyYW1lKHBvc2l0aW9uLCBxdWF0LCBzaGFwZS5waWxsYXJPZmZzZXQsIHdvcmxkUGlsbGFyT2Zmc2V0KTtcblxuICAgICAgICB0aGlzLl9pbnRlcnNlY3RDb252ZXgoc2hhcGUucGlsbGFyQ29udmV4LCBxdWF0LCB3b3JsZFBpbGxhck9mZnNldCwgYm9keSwgcmVwb3J0ZWRTaGFwZSwgaW50ZXJzZWN0Q29udmV4T3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2ludGVyc2VjdFNwaGVyZShzcGhlcmUsIHF1YXQsIHBvc2l0aW9uLCBib2R5LCByZXBvcnRlZFNoYXBlKSB7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZnJvbTtcbiAgICBjb25zdCB0byA9IHRoaXMudG87XG4gICAgY29uc3QgciA9IHNwaGVyZS5yYWRpdXM7XG4gICAgY29uc3QgYSA9ICh0by54IC0gZnJvbS54KSAqKiAyICsgKHRvLnkgLSBmcm9tLnkpICoqIDIgKyAodG8ueiAtIGZyb20ueikgKiogMjtcbiAgICBjb25zdCBiID0gMiAqICgodG8ueCAtIGZyb20ueCkgKiAoZnJvbS54IC0gcG9zaXRpb24ueCkgKyAodG8ueSAtIGZyb20ueSkgKiAoZnJvbS55IC0gcG9zaXRpb24ueSkgKyAodG8ueiAtIGZyb20ueikgKiAoZnJvbS56IC0gcG9zaXRpb24ueikpO1xuICAgIGNvbnN0IGMgPSAoZnJvbS54IC0gcG9zaXRpb24ueCkgKiogMiArIChmcm9tLnkgLSBwb3NpdGlvbi55KSAqKiAyICsgKGZyb20ueiAtIHBvc2l0aW9uLnopICoqIDIgLSByICoqIDI7XG4gICAgY29uc3QgZGVsdGEgPSBiICoqIDIgLSA0ICogYSAqIGM7XG4gICAgY29uc3QgaW50ZXJzZWN0aW9uUG9pbnQgPSBSYXlfaW50ZXJzZWN0U3BoZXJlX2ludGVyc2VjdGlvblBvaW50O1xuICAgIGNvbnN0IG5vcm1hbCA9IFJheV9pbnRlcnNlY3RTcGhlcmVfbm9ybWFsO1xuXG4gICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgLy8gTm8gaW50ZXJzZWN0aW9uXG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChkZWx0YSA9PT0gMCkge1xuICAgICAgLy8gc2luZ2xlIGludGVyc2VjdGlvbiBwb2ludFxuICAgICAgZnJvbS5sZXJwKHRvLCBkZWx0YSwgaW50ZXJzZWN0aW9uUG9pbnQpO1xuICAgICAgaW50ZXJzZWN0aW9uUG9pbnQudnN1Yihwb3NpdGlvbiwgbm9ybWFsKTtcbiAgICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKG5vcm1hbCwgaW50ZXJzZWN0aW9uUG9pbnQsIHJlcG9ydGVkU2hhcGUsIGJvZHksIC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZDEgPSAoLWIgLSBNYXRoLnNxcnQoZGVsdGEpKSAvICgyICogYSk7XG4gICAgICBjb25zdCBkMiA9ICgtYiArIE1hdGguc3FydChkZWx0YSkpIC8gKDIgKiBhKTtcblxuICAgICAgaWYgKGQxID49IDAgJiYgZDEgPD0gMSkge1xuICAgICAgICBmcm9tLmxlcnAodG8sIGQxLCBpbnRlcnNlY3Rpb25Qb2ludCk7XG4gICAgICAgIGludGVyc2VjdGlvblBvaW50LnZzdWIocG9zaXRpb24sIG5vcm1hbCk7XG4gICAgICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICAgICAgdGhpcy5yZXBvcnRJbnRlcnNlY3Rpb24obm9ybWFsLCBpbnRlcnNlY3Rpb25Qb2ludCwgcmVwb3J0ZWRTaGFwZSwgYm9keSwgLTEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZXN1bHQuc2hvdWxkU3RvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkMiA+PSAwICYmIGQyIDw9IDEpIHtcbiAgICAgICAgZnJvbS5sZXJwKHRvLCBkMiwgaW50ZXJzZWN0aW9uUG9pbnQpO1xuICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludC52c3ViKHBvc2l0aW9uLCBub3JtYWwpO1xuICAgICAgICBub3JtYWwubm9ybWFsaXplKCk7XG4gICAgICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKG5vcm1hbCwgaW50ZXJzZWN0aW9uUG9pbnQsIHJlcG9ydGVkU2hhcGUsIGJvZHksIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfaW50ZXJzZWN0Q29udmV4KHNoYXBlLCBxdWF0LCBwb3NpdGlvbiwgYm9keSwgcmVwb3J0ZWRTaGFwZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG5vcm1hbCA9IGludGVyc2VjdENvbnZleF9ub3JtYWw7XG4gICAgY29uc3QgdmVjdG9yID0gaW50ZXJzZWN0Q29udmV4X3ZlY3RvcjtcbiAgICBjb25zdCBmYWNlTGlzdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5mYWNlTGlzdCB8fCBudWxsOyAvLyBDaGVja2luZyBmYWNlc1xuXG4gICAgY29uc3QgZmFjZXMgPSBzaGFwZS5mYWNlcztcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IHNoYXBlLnZlcnRpY2VzO1xuICAgIGNvbnN0IG5vcm1hbHMgPSBzaGFwZS5mYWNlTm9ybWFscztcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjtcbiAgICBjb25zdCBmcm9tID0gdGhpcy5mcm9tO1xuICAgIGNvbnN0IHRvID0gdGhpcy50bztcbiAgICBjb25zdCBmcm9tVG9EaXN0YW5jZSA9IGZyb20uZGlzdGFuY2VUbyh0byk7XG4gICAgY29uc3QgTmZhY2VzID0gZmFjZUxpc3QgPyBmYWNlTGlzdC5sZW5ndGggOiBmYWNlcy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHQ7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgIXJlc3VsdC5zaG91bGRTdG9wICYmIGogPCBOZmFjZXM7IGorKykge1xuICAgICAgY29uc3QgZmkgPSBmYWNlTGlzdCA/IGZhY2VMaXN0W2pdIDogajtcbiAgICAgIGNvbnN0IGZhY2UgPSBmYWNlc1tmaV07XG4gICAgICBjb25zdCBmYWNlTm9ybWFsID0gbm9ybWFsc1tmaV07XG4gICAgICBjb25zdCBxID0gcXVhdDtcbiAgICAgIGNvbnN0IHggPSBwb3NpdGlvbjsgLy8gZGV0ZXJtaW5lIGlmIHJheSBpbnRlcnNlY3RzIHRoZSBwbGFuZSBvZiB0aGUgZmFjZVxuICAgICAgLy8gbm90ZTogdGhpcyB3b3JrcyByZWdhcmRsZXNzIG9mIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGZhY2Ugbm9ybWFsXG4gICAgICAvLyBHZXQgcGxhbmUgcG9pbnQgaW4gd29ybGQgY29vcmRpbmF0ZXMuLi5cblxuICAgICAgdmVjdG9yLmNvcHkodmVydGljZXNbZmFjZVswXV0pO1xuICAgICAgcS52bXVsdCh2ZWN0b3IsIHZlY3Rvcik7XG4gICAgICB2ZWN0b3IudmFkZCh4LCB2ZWN0b3IpOyAvLyAuLi5idXQgbWFrZSBpdCByZWxhdGl2ZSB0byB0aGUgcmF5IGZyb20uIFdlJ2xsIGZpeCB0aGlzIGxhdGVyLlxuXG4gICAgICB2ZWN0b3IudnN1Yihmcm9tLCB2ZWN0b3IpOyAvLyBHZXQgcGxhbmUgbm9ybWFsXG5cbiAgICAgIHEudm11bHQoZmFjZU5vcm1hbCwgbm9ybWFsKTsgLy8gSWYgdGhpcyBkb3QgcHJvZHVjdCBpcyBuZWdhdGl2ZSwgd2UgaGF2ZSBzb21ldGhpbmcgaW50ZXJlc3RpbmdcblxuICAgICAgY29uc3QgZG90ID0gZGlyZWN0aW9uLmRvdChub3JtYWwpOyAvLyBCYWlsIG91dCBpZiByYXkgYW5kIHBsYW5lIGFyZSBwYXJhbGxlbFxuXG4gICAgICBpZiAoTWF0aC5hYnMoZG90KSA8IHRoaXMucHJlY2lzaW9uKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBjYWxjIGRpc3RhbmNlIHRvIHBsYW5lXG5cblxuICAgICAgY29uc3Qgc2NhbGFyID0gbm9ybWFsLmRvdCh2ZWN0b3IpIC8gZG90OyAvLyBpZiBuZWdhdGl2ZSBkaXN0YW5jZSwgdGhlbiBwbGFuZSBpcyBiZWhpbmQgcmF5XG5cbiAgICAgIGlmIChzY2FsYXIgPCAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBpZiAoZG90IDwgMCkge1xuICAgICAgLy8gSW50ZXJzZWN0aW9uIHBvaW50IGlzIGZyb20gKyBkaXJlY3Rpb24gKiBzY2FsYXJcblxuXG4gICAgICBkaXJlY3Rpb24uc2NhbGUoc2NhbGFyLCBpbnRlcnNlY3RQb2ludCk7XG4gICAgICBpbnRlcnNlY3RQb2ludC52YWRkKGZyb20sIGludGVyc2VjdFBvaW50KTsgLy8gYSBpcyB0aGUgcG9pbnQgd2UgY29tcGFyZSBwb2ludHMgYiBhbmQgYyB3aXRoLlxuXG4gICAgICBhLmNvcHkodmVydGljZXNbZmFjZVswXV0pO1xuICAgICAgcS52bXVsdChhLCBhKTtcbiAgICAgIHgudmFkZChhLCBhKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDE7ICFyZXN1bHQuc2hvdWxkU3RvcCAmJiBpIDwgZmFjZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgLy8gVHJhbnNmb3JtIDMgdmVydGljZXMgdG8gd29ybGQgY29vcmRzXG4gICAgICAgIGIuY29weSh2ZXJ0aWNlc1tmYWNlW2ldXSk7XG4gICAgICAgIGMuY29weSh2ZXJ0aWNlc1tmYWNlW2kgKyAxXV0pO1xuICAgICAgICBxLnZtdWx0KGIsIGIpO1xuICAgICAgICBxLnZtdWx0KGMsIGMpO1xuICAgICAgICB4LnZhZGQoYiwgYik7XG4gICAgICAgIHgudmFkZChjLCBjKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBpbnRlcnNlY3RQb2ludC5kaXN0YW5jZVRvKGZyb20pO1xuXG4gICAgICAgIGlmICghKFJheS5wb2ludEluVHJpYW5nbGUoaW50ZXJzZWN0UG9pbnQsIGEsIGIsIGMpIHx8IFJheS5wb2ludEluVHJpYW5nbGUoaW50ZXJzZWN0UG9pbnQsIGIsIGEsIGMpKSB8fCBkaXN0YW5jZSA+IGZyb21Ub0Rpc3RhbmNlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGludGVyc2VjdFBvaW50LCByZXBvcnRlZFNoYXBlLCBib2R5LCBmaSk7XG4gICAgICB9IC8vIH1cblxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHRvZG8gT3B0aW1pemUgYnkgdHJhbnNmb3JtaW5nIHRoZSB3b3JsZCB0byBsb2NhbCBzcGFjZSBmaXJzdC5cbiAgICogQHRvZG8gVXNlIE9jdHJlZSBsb29rdXBcbiAgICovXG5cblxuICBfaW50ZXJzZWN0VHJpbWVzaChtZXNoLCBxdWF0LCBwb3NpdGlvbiwgYm9keSwgcmVwb3J0ZWRTaGFwZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG5vcm1hbCA9IGludGVyc2VjdFRyaW1lc2hfbm9ybWFsO1xuICAgIGNvbnN0IHRyaWFuZ2xlcyA9IGludGVyc2VjdFRyaW1lc2hfdHJpYW5nbGVzO1xuICAgIGNvbnN0IHRyZWVUcmFuc2Zvcm0gPSBpbnRlcnNlY3RUcmltZXNoX3RyZWVUcmFuc2Zvcm07XG4gICAgY29uc3QgdmVjdG9yID0gaW50ZXJzZWN0Q29udmV4X3ZlY3RvcjtcbiAgICBjb25zdCBsb2NhbERpcmVjdGlvbiA9IGludGVyc2VjdFRyaW1lc2hfbG9jYWxEaXJlY3Rpb247XG4gICAgY29uc3QgbG9jYWxGcm9tID0gaW50ZXJzZWN0VHJpbWVzaF9sb2NhbEZyb207XG4gICAgY29uc3QgbG9jYWxUbyA9IGludGVyc2VjdFRyaW1lc2hfbG9jYWxUbztcbiAgICBjb25zdCB3b3JsZEludGVyc2VjdFBvaW50ID0gaW50ZXJzZWN0VHJpbWVzaF93b3JsZEludGVyc2VjdFBvaW50O1xuICAgIGNvbnN0IHdvcmxkTm9ybWFsID0gaW50ZXJzZWN0VHJpbWVzaF93b3JsZE5vcm1hbDsgLy8gQ2hlY2tpbmcgZmFjZXNcblxuICAgIGNvbnN0IGluZGljZXMgPSBtZXNoLmluZGljZXM7XG4gICAgbWVzaC52ZXJ0aWNlczsgLy8gY29uc3Qgbm9ybWFscyA9IG1lc2guZmFjZU5vcm1hbHNcblxuICAgIGNvbnN0IGZyb20gPSB0aGlzLmZyb207XG4gICAgY29uc3QgdG8gPSB0aGlzLnRvO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uO1xuICAgIHRyZWVUcmFuc2Zvcm0ucG9zaXRpb24uY29weShwb3NpdGlvbik7XG4gICAgdHJlZVRyYW5zZm9ybS5xdWF0ZXJuaW9uLmNvcHkocXVhdCk7IC8vIFRyYW5zZm9ybSByYXkgdG8gbG9jYWwgc3BhY2UhXG5cbiAgICBUcmFuc2Zvcm0udmVjdG9yVG9Mb2NhbEZyYW1lKHBvc2l0aW9uLCBxdWF0LCBkaXJlY3Rpb24sIGxvY2FsRGlyZWN0aW9uKTtcbiAgICBUcmFuc2Zvcm0ucG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIGZyb20sIGxvY2FsRnJvbSk7XG4gICAgVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKHBvc2l0aW9uLCBxdWF0LCB0bywgbG9jYWxUbyk7XG4gICAgbG9jYWxUby54ICo9IG1lc2guc2NhbGUueDtcbiAgICBsb2NhbFRvLnkgKj0gbWVzaC5zY2FsZS55O1xuICAgIGxvY2FsVG8ueiAqPSBtZXNoLnNjYWxlLno7XG4gICAgbG9jYWxGcm9tLnggKj0gbWVzaC5zY2FsZS54O1xuICAgIGxvY2FsRnJvbS55ICo9IG1lc2guc2NhbGUueTtcbiAgICBsb2NhbEZyb20ueiAqPSBtZXNoLnNjYWxlLno7XG4gICAgbG9jYWxUby52c3ViKGxvY2FsRnJvbSwgbG9jYWxEaXJlY3Rpb24pO1xuICAgIGxvY2FsRGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IGZyb21Ub0Rpc3RhbmNlU3F1YXJlZCA9IGxvY2FsRnJvbS5kaXN0YW5jZVNxdWFyZWQobG9jYWxUbyk7XG4gICAgbWVzaC50cmVlLnJheVF1ZXJ5KHRoaXMsIHRyZWVUcmFuc2Zvcm0sIHRyaWFuZ2xlcyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgTiA9IHRyaWFuZ2xlcy5sZW5ndGg7ICF0aGlzLnJlc3VsdC5zaG91bGRTdG9wICYmIGkgIT09IE47IGkrKykge1xuICAgICAgY29uc3QgdHJpYW5nbGVzSW5kZXggPSB0cmlhbmdsZXNbaV07XG4gICAgICBtZXNoLmdldE5vcm1hbCh0cmlhbmdsZXNJbmRleCwgbm9ybWFsKTsgLy8gZGV0ZXJtaW5lIGlmIHJheSBpbnRlcnNlY3RzIHRoZSBwbGFuZSBvZiB0aGUgZmFjZVxuICAgICAgLy8gbm90ZTogdGhpcyB3b3JrcyByZWdhcmRsZXNzIG9mIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGZhY2Ugbm9ybWFsXG4gICAgICAvLyBHZXQgcGxhbmUgcG9pbnQgaW4gd29ybGQgY29vcmRpbmF0ZXMuLi5cblxuICAgICAgbWVzaC5nZXRWZXJ0ZXgoaW5kaWNlc1t0cmlhbmdsZXNJbmRleCAqIDNdLCBhKTsgLy8gLi4uYnV0IG1ha2UgaXQgcmVsYXRpdmUgdG8gdGhlIHJheSBmcm9tLiBXZSdsbCBmaXggdGhpcyBsYXRlci5cblxuICAgICAgYS52c3ViKGxvY2FsRnJvbSwgdmVjdG9yKTsgLy8gSWYgdGhpcyBkb3QgcHJvZHVjdCBpcyBuZWdhdGl2ZSwgd2UgaGF2ZSBzb21ldGhpbmcgaW50ZXJlc3RpbmdcblxuICAgICAgY29uc3QgZG90ID0gbG9jYWxEaXJlY3Rpb24uZG90KG5vcm1hbCk7IC8vIEJhaWwgb3V0IGlmIHJheSBhbmQgcGxhbmUgYXJlIHBhcmFsbGVsXG4gICAgICAvLyBpZiAoTWF0aC5hYnMoIGRvdCApIDwgdGhpcy5wcmVjaXNpb24pe1xuICAgICAgLy8gICAgIGNvbnRpbnVlO1xuICAgICAgLy8gfVxuICAgICAgLy8gY2FsYyBkaXN0YW5jZSB0byBwbGFuZVxuXG4gICAgICBjb25zdCBzY2FsYXIgPSBub3JtYWwuZG90KHZlY3RvcikgLyBkb3Q7IC8vIGlmIG5lZ2F0aXZlIGRpc3RhbmNlLCB0aGVuIHBsYW5lIGlzIGJlaGluZCByYXlcblxuICAgICAgaWYgKHNjYWxhciA8IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIEludGVyc2VjdGlvbiBwb2ludCBpcyBmcm9tICsgZGlyZWN0aW9uICogc2NhbGFyXG5cblxuICAgICAgbG9jYWxEaXJlY3Rpb24uc2NhbGUoc2NhbGFyLCBpbnRlcnNlY3RQb2ludCk7XG4gICAgICBpbnRlcnNlY3RQb2ludC52YWRkKGxvY2FsRnJvbSwgaW50ZXJzZWN0UG9pbnQpOyAvLyBHZXQgdHJpYW5nbGUgdmVydGljZXNcblxuICAgICAgbWVzaC5nZXRWZXJ0ZXgoaW5kaWNlc1t0cmlhbmdsZXNJbmRleCAqIDMgKyAxXSwgYik7XG4gICAgICBtZXNoLmdldFZlcnRleChpbmRpY2VzW3RyaWFuZ2xlc0luZGV4ICogMyArIDJdLCBjKTtcbiAgICAgIGNvbnN0IHNxdWFyZWREaXN0YW5jZSA9IGludGVyc2VjdFBvaW50LmRpc3RhbmNlU3F1YXJlZChsb2NhbEZyb20pO1xuXG4gICAgICBpZiAoIShSYXkucG9pbnRJblRyaWFuZ2xlKGludGVyc2VjdFBvaW50LCBiLCBhLCBjKSB8fCBSYXkucG9pbnRJblRyaWFuZ2xlKGludGVyc2VjdFBvaW50LCBhLCBiLCBjKSkgfHwgc3F1YXJlZERpc3RhbmNlID4gZnJvbVRvRGlzdGFuY2VTcXVhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyB0cmFuc2Zvcm0gaW50ZXJzZWN0cG9pbnQgYW5kIG5vcm1hbCB0byB3b3JsZFxuXG5cbiAgICAgIFRyYW5zZm9ybS52ZWN0b3JUb1dvcmxkRnJhbWUocXVhdCwgbm9ybWFsLCB3b3JsZE5vcm1hbCk7XG4gICAgICBUcmFuc2Zvcm0ucG9pbnRUb1dvcmxkRnJhbWUocG9zaXRpb24sIHF1YXQsIGludGVyc2VjdFBvaW50LCB3b3JsZEludGVyc2VjdFBvaW50KTtcbiAgICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKHdvcmxkTm9ybWFsLCB3b3JsZEludGVyc2VjdFBvaW50LCByZXBvcnRlZFNoYXBlLCBib2R5LCB0cmlhbmdsZXNJbmRleCk7XG4gICAgfVxuXG4gICAgdHJpYW5nbGVzLmxlbmd0aCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgaW50ZXJzZWN0aW9ucyBzaG91bGQgY29udGludWVcbiAgICovXG5cblxuICByZXBvcnRJbnRlcnNlY3Rpb24obm9ybWFsLCBoaXRQb2ludFdvcmxkLCBzaGFwZSwgYm9keSwgaGl0RmFjZUluZGV4KSB7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZnJvbTtcbiAgICBjb25zdCB0byA9IHRoaXMudG87XG4gICAgY29uc3QgZGlzdGFuY2UgPSBmcm9tLmRpc3RhbmNlVG8oaGl0UG9pbnRXb3JsZCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHQ7IC8vIFNraXAgYmFjayBmYWNlcz9cblxuICAgIGlmICh0aGlzLnNraXBCYWNrZmFjZXMgJiYgbm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbikgPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVzdWx0LmhpdEZhY2VJbmRleCA9IHR5cGVvZiBoaXRGYWNlSW5kZXggIT09ICd1bmRlZmluZWQnID8gaGl0RmFjZUluZGV4IDogLTE7XG5cbiAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgY2FzZSBSYXkuQUxMOlxuICAgICAgICB0aGlzLmhhc0hpdCA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5zZXQoZnJvbSwgdG8sIG5vcm1hbCwgaGl0UG9pbnRXb3JsZCwgc2hhcGUsIGJvZHksIGRpc3RhbmNlKTtcbiAgICAgICAgcmVzdWx0Lmhhc0hpdCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUmF5LkNMT1NFU1Q6XG4gICAgICAgIC8vIFN0b3JlIGlmIGNsb3NlciB0aGFuIGN1cnJlbnQgY2xvc2VzdFxuICAgICAgICBpZiAoZGlzdGFuY2UgPCByZXN1bHQuZGlzdGFuY2UgfHwgIXJlc3VsdC5oYXNIaXQpIHtcbiAgICAgICAgICB0aGlzLmhhc0hpdCA9IHRydWU7XG4gICAgICAgICAgcmVzdWx0Lmhhc0hpdCA9IHRydWU7XG4gICAgICAgICAgcmVzdWx0LnNldChmcm9tLCB0bywgbm9ybWFsLCBoaXRQb2ludFdvcmxkLCBzaGFwZSwgYm9keSwgZGlzdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUmF5LkFOWTpcbiAgICAgICAgLy8gUmVwb3J0IGFuZCBzdG9wLlxuICAgICAgICB0aGlzLmhhc0hpdCA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5oYXNIaXQgPSB0cnVlO1xuICAgICAgICByZXN1bHQuc2V0KGZyb20sIHRvLCBub3JtYWwsIGhpdFBvaW50V29ybGQsIHNoYXBlLCBib2R5LCBkaXN0YW5jZSk7XG4gICAgICAgIHJlc3VsdC5zaG91bGRTdG9wID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBcyBwZXIgXCJCYXJ5Y2VudHJpYyBUZWNobmlxdWVcIiBhcyBuYW1lZFxuICAgKiB7QGxpbmsgaHR0cHM6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wb2ludGlucG9seS9kZWZhdWx0Lmh0bWwgaGVyZX0gYnV0IHdpdGhvdXQgdGhlIGRpdmlzaW9uXG4gICAqL1xuXG5cbiAgc3RhdGljIHBvaW50SW5UcmlhbmdsZShwLCBhLCBiLCBjKSB7XG4gICAgYy52c3ViKGEsIHYwKTtcbiAgICBiLnZzdWIoYSwgdjEpO1xuICAgIHAudnN1YihhLCB2Mik7XG4gICAgY29uc3QgZG90MDAgPSB2MC5kb3QodjApO1xuICAgIGNvbnN0IGRvdDAxID0gdjAuZG90KHYxKTtcbiAgICBjb25zdCBkb3QwMiA9IHYwLmRvdCh2Mik7XG4gICAgY29uc3QgZG90MTEgPSB2MS5kb3QodjEpO1xuICAgIGNvbnN0IGRvdDEyID0gdjEuZG90KHYyKTtcbiAgICBsZXQgdTtcbiAgICBsZXQgdjtcbiAgICByZXR1cm4gKHUgPSBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMikgPj0gMCAmJiAodiA9IGRvdDAwICogZG90MTIgLSBkb3QwMSAqIGRvdDAyKSA+PSAwICYmIHUgKyB2IDwgZG90MDAgKiBkb3QxMSAtIGRvdDAxICogZG90MDE7XG4gIH1cblxufVxuUmF5LkNMT1NFU1QgPSBSQVlfTU9ERVMuQ0xPU0VTVDtcblJheS5BTlkgPSBSQVlfTU9ERVMuQU5ZO1xuUmF5LkFMTCA9IFJBWV9NT0RFUy5BTEw7XG5jb25zdCB0bXBBQUJCJDEgPSBuZXcgQUFCQigpO1xuY29uc3QgdG1wQXJyYXkgPSBbXTtcbmNvbnN0IHYxID0gbmV3IFZlYzMoKTtcbmNvbnN0IHYyID0gbmV3IFZlYzMoKTtcbmNvbnN0IGludGVyc2VjdEJvZHlfeGkgPSBuZXcgVmVjMygpO1xuY29uc3QgaW50ZXJzZWN0Qm9keV9xaSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBpbnRlcnNlY3RQb2ludCA9IG5ldyBWZWMzKCk7XG5jb25zdCBhID0gbmV3IFZlYzMoKTtcbmNvbnN0IGIgPSBuZXcgVmVjMygpO1xuY29uc3QgYyA9IG5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFJheWNhc3RSZXN1bHQoKTtcbmNvbnN0IGludGVyc2VjdENvbnZleE9wdGlvbnMgPSB7XG4gIGZhY2VMaXN0OiBbMF1cbn07XG5jb25zdCB3b3JsZFBpbGxhck9mZnNldCA9IG5ldyBWZWMzKCk7XG5jb25zdCBpbnRlcnNlY3RIZWlnaHRmaWVsZF9sb2NhbFJheSA9IG5ldyBSYXkoKTtcbmNvbnN0IGludGVyc2VjdEhlaWdodGZpZWxkX2luZGV4ID0gW107XG5jb25zdCBSYXlfaW50ZXJzZWN0U3BoZXJlX2ludGVyc2VjdGlvblBvaW50ID0gbmV3IFZlYzMoKTtcbmNvbnN0IFJheV9pbnRlcnNlY3RTcGhlcmVfbm9ybWFsID0gbmV3IFZlYzMoKTtcbmNvbnN0IGludGVyc2VjdENvbnZleF9ub3JtYWwgPSBuZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5jb25zdCBpbnRlcnNlY3RDb252ZXhfdmVjdG9yID0gbmV3IFZlYzMoKTtcbmNvbnN0IGludGVyc2VjdFRyaW1lc2hfbm9ybWFsID0gbmV3IFZlYzMoKTtcbmNvbnN0IGludGVyc2VjdFRyaW1lc2hfbG9jYWxEaXJlY3Rpb24gPSBuZXcgVmVjMygpO1xuY29uc3QgaW50ZXJzZWN0VHJpbWVzaF9sb2NhbEZyb20gPSBuZXcgVmVjMygpO1xuY29uc3QgaW50ZXJzZWN0VHJpbWVzaF9sb2NhbFRvID0gbmV3IFZlYzMoKTtcbmNvbnN0IGludGVyc2VjdFRyaW1lc2hfd29ybGROb3JtYWwgPSBuZXcgVmVjMygpO1xuY29uc3QgaW50ZXJzZWN0VHJpbWVzaF93b3JsZEludGVyc2VjdFBvaW50ID0gbmV3IFZlYzMoKTtcbm5ldyBBQUJCKCk7XG5jb25zdCBpbnRlcnNlY3RUcmltZXNoX3RyaWFuZ2xlcyA9IFtdO1xuY29uc3QgaW50ZXJzZWN0VHJpbWVzaF90cmVlVHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSgpO1xuY29uc3QgdjAgPSBuZXcgVmVjMygpO1xuY29uc3QgaW50ZXJzZWN0ID0gbmV3IFZlYzMoKTtcblxuZnVuY3Rpb24gZGlzdGFuY2VGcm9tSW50ZXJzZWN0aW9uKGZyb20sIGRpcmVjdGlvbiwgcG9zaXRpb24pIHtcbiAgLy8gdjAgaXMgdmVjdG9yIGZyb20gZnJvbSB0byBwb3NpdGlvblxuICBwb3NpdGlvbi52c3ViKGZyb20sIHYwKTtcbiAgY29uc3QgZG90ID0gdjAuZG90KGRpcmVjdGlvbik7IC8vIGludGVyc2VjdCA9IGRpcmVjdGlvbipkb3QgKyBmcm9tXG5cbiAgZGlyZWN0aW9uLnNjYWxlKGRvdCwgaW50ZXJzZWN0KTtcbiAgaW50ZXJzZWN0LnZhZGQoZnJvbSwgaW50ZXJzZWN0KTtcbiAgY29uc3QgZGlzdGFuY2UgPSBwb3NpdGlvbi5kaXN0YW5jZVRvKGludGVyc2VjdCk7XG4gIHJldHVybiBkaXN0YW5jZTtcbn1cbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7IC8vIFRlbXAgdmVjdG9yc1xuXG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBSYXkoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbltuZXcgVmVjMygxLCAwLCAwKSwgbmV3IFZlYzMoMCwgMSwgMCksIG5ldyBWZWMzKDAsIDAsIDEpXTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5cbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5cbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTsgLy8gYmlsYXRlcmFsIGNvbnN0cmFpbnQgYmV0d2VlbiB0d28gZHluYW1pYyBvYmplY3RzXG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7IC8vIFRlbXAgdmVjdG9ycyBmb3IgY2FsY3VsYXRpb25cblxubmV3IFZlYzMoKTsgLy8gUmVsYXRpdmUgdmVsb2NpdHlcblxubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpOyAvLyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JhcnljZW50cmljX2Nvb3JkaW5hdGVfc3lzdGVtXG5uZXcgVmVjMygpO1xubmV3IEFBQkIoKTtcbm5ldyBWZWMzKCk7XG5uZXcgQUFCQigpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBBQUJCKCk7XG5uZXcgVmVjMygpO1xubmV3IFRyYW5zZm9ybSgpO1xubmV3IEFBQkIoKTtcblxuLy8gTmFtaW5nIHJ1bGU6IGJhc2VkIG9mIHRoZSBvcmRlciBpbiBTSEFQRV9UWVBFUyxcbi8vIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBtZXRob2QgaXMgZm9ybWVkIGJ5IHRoZVxuLy8gc2hhcGUgdHlwZSB0aGF0IGNvbWVzIGJlZm9yZSwgaW4gdGhlIHNlY29uZCBwYXJ0XG4vLyB0aGVyZSBpcyB0aGUgc2hhcGUgdHlwZSB0aGF0IGNvbWVzIGFmdGVyIGluIHRoZSBTSEFQRV9UWVBFUyBsaXN0XG4oe1xuICBzcGhlcmVTcGhlcmU6IFNoYXBlLnR5cGVzLlNQSEVSRSxcbiAgc3BoZXJlUGxhbmU6IFNoYXBlLnR5cGVzLlNQSEVSRSB8IFNoYXBlLnR5cGVzLlBMQU5FLFxuICBib3hCb3g6IFNoYXBlLnR5cGVzLkJPWCB8IFNoYXBlLnR5cGVzLkJPWCxcbiAgc3BoZXJlQm94OiBTaGFwZS50eXBlcy5TUEhFUkUgfCBTaGFwZS50eXBlcy5CT1gsXG4gIHBsYW5lQm94OiBTaGFwZS50eXBlcy5QTEFORSB8IFNoYXBlLnR5cGVzLkJPWCxcbiAgY29udmV4Q29udmV4OiBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OLFxuICBzcGhlcmVDb252ZXg6IFNoYXBlLnR5cGVzLlNQSEVSRSB8IFNoYXBlLnR5cGVzLkNPTlZFWFBPTFlIRURST04sXG4gIHBsYW5lQ29udmV4OiBTaGFwZS50eXBlcy5QTEFORSB8IFNoYXBlLnR5cGVzLkNPTlZFWFBPTFlIRURST04sXG4gIGJveENvbnZleDogU2hhcGUudHlwZXMuQk9YIHwgU2hhcGUudHlwZXMuQ09OVkVYUE9MWUhFRFJPTixcbiAgc3BoZXJlSGVpZ2h0ZmllbGQ6IFNoYXBlLnR5cGVzLlNQSEVSRSB8IFNoYXBlLnR5cGVzLkhFSUdIVEZJRUxELFxuICBib3hIZWlnaHRmaWVsZDogU2hhcGUudHlwZXMuQk9YIHwgU2hhcGUudHlwZXMuSEVJR0hURklFTEQsXG4gIGNvbnZleEhlaWdodGZpZWxkOiBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OIHwgU2hhcGUudHlwZXMuSEVJR0hURklFTEQsXG4gIHNwaGVyZVBhcnRpY2xlOiBTaGFwZS50eXBlcy5QQVJUSUNMRSB8IFNoYXBlLnR5cGVzLlNQSEVSRSxcbiAgcGxhbmVQYXJ0aWNsZTogU2hhcGUudHlwZXMuUExBTkUgfCBTaGFwZS50eXBlcy5QQVJUSUNMRSxcbiAgYm94UGFydGljbGU6IFNoYXBlLnR5cGVzLkJPWCB8IFNoYXBlLnR5cGVzLlBBUlRJQ0xFLFxuICBjb252ZXhQYXJ0aWNsZTogU2hhcGUudHlwZXMuUEFSVElDTEUgfCBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OLFxuICBjeWxpbmRlckN5bGluZGVyOiBTaGFwZS50eXBlcy5DWUxJTkRFUixcbiAgc3BoZXJlQ3lsaW5kZXI6IFNoYXBlLnR5cGVzLlNQSEVSRSB8IFNoYXBlLnR5cGVzLkNZTElOREVSLFxuICBwbGFuZUN5bGluZGVyOiBTaGFwZS50eXBlcy5QTEFORSB8IFNoYXBlLnR5cGVzLkNZTElOREVSLFxuICBib3hDeWxpbmRlcjogU2hhcGUudHlwZXMuQk9YIHwgU2hhcGUudHlwZXMuQ1lMSU5ERVIsXG4gIGNvbnZleEN5bGluZGVyOiBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OIHwgU2hhcGUudHlwZXMuQ1lMSU5ERVIsXG4gIGhlaWdodGZpZWxkQ3lsaW5kZXI6IFNoYXBlLnR5cGVzLkhFSUdIVEZJRUxEIHwgU2hhcGUudHlwZXMuQ1lMSU5ERVIsXG4gIHBhcnRpY2xlQ3lsaW5kZXI6IFNoYXBlLnR5cGVzLlBBUlRJQ0xFIHwgU2hhcGUudHlwZXMuQ1lMSU5ERVIsXG4gIHNwaGVyZVRyaW1lc2g6IFNoYXBlLnR5cGVzLlNQSEVSRSB8IFNoYXBlLnR5cGVzLlRSSU1FU0gsXG4gIHBsYW5lVHJpbWVzaDogU2hhcGUudHlwZXMuUExBTkUgfCBTaGFwZS50eXBlcy5UUklNRVNIXG59KTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFF1YXRlcm5pb24oKTtcbm5ldyBRdWF0ZXJuaW9uKCk7XG5cbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IEFBQkIoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpOyAvLyBTZWUgaHR0cDovL2J1bGxldHBoeXNpY3MuY29tL0J1bGxldC9CdWxsZXRGdWxsL1NwaGVyZVRyaWFuZ2xlRGV0ZWN0b3JfOGNwcF9zb3VyY2UuaHRtbFxuXG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5cbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5bbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKV07XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTsgLy8gV0lQXG5cbm5ldyBRdWF0ZXJuaW9uKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5uZXcgVmVjMygpO1xubmV3IFZlYzMoKTtcbm5ldyBWZWMzKCk7XG5cbm5ldyBBQUJCKCk7XG5uZXcgUmF5KCk7IC8vIHBlcmZvcm1hbmNlLm5vdygpIGZhbGxiYWNrIG9uIERhdGUubm93KClcblxuY29uc3QgcGVyZm9ybWFuY2UgPSBnbG9iYWxUaGlzLnBlcmZvcm1hbmNlIHx8IHt9O1xuXG5pZiAoIXBlcmZvcm1hbmNlLm5vdykge1xuICBsZXQgbm93T2Zmc2V0ID0gRGF0ZS5ub3coKTtcblxuICBpZiAocGVyZm9ybWFuY2UudGltaW5nICYmIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQpIHtcbiAgICBub3dPZmZzZXQgPSBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0O1xuICB9XG5cbiAgcGVyZm9ybWFuY2Uubm93ID0gKCkgPT4gRGF0ZS5ub3coKSAtIG5vd09mZnNldDtcbn1cblxubmV3IFZlYzMoKTsgLy8gRGlzcGF0Y2hlZCBhZnRlciB0aGUgd29ybGQgaGFzIHN0ZXBwZWQgZm9yd2FyZCBpbiB0aW1lLlxuXG5mdW5jdGlvbiBDYW5ub25EZWJ1Z2dlcihzY2VuZSwgd29ybGQsIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgY29sb3IgPSAweDAwZmYwMCxcbiAgICBzY2FsZSA9IDEsXG4gICAgb25Jbml0LFxuICAgIG9uVXBkYXRlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3QgX21lc2hlcyA9IFtdO1xuXG4gIGNvbnN0IF9tYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7XG4gICAgY29sb3I6IGNvbG9yICE9IG51bGwgPyBjb2xvciA6IDB4MDBmZjAwLFxuICAgIHdpcmVmcmFtZTogdHJ1ZVxuICB9KTtcblxuICBjb25zdCBfdGVtcFZlYzAgPSBuZXcgVmVjMygpO1xuXG4gIGNvbnN0IF90ZW1wVmVjMSA9IG5ldyBWZWMzKCk7XG5cbiAgY29uc3QgX3RlbXBWZWMyID0gbmV3IFZlYzMoKTtcblxuICBjb25zdCBfdGVtcFF1YXQwID0gbmV3IFF1YXRlcm5pb24oKTtcblxuICBjb25zdCBfc3BoZXJlR2VvbWV0cnkgPSBuZXcgU3BoZXJlR2VvbWV0cnkoMSk7XG5cbiAgY29uc3QgX2JveEdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KDEsIDEsIDEpO1xuXG4gIGNvbnN0IF9wbGFuZUdlb21ldHJ5ID0gbmV3IFBsYW5lR2VvbWV0cnkoMTAsIDEwLCAxMCwgMTApOyAvLyBNb3ZlIHRoZSBwbGFuZUdlb21ldHJ5IGZvcndhcmQgYSBsaXR0bGUgYml0IHRvIHByZXZlbnQgei1maWdodGluZ1xuXG5cbiAgX3BsYW5lR2VvbWV0cnkudHJhbnNsYXRlKDAsIDAsIDAuMDAwMSk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29udmV4UG9seWhlZHJvbkdlb21ldHJ5KHNoYXBlKSB7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsgLy8gQWRkIHZlcnRpY2VzXG5cbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhcGUudmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZlcnRleCA9IHNoYXBlLnZlcnRpY2VzW2ldO1xuICAgICAgcG9zaXRpb25zLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XG4gICAgfVxuXG4gICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9ucywgMykpOyAvLyBBZGQgZmFjZXNcblxuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhcGUuZmFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZhY2UgPSBzaGFwZS5mYWNlc1tpXTtcbiAgICAgIGNvbnN0IGEgPSBmYWNlWzBdO1xuXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGZhY2UubGVuZ3RoIC0gMTsgaisrKSB7XG4gICAgICAgIGNvbnN0IGIgPSBmYWNlW2pdO1xuICAgICAgICBjb25zdCBjID0gZmFjZVtqICsgMV07XG4gICAgICAgIGluZGljZXMucHVzaChhLCBiLCBjKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZW9tZXRyeS5zZXRJbmRleChpbmRpY2VzKTtcbiAgICBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcbiAgICBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRyaW1lc2hHZW9tZXRyeShzaGFwZSkge1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgY29uc3QgcG9zaXRpb25zID0gW107XG4gICAgY29uc3QgdjAgPSBfdGVtcFZlYzA7XG4gICAgY29uc3QgdjEgPSBfdGVtcFZlYzE7XG4gICAgY29uc3QgdjIgPSBfdGVtcFZlYzI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYXBlLmluZGljZXMubGVuZ3RoIC8gMzsgaSsrKSB7XG4gICAgICBzaGFwZS5nZXRUcmlhbmdsZVZlcnRpY2VzKGksIHYwLCB2MSwgdjIpO1xuICAgICAgcG9zaXRpb25zLnB1c2godjAueCwgdjAueSwgdjAueik7XG4gICAgICBwb3NpdGlvbnMucHVzaCh2MS54LCB2MS55LCB2MS56KTtcbiAgICAgIHBvc2l0aW9ucy5wdXNoKHYyLngsIHYyLnksIHYyLnopO1xuICAgIH1cblxuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKTtcbiAgICBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcbiAgICBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhlaWdodGZpZWxkR2VvbWV0cnkoc2hhcGUpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuICAgIGNvbnN0IHMgPSBzaGFwZS5lbGVtZW50U2l6ZSB8fCAxOyAvLyBhc3N1bWVzIHNxdWFyZSBoZWlnaHRmaWVsZCwgZWxzZSBpKngsIGoqeVxuXG4gICAgY29uc3QgcG9zaXRpb25zID0gc2hhcGUuZGF0YS5mbGF0TWFwKChyb3csIGkpID0+IHJvdy5mbGF0TWFwKCh6LCBqKSA9PiBbaSAqIHMsIGogKiBzLCB6XSkpO1xuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcblxuICAgIGZvciAobGV0IHhpID0gMDsgeGkgPCBzaGFwZS5kYXRhLmxlbmd0aCAtIDE7IHhpKyspIHtcbiAgICAgIGZvciAobGV0IHlpID0gMDsgeWkgPCBzaGFwZS5kYXRhW3hpXS5sZW5ndGggLSAxOyB5aSsrKSB7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IHNoYXBlLmRhdGFbeGldLmxlbmd0aDtcbiAgICAgICAgY29uc3QgaW5kZXggPSB4aSAqIHN0cmlkZSArIHlpO1xuICAgICAgICBpbmRpY2VzLnB1c2goaW5kZXggKyAxLCBpbmRleCArIHN0cmlkZSwgaW5kZXggKyBzdHJpZGUgKyAxKTtcbiAgICAgICAgaW5kaWNlcy5wdXNoKGluZGV4ICsgc3RyaWRlLCBpbmRleCArIDEsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZW9tZXRyeS5zZXRJbmRleChpbmRpY2VzKTtcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XG4gICAgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG4gICAgZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICByZXR1cm4gZ2VvbWV0cnk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZXNoKHNoYXBlKSB7XG4gICAgbGV0IG1lc2ggPSBuZXcgTWVzaCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIFNQSEVSRSxcbiAgICAgIEJPWCxcbiAgICAgIFBMQU5FLFxuICAgICAgQ1lMSU5ERVIsXG4gICAgICBDT05WRVhQT0xZSEVEUk9OLFxuICAgICAgVFJJTUVTSCxcbiAgICAgIEhFSUdIVEZJRUxEXG4gICAgfSA9IFNoYXBlLnR5cGVzO1xuXG4gICAgc3dpdGNoIChzaGFwZS50eXBlKSB7XG4gICAgICBjYXNlIFNQSEVSRTpcbiAgICAgICAge1xuICAgICAgICAgIG1lc2ggPSBuZXcgTWVzaChfc3BoZXJlR2VvbWV0cnksIF9tYXRlcmlhbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBCT1g6XG4gICAgICAgIHtcbiAgICAgICAgICBtZXNoID0gbmV3IE1lc2goX2JveEdlb21ldHJ5LCBfbWF0ZXJpYWwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgUExBTkU6XG4gICAgICAgIHtcbiAgICAgICAgICBtZXNoID0gbmV3IE1lc2goX3BsYW5lR2VvbWV0cnksIF9tYXRlcmlhbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBDWUxJTkRFUjpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEN5bGluZGVyR2VvbWV0cnkoc2hhcGUucmFkaXVzVG9wLCBzaGFwZS5yYWRpdXNCb3R0b20sIHNoYXBlLmhlaWdodCwgc2hhcGUubnVtU2VnbWVudHMpO1xuICAgICAgICAgIG1lc2ggPSBuZXcgTWVzaChnZW9tZXRyeSwgX21hdGVyaWFsKTtcbiAgICAgICAgICBzaGFwZS5nZW9tZXRyeUlkID0gZ2VvbWV0cnkuaWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBDT05WRVhQT0xZSEVEUk9OOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBjcmVhdGVDb252ZXhQb2x5aGVkcm9uR2VvbWV0cnkoc2hhcGUpO1xuICAgICAgICAgIG1lc2ggPSBuZXcgTWVzaChnZW9tZXRyeSwgX21hdGVyaWFsKTtcbiAgICAgICAgICBzaGFwZS5nZW9tZXRyeUlkID0gZ2VvbWV0cnkuaWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBUUklNRVNIOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBjcmVhdGVUcmltZXNoR2VvbWV0cnkoc2hhcGUpO1xuICAgICAgICAgIG1lc2ggPSBuZXcgTWVzaChnZW9tZXRyeSwgX21hdGVyaWFsKTtcbiAgICAgICAgICBzaGFwZS5nZW9tZXRyeUlkID0gZ2VvbWV0cnkuaWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBIRUlHSFRGSUVMRDpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gY3JlYXRlSGVpZ2h0ZmllbGRHZW9tZXRyeShzaGFwZSk7XG4gICAgICAgICAgbWVzaCA9IG5ldyBNZXNoKGdlb21ldHJ5LCBfbWF0ZXJpYWwpO1xuICAgICAgICAgIHNoYXBlLmdlb21ldHJ5SWQgPSBnZW9tZXRyeS5pZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjZW5lLmFkZChtZXNoKTtcbiAgICByZXR1cm4gbWVzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlTWVzaChtZXNoLCBzaGFwZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIFNQSEVSRSxcbiAgICAgIEJPWCxcbiAgICAgIFBMQU5FLFxuICAgICAgQ1lMSU5ERVIsXG4gICAgICBDT05WRVhQT0xZSEVEUk9OLFxuICAgICAgVFJJTUVTSCxcbiAgICAgIEhFSUdIVEZJRUxEXG4gICAgfSA9IFNoYXBlLnR5cGVzO1xuXG4gICAgc3dpdGNoIChzaGFwZS50eXBlKSB7XG4gICAgICBjYXNlIFNQSEVSRTpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHJhZGl1c1xuICAgICAgICAgIH0gPSBzaGFwZTtcbiAgICAgICAgICBtZXNoLnNjYWxlLnNldChyYWRpdXMgKiBzY2FsZSwgcmFkaXVzICogc2NhbGUsIHJhZGl1cyAqIHNjYWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEJPWDpcbiAgICAgICAge1xuICAgICAgICAgIG1lc2guc2NhbGUuY29weShzaGFwZS5oYWxmRXh0ZW50cyk7XG4gICAgICAgICAgbWVzaC5zY2FsZS5tdWx0aXBseVNjYWxhcigyICogc2NhbGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgUExBTkU6XG4gICAgICAgIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIENZTElOREVSOlxuICAgICAgICB7XG4gICAgICAgICAgbWVzaC5zY2FsZS5zZXQoMSAqIHNjYWxlLCAxICogc2NhbGUsIDEgKiBzY2FsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBDT05WRVhQT0xZSEVEUk9OOlxuICAgICAgICB7XG4gICAgICAgICAgbWVzaC5zY2FsZS5zZXQoMSAqIHNjYWxlLCAxICogc2NhbGUsIDEgKiBzY2FsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBUUklNRVNIOlxuICAgICAgICB7XG4gICAgICAgICAgbWVzaC5zY2FsZS5jb3B5KHNoYXBlLnNjYWxlKS5tdWx0aXBseVNjYWxhcihzY2FsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBIRUlHSFRGSUVMRDpcbiAgICAgICAge1xuICAgICAgICAgIG1lc2guc2NhbGUuc2V0KDEgKiBzY2FsZSwgMSAqIHNjYWxlLCAxICogc2NhbGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHlwZU1hdGNoKG1lc2gsIHNoYXBlKSB7XG4gICAgaWYgKCFtZXNoKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qge1xuICAgICAgZ2VvbWV0cnlcbiAgICB9ID0gbWVzaDtcbiAgICByZXR1cm4gZ2VvbWV0cnkgaW5zdGFuY2VvZiBTcGhlcmVHZW9tZXRyeSAmJiBzaGFwZS50eXBlID09PSBTaGFwZS50eXBlcy5TUEhFUkUgfHwgZ2VvbWV0cnkgaW5zdGFuY2VvZiBCb3hHZW9tZXRyeSAmJiBzaGFwZS50eXBlID09PSBTaGFwZS50eXBlcy5CT1ggfHwgZ2VvbWV0cnkgaW5zdGFuY2VvZiBQbGFuZUdlb21ldHJ5ICYmIHNoYXBlLnR5cGUgPT09IFNoYXBlLnR5cGVzLlBMQU5FIHx8IGdlb21ldHJ5LmlkID09PSBzaGFwZS5nZW9tZXRyeUlkICYmIHNoYXBlLnR5cGUgPT09IFNoYXBlLnR5cGVzLkNZTElOREVSIHx8IGdlb21ldHJ5LmlkID09PSBzaGFwZS5nZW9tZXRyeUlkICYmIHNoYXBlLnR5cGUgPT09IFNoYXBlLnR5cGVzLkNPTlZFWFBPTFlIRURST04gfHwgZ2VvbWV0cnkuaWQgPT09IHNoYXBlLmdlb21ldHJ5SWQgJiYgc2hhcGUudHlwZSA9PT0gU2hhcGUudHlwZXMuVFJJTUVTSCB8fCBnZW9tZXRyeS5pZCA9PT0gc2hhcGUuZ2VvbWV0cnlJZCAmJiBzaGFwZS50eXBlID09PSBTaGFwZS50eXBlcy5IRUlHSFRGSUVMRDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1lc2goaW5kZXgsIHNoYXBlKSB7XG4gICAgbGV0IG1lc2ggPSBfbWVzaGVzW2luZGV4XTtcbiAgICBsZXQgZGlkQ3JlYXRlTmV3TWVzaCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0eXBlTWF0Y2gobWVzaCwgc2hhcGUpKSB7XG4gICAgICBpZiAobWVzaCkgc2NlbmUucmVtb3ZlKG1lc2gpO1xuICAgICAgX21lc2hlc1tpbmRleF0gPSBtZXNoID0gY3JlYXRlTWVzaChzaGFwZSk7XG4gICAgICBkaWRDcmVhdGVOZXdNZXNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzY2FsZU1lc2gobWVzaCwgc2hhcGUpO1xuICAgIHJldHVybiBkaWRDcmVhdGVOZXdNZXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGNvbnN0IG1lc2hlcyA9IF9tZXNoZXM7XG4gICAgY29uc3Qgc2hhcGVXb3JsZFBvc2l0aW9uID0gX3RlbXBWZWMwO1xuICAgIGNvbnN0IHNoYXBlV29ybGRRdWF0ZXJuaW9uID0gX3RlbXBRdWF0MDtcbiAgICBsZXQgbWVzaEluZGV4ID0gMDtcblxuICAgIGZvciAoY29uc3QgYm9keSBvZiB3b3JsZC5ib2RpZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBib2R5LnNoYXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzaGFwZSA9IGJvZHkuc2hhcGVzW2ldO1xuICAgICAgICBjb25zdCBkaWRDcmVhdGVOZXdNZXNoID0gdXBkYXRlTWVzaChtZXNoSW5kZXgsIHNoYXBlKTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG1lc2hlc1ttZXNoSW5kZXhdO1xuXG4gICAgICAgIGlmIChtZXNoKSB7XG4gICAgICAgICAgLy8gR2V0IHdvcmxkIHBvc2l0aW9uXG4gICAgICAgICAgYm9keS5xdWF0ZXJuaW9uLnZtdWx0KGJvZHkuc2hhcGVPZmZzZXRzW2ldLCBzaGFwZVdvcmxkUG9zaXRpb24pO1xuICAgICAgICAgIGJvZHkucG9zaXRpb24udmFkZChzaGFwZVdvcmxkUG9zaXRpb24sIHNoYXBlV29ybGRQb3NpdGlvbik7IC8vIEdldCB3b3JsZCBxdWF0ZXJuaW9uXG5cbiAgICAgICAgICBib2R5LnF1YXRlcm5pb24ubXVsdChib2R5LnNoYXBlT3JpZW50YXRpb25zW2ldLCBzaGFwZVdvcmxkUXVhdGVybmlvbik7IC8vIENvcHkgdG8gbWVzaGVzXG5cbiAgICAgICAgICBtZXNoLnBvc2l0aW9uLmNvcHkoc2hhcGVXb3JsZFBvc2l0aW9uKTtcbiAgICAgICAgICBtZXNoLnF1YXRlcm5pb24uY29weShzaGFwZVdvcmxkUXVhdGVybmlvbik7XG4gICAgICAgICAgaWYgKGRpZENyZWF0ZU5ld01lc2ggJiYgb25Jbml0IGluc3RhbmNlb2YgRnVuY3Rpb24pIG9uSW5pdChib2R5LCBtZXNoLCBzaGFwZSk7XG4gICAgICAgICAgaWYgKCFkaWRDcmVhdGVOZXdNZXNoICYmIG9uVXBkYXRlIGluc3RhbmNlb2YgRnVuY3Rpb24pIG9uVXBkYXRlKGJvZHksIG1lc2gsIHNoYXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lc2hJbmRleCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSBtZXNoSW5kZXg7IGkgPCBtZXNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1lc2ggPSBtZXNoZXNbaV07XG4gICAgICBpZiAobWVzaCkgc2NlbmUucmVtb3ZlKG1lc2gpO1xuICAgIH1cblxuICAgIG1lc2hlcy5sZW5ndGggPSBtZXNoSW5kZXg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHVwZGF0ZVxuICB9O1xufVxuXG5jb25zdCBkZWJ1Z0NvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IHVzZURlYnVnQ29udGV4dCA9ICgpID0+IHVzZUNvbnRleHQoZGVidWdDb250ZXh0KTtcblxuY29uc3QgcGh5c2ljc0NvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IHVzZVBoeXNpY3NDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChwaHlzaWNzQ29udGV4dCk7XG4gIGlmICghY29udGV4dCkgdGhyb3cgbmV3IEVycm9yKCdQaHlzaWNzIGNvbnRleHQgbm90IGZvdW5kLiBAcmVhY3QtdGhyZWUvY2Fubm9uICYgY29tcG9uZW50cyBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBhIFBoeXNpY3MgcHJvdmlkZXInKTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5jb25zdCBxJDIgPSBuZXcgUXVhdGVybmlvbiQyKCk7XG5jb25zdCBzJDEgPSBuZXcgVmVjdG9yMygxLCAxLCAxKTtcbmNvbnN0IHYkMSA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBtJDEgPSBuZXcgTWF0cml4NCgpO1xuY29uc3QgZ2V0TWF0cml4ID0gbyA9PiB7XG4gIGlmIChvIGluc3RhbmNlb2YgSW5zdGFuY2VkTWVzaCkge1xuICAgIG8uZ2V0TWF0cml4QXQocGFyc2VJbnQoby51dWlkLnNwbGl0KCcvJylbMV0pLCBtJDEpO1xuICAgIHJldHVybiBtJDE7XG4gIH1cbiAgcmV0dXJuIG8ubWF0cml4O1xufTtcbmZ1bmN0aW9uIERlYnVnUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbG9yID0gJ2JsYWNrJyxcbiAgICBpbXBsID0gQ2Fubm9uRGVidWdnZXIsXG4gICAgc2NhbGUgPSAxXG4gIH0gPSBfcmVmO1xuICBjb25zdCBbe1xuICAgIGJvZGllcyxcbiAgICBib2R5TWFwXG4gIH1dID0gdXNlU3RhdGUoe1xuICAgIGJvZGllczogW10sXG4gICAgYm9keU1hcDoge31cbiAgfSk7XG4gIGNvbnN0IHtcbiAgICByZWZzXG4gIH0gPSB1c2VQaHlzaWNzQ29udGV4dCgpO1xuICBjb25zdCBbc2NlbmVdID0gdXNlU3RhdGUoKCkgPT4gbmV3IFNjZW5lKCkpO1xuICBjb25zdCBjYW5ub25EZWJ1Z2dlclJlZiA9IHVzZVJlZihpbXBsKHNjZW5lLCB7XG4gICAgYm9kaWVzXG4gIH0sIHtcbiAgICBjb2xvcixcbiAgICBzY2FsZVxuICB9KSk7XG4gIHVzZUZyYW1lKCgpID0+IHtcbiAgICBmb3IgKGNvbnN0IHV1aWQgaW4gYm9keU1hcCkge1xuICAgICAgZ2V0TWF0cml4KHJlZnNbdXVpZF0pLmRlY29tcG9zZSh2JDEsIHEkMiwgcyQxKTtcbiAgICAgIGJvZHlNYXBbdXVpZF0ucG9zaXRpb24uY29weSh2JDEpO1xuICAgICAgYm9keU1hcFt1dWlkXS5xdWF0ZXJuaW9uLmNvcHkocSQyKTtcbiAgICB9XG4gICAgY2Fubm9uRGVidWdnZXJSZWYuY3VycmVudC51cGRhdGUoKTtcbiAgfSk7XG4gIGNvbnN0IGFwaSA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBhZGQodXVpZCwgcHJvcHMsIHR5cGUpIHtcbiAgICAgIGNvbnN0IGJvZHkgPSBwcm9wc1RvQm9keSh7XG4gICAgICAgIHByb3BzLFxuICAgICAgICB0eXBlLFxuICAgICAgICB1dWlkXG4gICAgICB9KTtcbiAgICAgIGJvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgYm9keU1hcFt1dWlkXSA9IGJvZHk7XG4gICAgfSxcbiAgICByZW1vdmUodXVpZCkge1xuICAgICAgY29uc3QgaW5kZXggPSBib2RpZXMuaW5kZXhPZihib2R5TWFwW3V1aWRdKTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIGJvZGllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgZGVsZXRlIGJvZHlNYXBbdXVpZF07XG4gICAgfVxuICB9KSwgW2JvZGllcywgYm9keU1hcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeHMoZGVidWdDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGFwaSxcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJwcmltaXRpdmVcIiwge1xuICAgICAgb2JqZWN0OiBzY2VuZVxuICAgIH0pLCBjaGlsZHJlbl1cbiAgfSk7XG59XG5cbmNvbnN0IHRlbXAgPSBuZXcgT2JqZWN0M0QoKTtcbmZ1bmN0aW9uIHVzZUZvcndhcmRlZFJlZihyZWYpIHtcbiAgY29uc3QgbnVsbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgcmV0dXJuIHJlZiAmJiB0eXBlb2YgcmVmICE9PSAnZnVuY3Rpb24nID8gcmVmIDogbnVsbFJlZjtcbn1cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5mdW5jdGlvbiBnZXRVVUlEKHJlZiwgaW5kZXgpIHtcbiAgY29uc3Qgc3VmZml4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/ICcnIDogYC8ke2luZGV4fWA7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHJlZiAmJiByZWYuY3VycmVudCAmJiBgJHtyZWYuY3VycmVudC51dWlkfSR7c3VmZml4fWA7XG59XG5jb25zdCBlID0gbmV3IEV1bGVyKCk7XG5jb25zdCBxJDEgPSBuZXcgUXVhdGVybmlvbiQyKCk7XG5jb25zdCBxdWF0ZXJuaW9uVG9Sb3RhdGlvbiA9IGNhbGxiYWNrID0+IHtcbiAgcmV0dXJuIHYgPT4gY2FsbGJhY2soZS5zZXRGcm9tUXVhdGVybmlvbihxJDEuZnJvbUFycmF5KHYpKS50b0FycmF5KCkpO1xufTtcbmxldCBpbmNyZW1lbnRpbmdJZCA9IDA7XG5mdW5jdGlvbiBzdWJzY3JpYmUocmVmLCB3b3JrZXIsIHN1YnNjcmlwdGlvbnMsIHR5cGUsIGluZGV4LCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgdGFyZ2V0ID0gJ2JvZGllcyc7XG4gIH1cbiAgcmV0dXJuIGNhbGxiYWNrID0+IHtcbiAgICBjb25zdCBpZCA9IGluY3JlbWVudGluZ0lkKys7XG4gICAgc3Vic2NyaXB0aW9uc1tpZF0gPSB7XG4gICAgICBbdHlwZV06IGNhbGxiYWNrXG4gICAgfTtcbiAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICB1dWlkICYmIHdvcmtlci5zdWJzY3JpYmUoe1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgaWQsXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgdHlwZVxuICAgICAgfSxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbaWRdO1xuICAgICAgd29ya2VyLnVuc3Vic2NyaWJlKHtcbiAgICAgICAgcHJvcHM6IGlkXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gcHJlcGFyZShvYmplY3QsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwb3NpdGlvbiA9IFswLCAwLCAwXSxcbiAgICByb3RhdGlvbiA9IFswLCAwLCAwXSxcbiAgICB1c2VyRGF0YSA9IHt9XG4gIH0gPSBfcmVmO1xuICBvYmplY3QudXNlckRhdGEgPSB1c2VyRGF0YTtcbiAgb2JqZWN0LnBvc2l0aW9uLnNldCguLi5wb3NpdGlvbik7XG4gIG9iamVjdC5yb3RhdGlvbi5zZXQoLi4ucm90YXRpb24pO1xuICBvYmplY3QudXBkYXRlTWF0cml4KCk7XG59XG5mdW5jdGlvbiBzZXR1cENvbGxpc2lvbihldmVudHMsIF9yZWYyLCB1dWlkKSB7XG4gIGxldCB7XG4gICAgb25Db2xsaWRlLFxuICAgIG9uQ29sbGlkZUJlZ2luLFxuICAgIG9uQ29sbGlkZUVuZFxuICB9ID0gX3JlZjI7XG4gIGV2ZW50c1t1dWlkXSA9IHtcbiAgICBjb2xsaWRlOiBvbkNvbGxpZGUsXG4gICAgY29sbGlkZUJlZ2luOiBvbkNvbGxpZGVCZWdpbixcbiAgICBjb2xsaWRlRW5kOiBvbkNvbGxpZGVFbmRcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUJvZHkodHlwZSwgZm4sIGFyZ3NGbiwgZndkUmVmLCBkZXBzKSB7XG4gIGlmIChmd2RSZWYgPT09IHZvaWQgMCkge1xuICAgIGZ3ZFJlZiA9IG51bGw7XG4gIH1cbiAgaWYgKGRlcHMgPT09IHZvaWQgMCkge1xuICAgIGRlcHMgPSBbXTtcbiAgfVxuICBjb25zdCByZWYgPSB1c2VGb3J3YXJkZWRSZWYoZndkUmVmKTtcbiAgY29uc3Qge1xuICAgIGV2ZW50cyxcbiAgICByZWZzLFxuICAgIHNjYWxlT3ZlcnJpZGVzLFxuICAgIHN1YnNjcmlwdGlvbnMsXG4gICAgd29ya2VyXG4gIH0gPSB1c2VQaHlzaWNzQ29udGV4dCgpO1xuICBjb25zdCBkZWJ1Z0FwaSA9IHVzZURlYnVnQ29udGV4dCgpO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFdoZW4gdGhlIHJlZmVyZW5jZSBpc24ndCB1c2VkIHdlIGNyZWF0ZSBhIHN0dWJcbiAgICAgIC8vIFRoZSBib2R5IGRvZXNuJ3QgaGF2ZSBhIHZpc3VhbCByZXByZXNlbnRhdGlvbiBidXQgY2FuIHN0aWxsIGJlIGNvbnN0cmFpbmVkXG4gICAgICAvLyBZZXMsIHRoaXMgdHlwZSBtYXkgYmUgdGVjaG5pY2FsbHkgaW5jb3JyZWN0XG4gICAgICByZWYuY3VycmVudCA9IG5ldyBPYmplY3QzRCgpO1xuICAgIH1cbiAgICBjb25zdCBvYmplY3QgPSByZWYuY3VycmVudDtcbiAgICBjb25zdCBjdXJyZW50V29ya2VyID0gd29ya2VyO1xuICAgIGNvbnN0IG9iamVjdENvdW50ID0gb2JqZWN0IGluc3RhbmNlb2YgSW5zdGFuY2VkTWVzaCA/IChvYmplY3QuaW5zdGFuY2VNYXRyaXguc2V0VXNhZ2UoRHluYW1pY0RyYXdVc2FnZSksIG9iamVjdC5jb3VudCkgOiAxO1xuICAgIGNvbnN0IHV1aWQgPSBvYmplY3QgaW5zdGFuY2VvZiBJbnN0YW5jZWRNZXNoID8gbmV3IEFycmF5KG9iamVjdENvdW50KS5maWxsKDApLm1hcCgoXywgaSkgPT4gYCR7b2JqZWN0LnV1aWR9LyR7aX1gKSA6IFtvYmplY3QudXVpZF07XG4gICAgY29uc3QgcHJvcHMgPSBvYmplY3QgaW5zdGFuY2VvZiBJbnN0YW5jZWRNZXNoID8gdXVpZC5tYXAoKGlkLCBpKSA9PiB7XG4gICAgICBjb25zdCBwcm9wcyA9IGZuKGkpO1xuICAgICAgcHJlcGFyZSh0ZW1wLCBwcm9wcyk7XG4gICAgICBvYmplY3Quc2V0TWF0cml4QXQoaSwgdGVtcC5tYXRyaXgpO1xuICAgICAgb2JqZWN0Lmluc3RhbmNlTWF0cml4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIHJlZnNbaWRdID0gb2JqZWN0O1xuICAgICAgZGVidWdBcGkgPT0gbnVsbCA/IHZvaWQgMCA6IGRlYnVnQXBpLmFkZChpZCwgcHJvcHMsIHR5cGUpO1xuICAgICAgc2V0dXBDb2xsaXNpb24oZXZlbnRzLCBwcm9wcywgaWQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIGFyZ3M6IGFyZ3NGbihwcm9wcy5hcmdzKVxuICAgICAgfTtcbiAgICB9KSA6IHV1aWQubWFwKChpZCwgaSkgPT4ge1xuICAgICAgY29uc3QgcHJvcHMgPSBmbihpKTtcbiAgICAgIHByZXBhcmUob2JqZWN0LCBwcm9wcyk7XG4gICAgICByZWZzW2lkXSA9IG9iamVjdDtcbiAgICAgIGRlYnVnQXBpID09IG51bGwgPyB2b2lkIDAgOiBkZWJ1Z0FwaS5hZGQoaWQsIHByb3BzLCB0eXBlKTtcbiAgICAgIHNldHVwQ29sbGlzaW9uKGV2ZW50cywgcHJvcHMsIGlkKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBhcmdzOiBhcmdzRm4ocHJvcHMuYXJncylcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBSZWdpc3RlciBvbiBtb3VudCwgdW5yZWdpc3RlciBvbiB1bm1vdW50XG4gICAgY3VycmVudFdvcmtlci5hZGRCb2RpZXMoe1xuICAgICAgcHJvcHM6IHByb3BzLm1hcChfcmVmMyA9PiB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgb25Db2xsaWRlLFxuICAgICAgICAgIG9uQ29sbGlkZUJlZ2luLFxuICAgICAgICAgIG9uQ29sbGlkZUVuZCxcbiAgICAgICAgICAuLi5zZXJpYWxpemFibGVQcm9wc1xuICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb25Db2xsaWRlOiBCb29sZWFuKG9uQ29sbGlkZSksXG4gICAgICAgICAgLi4uc2VyaWFsaXphYmxlUHJvcHNcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgdHlwZSxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdXVpZC5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgZGVsZXRlIHJlZnNbaWRdO1xuICAgICAgICBkZWJ1Z0FwaSA9PSBudWxsID8gdm9pZCAwIDogZGVidWdBcGkucmVtb3ZlKGlkKTtcbiAgICAgICAgZGVsZXRlIGV2ZW50c1tpZF07XG4gICAgICB9KTtcbiAgICAgIGN1cnJlbnRXb3JrZXIucmVtb3ZlQm9kaWVzKHtcbiAgICAgICAgdXVpZFxuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgZGVwcyk7XG4gIGNvbnN0IGFwaSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IG1ha2VBdG9taWMgPSAodHlwZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG9wID0gYHNldCR7Y2FwaXRhbGl6ZSh0eXBlKX1gO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2V0OiB2YWx1ZSA9PiB7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmLCBpbmRleCk7XG4gICAgICAgICAgdXVpZCAmJiB3b3JrZXJbb3BdKHtcbiAgICAgICAgICAgIHByb3BzOiB2YWx1ZSxcbiAgICAgICAgICAgIHV1aWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUocmVmLCB3b3JrZXIsIHN1YnNjcmlwdGlvbnMsIHR5cGUsIGluZGV4KVxuICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IG1ha2VRdWF0ZXJuaW9uID0gaW5kZXggPT4ge1xuICAgICAgY29uc3QgdHlwZSA9ICdxdWF0ZXJuaW9uJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvcHk6IF9yZWY0ID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgdyxcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgelxuICAgICAgICAgIH0gPSBfcmVmNDtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5zZXRRdWF0ZXJuaW9uKHtcbiAgICAgICAgICAgIHByb3BzOiBbeCwgeSwgeiwgd10sXG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogKHgsIHksIHosIHcpID0+IHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5zZXRRdWF0ZXJuaW9uKHtcbiAgICAgICAgICAgIHByb3BzOiBbeCwgeSwgeiwgd10sXG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN1YnNjcmliZTogc3Vic2NyaWJlKHJlZiwgd29ya2VyLCBzdWJzY3JpcHRpb25zLCB0eXBlLCBpbmRleClcbiAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBtYWtlUm90YXRpb24gPSBpbmRleCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3B5OiBfcmVmNSA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgelxuICAgICAgICAgIH0gPSBfcmVmNTtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5zZXRSb3RhdGlvbih7XG4gICAgICAgICAgICBwcm9wczogW3gsIHksIHpdLFxuICAgICAgICAgICAgdXVpZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6ICh4LCB5LCB6KSA9PiB7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmLCBpbmRleCk7XG4gICAgICAgICAgdXVpZCAmJiB3b3JrZXIuc2V0Um90YXRpb24oe1xuICAgICAgICAgICAgcHJvcHM6IFt4LCB5LCB6XSxcbiAgICAgICAgICAgIHV1aWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc3Vic2NyaWJlOiBjYWxsYmFjayA9PiB7XG4gICAgICAgICAgY29uc3QgaWQgPSBpbmNyZW1lbnRpbmdJZCsrO1xuICAgICAgICAgIGNvbnN0IHRhcmdldCA9ICdib2RpZXMnO1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSAncXVhdGVybmlvbic7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmLCBpbmRleCk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uc1tpZF0gPSB7XG4gICAgICAgICAgICBbdHlwZV06IHF1YXRlcm5pb25Ub1JvdGF0aW9uKGNhbGxiYWNrKVxuICAgICAgICAgIH07XG4gICAgICAgICAgdXVpZCAmJiB3b3JrZXIuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW2lkXTtcbiAgICAgICAgICAgIHdvcmtlci51bnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgIHByb3BzOiBpZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IG1ha2VWZWMgPSAodHlwZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG9wID0gYHNldCR7Y2FwaXRhbGl6ZSh0eXBlKX1gO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29weTogX3JlZjYgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIHpcbiAgICAgICAgICB9ID0gX3JlZjY7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmLCBpbmRleCk7XG4gICAgICAgICAgdXVpZCAmJiB3b3JrZXJbb3BdKHtcbiAgICAgICAgICAgIHByb3BzOiBbeCwgeSwgel0sXG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogKHgsIHksIHopID0+IHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlcltvcF0oe1xuICAgICAgICAgICAgcHJvcHM6IFt4LCB5LCB6XSxcbiAgICAgICAgICAgIHV1aWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUocmVmLCB3b3JrZXIsIHN1YnNjcmlwdGlvbnMsIHR5cGUsIGluZGV4KVxuICAgICAgfTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG1ha2VBcGkoaW5kZXgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93U2xlZXA6IG1ha2VBdG9taWMoJ2FsbG93U2xlZXAnLCBpbmRleCksXG4gICAgICAgIGFuZ3VsYXJEYW1waW5nOiBtYWtlQXRvbWljKCdhbmd1bGFyRGFtcGluZycsIGluZGV4KSxcbiAgICAgICAgYW5ndWxhckZhY3RvcjogbWFrZVZlYygnYW5ndWxhckZhY3RvcicsIGluZGV4KSxcbiAgICAgICAgYW5ndWxhclZlbG9jaXR5OiBtYWtlVmVjKCdhbmd1bGFyVmVsb2NpdHknLCBpbmRleCksXG4gICAgICAgIGFwcGx5Rm9yY2UoZm9yY2UsIHdvcmxkUG9pbnQpIHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5hcHBseUZvcmNlKHtcbiAgICAgICAgICAgIHByb3BzOiBbZm9yY2UsIHdvcmxkUG9pbnRdLFxuICAgICAgICAgICAgdXVpZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseUltcHVsc2UoaW1wdWxzZSwgd29ybGRQb2ludCkge1xuICAgICAgICAgIGNvbnN0IHV1aWQgPSBnZXRVVUlEKHJlZiwgaW5kZXgpO1xuICAgICAgICAgIHV1aWQgJiYgd29ya2VyLmFwcGx5SW1wdWxzZSh7XG4gICAgICAgICAgICBwcm9wczogW2ltcHVsc2UsIHdvcmxkUG9pbnRdLFxuICAgICAgICAgICAgdXVpZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseUxvY2FsRm9yY2UoZm9yY2UsIGxvY2FsUG9pbnQpIHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5hcHBseUxvY2FsRm9yY2Uoe1xuICAgICAgICAgICAgcHJvcHM6IFtmb3JjZSwgbG9jYWxQb2ludF0sXG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5TG9jYWxJbXB1bHNlKGltcHVsc2UsIGxvY2FsUG9pbnQpIHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5hcHBseUxvY2FsSW1wdWxzZSh7XG4gICAgICAgICAgICBwcm9wczogW2ltcHVsc2UsIGxvY2FsUG9pbnRdLFxuICAgICAgICAgICAgdXVpZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseVRvcnF1ZSh0b3JxdWUpIHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5hcHBseVRvcnF1ZSh7XG4gICAgICAgICAgICBwcm9wczogW3RvcnF1ZV0sXG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbGxpc2lvbkZpbHRlckdyb3VwOiBtYWtlQXRvbWljKCdjb2xsaXNpb25GaWx0ZXJHcm91cCcsIGluZGV4KSxcbiAgICAgICAgY29sbGlzaW9uRmlsdGVyTWFzazogbWFrZUF0b21pYygnY29sbGlzaW9uRmlsdGVyTWFzaycsIGluZGV4KSxcbiAgICAgICAgY29sbGlzaW9uUmVzcG9uc2U6IG1ha2VBdG9taWMoJ2NvbGxpc2lvblJlc3BvbnNlJywgaW5kZXgpLFxuICAgICAgICBmaXhlZFJvdGF0aW9uOiBtYWtlQXRvbWljKCdmaXhlZFJvdGF0aW9uJywgaW5kZXgpLFxuICAgICAgICBpc1RyaWdnZXI6IG1ha2VBdG9taWMoJ2lzVHJpZ2dlcicsIGluZGV4KSxcbiAgICAgICAgbGluZWFyRGFtcGluZzogbWFrZUF0b21pYygnbGluZWFyRGFtcGluZycsIGluZGV4KSxcbiAgICAgICAgbGluZWFyRmFjdG9yOiBtYWtlVmVjKCdsaW5lYXJGYWN0b3InLCBpbmRleCksXG4gICAgICAgIG1hc3M6IG1ha2VBdG9taWMoJ21hc3MnLCBpbmRleCksXG4gICAgICAgIG1hdGVyaWFsOiBtYWtlQXRvbWljKCdtYXRlcmlhbCcsIGluZGV4KSxcbiAgICAgICAgcG9zaXRpb246IG1ha2VWZWMoJ3Bvc2l0aW9uJywgaW5kZXgpLFxuICAgICAgICBxdWF0ZXJuaW9uOiBtYWtlUXVhdGVybmlvbihpbmRleCksXG4gICAgICAgIHJvdGF0aW9uOiBtYWtlUm90YXRpb24oaW5kZXgpLFxuICAgICAgICBzY2FsZU92ZXJyaWRlKHNjYWxlKSB7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmLCBpbmRleCk7XG4gICAgICAgICAgaWYgKHV1aWQpIHNjYWxlT3ZlcnJpZGVzW3V1aWRdID0gbmV3IFZlY3RvcjMoLi4uc2NhbGUpO1xuICAgICAgICB9LFxuICAgICAgICBzbGVlcCgpIHtcbiAgICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYsIGluZGV4KTtcbiAgICAgICAgICB1dWlkICYmIHdvcmtlci5zbGVlcCh7XG4gICAgICAgICAgICB1dWlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNsZWVwU3BlZWRMaW1pdDogbWFrZUF0b21pYygnc2xlZXBTcGVlZExpbWl0JywgaW5kZXgpLFxuICAgICAgICBzbGVlcFRpbWVMaW1pdDogbWFrZUF0b21pYygnc2xlZXBUaW1lTGltaXQnLCBpbmRleCksXG4gICAgICAgIHVzZXJEYXRhOiBtYWtlQXRvbWljKCd1c2VyRGF0YScsIGluZGV4KSxcbiAgICAgICAgdmVsb2NpdHk6IG1ha2VWZWMoJ3ZlbG9jaXR5JywgaW5kZXgpLFxuICAgICAgICB3YWtlVXAoKSB7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmLCBpbmRleCk7XG4gICAgICAgICAgdXVpZCAmJiB3b3JrZXIud2FrZVVwKHtcbiAgICAgICAgICAgIHV1aWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWFrZUFwaSh1bmRlZmluZWQpLFxuICAgICAgYXQ6IGluZGV4ID0+IGNhY2hlW2luZGV4XSB8fCAoY2FjaGVbaW5kZXhdID0gbWFrZUFwaShpbmRleCkpXG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3JlZiwgYXBpXTtcbn1cbmZ1bmN0aW9uIG1ha2VUcmlwbGV0KHYpIHtcbiAgcmV0dXJuIHYgaW5zdGFuY2VvZiBWZWN0b3IzID8gW3YueCwgdi55LCB2LnpdIDogdjtcbn1cbmZ1bmN0aW9uIHVzZVBsYW5lKGZuLCBmd2RSZWYsIGRlcHMpIHtcbiAgcmV0dXJuIHVzZUJvZHkoJ1BsYW5lJywgZm4sICgpID0+IFtdLCBmd2RSZWYsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlQm94KGZuLCBmd2RSZWYsIGRlcHMpIHtcbiAgY29uc3QgZGVmYXVsdEJveEFyZ3MgPSBbMSwgMSwgMV07XG4gIHJldHVybiB1c2VCb2R5KCdCb3gnLCBmbiwgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7XG4gICAgICBhcmdzID0gZGVmYXVsdEJveEFyZ3M7XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9LCBmd2RSZWYsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlQ3lsaW5kZXIoZm4sIGZ3ZFJlZiwgZGVwcykge1xuICByZXR1cm4gdXNlQm9keSgnQ3lsaW5kZXInLCBmbiwgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7XG4gICAgICBhcmdzID0gW107XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9LCBmd2RSZWYsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlSGVpZ2h0ZmllbGQoZm4sIGZ3ZFJlZiwgZGVwcykge1xuICByZXR1cm4gdXNlQm9keSgnSGVpZ2h0ZmllbGQnLCBmbiwgYXJncyA9PiBhcmdzLCBmd2RSZWYsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlUGFydGljbGUoZm4sIGZ3ZFJlZiwgZGVwcykge1xuICByZXR1cm4gdXNlQm9keSgnUGFydGljbGUnLCBmbiwgKCkgPT4gW10sIGZ3ZFJlZiwgZGVwcyk7XG59XG5mdW5jdGlvbiB1c2VTcGhlcmUoZm4sIGZ3ZFJlZiwgZGVwcykge1xuICByZXR1cm4gdXNlQm9keSgnU3BoZXJlJywgZm4sIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKGFyZ3MgPT09IHZvaWQgMCkge1xuICAgICAgYXJncyA9IFsxXTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3MpKSB0aHJvdyBuZXcgRXJyb3IoJ3VzZVNwaGVyZSBhcmdzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICByZXR1cm4gW2FyZ3NbMF1dO1xuICB9LCBmd2RSZWYsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlVHJpbWVzaChmbiwgZndkUmVmLCBkZXBzKSB7XG4gIHJldHVybiB1c2VCb2R5KCdUcmltZXNoJywgZm4sIGFyZ3MgPT4gYXJncywgZndkUmVmLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZUNvbnZleFBvbHloZWRyb24oZm4sIGZ3ZFJlZiwgZGVwcykge1xuICByZXR1cm4gdXNlQm9keSgnQ29udmV4UG9seWhlZHJvbicsIGZuLCBmdW5jdGlvbiAoX3RlbXApIHtcbiAgICBsZXQgW3ZlcnRpY2VzLCBmYWNlcywgbm9ybWFscywgYXhlcywgYm91bmRpbmdTcGhlcmVSYWRpdXNdID0gX3RlbXAgPT09IHZvaWQgMCA/IFtdIDogX3RlbXA7XG4gICAgcmV0dXJuIFt2ZXJ0aWNlcyAmJiB2ZXJ0aWNlcy5tYXAobWFrZVRyaXBsZXQpLCBmYWNlcywgbm9ybWFscyAmJiBub3JtYWxzLm1hcChtYWtlVHJpcGxldCksIGF4ZXMgJiYgYXhlcy5tYXAobWFrZVRyaXBsZXQpLCBib3VuZGluZ1NwaGVyZVJhZGl1c107XG4gIH0sIGZ3ZFJlZiwgZGVwcyk7XG59XG5mdW5jdGlvbiB1c2VDb21wb3VuZEJvZHkoZm4sIGZ3ZFJlZiwgZGVwcykge1xuICByZXR1cm4gdXNlQm9keSgnQ29tcG91bmQnLCBmbiwgYXJncyA9PiBhcmdzLCBmd2RSZWYsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlQ29uc3RyYWludCh0eXBlLCBib2R5QSwgYm9keUIsIG9wdG5zLCBkZXBzKSB7XG4gIGlmIChvcHRucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0bnMgPSB7fTtcbiAgfVxuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIGNvbnN0IHtcbiAgICB3b3JrZXJcbiAgfSA9IHVzZVBoeXNpY3NDb250ZXh0KCk7XG4gIGNvbnN0IHV1aWQgPSBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCk7XG4gIGNvbnN0IHJlZkEgPSB1c2VGb3J3YXJkZWRSZWYoYm9keUEpO1xuICBjb25zdCByZWZCID0gdXNlRm9yd2FyZGVkUmVmKGJvZHlCKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVmQS5jdXJyZW50ICYmIHJlZkIuY3VycmVudCkge1xuICAgICAgd29ya2VyLmFkZENvbnN0cmFpbnQoe1xuICAgICAgICBwcm9wczogW3JlZkEuY3VycmVudC51dWlkLCByZWZCLmN1cnJlbnQudXVpZCwgb3B0bnNdLFxuICAgICAgICB0eXBlLFxuICAgICAgICB1dWlkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiAoKSA9PiB3b3JrZXIucmVtb3ZlQ29uc3RyYWludCh7XG4gICAgICAgIHV1aWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgZGVwcyk7XG4gIGNvbnN0IGFwaSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGVuYWJsZURpc2FibGUgPSB7XG4gICAgICBkaXNhYmxlOiAoKSA9PiB3b3JrZXIuZGlzYWJsZUNvbnN0cmFpbnQoe1xuICAgICAgICB1dWlkXG4gICAgICB9KSxcbiAgICAgIGVuYWJsZTogKCkgPT4gd29ya2VyLmVuYWJsZUNvbnN0cmFpbnQoe1xuICAgICAgICB1dWlkXG4gICAgICB9KVxuICAgIH07XG4gICAgaWYgKHR5cGUgPT09ICdIaW5nZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmVuYWJsZURpc2FibGUsXG4gICAgICAgIGRpc2FibGVNb3RvcjogKCkgPT4gd29ya2VyLmRpc2FibGVDb25zdHJhaW50TW90b3Ioe1xuICAgICAgICAgIHV1aWRcbiAgICAgICAgfSksXG4gICAgICAgIGVuYWJsZU1vdG9yOiAoKSA9PiB3b3JrZXIuZW5hYmxlQ29uc3RyYWludE1vdG9yKHtcbiAgICAgICAgICB1dWlkXG4gICAgICAgIH0pLFxuICAgICAgICBzZXRNb3Rvck1heEZvcmNlOiB2YWx1ZSA9PiB3b3JrZXIuc2V0Q29uc3RyYWludE1vdG9yTWF4Rm9yY2Uoe1xuICAgICAgICAgIHByb3BzOiB2YWx1ZSxcbiAgICAgICAgICB1dWlkXG4gICAgICAgIH0pLFxuICAgICAgICBzZXRNb3RvclNwZWVkOiB2YWx1ZSA9PiB3b3JrZXIuc2V0Q29uc3RyYWludE1vdG9yU3BlZWQoe1xuICAgICAgICAgIHByb3BzOiB2YWx1ZSxcbiAgICAgICAgICB1dWlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZW5hYmxlRGlzYWJsZTtcbiAgfSwgZGVwcyk7XG4gIHJldHVybiBbcmVmQSwgcmVmQiwgYXBpXTtcbn1cbmZ1bmN0aW9uIHVzZVBvaW50VG9Qb2ludENvbnN0cmFpbnQoYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcykge1xuICBpZiAoYm9keUEgPT09IHZvaWQgMCkge1xuICAgIGJvZHlBID0gbnVsbDtcbiAgfVxuICBpZiAoYm9keUIgPT09IHZvaWQgMCkge1xuICAgIGJvZHlCID0gbnVsbDtcbiAgfVxuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIHJldHVybiB1c2VDb25zdHJhaW50KCdQb2ludFRvUG9pbnQnLCBib2R5QSwgYm9keUIsIG9wdG5zLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZUNvbmVUd2lzdENvbnN0cmFpbnQoYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcykge1xuICBpZiAoYm9keUEgPT09IHZvaWQgMCkge1xuICAgIGJvZHlBID0gbnVsbDtcbiAgfVxuICBpZiAoYm9keUIgPT09IHZvaWQgMCkge1xuICAgIGJvZHlCID0gbnVsbDtcbiAgfVxuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIHJldHVybiB1c2VDb25zdHJhaW50KCdDb25lVHdpc3QnLCBib2R5QSwgYm9keUIsIG9wdG5zLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZURpc3RhbmNlQ29uc3RyYWludChib2R5QSwgYm9keUIsIG9wdG5zLCBkZXBzKSB7XG4gIGlmIChib2R5QSA9PT0gdm9pZCAwKSB7XG4gICAgYm9keUEgPSBudWxsO1xuICB9XG4gIGlmIChib2R5QiA9PT0gdm9pZCAwKSB7XG4gICAgYm9keUIgPSBudWxsO1xuICB9XG4gIGlmIChkZXBzID09PSB2b2lkIDApIHtcbiAgICBkZXBzID0gW107XG4gIH1cbiAgcmV0dXJuIHVzZUNvbnN0cmFpbnQoJ0Rpc3RhbmNlJywgYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcyk7XG59XG5mdW5jdGlvbiB1c2VIaW5nZUNvbnN0cmFpbnQoYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcykge1xuICBpZiAoYm9keUEgPT09IHZvaWQgMCkge1xuICAgIGJvZHlBID0gbnVsbDtcbiAgfVxuICBpZiAoYm9keUIgPT09IHZvaWQgMCkge1xuICAgIGJvZHlCID0gbnVsbDtcbiAgfVxuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIHJldHVybiB1c2VDb25zdHJhaW50KCdIaW5nZScsIGJvZHlBLCBib2R5Qiwgb3B0bnMsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlTG9ja0NvbnN0cmFpbnQoYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcykge1xuICBpZiAoYm9keUEgPT09IHZvaWQgMCkge1xuICAgIGJvZHlBID0gbnVsbDtcbiAgfVxuICBpZiAoYm9keUIgPT09IHZvaWQgMCkge1xuICAgIGJvZHlCID0gbnVsbDtcbiAgfVxuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIHJldHVybiB1c2VDb25zdHJhaW50KCdMb2NrJywgYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcyk7XG59XG5mdW5jdGlvbiB1c2VTcHJpbmcoYm9keUEsIGJvZHlCLCBvcHRucywgZGVwcykge1xuICBpZiAoYm9keUEgPT09IHZvaWQgMCkge1xuICAgIGJvZHlBID0gbnVsbDtcbiAgfVxuICBpZiAoYm9keUIgPT09IHZvaWQgMCkge1xuICAgIGJvZHlCID0gbnVsbDtcbiAgfVxuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIGNvbnN0IHtcbiAgICB3b3JrZXJcbiAgfSA9IHVzZVBoeXNpY3NDb250ZXh0KCk7XG4gIGNvbnN0IFt1dWlkXSA9IHVzZVN0YXRlKCgpID0+IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKSk7XG4gIGNvbnN0IHJlZkEgPSB1c2VGb3J3YXJkZWRSZWYoYm9keUEpO1xuICBjb25zdCByZWZCID0gdXNlRm9yd2FyZGVkUmVmKGJvZHlCKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVmQS5jdXJyZW50ICYmIHJlZkIuY3VycmVudCkge1xuICAgICAgd29ya2VyLmFkZFNwcmluZyh7XG4gICAgICAgIHByb3BzOiBbcmVmQS5jdXJyZW50LnV1aWQsIHJlZkIuY3VycmVudC51dWlkLCBvcHRuc10sXG4gICAgICAgIHV1aWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd29ya2VyLnJlbW92ZVNwcmluZyh7XG4gICAgICAgICAgdXVpZFxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9LCBkZXBzKTtcbiAgY29uc3QgYXBpID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIHNldERhbXBpbmc6IHZhbHVlID0+IHdvcmtlci5zZXRTcHJpbmdEYW1waW5nKHtcbiAgICAgIHByb3BzOiB2YWx1ZSxcbiAgICAgIHV1aWRcbiAgICB9KSxcbiAgICBzZXRSZXN0TGVuZ3RoOiB2YWx1ZSA9PiB3b3JrZXIuc2V0U3ByaW5nUmVzdExlbmd0aCh7XG4gICAgICBwcm9wczogdmFsdWUsXG4gICAgICB1dWlkXG4gICAgfSksXG4gICAgc2V0U3RpZmZuZXNzOiB2YWx1ZSA9PiB3b3JrZXIuc2V0U3ByaW5nU3RpZmZuZXNzKHtcbiAgICAgIHByb3BzOiB2YWx1ZSxcbiAgICAgIHV1aWRcbiAgICB9KVxuICB9KSwgZGVwcyk7XG4gIHJldHVybiBbcmVmQSwgcmVmQiwgYXBpXTtcbn1cbmZ1bmN0aW9uIHVzZVJheShtb2RlLCBvcHRpb25zLCBjYWxsYmFjaywgZGVwcykge1xuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIGNvbnN0IHtcbiAgICB3b3JrZXIsXG4gICAgZXZlbnRzXG4gIH0gPSB1c2VQaHlzaWNzQ29udGV4dCgpO1xuICBjb25zdCBbdXVpZF0gPSB1c2VTdGF0ZSgoKSA9PiBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCkpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGV2ZW50c1t1dWlkXSA9IHtcbiAgICAgIHJheWhpdDogY2FsbGJhY2tcbiAgICB9O1xuICAgIHdvcmtlci5hZGRSYXkoe1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgbW9kZVxuICAgICAgfSxcbiAgICAgIHV1aWRcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd29ya2VyLnJlbW92ZVJheSh7XG4gICAgICAgIHV1aWRcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIGV2ZW50c1t1dWlkXTtcbiAgICB9O1xuICB9LCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZVJheWNhc3RDbG9zZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCBkZXBzKSB7XG4gIGlmIChkZXBzID09PSB2b2lkIDApIHtcbiAgICBkZXBzID0gW107XG4gIH1cbiAgdXNlUmF5KCdDbG9zZXN0Jywgb3B0aW9ucywgY2FsbGJhY2ssIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlUmF5Y2FzdEFueShvcHRpb25zLCBjYWxsYmFjaywgZGVwcykge1xuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIHVzZVJheSgnQW55Jywgb3B0aW9ucywgY2FsbGJhY2ssIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlUmF5Y2FzdEFsbChvcHRpb25zLCBjYWxsYmFjaywgZGVwcykge1xuICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVwcyA9IFtdO1xuICB9XG4gIHVzZVJheSgnQWxsJywgb3B0aW9ucywgY2FsbGJhY2ssIGRlcHMpO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gdXNlUmF5Y2FzdFZlaGljbGUoZm4sIGZ3ZFJlZiwgZGVwcykge1xuICBpZiAoZndkUmVmID09PSB2b2lkIDApIHtcbiAgICBmd2RSZWYgPSBudWxsO1xuICB9XG4gIGlmIChkZXBzID09PSB2b2lkIDApIHtcbiAgICBkZXBzID0gW107XG4gIH1cbiAgY29uc3QgcmVmID0gdXNlRm9yd2FyZGVkUmVmKGZ3ZFJlZik7XG4gIGNvbnN0IHtcbiAgICB3b3JrZXIsXG4gICAgc3Vic2NyaXB0aW9uc1xuICB9ID0gdXNlUGh5c2ljc0NvbnRleHQoKTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXJlZi5jdXJyZW50KSB7XG4gICAgICAvLyBXaGVuIHRoZSByZWZlcmVuY2UgaXNuJ3QgdXNlZCB3ZSBjcmVhdGUgYSBzdHViXG4gICAgICAvLyBUaGUgYm9keSBkb2Vzbid0IGhhdmUgYSB2aXN1YWwgcmVwcmVzZW50YXRpb24gYnV0IGNhbiBzdGlsbCBiZSBjb25zdHJhaW5lZFxuICAgICAgLy8gWWVzLCB0aGlzIHR5cGUgbWF5IGJlIHRlY2huaWNhbGx5IGluY29ycmVjdFxuICAgICAgcmVmLmN1cnJlbnQgPSBuZXcgT2JqZWN0M0QoKTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFdvcmtlciA9IHdvcmtlcjtcbiAgICBjb25zdCB1dWlkID0gcmVmLmN1cnJlbnQudXVpZDtcbiAgICBjb25zdCB7XG4gICAgICBjaGFzc2lzQm9keSxcbiAgICAgIGluZGV4Rm9yd2FyZEF4aXMgPSAyLFxuICAgICAgaW5kZXhSaWdodEF4aXMgPSAwLFxuICAgICAgaW5kZXhVcEF4aXMgPSAxLFxuICAgICAgd2hlZWxJbmZvcyxcbiAgICAgIHdoZWVsc1xuICAgIH0gPSBmbigpO1xuICAgIGNvbnN0IGNoYXNzaXNCb2R5VVVJRCA9IGdldFVVSUQoY2hhc3Npc0JvZHkpO1xuICAgIGNvbnN0IHdoZWVsVVVJRHMgPSB3aGVlbHMubWFwKHJlZiA9PiBnZXRVVUlEKHJlZikpO1xuICAgIGlmICghY2hhc3Npc0JvZHlVVUlEIHx8ICF3aGVlbFVVSURzLmV2ZXJ5KGlzU3RyaW5nKSkgcmV0dXJuO1xuICAgIGN1cnJlbnRXb3JrZXIuYWRkUmF5Y2FzdFZlaGljbGUoe1xuICAgICAgcHJvcHM6IFtjaGFzc2lzQm9keVVVSUQsIHdoZWVsVVVJRHMsIHdoZWVsSW5mb3MsIGluZGV4Rm9yd2FyZEF4aXMsIGluZGV4UmlnaHRBeGlzLCBpbmRleFVwQXhpc10sXG4gICAgICB1dWlkXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGN1cnJlbnRXb3JrZXIucmVtb3ZlUmF5Y2FzdFZlaGljbGUoe1xuICAgICAgICB1dWlkXG4gICAgICB9KTtcbiAgICB9O1xuICB9LCBkZXBzKTtcbiAgY29uc3QgYXBpID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFwcGx5RW5naW5lRm9yY2UodmFsdWUsIHdoZWVsSW5kZXgpIHtcbiAgICAgICAgY29uc3QgdXVpZCA9IGdldFVVSUQocmVmKTtcbiAgICAgICAgdXVpZCAmJiB3b3JrZXIuYXBwbHlSYXljYXN0VmVoaWNsZUVuZ2luZUZvcmNlKHtcbiAgICAgICAgICBwcm9wczogW3ZhbHVlLCB3aGVlbEluZGV4XSxcbiAgICAgICAgICB1dWlkXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNldEJyYWtlKGJyYWtlLCB3aGVlbEluZGV4KSB7XG4gICAgICAgIGNvbnN0IHV1aWQgPSBnZXRVVUlEKHJlZik7XG4gICAgICAgIHV1aWQgJiYgd29ya2VyLnNldFJheWNhc3RWZWhpY2xlQnJha2Uoe1xuICAgICAgICAgIHByb3BzOiBbYnJha2UsIHdoZWVsSW5kZXhdLFxuICAgICAgICAgIHV1aWRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0U3RlZXJpbmdWYWx1ZSh2YWx1ZSwgd2hlZWxJbmRleCkge1xuICAgICAgICBjb25zdCB1dWlkID0gZ2V0VVVJRChyZWYpO1xuICAgICAgICB1dWlkICYmIHdvcmtlci5zZXRSYXljYXN0VmVoaWNsZVN0ZWVyaW5nVmFsdWUoe1xuICAgICAgICAgIHByb3BzOiBbdmFsdWUsIHdoZWVsSW5kZXhdLFxuICAgICAgICAgIHV1aWRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2xpZGluZzoge1xuICAgICAgICBzdWJzY3JpYmU6IHN1YnNjcmliZShyZWYsIHdvcmtlciwgc3Vic2NyaXB0aW9ucywgJ3NsaWRpbmcnLCB1bmRlZmluZWQsICd2ZWhpY2xlcycpXG4gICAgICB9XG4gICAgfTtcbiAgfSwgZGVwcyk7XG4gIHJldHVybiBbcmVmLCBhcGldO1xufVxuZnVuY3Rpb24gdXNlQ29udGFjdE1hdGVyaWFsKG1hdGVyaWFsQSwgbWF0ZXJpYWxCLCBvcHRpb25zLCBkZXBzKSB7XG4gIGlmIChkZXBzID09PSB2b2lkIDApIHtcbiAgICBkZXBzID0gW107XG4gIH1cbiAgY29uc3Qge1xuICAgIHdvcmtlclxuICB9ID0gdXNlUGh5c2ljc0NvbnRleHQoKTtcbiAgY29uc3QgW3V1aWRdID0gdXNlU3RhdGUoKCkgPT4gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB3b3JrZXIuYWRkQ29udGFjdE1hdGVyaWFsKHtcbiAgICAgIHByb3BzOiBbbWF0ZXJpYWxBLCBtYXRlcmlhbEIsIG9wdGlvbnNdLFxuICAgICAgdXVpZFxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3b3JrZXIucmVtb3ZlQ29udGFjdE1hdGVyaWFsKHtcbiAgICAgICAgdXVpZFxuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgZGVwcyk7XG59XG5cbmNvbnN0IHYgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgcyA9IG5ldyBWZWN0b3IzKDEsIDEsIDEpO1xuY29uc3QgcSA9IG5ldyBRdWF0ZXJuaW9uJDIoKTtcbmNvbnN0IG0gPSBuZXcgTWF0cml4NCgpO1xuZnVuY3Rpb24gYXBwbHkoaW5kZXgsIHBvc2l0aW9ucywgcXVhdGVybmlvbnMsIHNjYWxlLCBvYmplY3QpIHtcbiAgaWYgKHNjYWxlID09PSB2b2lkIDApIHtcbiAgICBzY2FsZSA9IHM7XG4gIH1cbiAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBtLmNvbXBvc2Uodi5mcm9tQXJyYXkocG9zaXRpb25zLCBpbmRleCAqIDMpLCBxLmZyb21BcnJheShxdWF0ZXJuaW9ucywgaW5kZXggKiA0KSwgc2NhbGUpO1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICBvYmplY3QubWF0cml4LmNvcHkobSk7XG4gICAgfVxuICAgIHJldHVybiBtO1xuICB9XG4gIHJldHVybiBtLmlkZW50aXR5KCk7XG59XG5jb25zdCB1bmlxdWUgPSAoKSA9PiB7XG4gIGNvbnN0IHZhbHVlcyA9IFtdO1xuICByZXR1cm4gdmFsdWUgPT4gdmFsdWVzLmluY2x1ZGVzKHZhbHVlKSA/IGZhbHNlIDogISF2YWx1ZXMucHVzaCh2YWx1ZSk7XG59O1xuZnVuY3Rpb24gUGh5c2ljc1Byb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBhbGxvd1NsZWVwID0gZmFsc2UsXG4gICAgYXhpc0luZGV4ID0gMCxcbiAgICBicm9hZHBoYXNlID0gJ05haXZlJyxcbiAgICBjaGlsZHJlbixcbiAgICBkZWZhdWx0Q29udGFjdE1hdGVyaWFsID0ge1xuICAgICAgY29udGFjdEVxdWF0aW9uU3RpZmZuZXNzOiAxZTZcbiAgICB9LFxuICAgIGZyaWN0aW9uR3Jhdml0eSA9IG51bGwsXG4gICAgZ3Jhdml0eSA9IFswLCAtOS44MSwgMF0sXG4gICAgaXNQYXVzZWQgPSBmYWxzZSxcbiAgICBpdGVyYXRpb25zID0gNSxcbiAgICBtYXhTdWJTdGVwcyA9IDEwLFxuICAgIHF1YXROb3JtYWxpemVGYXN0ID0gZmFsc2UsXG4gICAgcXVhdE5vcm1hbGl6ZVNraXAgPSAwLFxuICAgIHNob3VsZEludmFsaWRhdGUgPSB0cnVlLFxuICAgIHNpemUgPSAxMDAwLFxuICAgIHNvbHZlciA9ICdHUycsXG4gICAgc3RlcFNpemUgPSAxIC8gNjAsXG4gICAgdG9sZXJhbmNlID0gMC4wMDFcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICBpbnZhbGlkYXRlXG4gIH0gPSB1c2VUaHJlZSgpO1xuICBjb25zdCBbe1xuICAgIGJvZGllcyxcbiAgICBldmVudHMsXG4gICAgcmVmcyxcbiAgICBzY2FsZU92ZXJyaWRlcyxcbiAgICBzdWJzY3JpcHRpb25zLFxuICAgIHdvcmtlclxuICB9XSA9IHVzZVN0YXRlKCgpID0+ICh7XG4gICAgYm9kaWVzOiB7fSxcbiAgICBldmVudHM6IHt9LFxuICAgIHJlZnM6IHt9LFxuICAgIHNjYWxlT3ZlcnJpZGVzOiB7fSxcbiAgICBzdWJzY3JpcHRpb25zOiB7fSxcbiAgICB3b3JrZXI6IG5ldyBDYW5ub25Xb3JrZXJBUEkoe1xuICAgICAgYWxsb3dTbGVlcCxcbiAgICAgIGF4aXNJbmRleCxcbiAgICAgIGJyb2FkcGhhc2UsXG4gICAgICBkZWZhdWx0Q29udGFjdE1hdGVyaWFsLFxuICAgICAgZnJpY3Rpb25HcmF2aXR5LFxuICAgICAgZ3Jhdml0eSxcbiAgICAgIGl0ZXJhdGlvbnMsXG4gICAgICBxdWF0Tm9ybWFsaXplRmFzdCxcbiAgICAgIHF1YXROb3JtYWxpemVTa2lwLFxuICAgICAgc2l6ZSxcbiAgICAgIHNvbHZlcixcbiAgICAgIHRvbGVyYW5jZVxuICAgIH0pXG4gIH0pKTtcbiAgbGV0IHRpbWVTaW5jZUxhc3RDYWxsZWQgPSAwO1xuICBjb25zdCBsb29wID0gdXNlQ2FsbGJhY2soKF8sIGRlbHRhKSA9PiB7XG4gICAgaWYgKGlzUGF1c2VkKSByZXR1cm47XG4gICAgdGltZVNpbmNlTGFzdENhbGxlZCArPSBkZWx0YTtcbiAgICB3b3JrZXIuc3RlcCh7XG4gICAgICBtYXhTdWJTdGVwcyxcbiAgICAgIHN0ZXBTaXplLFxuICAgICAgdGltZVNpbmNlTGFzdENhbGxlZFxuICAgIH0pO1xuICAgIHRpbWVTaW5jZUxhc3RDYWxsZWQgPSAwO1xuICB9LCBbaXNQYXVzZWQsIG1heFN1YlN0ZXBzLCBzdGVwU2l6ZV0pO1xuICBjb25zdCBjb2xsaWRlSGFuZGxlciA9IF9yZWYyID0+IHtcbiAgICB2YXIgX2V2ZW50cyR0YXJnZXQ7XG4gICAgbGV0IHtcbiAgICAgIGJvZHksXG4gICAgICBjb250YWN0OiB7XG4gICAgICAgIGJpLFxuICAgICAgICBiaixcbiAgICAgICAgLi4uY29udGFjdFJlc3RcbiAgICAgIH0sXG4gICAgICB0YXJnZXQsXG4gICAgICAuLi5yZXN0XG4gICAgfSA9IF9yZWYyO1xuICAgIGNvbnN0IGNiID0gKF9ldmVudHMkdGFyZ2V0ID0gZXZlbnRzW3RhcmdldF0pID09IG51bGwgPyB2b2lkIDAgOiBfZXZlbnRzJHRhcmdldC5jb2xsaWRlO1xuICAgIGNiICYmIGNiKHtcbiAgICAgIGJvZHk6IHJlZnNbYm9keV0sXG4gICAgICBjb250YWN0OiB7XG4gICAgICAgIGJpOiByZWZzW2JpXSxcbiAgICAgICAgYmo6IHJlZnNbYmpdLFxuICAgICAgICAuLi5jb250YWN0UmVzdFxuICAgICAgfSxcbiAgICAgIHRhcmdldDogcmVmc1t0YXJnZXRdLFxuICAgICAgLi4ucmVzdFxuICAgIH0pO1xuICB9O1xuICBjb25zdCBjb2xsaWRlQmVnaW5IYW5kbGVyID0gX3JlZjMgPT4ge1xuICAgIHZhciBfZXZlbnRzJGJvZHlBLCBfZXZlbnRzJGJvZHlCO1xuICAgIGxldCB7XG4gICAgICBib2R5QSxcbiAgICAgIGJvZHlCXG4gICAgfSA9IF9yZWYzO1xuICAgIGNvbnN0IGNiQSA9IChfZXZlbnRzJGJvZHlBID0gZXZlbnRzW2JvZHlBXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9ldmVudHMkYm9keUEuY29sbGlkZUJlZ2luO1xuICAgIGNiQSAmJiBjYkEoe1xuICAgICAgYm9keTogcmVmc1tib2R5Ql0sXG4gICAgICBvcDogJ2V2ZW50JyxcbiAgICAgIHRhcmdldDogcmVmc1tib2R5QV0sXG4gICAgICB0eXBlOiAnY29sbGlkZUJlZ2luJ1xuICAgIH0pO1xuICAgIGNvbnN0IGNiQiA9IChfZXZlbnRzJGJvZHlCID0gZXZlbnRzW2JvZHlCXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9ldmVudHMkYm9keUIuY29sbGlkZUJlZ2luO1xuICAgIGNiQiAmJiBjYkIoe1xuICAgICAgYm9keTogcmVmc1tib2R5QV0sXG4gICAgICBvcDogJ2V2ZW50JyxcbiAgICAgIHRhcmdldDogcmVmc1tib2R5Ql0sXG4gICAgICB0eXBlOiAnY29sbGlkZUJlZ2luJ1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBjb2xsaWRlRW5kSGFuZGxlciA9IF9yZWY0ID0+IHtcbiAgICB2YXIgX2V2ZW50cyRib2R5QTIsIF9ldmVudHMkYm9keUIyO1xuICAgIGxldCB7XG4gICAgICBib2R5QSxcbiAgICAgIGJvZHlCXG4gICAgfSA9IF9yZWY0O1xuICAgIGNvbnN0IGNiQSA9IChfZXZlbnRzJGJvZHlBMiA9IGV2ZW50c1tib2R5QV0pID09IG51bGwgPyB2b2lkIDAgOiBfZXZlbnRzJGJvZHlBMi5jb2xsaWRlRW5kO1xuICAgIGNiQSAmJiBjYkEoe1xuICAgICAgYm9keTogcmVmc1tib2R5Ql0sXG4gICAgICBvcDogJ2V2ZW50JyxcbiAgICAgIHRhcmdldDogcmVmc1tib2R5QV0sXG4gICAgICB0eXBlOiAnY29sbGlkZUVuZCdcbiAgICB9KTtcbiAgICBjb25zdCBjYkIgPSAoX2V2ZW50cyRib2R5QjIgPSBldmVudHNbYm9keUJdKSA9PSBudWxsID8gdm9pZCAwIDogX2V2ZW50cyRib2R5QjIuY29sbGlkZUVuZDtcbiAgICBjYkIgJiYgY2JCKHtcbiAgICAgIGJvZHk6IHJlZnNbYm9keUFdLFxuICAgICAgb3A6ICdldmVudCcsXG4gICAgICB0YXJnZXQ6IHJlZnNbYm9keUJdLFxuICAgICAgdHlwZTogJ2NvbGxpZGVFbmQnXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGZyYW1lSGFuZGxlciA9IF9yZWY1ID0+IHtcbiAgICBsZXQge1xuICAgICAgYWN0aXZlLFxuICAgICAgYm9kaWVzOiB1dWlkcyA9IFtdLFxuICAgICAgb2JzZXJ2YXRpb25zLFxuICAgICAgcG9zaXRpb25zLFxuICAgICAgcXVhdGVybmlvbnNcbiAgICB9ID0gX3JlZjU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1dWlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgYm9kaWVzW3V1aWRzW2ldXSA9IGk7XG4gICAgfVxuICAgIG9ic2VydmF0aW9ucy5mb3JFYWNoKF9yZWY2ID0+IHtcbiAgICAgIGxldCBbaWQsIHZhbHVlLCB0eXBlXSA9IF9yZWY2O1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uc1tpZF0gfHwge307XG4gICAgICBjb25zdCBjYiA9IHN1YnNjcmlwdGlvblt0eXBlXTtcbiAgICAgIC8vIEhFTFA6IFdlIGNsZWFybHkga25vdyB0aGUgdHlwZSBvZiB0aGUgY2FsbGJhY2ssIGJ1dCB0eXBlc2NyaXB0IGNhbid0IGRlYWwgd2l0aCBpdFxuICAgICAgY2IgJiYgY2IodmFsdWUpO1xuICAgIH0pO1xuICAgIGlmICghYWN0aXZlKSByZXR1cm47XG4gICAgZm9yIChjb25zdCByZWYgb2YgT2JqZWN0LnZhbHVlcyhyZWZzKS5maWx0ZXIodW5pcXVlKCkpKSB7XG4gICAgICBpZiAocmVmIGluc3RhbmNlb2YgSW5zdGFuY2VkTWVzaCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZi5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGAke3JlZi51dWlkfS8ke2l9YDtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IGJvZGllc1t1dWlkXTtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVmLnNldE1hdHJpeEF0KGksIGFwcGx5KGluZGV4LCBwb3NpdGlvbnMsIHF1YXRlcm5pb25zLCBzY2FsZU92ZXJyaWRlc1t1dWlkXSkpO1xuICAgICAgICAgICAgcmVmLmluc3RhbmNlTWF0cml4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gc2NhbGVPdmVycmlkZXNbcmVmLnV1aWRdIHx8IHJlZi5zY2FsZTtcbiAgICAgICAgYXBwbHkoYm9kaWVzW3JlZi51dWlkXSwgcG9zaXRpb25zLCBxdWF0ZXJuaW9ucywgc2NhbGUsIHJlZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzaG91bGRJbnZhbGlkYXRlKSB7XG4gICAgICBpbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCByYXloaXRIYW5kbGVyID0gX3JlZjcgPT4ge1xuICAgIHZhciBfZXZlbnRzJHV1aWQ7XG4gICAgbGV0IHtcbiAgICAgIGJvZHksXG4gICAgICByYXk6IHtcbiAgICAgICAgdXVpZCxcbiAgICAgICAgLi4ucmF5UmVzdFxuICAgICAgfSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gX3JlZjc7XG4gICAgY29uc3QgY2IgPSAoX2V2ZW50cyR1dWlkID0gZXZlbnRzW3V1aWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2V2ZW50cyR1dWlkLnJheWhpdDtcbiAgICBjYiAmJiBjYih7XG4gICAgICBib2R5OiBib2R5ID8gcmVmc1tib2R5XSA6IG51bGwsXG4gICAgICByYXk6IHtcbiAgICAgICAgdXVpZCxcbiAgICAgICAgLi4ucmF5UmVzdFxuICAgICAgfSxcbiAgICAgIC4uLnJlc3RcbiAgICB9KTtcbiAgfTtcblxuICAvLyBSdW4gbG9vcCAqYWZ0ZXIqIGFsbCB0aGUgcGh5c2ljcyBvYmplY3RzIGhhdmUgcmFuIHRoZWlycyFcbiAgLy8gT3RoZXJ3aXNlIHRoZSBidWZmZXJzIHdpbGwgYmUgaW52YWxpZGF0ZWQgYnkgdGhlIGJyb3dzZXJcbiAgdXNlRnJhbWUobG9vcCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd29ya2VyLmNvbm5lY3QoKTtcbiAgICB3b3JrZXIuaW5pdCgpO1xuICAgIHdvcmtlci5vbignY29sbGlkZScsIGNvbGxpZGVIYW5kbGVyKTtcbiAgICB3b3JrZXIub24oJ2NvbGxpZGVCZWdpbicsIGNvbGxpZGVCZWdpbkhhbmRsZXIpO1xuICAgIHdvcmtlci5vbignY29sbGlkZUVuZCcsIGNvbGxpZGVFbmRIYW5kbGVyKTtcbiAgICB3b3JrZXIub24oJ2ZyYW1lJywgZnJhbWVIYW5kbGVyKTtcbiAgICB3b3JrZXIub24oJ3JheWhpdCcsIHJheWhpdEhhbmRsZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICB3b3JrZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdvcmtlci5heGlzSW5kZXggPSBheGlzSW5kZXg7XG4gIH0sIFtheGlzSW5kZXhdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB3b3JrZXIuYnJvYWRwaGFzZSA9IGJyb2FkcGhhc2U7XG4gIH0sIFticm9hZHBoYXNlXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd29ya2VyLmdyYXZpdHkgPSBncmF2aXR5O1xuICB9LCBbZ3Jhdml0eV0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdvcmtlci5pdGVyYXRpb25zID0gaXRlcmF0aW9ucztcbiAgfSwgW2l0ZXJhdGlvbnNdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB3b3JrZXIudG9sZXJhbmNlID0gdG9sZXJhbmNlO1xuICB9LCBbdG9sZXJhbmNlXSk7XG4gIGNvbnN0IHZhbHVlID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIGJvZGllcyxcbiAgICBldmVudHMsXG4gICAgcmVmcyxcbiAgICBzY2FsZU92ZXJyaWRlcyxcbiAgICBzdWJzY3JpcHRpb25zLFxuICAgIHdvcmtlclxuICB9KSwgW2JvZGllcywgZXZlbnRzLCByZWZzLCBzdWJzY3JpcHRpb25zLCB3b3JrZXJdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3gocGh5c2ljc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pO1xufVxuXG5leHBvcnQgeyBEZWJ1Z1Byb3ZpZGVyIGFzIERlYnVnLCBQaHlzaWNzUHJvdmlkZXIgYXMgUGh5c2ljcywgdXNlQm94LCB1c2VDb21wb3VuZEJvZHksIHVzZUNvbmVUd2lzdENvbnN0cmFpbnQsIHVzZUNvbnRhY3RNYXRlcmlhbCwgdXNlQ29udmV4UG9seWhlZHJvbiwgdXNlQ3lsaW5kZXIsIHVzZURpc3RhbmNlQ29uc3RyYWludCwgdXNlSGVpZ2h0ZmllbGQsIHVzZUhpbmdlQ29uc3RyYWludCwgdXNlTG9ja0NvbnN0cmFpbnQsIHVzZVBhcnRpY2xlLCB1c2VQbGFuZSwgdXNlUG9pbnRUb1BvaW50Q29uc3RyYWludCwgdXNlUmF5Y2FzdEFsbCwgdXNlUmF5Y2FzdEFueSwgdXNlUmF5Y2FzdENsb3Nlc3QsIHVzZVJheWNhc3RWZWhpY2xlLCB1c2VTcGhlcmUsIHVzZVNwcmluZywgdXNlVHJpbWVzaCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/cannon/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/Center.js":
/*!*******************************************************!*\
  !*** ./node_modules/@react-three/drei/core/Center.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Center: () => (/* binding */ Center)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nconst Center = /* @__PURE__ */react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function Center({\n  children,\n  disable,\n  disableX,\n  disableY,\n  disableZ,\n  left,\n  right,\n  top,\n  bottom,\n  front,\n  back,\n  onCentered,\n  precise = true,\n  cacheKey = 0,\n  ...props\n}, fRef) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  const outer = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  const inner = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(() => {\n    outer.current.matrixWorld.identity();\n    const box3 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3().setFromObject(inner.current, precise);\n    const center = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    const sphere = new three__WEBPACK_IMPORTED_MODULE_2__.Sphere();\n    const width = box3.max.x - box3.min.x;\n    const height = box3.max.y - box3.min.y;\n    const depth = box3.max.z - box3.min.z;\n    box3.getCenter(center);\n    box3.getBoundingSphere(sphere);\n    const vAlign = top ? height / 2 : bottom ? -height / 2 : 0;\n    const hAlign = left ? -width / 2 : right ? width / 2 : 0;\n    const dAlign = front ? depth / 2 : back ? -depth / 2 : 0;\n    outer.current.position.set(disable || disableX ? 0 : -center.x + hAlign, disable || disableY ? 0 : -center.y + vAlign, disable || disableZ ? 0 : -center.z + dAlign);\n\n    // Only fire onCentered if the bounding box has changed\n    if (typeof onCentered !== 'undefined') {\n      onCentered({\n        parent: ref.current.parent,\n        container: ref.current,\n        width,\n        height,\n        depth,\n        boundingBox: box3,\n        boundingSphere: sphere,\n        center: center,\n        verticalAlignment: vAlign,\n        horizontalAlignment: hAlign,\n        depthAlignment: dAlign\n      });\n    }\n  }, [cacheKey, onCentered, top, left, front, disable, disableX, disableY, disableZ, precise, right, bottom, back]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(fRef, () => ref.current, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    ref: ref\n  }, props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", {\n    ref: outer\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", {\n    ref: inner\n  }, children)));\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9DZW50ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEQ7QUFDWjtBQUNmOztBQUUvQiw4QkFBOEIsNkNBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxjQUFjLHlDQUFZO0FBQzFCLGdCQUFnQix5Q0FBWTtBQUM1QixnQkFBZ0IseUNBQVk7QUFDNUIsRUFBRSxrREFBcUI7QUFDdkI7QUFDQSxxQkFBcUIsdUNBQUk7QUFDekIsdUJBQXVCLDBDQUFPO0FBQzlCLHVCQUF1Qix5Q0FBTTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSCxFQUFFLHNEQUF5QjtBQUMzQixzQkFBc0IsZ0RBQW1CLFVBQVUsOEVBQVE7QUFDM0Q7QUFDQSxHQUFHLHVCQUF1QixnREFBbUI7QUFDN0M7QUFDQSxHQUFHLGVBQWUsZ0RBQW1CO0FBQ3JDO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25pcGVyLWFpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL2NvcmUvQ2VudGVyLmpzPzBlYzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgQm94MywgVmVjdG9yMywgU3BoZXJlIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBDZW50ZXIgPSAvKiBAX19QVVJFX18gKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENlbnRlcih7XG4gIGNoaWxkcmVuLFxuICBkaXNhYmxlLFxuICBkaXNhYmxlWCxcbiAgZGlzYWJsZVksXG4gIGRpc2FibGVaLFxuICBsZWZ0LFxuICByaWdodCxcbiAgdG9wLFxuICBib3R0b20sXG4gIGZyb250LFxuICBiYWNrLFxuICBvbkNlbnRlcmVkLFxuICBwcmVjaXNlID0gdHJ1ZSxcbiAgY2FjaGVLZXkgPSAwLFxuICAuLi5wcm9wc1xufSwgZlJlZikge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG91dGVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBpbm5lciA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBvdXRlci5jdXJyZW50Lm1hdHJpeFdvcmxkLmlkZW50aXR5KCk7XG4gICAgY29uc3QgYm94MyA9IG5ldyBCb3gzKCkuc2V0RnJvbU9iamVjdChpbm5lci5jdXJyZW50LCBwcmVjaXNlKTtcbiAgICBjb25zdCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuICAgIGNvbnN0IHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcbiAgICBjb25zdCB3aWR0aCA9IGJveDMubWF4LnggLSBib3gzLm1pbi54O1xuICAgIGNvbnN0IGhlaWdodCA9IGJveDMubWF4LnkgLSBib3gzLm1pbi55O1xuICAgIGNvbnN0IGRlcHRoID0gYm94My5tYXgueiAtIGJveDMubWluLno7XG4gICAgYm94My5nZXRDZW50ZXIoY2VudGVyKTtcbiAgICBib3gzLmdldEJvdW5kaW5nU3BoZXJlKHNwaGVyZSk7XG4gICAgY29uc3QgdkFsaWduID0gdG9wID8gaGVpZ2h0IC8gMiA6IGJvdHRvbSA/IC1oZWlnaHQgLyAyIDogMDtcbiAgICBjb25zdCBoQWxpZ24gPSBsZWZ0ID8gLXdpZHRoIC8gMiA6IHJpZ2h0ID8gd2lkdGggLyAyIDogMDtcbiAgICBjb25zdCBkQWxpZ24gPSBmcm9udCA/IGRlcHRoIC8gMiA6IGJhY2sgPyAtZGVwdGggLyAyIDogMDtcbiAgICBvdXRlci5jdXJyZW50LnBvc2l0aW9uLnNldChkaXNhYmxlIHx8IGRpc2FibGVYID8gMCA6IC1jZW50ZXIueCArIGhBbGlnbiwgZGlzYWJsZSB8fCBkaXNhYmxlWSA/IDAgOiAtY2VudGVyLnkgKyB2QWxpZ24sIGRpc2FibGUgfHwgZGlzYWJsZVogPyAwIDogLWNlbnRlci56ICsgZEFsaWduKTtcblxuICAgIC8vIE9ubHkgZmlyZSBvbkNlbnRlcmVkIGlmIHRoZSBib3VuZGluZyBib3ggaGFzIGNoYW5nZWRcbiAgICBpZiAodHlwZW9mIG9uQ2VudGVyZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvbkNlbnRlcmVkKHtcbiAgICAgICAgcGFyZW50OiByZWYuY3VycmVudC5wYXJlbnQsXG4gICAgICAgIGNvbnRhaW5lcjogcmVmLmN1cnJlbnQsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIGRlcHRoLFxuICAgICAgICBib3VuZGluZ0JveDogYm94MyxcbiAgICAgICAgYm91bmRpbmdTcGhlcmU6IHNwaGVyZSxcbiAgICAgICAgY2VudGVyOiBjZW50ZXIsXG4gICAgICAgIHZlcnRpY2FsQWxpZ25tZW50OiB2QWxpZ24sXG4gICAgICAgIGhvcml6b250YWxBbGlnbm1lbnQ6IGhBbGlnbixcbiAgICAgICAgZGVwdGhBbGlnbm1lbnQ6IGRBbGlnblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2FjaGVLZXksIG9uQ2VudGVyZWQsIHRvcCwgbGVmdCwgZnJvbnQsIGRpc2FibGUsIGRpc2FibGVYLCBkaXNhYmxlWSwgZGlzYWJsZVosIHByZWNpc2UsIHJpZ2h0LCBib3R0b20sIGJhY2tdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShmUmVmLCAoKSA9PiByZWYuY3VycmVudCwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJncm91cFwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdyb3VwXCIsIHtcbiAgICByZWY6IG91dGVyXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ3JvdXBcIiwge1xuICAgIHJlZjogaW5uZXJcbiAgfSwgY2hpbGRyZW4pKSk7XG59KTtcblxuZXhwb3J0IHsgQ2VudGVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/Center.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/MatcapTexture.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/MatcapTexture.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MatcapTexture: () => (/* binding */ MatcapTexture),\n/* harmony export */   useMatcapTexture: () => (/* binding */ useMatcapTexture)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Texture.js */ \"(ssr)/./node_modules/@react-three/drei/core/Texture.js\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.js\");\n\n\n\n\nfunction getFormatString(format) {\n  switch (format) {\n    case 64:\n      return '-64px';\n    case 128:\n      return '-128px';\n    case 256:\n      return '-256px';\n    case 512:\n      return '-512px';\n    default:\n      return '';\n  }\n}\nconst LIST_URL = 'https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/matcaps.json';\nconst MATCAP_ROOT = 'https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d';\nfunction useMatcapTexture(id = 0, format = 1024, onLoad) {\n  const matcapList = (0,suspend_react__WEBPACK_IMPORTED_MODULE_1__.suspend)(() => fetch(LIST_URL).then(res => res.json()), ['matcapList']);\n  const DEFAULT_MATCAP = matcapList[0];\n  const numTot = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => Object.keys(matcapList).length, []);\n  const fileHash = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (typeof id === 'string') {\n      return id;\n    } else if (typeof id === 'number') {\n      return matcapList[id];\n    }\n    return null;\n  }, [id]);\n  const fileName = `${fileHash || DEFAULT_MATCAP}${getFormatString(format)}.png`;\n  const url = `${MATCAP_ROOT}/${format}/${fileName}`;\n  const matcapTexture = (0,_Texture_js__WEBPACK_IMPORTED_MODULE_2__.useTexture)(url, onLoad);\n  return [matcapTexture, url, numTot];\n}\n\n//\n\nconst MatcapTexture = ({\n  children,\n  id,\n  format,\n  onLoad\n}) => {\n  const texture = useMatcapTexture(id, format, onLoad);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children == null ? void 0 : children(texture));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9NYXRjYXBUZXh0dXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQjtBQUNXO0FBQ0Y7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0RBQU87QUFDNUI7QUFDQSxpQkFBaUIsMENBQWE7QUFDOUIsbUJBQW1CLDBDQUFhO0FBQ2hDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHNCQUFzQiwyQkFBMkIsRUFBRSx3QkFBd0I7QUFDM0UsaUJBQWlCLFlBQVksR0FBRyxPQUFPLEdBQUcsU0FBUztBQUNuRCx3QkFBd0IsdURBQVU7QUFDbEM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esc0JBQXNCLGdEQUFtQixDQUFDLDJDQUFjO0FBQ3hEOztBQUUyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NuaXBlci1haS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9jb3JlL01hdGNhcFRleHR1cmUuanM/Mzg2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcbmltcG9ydCB7IHN1c3BlbmQgfSBmcm9tICdzdXNwZW5kLXJlYWN0JztcblxuZnVuY3Rpb24gZ2V0Rm9ybWF0U3RyaW5nKGZvcm1hdCkge1xuICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gJy02NHB4JztcbiAgICBjYXNlIDEyODpcbiAgICAgIHJldHVybiAnLTEyOHB4JztcbiAgICBjYXNlIDI1NjpcbiAgICAgIHJldHVybiAnLTI1NnB4JztcbiAgICBjYXNlIDUxMjpcbiAgICAgIHJldHVybiAnLTUxMnB4JztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5jb25zdCBMSVNUX1VSTCA9ICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvcG1uZHJzL2RyZWktYXNzZXRzQG1hc3Rlci9tYXRjYXBzLmpzb24nO1xuY29uc3QgTUFUQ0FQX1JPT1QgPSAnaHR0cHM6Ly9yYXdjZG4uZ2l0aGFjay5jb20vZW1tZWxsZXBwaS9tYXRjYXBzLzliMzZjY2FhZjBhMjQ4ODFhMzkwNjJkMDU1NjZjOWU5MmJlNGFhMGQnO1xuZnVuY3Rpb24gdXNlTWF0Y2FwVGV4dHVyZShpZCA9IDAsIGZvcm1hdCA9IDEwMjQsIG9uTG9hZCkge1xuICBjb25zdCBtYXRjYXBMaXN0ID0gc3VzcGVuZCgoKSA9PiBmZXRjaChMSVNUX1VSTCkudGhlbihyZXMgPT4gcmVzLmpzb24oKSksIFsnbWF0Y2FwTGlzdCddKTtcbiAgY29uc3QgREVGQVVMVF9NQVRDQVAgPSBtYXRjYXBMaXN0WzBdO1xuICBjb25zdCBudW1Ub3QgPSBSZWFjdC51c2VNZW1vKCgpID0+IE9iamVjdC5rZXlzKG1hdGNhcExpc3QpLmxlbmd0aCwgW10pO1xuICBjb25zdCBmaWxlSGFzaCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbWF0Y2FwTGlzdFtpZF07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBbaWRdKTtcbiAgY29uc3QgZmlsZU5hbWUgPSBgJHtmaWxlSGFzaCB8fCBERUZBVUxUX01BVENBUH0ke2dldEZvcm1hdFN0cmluZyhmb3JtYXQpfS5wbmdgO1xuICBjb25zdCB1cmwgPSBgJHtNQVRDQVBfUk9PVH0vJHtmb3JtYXR9LyR7ZmlsZU5hbWV9YDtcbiAgY29uc3QgbWF0Y2FwVGV4dHVyZSA9IHVzZVRleHR1cmUodXJsLCBvbkxvYWQpO1xuICByZXR1cm4gW21hdGNhcFRleHR1cmUsIHVybCwgbnVtVG90XTtcbn1cblxuLy9cblxuY29uc3QgTWF0Y2FwVGV4dHVyZSA9ICh7XG4gIGNoaWxkcmVuLFxuICBpZCxcbiAgZm9ybWF0LFxuICBvbkxvYWRcbn0pID0+IHtcbiAgY29uc3QgdGV4dHVyZSA9IHVzZU1hdGNhcFRleHR1cmUoaWQsIGZvcm1hdCwgb25Mb2FkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbiA9PSBudWxsID8gdm9pZCAwIDogY2hpbGRyZW4odGV4dHVyZSkpO1xufTtcblxuZXhwb3J0IHsgTWF0Y2FwVGV4dHVyZSwgdXNlTWF0Y2FwVGV4dHVyZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/MatcapTexture.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/OrbitControls.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/OrbitControls.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrbitControls: () => (/* binding */ OrbitControls)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/controls/OrbitControls.js\");\n\n\n\n\n\nconst OrbitControls = /* @__PURE__ */react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  keyEvents = false,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.invalidate);\n  const defaultCamera = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.camera);\n  const gl = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.gl);\n  const events = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.events);\n  const setEvents = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.setEvents);\n  const set = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.set);\n  const get = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.get);\n  const performance = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => new three_stdlib__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(explCamera), [explCamera]);\n  (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.F)(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n    if (keyEvents) {\n      controls.connect(keyEvents === true ? explDomElement : keyEvents);\n    }\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [keyEvents, explDomElement, regress, controls, invalidate]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n    const onStartCb = e => {\n      if (onStart) onStart(e);\n    };\n    const onEndCb = e => {\n      if (onEnd) onEnd(e);\n    };\n    controls.addEventListener('change', callback);\n    controls.addEventListener('start', onStartCb);\n    controls.addEventListener('end', onEndCb);\n    return () => {\n      controls.removeEventListener('start', onStartCb);\n      controls.removeEventListener('end', onEndCb);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd, controls, invalidate, setEvents]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"primitive\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9PcmJpdENvbnRyb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwRDtBQUNGO0FBQ3pCO0FBQ2lDOztBQUVoRSxxQ0FBcUMsNkNBQWdCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHFCQUFxQixxREFBUTtBQUM3Qix3QkFBd0IscURBQVE7QUFDaEMsYUFBYSxxREFBUTtBQUNyQixpQkFBaUIscURBQVE7QUFDekIsb0JBQW9CLHFEQUFRO0FBQzVCLGNBQWMscURBQVE7QUFDdEIsY0FBYyxxREFBUTtBQUN0QixzQkFBc0IscURBQVE7QUFDOUI7QUFDQTtBQUNBLG1CQUFtQiwwQ0FBYSxXQUFXLHVEQUFlO0FBQzFELEVBQUUscURBQVE7QUFDVjtBQUNBLEdBQUc7QUFDSCxFQUFFLDRDQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRSw0Q0FBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLDRDQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0gsc0JBQXNCLGdEQUFtQixjQUFjLDhFQUFRO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NuaXBlci1haS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9jb3JlL09yYml0Q29udHJvbHMuanM/NDZiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyB1c2VUaHJlZSwgdXNlRnJhbWUgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyBhcyBPcmJpdENvbnRyb2xzJDEgfSBmcm9tICd0aHJlZS1zdGRsaWInO1xuXG5jb25zdCBPcmJpdENvbnRyb2xzID0gLyogQF9fUFVSRV9fICovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBtYWtlRGVmYXVsdCxcbiAgY2FtZXJhLFxuICByZWdyZXNzLFxuICBkb21FbGVtZW50LFxuICBlbmFibGVEYW1waW5nID0gdHJ1ZSxcbiAga2V5RXZlbnRzID0gZmFsc2UsXG4gIG9uQ2hhbmdlLFxuICBvblN0YXJ0LFxuICBvbkVuZCxcbiAgLi4ucmVzdFByb3BzXG59LCByZWYpID0+IHtcbiAgY29uc3QgaW52YWxpZGF0ZSA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLmludmFsaWRhdGUpO1xuICBjb25zdCBkZWZhdWx0Q2FtZXJhID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUuY2FtZXJhKTtcbiAgY29uc3QgZ2wgPSB1c2VUaHJlZShzdGF0ZSA9PiBzdGF0ZS5nbCk7XG4gIGNvbnN0IGV2ZW50cyA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLmV2ZW50cyk7XG4gIGNvbnN0IHNldEV2ZW50cyA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLnNldEV2ZW50cyk7XG4gIGNvbnN0IHNldCA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLnNldCk7XG4gIGNvbnN0IGdldCA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLmdldCk7XG4gIGNvbnN0IHBlcmZvcm1hbmNlID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUucGVyZm9ybWFuY2UpO1xuICBjb25zdCBleHBsQ2FtZXJhID0gY2FtZXJhIHx8IGRlZmF1bHRDYW1lcmE7XG4gIGNvbnN0IGV4cGxEb21FbGVtZW50ID0gZG9tRWxlbWVudCB8fCBldmVudHMuY29ubmVjdGVkIHx8IGdsLmRvbUVsZW1lbnQ7XG4gIGNvbnN0IGNvbnRyb2xzID0gUmVhY3QudXNlTWVtbygoKSA9PiBuZXcgT3JiaXRDb250cm9scyQxKGV4cGxDYW1lcmEpLCBbZXhwbENhbWVyYV0pO1xuICB1c2VGcmFtZSgoKSA9PiB7XG4gICAgaWYgKGNvbnRyb2xzLmVuYWJsZWQpIGNvbnRyb2xzLnVwZGF0ZSgpO1xuICB9LCAtMSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGtleUV2ZW50cykge1xuICAgICAgY29udHJvbHMuY29ubmVjdChrZXlFdmVudHMgPT09IHRydWUgPyBleHBsRG9tRWxlbWVudCA6IGtleUV2ZW50cyk7XG4gICAgfVxuICAgIGNvbnRyb2xzLmNvbm5lY3QoZXhwbERvbUVsZW1lbnQpO1xuICAgIHJldHVybiAoKSA9PiB2b2lkIGNvbnRyb2xzLmRpc3Bvc2UoKTtcbiAgfSwgW2tleUV2ZW50cywgZXhwbERvbUVsZW1lbnQsIHJlZ3Jlc3MsIGNvbnRyb2xzLCBpbnZhbGlkYXRlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBlID0+IHtcbiAgICAgIGludmFsaWRhdGUoKTtcbiAgICAgIGlmIChyZWdyZXNzKSBwZXJmb3JtYW5jZS5yZWdyZXNzKCk7XG4gICAgICBpZiAob25DaGFuZ2UpIG9uQ2hhbmdlKGUpO1xuICAgIH07XG4gICAgY29uc3Qgb25TdGFydENiID0gZSA9PiB7XG4gICAgICBpZiAob25TdGFydCkgb25TdGFydChlKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uRW5kQ2IgPSBlID0+IHtcbiAgICAgIGlmIChvbkVuZCkgb25FbmQoZSk7XG4gICAgfTtcbiAgICBjb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjYWxsYmFjayk7XG4gICAgY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignc3RhcnQnLCBvblN0YXJ0Q2IpO1xuICAgIGNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsIG9uRW5kQ2IpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb250cm9scy5yZW1vdmVFdmVudExpc3RlbmVyKCdzdGFydCcsIG9uU3RhcnRDYik7XG4gICAgICBjb250cm9scy5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmQnLCBvbkVuZENiKTtcbiAgICAgIGNvbnRyb2xzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9LCBbb25DaGFuZ2UsIG9uU3RhcnQsIG9uRW5kLCBjb250cm9scywgaW52YWxpZGF0ZSwgc2V0RXZlbnRzXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1ha2VEZWZhdWx0KSB7XG4gICAgICBjb25zdCBvbGQgPSBnZXQoKS5jb250cm9scztcbiAgICAgIHNldCh7XG4gICAgICAgIGNvbnRyb2xzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiAoKSA9PiBzZXQoe1xuICAgICAgICBjb250cm9sczogb2xkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFttYWtlRGVmYXVsdCwgY29udHJvbHNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicHJpbWl0aXZlXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBvYmplY3Q6IGNvbnRyb2xzLFxuICAgIGVuYWJsZURhbXBpbmc6IGVuYWJsZURhbXBpbmdcbiAgfSwgcmVzdFByb3BzKSk7XG59KTtcblxuZXhwb3J0IHsgT3JiaXRDb250cm9scyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/OrbitControls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/Text3D.js":
/*!*******************************************************!*\
  !*** ./node_modules/@react-three/drei/core/Text3D.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Text3D: () => (/* binding */ Text3D)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js\");\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/geometries/TextGeometry.js\");\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/utils/BufferGeometryUtils.js\");\n/* harmony import */ var _useFont_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useFont.js */ \"(ssr)/./node_modules/@react-three/drei/core/useFont.js\");\n\n\n\n\n\n\n\nconst types = ['string', 'number'];\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  react__WEBPACK_IMPORTED_MODULE_1__.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\nconst Text3D = /* @__PURE__ */react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  smooth,\n  children,\n  ...props\n}, fref) => {\n  react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.e)({\n    RenamedTextGeometry: three_stdlib__WEBPACK_IMPORTED_MODULE_3__.TextGeometry\n  }), []);\n  const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  const font = (0,_useFont_js__WEBPACK_IMPORTED_MODULE_4__.useFont)(_font);\n  const opts = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n  const [label, ...rest] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getTextFromChildren(children), [children]);\n  const args = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => [label, opts], [label, opts]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = (0,three_stdlib__WEBPACK_IMPORTED_MODULE_5__.mergeVertices)(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"mesh\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    ref: ref\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9UZXh0M0QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBMEQ7QUFDM0I7QUFDQztBQUNZO0FBQ2U7QUFDcEI7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwyQ0FBYztBQUNoQiwwREFBMEQ7QUFDMUQsR0FBRztBQUNIO0FBQ0E7QUFDQSw4QkFBOEIsNkNBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsRUFBRSwwQ0FBYSxPQUFPLHFEQUFNO0FBQzVCLHlCQUF5QixzREFBWTtBQUNyQyxHQUFHO0FBQ0gsY0FBYyx5Q0FBWTtBQUMxQixlQUFlLG9EQUFPO0FBQ3RCLGVBQWUsOENBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBLDJCQUEyQiw4Q0FBTztBQUNsQyxlQUFlLDBDQUFhO0FBQzVCLEVBQUUsa0RBQXFCO0FBQ3ZCO0FBQ0EsNkJBQTZCLDJEQUFhO0FBQzFDO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRSxzREFBeUI7QUFDM0Isc0JBQXNCLGdEQUFtQixTQUFTLDhFQUFRLEdBQUc7QUFDN0Q7QUFDQSxHQUFHLGdCQUFnQixnREFBbUI7QUFDdEM7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbmlwZXItYWkvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9UZXh0M0QuanM/ZTAzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnQHJlYWN0LXRocmVlL2ZpYmVyJztcbmltcG9ydCB7IFRleHRHZW9tZXRyeSwgbWVyZ2VWZXJ0aWNlcyB9IGZyb20gJ3RocmVlLXN0ZGxpYic7XG5pbXBvcnQgeyB1c2VGb250IH0gZnJvbSAnLi91c2VGb250LmpzJztcblxuY29uc3QgdHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInXTtcbmNvbnN0IGdldFRleHRGcm9tQ2hpbGRyZW4gPSBjaGlsZHJlbiA9PiB7XG4gIGxldCBsYWJlbCA9ICcnO1xuICBjb25zdCByZXN0ID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICBpZiAodHlwZXMuaW5jbHVkZXModHlwZW9mIGNoaWxkKSkgbGFiZWwgKz0gY2hpbGQgKyAnJztlbHNlIHJlc3QucHVzaChjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gW2xhYmVsLCAuLi5yZXN0XTtcbn07XG5jb25zdCBUZXh0M0QgPSAvKiBAX19QVVJFX18gKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIGZvbnQ6IF9mb250LFxuICBsZXR0ZXJTcGFjaW5nID0gMCxcbiAgbGluZUhlaWdodCA9IDEsXG4gIHNpemUgPSAxLFxuICBoZWlnaHQgPSAwLjIsXG4gIGJldmVsVGhpY2tuZXNzID0gMC4xLFxuICBiZXZlbFNpemUgPSAwLjAxLFxuICBiZXZlbEVuYWJsZWQgPSBmYWxzZSxcbiAgYmV2ZWxPZmZzZXQgPSAwLFxuICBiZXZlbFNlZ21lbnRzID0gNCxcbiAgY3VydmVTZWdtZW50cyA9IDgsXG4gIHNtb290aCxcbiAgY2hpbGRyZW4sXG4gIC4uLnByb3BzXG59LCBmcmVmKSA9PiB7XG4gIFJlYWN0LnVzZU1lbW8oKCkgPT4gZXh0ZW5kKHtcbiAgICBSZW5hbWVkVGV4dEdlb21ldHJ5OiBUZXh0R2VvbWV0cnlcbiAgfSksIFtdKTtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBmb250ID0gdXNlRm9udChfZm9udCk7XG4gIGNvbnN0IG9wdHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9udCxcbiAgICAgIHNpemUsXG4gICAgICBoZWlnaHQsXG4gICAgICBiZXZlbFRoaWNrbmVzcyxcbiAgICAgIGJldmVsU2l6ZSxcbiAgICAgIGJldmVsRW5hYmxlZCxcbiAgICAgIGJldmVsU2VnbWVudHMsXG4gICAgICBiZXZlbE9mZnNldCxcbiAgICAgIGN1cnZlU2VnbWVudHMsXG4gICAgICBsZXR0ZXJTcGFjaW5nLFxuICAgICAgbGluZUhlaWdodFxuICAgIH07XG4gIH0sIFtmb250LCBzaXplLCBoZWlnaHQsIGJldmVsVGhpY2tuZXNzLCBiZXZlbFNpemUsIGJldmVsRW5hYmxlZCwgYmV2ZWxTZWdtZW50cywgYmV2ZWxPZmZzZXQsIGN1cnZlU2VnbWVudHMsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHRdKTtcblxuICAvKipcbiAgICogV2UgbmVlZCB0aGUgYGNoaWxkcmVuYCBpbiB0aGUgZGVwcyBiZWNhdXNlIHdlXG4gICAqIG5lZWQgdG8gYmUgYWJsZSB0byBkbyBgPFRleHQzZD57c3RhdGV9PC9UZXh0M2Q+YC5cbiAgICovXG4gIGNvbnN0IFtsYWJlbCwgLi4ucmVzdF0gPSB1c2VNZW1vKCgpID0+IGdldFRleHRGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBbY2hpbGRyZW5dKTtcbiAgY29uc3QgYXJncyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gW2xhYmVsLCBvcHRzXSwgW2xhYmVsLCBvcHRzXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNtb290aCkge1xuICAgICAgcmVmLmN1cnJlbnQuZ2VvbWV0cnkgPSBtZXJnZVZlcnRpY2VzKHJlZi5jdXJyZW50Lmdlb21ldHJ5LCBzbW9vdGgpO1xuICAgICAgcmVmLmN1cnJlbnQuZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICB9XG4gIH0sIFthcmdzLCBzbW9vdGhdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShmcmVmLCAoKSA9PiByZWYuY3VycmVudCwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJtZXNoXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInJlbmFtZWRUZXh0R2VvbWV0cnlcIiwge1xuICAgIGFyZ3M6IGFyZ3NcbiAgfSksIHJlc3QpO1xufSk7XG5cbmV4cG9ydCB7IFRleHQzRCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/Text3D.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/Texture.js":
/*!********************************************************!*\
  !*** ./node_modules/@react-three/drei/core/Texture.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsObject: () => (/* binding */ IsObject),\n/* harmony export */   Texture: () => (/* binding */ Texture),\n/* harmony export */   useTexture: () => (/* binding */ useTexture)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js\");\n\n\n\n\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.D)(state => state.gl);\n  const textures = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.H)(three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader, IsObject(input) ? Object.values(input) : input);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof three__WEBPACK_IMPORTED_MODULE_2__.Texture) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof three__WEBPACK_IMPORTED_MODULE_2__.Texture) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => _react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.H.preload(three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader, url);\nuseTexture.clear = input => _react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.H.clear(three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader, input);\n\n//\n\nconst Texture = ({\n  children,\n  input,\n  onLoad\n}) => {\n  const ret = useTexture(input, onLoad);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children == null ? void 0 : children(ret));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9UZXh0dXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0I7QUFDNkI7QUFDQTtBQUNIOztBQUV6RDtBQUNBO0FBQ0EsYUFBYSxxREFBUTtBQUNyQixtQkFBbUIscURBQVMsQ0FBQyxnREFBYTtBQUMxQyxFQUFFLHNEQUFlO0FBQ2pCO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDZCQUE2QiwwQ0FBUztBQUM5QztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMENBQVM7QUFDeEM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSCx5QkFBeUIsOENBQU87QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSw0QkFBNEIsaURBQVMsU0FBUyxnREFBYTtBQUMzRCw0QkFBNEIsaURBQVMsT0FBTyxnREFBYTs7QUFFekQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxzQkFBc0IsZ0RBQW1CLENBQUMsMkNBQWM7QUFDeEQ7O0FBRXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25pcGVyLWFpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL2NvcmUvVGV4dHVyZS5qcz9lYWE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCwgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGV4dHVyZUxvYWRlciwgVGV4dHVyZSBhcyBUZXh0dXJlJDEgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyB1c2VUaHJlZSwgdXNlTG9hZGVyIH0gZnJvbSAnQHJlYWN0LXRocmVlL2ZpYmVyJztcblxuY29uc3QgSXNPYmplY3QgPSB1cmwgPT4gdXJsID09PSBPYmplY3QodXJsKSAmJiAhQXJyYXkuaXNBcnJheSh1cmwpICYmIHR5cGVvZiB1cmwgIT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiB1c2VUZXh0dXJlKGlucHV0LCBvbkxvYWQpIHtcbiAgY29uc3QgZ2wgPSB1c2VUaHJlZShzdGF0ZSA9PiBzdGF0ZS5nbCk7XG4gIGNvbnN0IHRleHR1cmVzID0gdXNlTG9hZGVyKFRleHR1cmVMb2FkZXIsIElzT2JqZWN0KGlucHV0KSA/IE9iamVjdC52YWx1ZXMoaW5wdXQpIDogaW5wdXQpO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIG9uTG9hZCA9PSBudWxsIHx8IG9uTG9hZCh0ZXh0dXJlcyk7XG4gIH0sIFtvbkxvYWRdKTtcblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8yMjY5NlxuICAvLyBVcGxvYWQgdGhlIHRleHR1cmUgdG8gdGhlIEdQVSBpbW1lZGlhdGVseSBpbnN0ZWFkIG9mIHdhaXRpbmcgZm9yIHRoZSBmaXJzdCByZW5kZXJcbiAgLy8gTk9URTogb25seSBhdmFpbGFibGUgZm9yIFdlYkdMUmVuZGVyZXJcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoJ2luaXRUZXh0dXJlJyBpbiBnbCkge1xuICAgICAgbGV0IHRleHR1cmVBcnJheSA9IFtdO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGV4dHVyZXMpKSB7XG4gICAgICAgIHRleHR1cmVBcnJheSA9IHRleHR1cmVzO1xuICAgICAgfSBlbHNlIGlmICh0ZXh0dXJlcyBpbnN0YW5jZW9mIFRleHR1cmUkMSkge1xuICAgICAgICB0ZXh0dXJlQXJyYXkgPSBbdGV4dHVyZXNdO1xuICAgICAgfSBlbHNlIGlmIChJc09iamVjdCh0ZXh0dXJlcykpIHtcbiAgICAgICAgdGV4dHVyZUFycmF5ID0gT2JqZWN0LnZhbHVlcyh0ZXh0dXJlcyk7XG4gICAgICB9XG4gICAgICB0ZXh0dXJlQXJyYXkuZm9yRWFjaCh0ZXh0dXJlID0+IHtcbiAgICAgICAgaWYgKHRleHR1cmUgaW5zdGFuY2VvZiBUZXh0dXJlJDEpIHtcbiAgICAgICAgICBnbC5pbml0VGV4dHVyZSh0ZXh0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZ2wsIHRleHR1cmVzXSk7XG4gIGNvbnN0IG1hcHBlZFRleHR1cmVzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKElzT2JqZWN0KGlucHV0KSkge1xuICAgICAgY29uc3Qga2V5ZWQgPSB7fTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGlucHV0KSBrZXllZFtrZXldID0gdGV4dHVyZXNbaSsrXTtcbiAgICAgIHJldHVybiBrZXllZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRleHR1cmVzO1xuICAgIH1cbiAgfSwgW2lucHV0LCB0ZXh0dXJlc10pO1xuICByZXR1cm4gbWFwcGVkVGV4dHVyZXM7XG59XG51c2VUZXh0dXJlLnByZWxvYWQgPSB1cmwgPT4gdXNlTG9hZGVyLnByZWxvYWQoVGV4dHVyZUxvYWRlciwgdXJsKTtcbnVzZVRleHR1cmUuY2xlYXIgPSBpbnB1dCA9PiB1c2VMb2FkZXIuY2xlYXIoVGV4dHVyZUxvYWRlciwgaW5wdXQpO1xuXG4vL1xuXG5jb25zdCBUZXh0dXJlID0gKHtcbiAgY2hpbGRyZW4sXG4gIGlucHV0LFxuICBvbkxvYWRcbn0pID0+IHtcbiAgY29uc3QgcmV0ID0gdXNlVGV4dHVyZShpbnB1dCwgb25Mb2FkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbiA9PSBudWxsID8gdm9pZCAwIDogY2hpbGRyZW4ocmV0KSk7XG59O1xuXG5leHBvcnQgeyBJc09iamVjdCwgVGV4dHVyZSwgdXNlVGV4dHVyZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/Texture.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/useFont.js":
/*!********************************************************!*\
  !*** ./node_modules/@react-three/drei/core/useFont.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFont: () => (/* binding */ useFont)\n/* harmony export */ });\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/loaders/FontLoader.js\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.js\");\n\n\n\nlet fontLoader = null;\nasync function loadFontData(font) {\n  return typeof font === 'string' ? await (await fetch(font)).json() : font;\n}\nfunction parseFontData(fontData) {\n  if (!fontLoader) {\n    fontLoader = new three_stdlib__WEBPACK_IMPORTED_MODULE_0__.FontLoader();\n  }\n  return fontLoader.parse(fontData);\n}\nasync function loader(font) {\n  const data = await loadFontData(font);\n  return parseFontData(data);\n}\nfunction useFont(font) {\n  return (0,suspend_react__WEBPACK_IMPORTED_MODULE_1__.suspend)(loader, [font]);\n}\nuseFont.preload = font => (0,suspend_react__WEBPACK_IMPORTED_MODULE_1__.preload)(loader, [font]);\nuseFont.clear = font => (0,suspend_react__WEBPACK_IMPORTED_MODULE_1__.clear)([font]);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS91c2VGb250LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNjOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0RBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsc0RBQU87QUFDaEI7QUFDQSwwQkFBMEIsc0RBQU87QUFDakMsd0JBQXdCLG9EQUFLOztBQUVWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25pcGVyLWFpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL2NvcmUvdXNlRm9udC5qcz8zM2M0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvbnRMb2FkZXIgfSBmcm9tICd0aHJlZS1zdGRsaWInO1xuaW1wb3J0IHsgc3VzcGVuZCwgcHJlbG9hZCwgY2xlYXIgfSBmcm9tICdzdXNwZW5kLXJlYWN0JztcblxubGV0IGZvbnRMb2FkZXIgPSBudWxsO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEZvbnREYXRhKGZvbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBmb250ID09PSAnc3RyaW5nJyA/IGF3YWl0IChhd2FpdCBmZXRjaChmb250KSkuanNvbigpIDogZm9udDtcbn1cbmZ1bmN0aW9uIHBhcnNlRm9udERhdGEoZm9udERhdGEpIHtcbiAgaWYgKCFmb250TG9hZGVyKSB7XG4gICAgZm9udExvYWRlciA9IG5ldyBGb250TG9hZGVyKCk7XG4gIH1cbiAgcmV0dXJuIGZvbnRMb2FkZXIucGFyc2UoZm9udERhdGEpO1xufVxuYXN5bmMgZnVuY3Rpb24gbG9hZGVyKGZvbnQpIHtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IGxvYWRGb250RGF0YShmb250KTtcbiAgcmV0dXJuIHBhcnNlRm9udERhdGEoZGF0YSk7XG59XG5mdW5jdGlvbiB1c2VGb250KGZvbnQpIHtcbiAgcmV0dXJuIHN1c3BlbmQobG9hZGVyLCBbZm9udF0pO1xufVxudXNlRm9udC5wcmVsb2FkID0gZm9udCA9PiBwcmVsb2FkKGxvYWRlciwgW2ZvbnRdKTtcbnVzZUZvbnQuY2xlYXIgPSBmb250ID0+IGNsZWFyKFtmb250XSk7XG5cbmV4cG9ydCB7IHVzZUZvbnQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/useFont.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ useInstanceHandle),\n/* harmony export */   B: () => (/* binding */ Block),\n/* harmony export */   C: () => (/* binding */ useStore),\n/* harmony export */   D: () => (/* binding */ useThree),\n/* harmony export */   E: () => (/* binding */ ErrorBoundary),\n/* harmony export */   F: () => (/* binding */ useFrame),\n/* harmony export */   G: () => (/* binding */ useGraph),\n/* harmony export */   H: () => (/* binding */ useLoader),\n/* harmony export */   a: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   b: () => (/* binding */ createRoot),\n/* harmony export */   c: () => (/* binding */ createPointerEvents),\n/* harmony export */   d: () => (/* binding */ unmountComponentAtNode),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   f: () => (/* binding */ createEvents),\n/* harmony export */   g: () => (/* binding */ context),\n/* harmony export */   h: () => (/* binding */ createPortal),\n/* harmony export */   i: () => (/* binding */ isRef),\n/* harmony export */   j: () => (/* binding */ reconciler),\n/* harmony export */   k: () => (/* binding */ applyProps),\n/* harmony export */   l: () => (/* binding */ dispose),\n/* harmony export */   m: () => (/* binding */ invalidate),\n/* harmony export */   n: () => (/* binding */ advance),\n/* harmony export */   o: () => (/* binding */ addEffect),\n/* harmony export */   p: () => (/* binding */ addAfterEffect),\n/* harmony export */   q: () => (/* binding */ addTail),\n/* harmony export */   r: () => (/* binding */ render),\n/* harmony export */   s: () => (/* binding */ flushGlobalEffects),\n/* harmony export */   t: () => (/* binding */ threeTypes),\n/* harmony export */   u: () => (/* binding */ useMutableCallback),\n/* harmony export */   v: () => (/* binding */ flushSync),\n/* harmony export */   w: () => (/* binding */ getRootState),\n/* harmony export */   x: () => (/* binding */ act),\n/* harmony export */   y: () => (/* binding */ buildGraph),\n/* harmony export */   z: () => (/* binding */ roots)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/scheduler/index.js\");\n\n\n\n\n\n\n\n\n\nvar threeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nconst catalogue = {};\nconst extend = objects => void Object.assign(catalogue, objects);\nfunction createRenderer(_roots, _getEventPriority) {\n  function createInstance(type, {\n    args = [],\n    attach,\n    ...props\n  }, root) {\n    let name = `${type[0].toUpperCase()}${type.slice(1)}`;\n    let instance;\n    if (type === 'primitive') {\n      if (props.object === undefined) throw new Error(\"R3F: Primitives without 'object' are invalid!\");\n      const object = props.object;\n      instance = prepare(object, {\n        type,\n        root,\n        attach,\n        primitive: true\n      });\n    } else {\n      const target = catalogue[name];\n      if (!target) {\n        throw new Error(`R3F: ${name} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);\n      }\n\n      // Throw if an object or literal was passed for args\n      if (!Array.isArray(args)) throw new Error('R3F: The args prop must be an array!');\n\n      // Instanciate new object, link it to the root\n      // Append memoized props with args so it's not forgotten\n      instance = prepare(new target(...args), {\n        type,\n        root,\n        attach,\n        // Save args in case we need to reconstruct later for HMR\n        memoizedProps: {\n          args\n        }\n      });\n    }\n\n    // Auto-attach geometries and materials\n    if (instance.__r3f.attach === undefined) {\n      if (instance instanceof three__WEBPACK_IMPORTED_MODULE_5__.BufferGeometry) instance.__r3f.attach = 'geometry';else if (instance instanceof three__WEBPACK_IMPORTED_MODULE_5__.Material) instance.__r3f.attach = 'material';\n    }\n\n    // It should NOT call onUpdate on object instanciation, because it hasn't been added to the\n    // view yet. If the callback relies on references for instance, they won't be ready yet, this is\n    // why it passes \"true\" here\n    // There is no reason to apply props to injects\n    if (name !== 'inject') applyProps$1(instance, props);\n    return instance;\n  }\n  function appendChild(parentInstance, child) {\n    let added = false;\n    if (child) {\n      var _child$__r3f, _parentInstance$__r3f;\n      // The attach attribute implies that the object attaches itself on the parent\n      if ((_child$__r3f = child.__r3f) != null && _child$__r3f.attach) {\n        attach(parentInstance, child, child.__r3f.attach);\n      } else if (child.isObject3D && parentInstance.isObject3D) {\n        // add in the usual parent-child way\n        parentInstance.add(child);\n        added = true;\n      }\n      // This is for anything that used attach, and for non-Object3Ds that don't get attached to props;\n      // that is, anything that's a child in React but not a child in the scenegraph.\n      if (!added) (_parentInstance$__r3f = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f.objects.push(child);\n      if (!child.__r3f) prepare(child, {});\n      child.__r3f.parent = parentInstance;\n      updateInstance(child);\n      invalidateInstance(child);\n    }\n  }\n  function insertBefore(parentInstance, child, beforeChild) {\n    let added = false;\n    if (child) {\n      var _child$__r3f2, _parentInstance$__r3f2;\n      if ((_child$__r3f2 = child.__r3f) != null && _child$__r3f2.attach) {\n        attach(parentInstance, child, child.__r3f.attach);\n      } else if (child.isObject3D && parentInstance.isObject3D) {\n        child.parent = parentInstance;\n        child.dispatchEvent({\n          type: 'added'\n        });\n        parentInstance.dispatchEvent({\n          type: 'childadded',\n          child\n        });\n        const restSiblings = parentInstance.children.filter(sibling => sibling !== child);\n        const index = restSiblings.indexOf(beforeChild);\n        parentInstance.children = [...restSiblings.slice(0, index), child, ...restSiblings.slice(index)];\n        added = true;\n      }\n      if (!added) (_parentInstance$__r3f2 = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f2.objects.push(child);\n      if (!child.__r3f) prepare(child, {});\n      child.__r3f.parent = parentInstance;\n      updateInstance(child);\n      invalidateInstance(child);\n    }\n  }\n  function removeRecursive(array, parent, dispose = false) {\n    if (array) [...array].forEach(child => removeChild(parent, child, dispose));\n  }\n  function removeChild(parentInstance, child, dispose) {\n    if (child) {\n      var _parentInstance$__r3f3, _child$__r3f3, _child$__r3f5;\n      // Clear the parent reference\n      if (child.__r3f) child.__r3f.parent = null;\n      // Remove child from the parents objects\n      if ((_parentInstance$__r3f3 = parentInstance.__r3f) != null && _parentInstance$__r3f3.objects) parentInstance.__r3f.objects = parentInstance.__r3f.objects.filter(x => x !== child);\n      // Remove attachment\n      if ((_child$__r3f3 = child.__r3f) != null && _child$__r3f3.attach) {\n        detach(parentInstance, child, child.__r3f.attach);\n      } else if (child.isObject3D && parentInstance.isObject3D) {\n        var _child$__r3f4;\n        parentInstance.remove(child);\n        // @ts-expect-error\n        // Remove interactivity on the initial root\n        if ((_child$__r3f4 = child.__r3f) != null && _child$__r3f4.root) {\n          removeInteractivity(findInitialRoot(child), child);\n        }\n      }\n\n      // Allow objects to bail out of recursive dispose altogether by passing dispose={null}\n      // Never dispose of primitives because their state may be kept outside of React!\n      // In order for an object to be able to dispose it has to have\n      //   - a dispose method,\n      //   - it cannot be a <primitive object={...} />\n      //   - it cannot be a THREE.Scene, because three has broken it's own api\n      //\n      // Since disposal is recursive, we can check the optional dispose arg, which will be undefined\n      // when the reconciler calls it, but then carry our own check recursively\n      const isPrimitive = (_child$__r3f5 = child.__r3f) == null ? void 0 : _child$__r3f5.primitive;\n      const shouldDispose = !isPrimitive && (dispose === undefined ? child.dispose !== null : dispose);\n\n      // Remove nested child objects. Primitives should not have objects and children that are\n      // attached to them declaratively ...\n      if (!isPrimitive) {\n        var _child$__r3f6;\n        removeRecursive((_child$__r3f6 = child.__r3f) == null ? void 0 : _child$__r3f6.objects, child, shouldDispose);\n        removeRecursive(child.children, child, shouldDispose);\n      }\n\n      // Remove references\n      delete child.__r3f;\n\n      // Dispose item whenever the reconciler feels like it\n      if (shouldDispose && child.dispose && child.type !== 'Scene') {\n        const callback = () => {\n          try {\n            child.dispose();\n          } catch (e) {\n            /* ... */\n          }\n        };\n\n        // Schedule async at runtime, flush sync in testing\n        if (typeof IS_REACT_ACT_ENVIRONMENT === 'undefined') {\n          (0,scheduler__WEBPACK_IMPORTED_MODULE_4__.unstable_scheduleCallback)(scheduler__WEBPACK_IMPORTED_MODULE_4__.unstable_IdlePriority, callback);\n        } else {\n          callback();\n        }\n      }\n      invalidateInstance(parentInstance);\n    }\n  }\n  function switchInstance(instance, type, newProps, fiber) {\n    var _instance$__r3f;\n    const parent = (_instance$__r3f = instance.__r3f) == null ? void 0 : _instance$__r3f.parent;\n    if (!parent) return;\n    const newInstance = createInstance(type, newProps, instance.__r3f.root);\n\n    // https://github.com/pmndrs/react-three-fiber/issues/1348\n    // When args change the instance has to be re-constructed, which then\n    // forces r3f to re-parent the children and non-scene objects\n    if (instance.children) {\n      for (const child of instance.children) {\n        if (child.__r3f) appendChild(newInstance, child);\n      }\n      instance.children = instance.children.filter(child => !child.__r3f);\n    }\n    instance.__r3f.objects.forEach(child => appendChild(newInstance, child));\n    instance.__r3f.objects = [];\n    if (!instance.__r3f.autoRemovedBeforeAppend) {\n      removeChild(parent, instance);\n    }\n    if (newInstance.parent) {\n      newInstance.__r3f.autoRemovedBeforeAppend = true;\n    }\n    appendChild(parent, newInstance);\n\n    // Re-bind event handlers on the initial root\n    if (newInstance.raycast && newInstance.__r3f.eventCount) {\n      const rootState = findInitialRoot(newInstance).getState();\n      rootState.internal.interaction.push(newInstance);\n    }\n    [fiber, fiber.alternate].forEach(fiber => {\n      if (fiber !== null) {\n        fiber.stateNode = newInstance;\n        if (fiber.ref) {\n          if (typeof fiber.ref === 'function') fiber.ref(newInstance);else fiber.ref.current = newInstance;\n        }\n      }\n    });\n  }\n\n  // Don't handle text instances, make it no-op\n  const handleTextInstance = () => {};\n  const reconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_3___default()({\n    createInstance,\n    removeChild,\n    appendChild,\n    appendInitialChild: appendChild,\n    insertBefore,\n    supportsMutation: true,\n    isPrimaryRenderer: false,\n    supportsPersistence: false,\n    supportsHydration: false,\n    noTimeout: -1,\n    appendChildToContainer: (container, child) => {\n      if (!child) return;\n\n      // Don't append to unmounted container\n      const scene = container.getState().scene;\n      if (!scene.__r3f) return;\n\n      // Link current root to the default scene\n      scene.__r3f.root = container;\n      appendChild(scene, child);\n    },\n    removeChildFromContainer: (container, child) => {\n      if (!child) return;\n      removeChild(container.getState().scene, child);\n    },\n    insertInContainerBefore: (container, child, beforeChild) => {\n      if (!child || !beforeChild) return;\n\n      // Don't append to unmounted container\n      const scene = container.getState().scene;\n      if (!scene.__r3f) return;\n      insertBefore(scene, child, beforeChild);\n    },\n    getRootHostContext: () => null,\n    getChildHostContext: parentHostContext => parentHostContext,\n    finalizeInitialChildren(instance) {\n      var _instance$__r3f2;\n      const localState = (_instance$__r3f2 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f2 : {};\n      // https://github.com/facebook/react/issues/20271\n      // Returning true will trigger commitMount\n      return Boolean(localState.handlers);\n    },\n    prepareUpdate(instance, _type, oldProps, newProps) {\n      var _instance$__r3f3;\n      const localState = (_instance$__r3f3 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f3 : {};\n\n      // Create diff-sets\n      if (localState.primitive && newProps.object && newProps.object !== instance) {\n        return [true];\n      } else {\n        // This is a data object, let's extract critical information about it\n        const {\n          args: argsNew = [],\n          children: cN,\n          ...restNew\n        } = newProps;\n        const {\n          args: argsOld = [],\n          children: cO,\n          ...restOld\n        } = oldProps;\n\n        // Throw if an object or literal was passed for args\n        if (!Array.isArray(argsNew)) throw new Error('R3F: the args prop must be an array!');\n\n        // If it has new props or arguments, then it needs to be re-instantiated\n        if (argsNew.some((value, index) => value !== argsOld[index])) return [true];\n        // Create a diff-set, flag if there are any changes\n        const diff = diffProps(instance, restNew, restOld, true);\n        if (diff.changes.length) return [false, diff];\n\n        // Otherwise do not touch the instance\n        return null;\n      }\n    },\n    commitUpdate(instance, [reconstruct, diff], type, _oldProps, newProps, fiber) {\n      // Reconstruct when args or <primitive object={...} have changes\n      if (reconstruct) switchInstance(instance, type, newProps, fiber);\n      // Otherwise just overwrite props\n      else applyProps$1(instance, diff);\n    },\n    commitMount(instance, _type, _props, _int) {\n      var _instance$__r3f4;\n      // https://github.com/facebook/react/issues/20271\n      // This will make sure events are only added once to the central container on the initial root\n      const localState = (_instance$__r3f4 = instance.__r3f) != null ? _instance$__r3f4 : {};\n      if (instance.raycast && localState.handlers && localState.eventCount) {\n        findInitialRoot(instance).getState().internal.interaction.push(instance);\n      }\n    },\n    getPublicInstance: instance => instance,\n    prepareForCommit: () => null,\n    preparePortalMount: container => prepare(container.getState().scene),\n    resetAfterCommit: () => {},\n    shouldSetTextContent: () => false,\n    clearContainer: () => false,\n    hideInstance(instance) {\n      var _instance$__r3f5;\n      // Detach while the instance is hidden\n      const {\n        attach: type,\n        parent\n      } = (_instance$__r3f5 = instance.__r3f) != null ? _instance$__r3f5 : {};\n      if (type && parent) detach(parent, instance, type);\n      if (instance.isObject3D) instance.visible = false;\n      invalidateInstance(instance);\n    },\n    unhideInstance(instance, props) {\n      var _instance$__r3f6;\n      // Re-attach when the instance is unhidden\n      const {\n        attach: type,\n        parent\n      } = (_instance$__r3f6 = instance.__r3f) != null ? _instance$__r3f6 : {};\n      if (type && parent) attach(parent, instance, type);\n      if (instance.isObject3D && props.visible == null || props.visible) instance.visible = true;\n      invalidateInstance(instance);\n    },\n    createTextInstance: handleTextInstance,\n    hideTextInstance: handleTextInstance,\n    unhideTextInstance: handleTextInstance,\n    // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874\n    // @ts-expect-error\n    getCurrentEventPriority: () => _getEventPriority ? _getEventPriority() : react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority,\n    beforeActiveInstanceBlur: () => {},\n    afterActiveInstanceBlur: () => {},\n    detachDeletedInstance: () => {},\n    now: typeof performance !== 'undefined' && is.fun(performance.now) ? performance.now : is.fun(Date.now) ? Date.now : () => 0,\n    // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503\n    scheduleTimeout: is.fun(setTimeout) ? setTimeout : undefined,\n    cancelTimeout: is.fun(clearTimeout) ? clearTimeout : undefined\n  });\n  return {\n    reconciler,\n    applyProps: applyProps$1\n  };\n}\n\nvar _window$document, _window$navigator;\n/**\r\n * Returns `true` with correct TS type inference if an object has a configurable color space (since r152).\r\n */\nconst hasColorSpace = object => 'colorSpace' in object || 'outputColorSpace' in object;\n/**\r\n * The current THREE.ColorManagement instance, if present.\r\n */\nconst getColorManagement = () => {\n  var _ColorManagement;\n  return (_ColorManagement = catalogue.ColorManagement) != null ? _ColorManagement : null;\n};\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\nconst isRef = obj => obj && obj.hasOwnProperty('current');\n\n/**\r\n * An SSR-friendly useLayoutEffect.\r\n *\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect elsewhere.\r\n *\r\n * @see https://github.com/facebook/react/issues/14927\r\n */\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' && ((_window$document = window.document) != null && _window$document.createElement || ((_window$navigator = window.navigator) == null ? void 0 : _window$navigator.product) === 'ReactNative') ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useMutableCallback(fn) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fn);\n  useIsomorphicLayoutEffect(() => void (ref.current = fn), [fn]);\n  return ref;\n}\nfunction Block({\n  set\n}) {\n  useIsomorphicLayoutEffect(() => {\n    set(new Promise(() => null));\n    return () => set(false);\n  }, [set]);\n  return null;\n}\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false\n    };\n  }\n  componentDidCatch(err) {\n    this.props.set(err);\n  }\n  render() {\n    return this.state.error ? null : this.props.children;\n  }\n}\nErrorBoundary.getDerivedStateFromError = () => ({\n  error: true\n});\nconst DEFAULT = '__default';\nconst DEFAULTS = new Map();\nconst isDiffSet = def => def && !!def.memoized && !!def.changes;\nfunction calculateDpr(dpr) {\n  var _window$devicePixelRa;\n  // Err on the side of progress by assuming 2x dpr if we can't detect it\n  // This will happen in workers where window is defined but dpr isn't.\n  const target = typeof window !== 'undefined' ? (_window$devicePixelRa = window.devicePixelRatio) != null ? _window$devicePixelRa : 2 : 1;\n  return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], target), dpr[1]) : dpr;\n}\n\n/**\r\n * Returns instance root state\r\n */\nconst getRootState = obj => {\n  var _r3f;\n  return (_r3f = obj.__r3f) == null ? void 0 : _r3f.root.getState();\n};\n\n/**\r\n * Returns the instances initial (outmost) root\r\n */\nfunction findInitialRoot(child) {\n  let root = child.__r3f.root;\n  while (root.getState().previousRoot) root = root.getState().previousRoot;\n  return root;\n}\n// A collection of compare functions\nconst is = {\n  obj: a => a === Object(a) && !is.arr(a) && typeof a !== 'function',\n  fun: a => typeof a === 'function',\n  str: a => typeof a === 'string',\n  num: a => typeof a === 'number',\n  boo: a => typeof a === 'boolean',\n  und: a => a === void 0,\n  arr: a => Array.isArray(a),\n  equ(a, b, {\n    arrays = 'shallow',\n    objects = 'reference',\n    strict = true\n  } = {}) {\n    // Wrong type or one of the two undefined, doesn't match\n    if (typeof a !== typeof b || !!a !== !!b) return false;\n    // Atomic, just compare a against b\n    if (is.str(a) || is.num(a) || is.boo(a)) return a === b;\n    const isObj = is.obj(a);\n    if (isObj && objects === 'reference') return a === b;\n    const isArr = is.arr(a);\n    if (isArr && arrays === 'reference') return a === b;\n    // Array or Object, shallow compare first to see if it's a match\n    if ((isArr || isObj) && a === b) return true;\n    // Last resort, go through keys\n    let i;\n    // Check if a has all the keys of b\n    for (i in a) if (!(i in b)) return false;\n    // Check if values between keys match\n    if (isObj && arrays === 'shallow' && objects === 'shallow') {\n      for (i in strict ? b : a) if (!is.equ(a[i], b[i], {\n        strict,\n        objects: 'reference'\n      })) return false;\n    } else {\n      for (i in strict ? b : a) if (a[i] !== b[i]) return false;\n    }\n    // If i is undefined\n    if (is.und(i)) {\n      // If both arrays are empty we consider them equal\n      if (isArr && a.length === 0 && b.length === 0) return true;\n      // If both objects are empty we consider them equal\n      if (isObj && Object.keys(a).length === 0 && Object.keys(b).length === 0) return true;\n      // Otherwise match them by value\n      if (a !== b) return false;\n    }\n    return true;\n  }\n};\n\n/**\r\n * Collects nodes and materials from a THREE.Object3D.\r\n */\nfunction buildGraph(object) {\n  const data = {\n    nodes: {},\n    materials: {}\n  };\n  if (object) {\n    object.traverse(obj => {\n      if (obj.name) data.nodes[obj.name] = obj;\n      if (obj.material && !data.materials[obj.material.name]) data.materials[obj.material.name] = obj.material;\n    });\n  }\n  return data;\n}\n\n// Disposes an object and all its properties\nfunction dispose(obj) {\n  if (obj.dispose && obj.type !== 'Scene') obj.dispose();\n  for (const p in obj) {\n    p.dispose == null ? void 0 : p.dispose();\n    delete obj[p];\n  }\n}\n\n// Each object in the scene carries a small LocalState descriptor\nfunction prepare(object, state) {\n  const instance = object;\n  instance.__r3f = {\n    type: '',\n    root: null,\n    previousAttach: null,\n    memoizedProps: {},\n    eventCount: 0,\n    handlers: {},\n    objects: [],\n    parent: null,\n    ...state\n  };\n  return object;\n}\nfunction resolve(instance, key) {\n  let target = instance;\n  if (key.includes('-')) {\n    const entries = key.split('-');\n    const last = entries.pop();\n    target = entries.reduce((acc, key) => acc[key], instance);\n    return {\n      target,\n      key: last\n    };\n  } else return {\n    target,\n    key\n  };\n}\n\n// Checks if a dash-cased string ends with an integer\nconst INDEX_REGEX = /-\\d+$/;\nfunction attach(parent, child, type) {\n  if (is.str(type)) {\n    // If attaching into an array (foo-0), create one\n    if (INDEX_REGEX.test(type)) {\n      const root = type.replace(INDEX_REGEX, '');\n      const {\n        target,\n        key\n      } = resolve(parent, root);\n      if (!Array.isArray(target[key])) target[key] = [];\n    }\n    const {\n      target,\n      key\n    } = resolve(parent, type);\n    child.__r3f.previousAttach = target[key];\n    target[key] = child;\n  } else child.__r3f.previousAttach = type(parent, child);\n}\nfunction detach(parent, child, type) {\n  var _child$__r3f, _child$__r3f2;\n  if (is.str(type)) {\n    const {\n      target,\n      key\n    } = resolve(parent, type);\n    const previous = child.__r3f.previousAttach;\n    // When the previous value was undefined, it means the value was never set to begin with\n    if (previous === undefined) delete target[key];\n    // Otherwise set the previous value\n    else target[key] = previous;\n  } else (_child$__r3f = child.__r3f) == null ? void 0 : _child$__r3f.previousAttach == null ? void 0 : _child$__r3f.previousAttach(parent, child);\n  (_child$__r3f2 = child.__r3f) == null ? true : delete _child$__r3f2.previousAttach;\n}\n// This function prepares a set of changes to be applied to the instance\nfunction diffProps(instance, {\n  children: cN,\n  key: kN,\n  ref: rN,\n  ...props\n}, {\n  children: cP,\n  key: kP,\n  ref: rP,\n  ...previous\n} = {}, remove = false) {\n  const localState = instance.__r3f;\n  const entries = Object.entries(props);\n  const changes = [];\n\n  // Catch removed props, prepend them so they can be reset or removed\n  if (remove) {\n    const previousKeys = Object.keys(previous);\n    for (let i = 0; i < previousKeys.length; i++) {\n      if (!props.hasOwnProperty(previousKeys[i])) entries.unshift([previousKeys[i], DEFAULT + 'remove']);\n    }\n  }\n  entries.forEach(([key, value]) => {\n    var _instance$__r3f;\n    // Bail out on primitive object\n    if ((_instance$__r3f = instance.__r3f) != null && _instance$__r3f.primitive && key === 'object') return;\n    // When props match bail out\n    if (is.equ(value, previous[key])) return;\n    // Collect handlers and bail out\n    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(key)) return changes.push([key, value, true, []]);\n    // Split dashed props\n    let entries = [];\n    if (key.includes('-')) entries = key.split('-');\n    changes.push([key, value, false, entries]);\n\n    // Reset pierced props\n    for (const prop in props) {\n      const value = props[prop];\n      if (prop.startsWith(`${key}-`)) changes.push([prop, value, false, prop.split('-')]);\n    }\n  });\n  const memoized = {\n    ...props\n  };\n  if (localState != null && localState.memoizedProps && localState != null && localState.memoizedProps.args) memoized.args = localState.memoizedProps.args;\n  if (localState != null && localState.memoizedProps && localState != null && localState.memoizedProps.attach) memoized.attach = localState.memoizedProps.attach;\n  return {\n    memoized,\n    changes\n  };\n}\nconst __DEV__ = typeof process !== 'undefined' && \"development\" !== 'production';\n\n// This function applies a set of changes to the instance\nfunction applyProps$1(instance, data) {\n  var _instance$__r3f2;\n  // Filter equals, events and reserved props\n  const localState = instance.__r3f;\n  const root = localState == null ? void 0 : localState.root;\n  const rootState = root == null ? void 0 : root.getState == null ? void 0 : root.getState();\n  const {\n    memoized,\n    changes\n  } = isDiffSet(data) ? data : diffProps(instance, data);\n  const prevHandlers = localState == null ? void 0 : localState.eventCount;\n\n  // Prepare memoized props\n  if (instance.__r3f) instance.__r3f.memoizedProps = memoized;\n  for (let i = 0; i < changes.length; i++) {\n    let [key, value, isEvent, keys] = changes[i];\n\n    // Alias (output)encoding => (output)colorSpace (since r152)\n    // https://github.com/pmndrs/react-three-fiber/pull/2829\n    if (hasColorSpace(instance)) {\n      const sRGBEncoding = 3001;\n      const SRGBColorSpace = 'srgb';\n      const LinearSRGBColorSpace = 'srgb-linear';\n      if (key === 'encoding') {\n        key = 'colorSpace';\n        value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n      } else if (key === 'outputEncoding') {\n        key = 'outputColorSpace';\n        value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n      }\n    }\n    let currentInstance = instance;\n    let targetProp = currentInstance[key];\n\n    // Revolve dashed props\n    if (keys.length) {\n      targetProp = keys.reduce((acc, key) => acc[key], instance);\n      // If the target is atomic, it forces us to switch the root\n      if (!(targetProp && targetProp.set)) {\n        const [name, ...reverseEntries] = keys.reverse();\n        currentInstance = reverseEntries.reverse().reduce((acc, key) => acc[key], instance);\n        key = name;\n      }\n    }\n\n    // https://github.com/mrdoob/three.js/issues/21209\n    // HMR/fast-refresh relies on the ability to cancel out props, but threejs\n    // has no means to do this. Hence we curate a small collection of value-classes\n    // with their respective constructor/set arguments\n    // For removed props, try to set default values, if possible\n    if (value === DEFAULT + 'remove') {\n      if (currentInstance.constructor) {\n        // create a blank slate of the instance and copy the particular parameter.\n        let ctor = DEFAULTS.get(currentInstance.constructor);\n        if (!ctor) {\n          // @ts-expect-error\n          ctor = new currentInstance.constructor();\n          DEFAULTS.set(currentInstance.constructor, ctor);\n        }\n        value = ctor[key];\n      } else {\n        // instance does not have constructor, just set it to 0\n        value = 0;\n      }\n    }\n\n    // Deal with pointer events ...\n    if (isEvent && localState) {\n      if (value) localState.handlers[key] = value;else delete localState.handlers[key];\n      localState.eventCount = Object.keys(localState.handlers).length;\n    }\n    // Special treatment for objects with support for set/copy, and layers\n    else if (targetProp && targetProp.set && (targetProp.copy || targetProp instanceof three__WEBPACK_IMPORTED_MODULE_5__.Layers)) {\n      // If value is an array\n      if (Array.isArray(value)) {\n        if (targetProp.fromArray) targetProp.fromArray(value);else targetProp.set(...value);\n      }\n      // Test again target.copy(class) next ...\n      else if (targetProp.copy && value && value.constructor && (\n      // Some environments may break strict identity checks by duplicating versions of three.js.\n      // Loosen to unminified names, ignoring descendents.\n      // https://github.com/pmndrs/react-three-fiber/issues/2856\n      // TODO: fix upstream and remove in v9\n      __DEV__ ? targetProp.constructor.name === value.constructor.name : targetProp.constructor === value.constructor)) {\n        targetProp.copy(value);\n      }\n      // If nothing else fits, just set the single value, ignore undefined\n      // https://github.com/pmndrs/react-three-fiber/issues/274\n      else if (value !== undefined) {\n        const isColor = targetProp instanceof three__WEBPACK_IMPORTED_MODULE_5__.Color;\n        // Allow setting array scalars\n        if (!isColor && targetProp.setScalar) targetProp.setScalar(value);\n        // Layers have no copy function, we must therefore copy the mask property\n        else if (targetProp instanceof three__WEBPACK_IMPORTED_MODULE_5__.Layers && value instanceof three__WEBPACK_IMPORTED_MODULE_5__.Layers) targetProp.mask = value.mask;\n        // Otherwise just set ...\n        else targetProp.set(value);\n        // For versions of three which don't support THREE.ColorManagement,\n        // Auto-convert sRGB colors\n        // https://github.com/pmndrs/react-three-fiber/issues/344\n        if (!getColorManagement() && rootState && !rootState.linear && isColor) targetProp.convertSRGBToLinear();\n      }\n      // Else, just overwrite the value\n    } else {\n      currentInstance[key] = value;\n\n      // Auto-convert sRGB textures, for now ...\n      // https://github.com/pmndrs/react-three-fiber/issues/344\n      if (currentInstance[key] instanceof three__WEBPACK_IMPORTED_MODULE_5__.Texture &&\n      // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129\n      currentInstance[key].format === three__WEBPACK_IMPORTED_MODULE_5__.RGBAFormat && currentInstance[key].type === three__WEBPACK_IMPORTED_MODULE_5__.UnsignedByteType && rootState) {\n        const texture = currentInstance[key];\n        if (hasColorSpace(texture) && hasColorSpace(rootState.gl)) texture.colorSpace = rootState.gl.outputColorSpace;else texture.encoding = rootState.gl.outputEncoding;\n      }\n    }\n    invalidateInstance(instance);\n  }\n  if (localState && localState.parent && instance.raycast && prevHandlers !== localState.eventCount) {\n    // Get the initial root state's internals\n    const internal = findInitialRoot(instance).getState().internal;\n    // Pre-emptively remove the instance from the interaction manager\n    const index = internal.interaction.indexOf(instance);\n    if (index > -1) internal.interaction.splice(index, 1);\n    // Add the instance to the interaction manager only when it has handlers\n    if (localState.eventCount) internal.interaction.push(instance);\n  }\n\n  // Call the update lifecycle when it is being updated, but only when it is part of the scene.\n  // Skip updates to the `onUpdate` prop itself\n  const isCircular = changes.length === 1 && changes[0][0] === 'onUpdate';\n  if (!isCircular && changes.length && (_instance$__r3f2 = instance.__r3f) != null && _instance$__r3f2.parent) updateInstance(instance);\n  return instance;\n}\nfunction invalidateInstance(instance) {\n  var _instance$__r3f3, _instance$__r3f3$root;\n  const state = (_instance$__r3f3 = instance.__r3f) == null ? void 0 : (_instance$__r3f3$root = _instance$__r3f3.root) == null ? void 0 : _instance$__r3f3$root.getState == null ? void 0 : _instance$__r3f3$root.getState();\n  if (state && state.internal.frames === 0) state.invalidate();\n}\nfunction updateInstance(instance) {\n  instance.onUpdate == null ? void 0 : instance.onUpdate(instance);\n}\nfunction updateCamera(camera, size) {\n  // https://github.com/pmndrs/react-three-fiber/issues/92\n  // Do not mess with the camera if it belongs to the user\n  if (!camera.manual) {\n    if (isOrthographicCamera(camera)) {\n      camera.left = size.width / -2;\n      camera.right = size.width / 2;\n      camera.top = size.height / 2;\n      camera.bottom = size.height / -2;\n    } else {\n      camera.aspect = size.width / size.height;\n    }\n    camera.updateProjectionMatrix();\n    // https://github.com/pmndrs/react-three-fiber/issues/178\n    // Update matrix world since the renderer is a frame late\n    camera.updateMatrixWorld();\n  }\n}\n\nfunction makeId(event) {\n  return (event.eventObject || event.object).uuid + '/' + event.index + event.instanceId;\n}\n\n// https://github.com/facebook/react/tree/main/packages/react-reconciler#getcurrenteventpriority\n// Gives React a clue as to how import the current interaction is\nfunction getEventPriority() {\n  var _globalScope$event;\n  // Get a handle to the current global scope in window and worker contexts if able\n  // https://github.com/pmndrs/react-three-fiber/pull/2493\n  const globalScope = typeof self !== 'undefined' && self || typeof window !== 'undefined' && window;\n  if (!globalScope) return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n  const name = (_globalScope$event = globalScope.event) == null ? void 0 : _globalScope$event.type;\n  switch (name) {\n    case 'click':\n    case 'contextmenu':\n    case 'dblclick':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n      return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DiscreteEventPriority;\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerenter':\n    case 'pointerleave':\n    case 'wheel':\n      return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ContinuousEventPriority;\n    default:\n      return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n  }\n}\n\n/**\r\n * Release pointer captures.\r\n * This is called by releasePointerCapture in the API, and when an object is removed.\r\n */\nfunction releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {\n  const captureData = captures.get(obj);\n  if (captureData) {\n    captures.delete(obj);\n    // If this was the last capturing object for this pointer\n    if (captures.size === 0) {\n      capturedMap.delete(pointerId);\n      captureData.target.releasePointerCapture(pointerId);\n    }\n  }\n}\nfunction removeInteractivity(store, object) {\n  const {\n    internal\n  } = store.getState();\n  // Removes every trace of an object from the data store\n  internal.interaction = internal.interaction.filter(o => o !== object);\n  internal.initialHits = internal.initialHits.filter(o => o !== object);\n  internal.hovered.forEach((value, key) => {\n    if (value.eventObject === object || value.object === object) {\n      // Clear out intersects, they are outdated by now\n      internal.hovered.delete(key);\n    }\n  });\n  internal.capturedMap.forEach((captures, pointerId) => {\n    releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);\n  });\n}\nfunction createEvents(store) {\n  /** Calculates delta */\n  function calculateDistance(event) {\n    const {\n      internal\n    } = store.getState();\n    const dx = event.offsetX - internal.initialClick[0];\n    const dy = event.offsetY - internal.initialClick[1];\n    return Math.round(Math.sqrt(dx * dx + dy * dy));\n  }\n\n  /** Returns true if an instance has a valid pointer-event registered, this excludes scroll, clicks etc */\n  function filterPointerEvents(objects) {\n    return objects.filter(obj => ['Move', 'Over', 'Enter', 'Out', 'Leave'].some(name => {\n      var _r3f;\n      return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers['onPointer' + name];\n    }));\n  }\n  function intersect(event, filter) {\n    const state = store.getState();\n    const duplicates = new Set();\n    const intersections = [];\n    // Allow callers to eliminate event objects\n    const eventsObjects = filter ? filter(state.internal.interaction) : state.internal.interaction;\n    // Reset all raycaster cameras to undefined\n    for (let i = 0; i < eventsObjects.length; i++) {\n      const state = getRootState(eventsObjects[i]);\n      if (state) {\n        state.raycaster.camera = undefined;\n      }\n    }\n    if (!state.previousRoot) {\n      // Make sure root-level pointer and ray are set up\n      state.events.compute == null ? void 0 : state.events.compute(event, state);\n    }\n    function handleRaycast(obj) {\n      const state = getRootState(obj);\n      // Skip event handling when noEvents is set, or when the raycasters camera is null\n      if (!state || !state.events.enabled || state.raycaster.camera === null) return [];\n\n      // When the camera is undefined we have to call the event layers update function\n      if (state.raycaster.camera === undefined) {\n        var _state$previousRoot;\n        state.events.compute == null ? void 0 : state.events.compute(event, state, (_state$previousRoot = state.previousRoot) == null ? void 0 : _state$previousRoot.getState());\n        // If the camera is still undefined we have to skip this layer entirely\n        if (state.raycaster.camera === undefined) state.raycaster.camera = null;\n      }\n\n      // Intersect object by object\n      return state.raycaster.camera ? state.raycaster.intersectObject(obj, true) : [];\n    }\n\n    // Collect events\n    let hits = eventsObjects\n    // Intersect objects\n    .flatMap(handleRaycast)\n    // Sort by event priority and distance\n    .sort((a, b) => {\n      const aState = getRootState(a.object);\n      const bState = getRootState(b.object);\n      if (!aState || !bState) return a.distance - b.distance;\n      return bState.events.priority - aState.events.priority || a.distance - b.distance;\n    })\n    // Filter out duplicates\n    .filter(item => {\n      const id = makeId(item);\n      if (duplicates.has(id)) return false;\n      duplicates.add(id);\n      return true;\n    });\n\n    // https://github.com/mrdoob/three.js/issues/16031\n    // Allow custom userland intersect sort order, this likely only makes sense on the root filter\n    if (state.events.filter) hits = state.events.filter(hits, state);\n\n    // Bubble up the events, find the event source (eventObject)\n    for (const hit of hits) {\n      let eventObject = hit.object;\n      // Bubble event up\n      while (eventObject) {\n        var _r3f2;\n        if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount) intersections.push({\n          ...hit,\n          eventObject\n        });\n        eventObject = eventObject.parent;\n      }\n    }\n\n    // If the interaction is captured, make all capturing targets part of the intersect.\n    if ('pointerId' in event && state.internal.capturedMap.has(event.pointerId)) {\n      for (let captureData of state.internal.capturedMap.get(event.pointerId).values()) {\n        if (!duplicates.has(makeId(captureData.intersection))) intersections.push(captureData.intersection);\n      }\n    }\n    return intersections;\n  }\n\n  /**  Handles intersections by forwarding them to handlers */\n  function handleIntersects(intersections, event, delta, callback) {\n    const rootState = store.getState();\n\n    // If anything has been found, forward it to the event listeners\n    if (intersections.length) {\n      const localState = {\n        stopped: false\n      };\n      for (const hit of intersections) {\n        const state = getRootState(hit.object) || rootState;\n        const {\n          raycaster,\n          pointer,\n          camera,\n          internal\n        } = state;\n        const unprojectedPoint = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3(pointer.x, pointer.y, 0).unproject(camera);\n        const hasPointerCapture = id => {\n          var _internal$capturedMap, _internal$capturedMap2;\n          return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;\n        };\n        const setPointerCapture = id => {\n          const captureData = {\n            intersection: hit,\n            target: event.target\n          };\n          if (internal.capturedMap.has(id)) {\n            // if the pointerId was previously captured, we add the hit to the\n            // event capturedMap.\n            internal.capturedMap.get(id).set(hit.eventObject, captureData);\n          } else {\n            // if the pointerId was not previously captured, we create a map\n            // containing the hitObject, and the hit. hitObject is used for\n            // faster access.\n            internal.capturedMap.set(id, new Map([[hit.eventObject, captureData]]));\n          }\n          event.target.setPointerCapture(id);\n        };\n        const releasePointerCapture = id => {\n          const captures = internal.capturedMap.get(id);\n          if (captures) {\n            releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);\n          }\n        };\n\n        // Add native event props\n        let extractEventProps = {};\n        // This iterates over the event's properties including the inherited ones. Native PointerEvents have most of their props as getters which are inherited, but polyfilled PointerEvents have them all as their own properties (i.e. not inherited). We can't use Object.keys() or Object.entries() as they only return \"own\" properties; nor Object.getPrototypeOf(event) as that *doesn't* return \"own\" properties, only inherited ones.\n        for (let prop in event) {\n          let property = event[prop];\n          // Only copy over atomics, leave functions alone as these should be\n          // called as event.nativeEvent.fn()\n          if (typeof property !== 'function') extractEventProps[prop] = property;\n        }\n        let raycastEvent = {\n          ...hit,\n          ...extractEventProps,\n          pointer,\n          intersections,\n          stopped: localState.stopped,\n          delta,\n          unprojectedPoint,\n          ray: raycaster.ray,\n          camera: camera,\n          // Hijack stopPropagation, which just sets a flag\n          stopPropagation() {\n            // https://github.com/pmndrs/react-three-fiber/issues/596\n            // Events are not allowed to stop propagation if the pointer has been captured\n            const capturesForPointer = 'pointerId' in event && internal.capturedMap.get(event.pointerId);\n\n            // We only authorize stopPropagation...\n            if (\n            // ...if this pointer hasn't been captured\n            !capturesForPointer ||\n            // ... or if the hit object is capturing the pointer\n            capturesForPointer.has(hit.eventObject)) {\n              raycastEvent.stopped = localState.stopped = true;\n              // Propagation is stopped, remove all other hover records\n              // An event handler is only allowed to flush other handlers if it is hovered itself\n              if (internal.hovered.size && Array.from(internal.hovered.values()).find(i => i.eventObject === hit.eventObject)) {\n                // Objects cannot flush out higher up objects that have already caught the event\n                const higher = intersections.slice(0, intersections.indexOf(hit));\n                cancelPointer([...higher, hit]);\n              }\n            }\n          },\n          // there should be a distinction between target and currentTarget\n          target: {\n            hasPointerCapture,\n            setPointerCapture,\n            releasePointerCapture\n          },\n          currentTarget: {\n            hasPointerCapture,\n            setPointerCapture,\n            releasePointerCapture\n          },\n          nativeEvent: event\n        };\n\n        // Call subscribers\n        callback(raycastEvent);\n        // Event bubbling may be interrupted by stopPropagation\n        if (localState.stopped === true) break;\n      }\n    }\n    return intersections;\n  }\n  function cancelPointer(intersections) {\n    const {\n      internal\n    } = store.getState();\n    for (const hoveredObj of internal.hovered.values()) {\n      // When no objects were hit or the the hovered object wasn't found underneath the cursor\n      // we call onPointerOut and delete the object from the hovered-elements map\n      if (!intersections.length || !intersections.find(hit => hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {\n        const eventObject = hoveredObj.eventObject;\n        const instance = eventObject.__r3f;\n        const handlers = instance == null ? void 0 : instance.handlers;\n        internal.hovered.delete(makeId(hoveredObj));\n        if (instance != null && instance.eventCount) {\n          // Clear out intersects, they are outdated by now\n          const data = {\n            ...hoveredObj,\n            intersections\n          };\n          handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);\n          handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);\n        }\n      }\n    }\n  }\n  function pointerMissed(event, objects) {\n    for (let i = 0; i < objects.length; i++) {\n      const instance = objects[i].__r3f;\n      instance == null ? void 0 : instance.handlers.onPointerMissed == null ? void 0 : instance.handlers.onPointerMissed(event);\n    }\n  }\n  function handlePointer(name) {\n    // Deal with cancelation\n    switch (name) {\n      case 'onPointerLeave':\n      case 'onPointerCancel':\n        return () => cancelPointer([]);\n      case 'onLostPointerCapture':\n        return event => {\n          const {\n            internal\n          } = store.getState();\n          if ('pointerId' in event && internal.capturedMap.has(event.pointerId)) {\n            // If the object event interface had onLostPointerCapture, we'd call it here on every\n            // object that's getting removed. We call it on the next frame because onLostPointerCapture\n            // fires before onPointerUp. Otherwise pointerUp would never be called if the event didn't\n            // happen in the object it originated from, leaving components in a in-between state.\n            requestAnimationFrame(() => {\n              // Only release if pointer-up didn't do it already\n              if (internal.capturedMap.has(event.pointerId)) {\n                internal.capturedMap.delete(event.pointerId);\n                cancelPointer([]);\n              }\n            });\n          }\n        };\n    }\n\n    // Any other pointer goes here ...\n    return function handleEvent(event) {\n      const {\n        onPointerMissed,\n        internal\n      } = store.getState();\n\n      // prepareRay(event)\n      internal.lastEvent.current = event;\n\n      // Get fresh intersects\n      const isPointerMove = name === 'onPointerMove';\n      const isClickEvent = name === 'onClick' || name === 'onContextMenu' || name === 'onDoubleClick';\n      const filter = isPointerMove ? filterPointerEvents : undefined;\n      const hits = intersect(event, filter);\n      const delta = isClickEvent ? calculateDistance(event) : 0;\n\n      // Save initial coordinates on pointer-down\n      if (name === 'onPointerDown') {\n        internal.initialClick = [event.offsetX, event.offsetY];\n        internal.initialHits = hits.map(hit => hit.eventObject);\n      }\n\n      // If a click yields no results, pass it back to the user as a miss\n      // Missed events have to come first in order to establish user-land side-effect clean up\n      if (isClickEvent && !hits.length) {\n        if (delta <= 2) {\n          pointerMissed(event, internal.interaction);\n          if (onPointerMissed) onPointerMissed(event);\n        }\n      }\n      // Take care of unhover\n      if (isPointerMove) cancelPointer(hits);\n      function onIntersect(data) {\n        const eventObject = data.eventObject;\n        const instance = eventObject.__r3f;\n        const handlers = instance == null ? void 0 : instance.handlers;\n\n        // Check presence of handlers\n        if (!(instance != null && instance.eventCount)) return;\n\n        /*\r\n        MAYBE TODO, DELETE IF NOT: \r\n          Check if the object is captured, captured events should not have intersects running in parallel\r\n          But wouldn't it be better to just replace capturedMap with a single entry?\r\n          Also, are we OK with straight up making picking up multiple objects impossible?\r\n          \r\n        const pointerId = (data as ThreeEvent<PointerEvent>).pointerId        \r\n        if (pointerId !== undefined) {\r\n          const capturedMeshSet = internal.capturedMap.get(pointerId)\r\n          if (capturedMeshSet) {\r\n            const captured = capturedMeshSet.get(eventObject)\r\n            if (captured && captured.localState.stopped) return\r\n          }\r\n        }*/\n\n        if (isPointerMove) {\n          // Move event ...\n          if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {\n            // When enter or out is present take care of hover-state\n            const id = makeId(data);\n            const hoveredItem = internal.hovered.get(id);\n            if (!hoveredItem) {\n              // If the object wasn't previously hovered, book it and call its handler\n              internal.hovered.set(id, data);\n              handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);\n              handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);\n            } else if (hoveredItem.stopped) {\n              // If the object was previously hovered and stopped, we shouldn't allow other items to proceed\n              data.stopPropagation();\n            }\n          }\n          // Call mouse move\n          handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);\n        } else {\n          // All other events ...\n          const handler = handlers[name];\n          if (handler) {\n            // Forward all events back to their respective handlers with the exception of click events,\n            // which must use the initial target\n            if (!isClickEvent || internal.initialHits.includes(eventObject)) {\n              // Missed events have to come first\n              pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));\n              // Now call the handler\n              handler(data);\n            }\n          } else {\n            // Trigger onPointerMissed on all elements that have pointer over/out handlers, but not click and weren't hit\n            if (isClickEvent && internal.initialHits.includes(eventObject)) {\n              pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));\n            }\n          }\n        }\n      }\n      handleIntersects(hits, event, delta, onIntersect);\n    };\n  }\n  return {\n    handlePointer\n  };\n}\n\n// Keys that shouldn't be copied between R3F stores\nconst privateKeys = ['set', 'get', 'setSize', 'setFrameloop', 'setDpr', 'events', 'invalidate', 'advance', 'size', 'viewport'];\nconst isRenderer = def => !!(def != null && def.render);\nconst context = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst createStore = (invalidate, advance) => {\n  const rootState = (0,zustand__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((set, get) => {\n    const position = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n    const defaultTarget = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n    const tempTarget = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n    function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {\n      const {\n        width,\n        height,\n        top,\n        left\n      } = size;\n      const aspect = width / height;\n      if (target instanceof three__WEBPACK_IMPORTED_MODULE_5__.Vector3) tempTarget.copy(target);else tempTarget.set(...target);\n      const distance = camera.getWorldPosition(position).distanceTo(tempTarget);\n      if (isOrthographicCamera(camera)) {\n        return {\n          width: width / camera.zoom,\n          height: height / camera.zoom,\n          top,\n          left,\n          factor: 1,\n          distance,\n          aspect\n        };\n      } else {\n        const fov = camera.fov * Math.PI / 180; // convert vertical fov to radians\n        const h = 2 * Math.tan(fov / 2) * distance; // visible height\n        const w = h * (width / height);\n        return {\n          width: w,\n          height: h,\n          top,\n          left,\n          factor: width / w,\n          distance,\n          aspect\n        };\n      }\n    }\n    let performanceTimeout = undefined;\n    const setPerformanceCurrent = current => set(state => ({\n      performance: {\n        ...state.performance,\n        current\n      }\n    }));\n    const pointer = new three__WEBPACK_IMPORTED_MODULE_5__.Vector2();\n    const rootState = {\n      set,\n      get,\n      // Mock objects that have to be configured\n      gl: null,\n      camera: null,\n      raycaster: null,\n      events: {\n        priority: 1,\n        enabled: true,\n        connected: false\n      },\n      xr: null,\n      scene: null,\n      invalidate: (frames = 1) => invalidate(get(), frames),\n      advance: (timestamp, runGlobalEffects) => advance(timestamp, runGlobalEffects, get()),\n      legacy: false,\n      linear: false,\n      flat: false,\n      controls: null,\n      clock: new three__WEBPACK_IMPORTED_MODULE_5__.Clock(),\n      pointer,\n      mouse: pointer,\n      frameloop: 'always',\n      onPointerMissed: undefined,\n      performance: {\n        current: 1,\n        min: 0.5,\n        max: 1,\n        debounce: 200,\n        regress: () => {\n          const state = get();\n          // Clear timeout\n          if (performanceTimeout) clearTimeout(performanceTimeout);\n          // Set lower bound performance\n          if (state.performance.current !== state.performance.min) setPerformanceCurrent(state.performance.min);\n          // Go back to upper bound performance after a while unless something regresses meanwhile\n          performanceTimeout = setTimeout(() => setPerformanceCurrent(get().performance.max), state.performance.debounce);\n        }\n      },\n      size: {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        updateStyle: false\n      },\n      viewport: {\n        initialDpr: 0,\n        dpr: 0,\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        aspect: 0,\n        distance: 0,\n        factor: 0,\n        getCurrentViewport\n      },\n      setEvents: events => set(state => ({\n        ...state,\n        events: {\n          ...state.events,\n          ...events\n        }\n      })),\n      setSize: (width, height, updateStyle, top, left) => {\n        const camera = get().camera;\n        const size = {\n          width,\n          height,\n          top: top || 0,\n          left: left || 0,\n          updateStyle\n        };\n        set(state => ({\n          size,\n          viewport: {\n            ...state.viewport,\n            ...getCurrentViewport(camera, defaultTarget, size)\n          }\n        }));\n      },\n      setDpr: dpr => set(state => {\n        const resolved = calculateDpr(dpr);\n        return {\n          viewport: {\n            ...state.viewport,\n            dpr: resolved,\n            initialDpr: state.viewport.initialDpr || resolved\n          }\n        };\n      }),\n      setFrameloop: (frameloop = 'always') => {\n        const clock = get().clock;\n\n        // if frameloop === \"never\" clock.elapsedTime is updated using advance(timestamp)\n        clock.stop();\n        clock.elapsedTime = 0;\n        if (frameloop !== 'never') {\n          clock.start();\n          clock.elapsedTime = 0;\n        }\n        set(() => ({\n          frameloop\n        }));\n      },\n      previousRoot: undefined,\n      internal: {\n        active: false,\n        priority: 0,\n        frames: 0,\n        lastEvent: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n        interaction: [],\n        hovered: new Map(),\n        subscribers: [],\n        initialClick: [0, 0],\n        initialHits: [],\n        capturedMap: new Map(),\n        subscribe: (ref, priority, store) => {\n          const internal = get().internal;\n          // If this subscription was given a priority, it takes rendering into its own hands\n          // For that reason we switch off automatic rendering and increase the manual flag\n          // As long as this flag is positive there can be no internal rendering at all\n          // because there could be multiple render subscriptions\n          internal.priority = internal.priority + (priority > 0 ? 1 : 0);\n          internal.subscribers.push({\n            ref,\n            priority,\n            store\n          });\n          // Register subscriber and sort layers from lowest to highest, meaning,\n          // highest priority renders last (on top of the other frames)\n          internal.subscribers = internal.subscribers.sort((a, b) => a.priority - b.priority);\n          return () => {\n            const internal = get().internal;\n            if (internal != null && internal.subscribers) {\n              // Decrease manual flag if this subscription had a priority\n              internal.priority = internal.priority - (priority > 0 ? 1 : 0);\n              // Remove subscriber from list\n              internal.subscribers = internal.subscribers.filter(s => s.ref !== ref);\n            }\n          };\n        }\n      }\n    };\n    return rootState;\n  });\n  const state = rootState.getState();\n  let oldSize = state.size;\n  let oldDpr = state.viewport.dpr;\n  let oldCamera = state.camera;\n  rootState.subscribe(() => {\n    const {\n      camera,\n      size,\n      viewport,\n      gl,\n      set\n    } = rootState.getState();\n\n    // Resize camera and renderer on changes to size and pixelratio\n    if (size.width !== oldSize.width || size.height !== oldSize.height || viewport.dpr !== oldDpr) {\n      var _size$updateStyle;\n      oldSize = size;\n      oldDpr = viewport.dpr;\n      // Update camera & renderer\n      updateCamera(camera, size);\n      gl.setPixelRatio(viewport.dpr);\n      const updateStyle = (_size$updateStyle = size.updateStyle) != null ? _size$updateStyle : typeof HTMLCanvasElement !== 'undefined' && gl.domElement instanceof HTMLCanvasElement;\n      gl.setSize(size.width, size.height, updateStyle);\n    }\n\n    // Update viewport once the camera changes\n    if (camera !== oldCamera) {\n      oldCamera = camera;\n      // Update viewport\n      set(state => ({\n        viewport: {\n          ...state.viewport,\n          ...state.viewport.getCurrentViewport(camera)\n        }\n      }));\n    }\n  });\n\n  // Invalidate on any change\n  rootState.subscribe(state => invalidate(state));\n\n  // Return root state\n  return rootState;\n};\n\nfunction createSubs(callback, subs) {\n  const sub = {\n    callback\n  };\n  subs.add(sub);\n  return () => void subs.delete(sub);\n}\nlet i;\nlet globalEffects = new Set();\nlet globalAfterEffects = new Set();\nlet globalTailEffects = new Set();\n\n/**\r\n * Adds a global render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addEffect\r\n */\nconst addEffect = callback => createSubs(callback, globalEffects);\n\n/**\r\n * Adds a global after-render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addAfterEffect\r\n */\nconst addAfterEffect = callback => createSubs(callback, globalAfterEffects);\n\n/**\r\n * Adds a global callback which is called when rendering stops.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addTail\r\n */\nconst addTail = callback => createSubs(callback, globalTailEffects);\nfunction run(effects, timestamp) {\n  if (!effects.size) return;\n  for (const {\n    callback\n  } of effects.values()) {\n    callback(timestamp);\n  }\n}\nfunction flushGlobalEffects(type, timestamp) {\n  switch (type) {\n    case 'before':\n      return run(globalEffects, timestamp);\n    case 'after':\n      return run(globalAfterEffects, timestamp);\n    case 'tail':\n      return run(globalTailEffects, timestamp);\n  }\n}\nlet subscribers;\nlet subscription;\nfunction render$1(timestamp, state, frame) {\n  // Run local effects\n  let delta = state.clock.getDelta();\n  // In frameloop='never' mode, clock times are updated using the provided timestamp\n  if (state.frameloop === 'never' && typeof timestamp === 'number') {\n    delta = timestamp - state.clock.elapsedTime;\n    state.clock.oldTime = state.clock.elapsedTime;\n    state.clock.elapsedTime = timestamp;\n  }\n  // Call subscribers (useFrame)\n  subscribers = state.internal.subscribers;\n  for (i = 0; i < subscribers.length; i++) {\n    subscription = subscribers[i];\n    subscription.ref.current(subscription.store.getState(), delta, frame);\n  }\n  // Render content\n  if (!state.internal.priority && state.gl.render) state.gl.render(state.scene, state.camera);\n  // Decrease frame count\n  state.internal.frames = Math.max(0, state.internal.frames - 1);\n  return state.frameloop === 'always' ? 1 : state.internal.frames;\n}\nfunction createLoop(roots) {\n  let running = false;\n  let useFrameInProgress = false;\n  let repeat;\n  let frame;\n  let state;\n  function loop(timestamp) {\n    frame = requestAnimationFrame(loop);\n    running = true;\n    repeat = 0;\n\n    // Run effects\n    flushGlobalEffects('before', timestamp);\n\n    // Render all roots\n    useFrameInProgress = true;\n    for (const root of roots.values()) {\n      var _state$gl$xr;\n      state = root.store.getState();\n      // If the frameloop is invalidated, do not run another frame\n      if (state.internal.active && (state.frameloop === 'always' || state.internal.frames > 0) && !((_state$gl$xr = state.gl.xr) != null && _state$gl$xr.isPresenting)) {\n        repeat += render$1(timestamp, state);\n      }\n    }\n    useFrameInProgress = false;\n\n    // Run after-effects\n    flushGlobalEffects('after', timestamp);\n\n    // Stop the loop if nothing invalidates it\n    if (repeat === 0) {\n      // Tail call effects, they are called when rendering stops\n      flushGlobalEffects('tail', timestamp);\n\n      // Flag end of operation\n      running = false;\n      return cancelAnimationFrame(frame);\n    }\n  }\n  function invalidate(state, frames = 1) {\n    var _state$gl$xr2;\n    if (!state) return roots.forEach(root => invalidate(root.store.getState(), frames));\n    if ((_state$gl$xr2 = state.gl.xr) != null && _state$gl$xr2.isPresenting || !state.internal.active || state.frameloop === 'never') return;\n    if (frames > 1) {\n      // legacy support for people using frames parameters\n      // Increase frames, do not go higher than 60\n      state.internal.frames = Math.min(60, state.internal.frames + frames);\n    } else {\n      if (useFrameInProgress) {\n        //called from within a useFrame, it means the user wants an additional frame\n        state.internal.frames = 2;\n      } else {\n        //the user need a new frame, no need to increment further than 1\n        state.internal.frames = 1;\n      }\n    }\n\n    // If the render-loop isn't active, start it\n    if (!running) {\n      running = true;\n      requestAnimationFrame(loop);\n    }\n  }\n  function advance(timestamp, runGlobalEffects = true, state, frame) {\n    if (runGlobalEffects) flushGlobalEffects('before', timestamp);\n    if (!state) for (const root of roots.values()) render$1(timestamp, root.store.getState());else render$1(timestamp, state, frame);\n    if (runGlobalEffects) flushGlobalEffects('after', timestamp);\n  }\n  return {\n    loop,\n    invalidate,\n    advance\n  };\n}\n\n/**\r\n * Exposes an object's {@link LocalState}.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#useInstanceHandle\r\n *\r\n * **Note**: this is an escape hatch to react-internal fields. Expect this to change significantly between versions.\r\n */\nfunction useInstanceHandle(ref) {\n  const instance = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  useIsomorphicLayoutEffect(() => void (instance.current = ref.current.__r3f), [ref]);\n  return instance;\n}\nfunction useStore() {\n  const store = react__WEBPACK_IMPORTED_MODULE_0__.useContext(context);\n  if (!store) throw new Error('R3F: Hooks can only be used within the Canvas component!');\n  return store;\n}\n\n/**\r\n * Accesses R3F's internal state, containing renderer, canvas, scene, etc.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usethree\r\n */\nfunction useThree(selector = state => state, equalityFn) {\n  return useStore()(selector, equalityFn);\n}\n\n/**\r\n * Executes a callback before render in a shared frame loop.\r\n * Can order effects with render priority or manually render with a positive priority.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useframe\r\n */\nfunction useFrame(callback, renderPriority = 0) {\n  const store = useStore();\n  const subscribe = store.getState().internal.subscribe;\n  // Memoize ref\n  const ref = useMutableCallback(callback);\n  // Subscribe on mount, unsubscribe on unmount\n  useIsomorphicLayoutEffect(() => subscribe(ref, renderPriority, store), [renderPriority, subscribe, store]);\n  return null;\n}\n\n/**\r\n * Returns a node graph of an object with named nodes & materials.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usegraph\r\n */\nfunction useGraph(object) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => buildGraph(object), [object]);\n}\nconst memoizedLoaders = new WeakMap();\nfunction loadingFn(extensions, onProgress) {\n  return function (Proto, ...input) {\n    // Construct new loader and run extensions\n    let loader = memoizedLoaders.get(Proto);\n    if (!loader) {\n      loader = new Proto();\n      memoizedLoaders.set(Proto, loader);\n    }\n    if (extensions) extensions(loader);\n    // Go through the urls and load them\n    return Promise.all(input.map(input => new Promise((res, reject) => loader.load(input, data => {\n      if (data.scene) Object.assign(data, buildGraph(data.scene));\n      res(data);\n    }, onProgress, error => reject(new Error(`Could not load ${input}: ${error == null ? void 0 : error.message}`))))));\n  };\n}\n/**\r\n * Synchronously loads and caches assets with a three loader.\r\n *\r\n * Note: this hook's caller must be wrapped with `React.Suspense`\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useloader\r\n */\nfunction useLoader(Proto, input, extensions, onProgress) {\n  // Use suspense to load async assets\n  const keys = Array.isArray(input) ? input : [input];\n  const results = (0,suspend_react__WEBPACK_IMPORTED_MODULE_7__.suspend)(loadingFn(extensions, onProgress), [Proto, ...keys], {\n    equal: is.equ\n  });\n  // Return the object/s\n  return Array.isArray(input) ? results : results[0];\n}\n\n/**\r\n * Preloads an asset into cache as a side-effect.\r\n */\nuseLoader.preload = function (Proto, input, extensions) {\n  const keys = Array.isArray(input) ? input : [input];\n  return (0,suspend_react__WEBPACK_IMPORTED_MODULE_7__.preload)(loadingFn(extensions), [Proto, ...keys]);\n};\n\n/**\r\n * Removes a loaded asset from cache.\r\n */\nuseLoader.clear = function (Proto, input) {\n  const keys = Array.isArray(input) ? input : [input];\n  return (0,suspend_react__WEBPACK_IMPORTED_MODULE_7__.clear)([Proto, ...keys]);\n};\n\nconst roots = new Map();\nconst {\n  invalidate,\n  advance\n} = createLoop(roots);\nconst {\n  reconciler,\n  applyProps\n} = createRenderer(roots, getEventPriority);\nconst shallowLoose = {\n  objects: 'shallow',\n  strict: false\n};\nconst createRendererInstance = (gl, canvas) => {\n  const customRenderer = typeof gl === 'function' ? gl(canvas) : gl;\n  if (isRenderer(customRenderer)) return customRenderer;else return new three__WEBPACK_IMPORTED_MODULE_5__.WebGLRenderer({\n    powerPreference: 'high-performance',\n    canvas: canvas,\n    antialias: true,\n    alpha: true,\n    ...gl\n  });\n};\nfunction computeInitialSize(canvas, defaultSize) {\n  const defaultStyle = typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement;\n  if (defaultSize) {\n    const {\n      width,\n      height,\n      top,\n      left,\n      updateStyle = defaultStyle\n    } = defaultSize;\n    return {\n      width,\n      height,\n      top,\n      left,\n      updateStyle\n    };\n  } else if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement && canvas.parentElement) {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = canvas.parentElement.getBoundingClientRect();\n    return {\n      width,\n      height,\n      top,\n      left,\n      updateStyle: defaultStyle\n    };\n  } else if (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return {\n      width: canvas.width,\n      height: canvas.height,\n      top: 0,\n      left: 0,\n      updateStyle: defaultStyle\n    };\n  }\n  return {\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  };\n}\nfunction createRoot(canvas) {\n  // Check against mistaken use of createRoot\n  const prevRoot = roots.get(canvas);\n  const prevFiber = prevRoot == null ? void 0 : prevRoot.fiber;\n  const prevStore = prevRoot == null ? void 0 : prevRoot.store;\n  if (prevRoot) console.warn('R3F.createRoot should only be called once!');\n\n  // Report when an error was detected in a previous render\n  // https://github.com/pmndrs/react-three-fiber/pull/2261\n  const logRecoverableError = typeof reportError === 'function' ?\n  // In modern browsers, reportError will dispatch an error event,\n  // emulating an uncaught JavaScript error.\n  reportError :\n  // In older browsers and test environments, fallback to console.error.\n  console.error;\n\n  // Create store\n  const store = prevStore || createStore(invalidate, advance);\n  // Create renderer\n  const fiber = prevFiber || reconciler.createContainer(store, react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ConcurrentRoot, null, false, null, '', logRecoverableError, null);\n  // Map it\n  if (!prevRoot) roots.set(canvas, {\n    fiber,\n    store\n  });\n\n  // Locals\n  let onCreated;\n  let configured = false;\n  let lastCamera;\n  return {\n    configure(props = {}) {\n      let {\n        gl: glConfig,\n        size: propsSize,\n        scene: sceneOptions,\n        events,\n        onCreated: onCreatedCallback,\n        shadows = false,\n        linear = false,\n        flat = false,\n        legacy = false,\n        orthographic = false,\n        frameloop = 'always',\n        dpr = [1, 2],\n        performance,\n        raycaster: raycastOptions,\n        camera: cameraOptions,\n        onPointerMissed\n      } = props;\n      let state = store.getState();\n\n      // Set up renderer (one time only!)\n      let gl = state.gl;\n      if (!state.gl) state.set({\n        gl: gl = createRendererInstance(glConfig, canvas)\n      });\n\n      // Set up raycaster (one time only!)\n      let raycaster = state.raycaster;\n      if (!raycaster) state.set({\n        raycaster: raycaster = new three__WEBPACK_IMPORTED_MODULE_5__.Raycaster()\n      });\n\n      // Set raycaster options\n      const {\n        params,\n        ...options\n      } = raycastOptions || {};\n      if (!is.equ(options, raycaster, shallowLoose)) applyProps(raycaster, {\n        ...options\n      });\n      if (!is.equ(params, raycaster.params, shallowLoose)) applyProps(raycaster, {\n        params: {\n          ...raycaster.params,\n          ...params\n        }\n      });\n\n      // Create default camera, don't overwrite any user-set state\n      if (!state.camera || state.camera === lastCamera && !is.equ(lastCamera, cameraOptions, shallowLoose)) {\n        lastCamera = cameraOptions;\n        const isCamera = cameraOptions instanceof three__WEBPACK_IMPORTED_MODULE_5__.Camera;\n        const camera = isCamera ? cameraOptions : orthographic ? new three__WEBPACK_IMPORTED_MODULE_5__.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new three__WEBPACK_IMPORTED_MODULE_5__.PerspectiveCamera(75, 0, 0.1, 1000);\n        if (!isCamera) {\n          camera.position.z = 5;\n          if (cameraOptions) {\n            applyProps(camera, cameraOptions);\n            // Preserve user-defined frustum if possible\n            // https://github.com/pmndrs/react-three-fiber/issues/3160\n            if ('aspect' in cameraOptions || 'left' in cameraOptions || 'right' in cameraOptions || 'bottom' in cameraOptions || 'top' in cameraOptions) {\n              camera.manual = true;\n              camera.updateProjectionMatrix();\n            }\n          }\n          // Always look at center by default\n          if (!state.camera && !(cameraOptions != null && cameraOptions.rotation)) camera.lookAt(0, 0, 0);\n        }\n        state.set({\n          camera\n        });\n\n        // Configure raycaster\n        // https://github.com/pmndrs/react-xr/issues/300\n        raycaster.camera = camera;\n      }\n\n      // Set up scene (one time only!)\n      if (!state.scene) {\n        let scene;\n        if (sceneOptions instanceof three__WEBPACK_IMPORTED_MODULE_5__.Scene) {\n          scene = sceneOptions;\n        } else {\n          scene = new three__WEBPACK_IMPORTED_MODULE_5__.Scene();\n          if (sceneOptions) applyProps(scene, sceneOptions);\n        }\n        state.set({\n          scene: prepare(scene)\n        });\n      }\n\n      // Set up XR (one time only!)\n      if (!state.xr) {\n        var _gl$xr;\n        // Handle frame behavior in WebXR\n        const handleXRFrame = (timestamp, frame) => {\n          const state = store.getState();\n          if (state.frameloop === 'never') return;\n          advance(timestamp, true, state, frame);\n        };\n\n        // Toggle render switching on session\n        const handleSessionChange = () => {\n          const state = store.getState();\n          state.gl.xr.enabled = state.gl.xr.isPresenting;\n          state.gl.xr.setAnimationLoop(state.gl.xr.isPresenting ? handleXRFrame : null);\n          if (!state.gl.xr.isPresenting) invalidate(state);\n        };\n\n        // WebXR session manager\n        const xr = {\n          connect() {\n            const gl = store.getState().gl;\n            gl.xr.addEventListener('sessionstart', handleSessionChange);\n            gl.xr.addEventListener('sessionend', handleSessionChange);\n          },\n          disconnect() {\n            const gl = store.getState().gl;\n            gl.xr.removeEventListener('sessionstart', handleSessionChange);\n            gl.xr.removeEventListener('sessionend', handleSessionChange);\n          }\n        };\n\n        // Subscribe to WebXR session events\n        if (typeof ((_gl$xr = gl.xr) == null ? void 0 : _gl$xr.addEventListener) === 'function') xr.connect();\n        state.set({\n          xr\n        });\n      }\n\n      // Set shadowmap\n      if (gl.shadowMap) {\n        const oldEnabled = gl.shadowMap.enabled;\n        const oldType = gl.shadowMap.type;\n        gl.shadowMap.enabled = !!shadows;\n        if (is.boo(shadows)) {\n          gl.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_5__.PCFSoftShadowMap;\n        } else if (is.str(shadows)) {\n          var _types$shadows;\n          const types = {\n            basic: three__WEBPACK_IMPORTED_MODULE_5__.BasicShadowMap,\n            percentage: three__WEBPACK_IMPORTED_MODULE_5__.PCFShadowMap,\n            soft: three__WEBPACK_IMPORTED_MODULE_5__.PCFSoftShadowMap,\n            variance: three__WEBPACK_IMPORTED_MODULE_5__.VSMShadowMap\n          };\n          gl.shadowMap.type = (_types$shadows = types[shadows]) != null ? _types$shadows : three__WEBPACK_IMPORTED_MODULE_5__.PCFSoftShadowMap;\n        } else if (is.obj(shadows)) {\n          Object.assign(gl.shadowMap, shadows);\n        }\n        if (oldEnabled !== gl.shadowMap.enabled || oldType !== gl.shadowMap.type) gl.shadowMap.needsUpdate = true;\n      }\n\n      // Safely set color management if available.\n      // Avoid accessing THREE.ColorManagement to play nice with older versions\n      const ColorManagement = getColorManagement();\n      if (ColorManagement) {\n        if ('enabled' in ColorManagement) ColorManagement.enabled = !legacy;else if ('legacyMode' in ColorManagement) ColorManagement.legacyMode = legacy;\n      }\n      if (!configured) {\n        // Set color space and tonemapping preferences, once\n        const LinearEncoding = 3000;\n        const sRGBEncoding = 3001;\n        applyProps(gl, {\n          outputEncoding: linear ? LinearEncoding : sRGBEncoding,\n          toneMapping: flat ? three__WEBPACK_IMPORTED_MODULE_5__.NoToneMapping : three__WEBPACK_IMPORTED_MODULE_5__.ACESFilmicToneMapping\n        });\n      }\n\n      // Update color management state\n      if (state.legacy !== legacy) state.set(() => ({\n        legacy\n      }));\n      if (state.linear !== linear) state.set(() => ({\n        linear\n      }));\n      if (state.flat !== flat) state.set(() => ({\n        flat\n      }));\n\n      // Set gl props\n      if (glConfig && !is.fun(glConfig) && !isRenderer(glConfig) && !is.equ(glConfig, gl, shallowLoose)) applyProps(gl, glConfig);\n      // Store events internally\n      if (events && !state.events.handlers) state.set({\n        events: events(store)\n      });\n      // Check size, allow it to take on container bounds initially\n      const size = computeInitialSize(canvas, propsSize);\n      if (!is.equ(size, state.size, shallowLoose)) {\n        state.setSize(size.width, size.height, size.updateStyle, size.top, size.left);\n      }\n      // Check pixelratio\n      if (dpr && state.viewport.dpr !== calculateDpr(dpr)) state.setDpr(dpr);\n      // Check frameloop\n      if (state.frameloop !== frameloop) state.setFrameloop(frameloop);\n      // Check pointer missed\n      if (!state.onPointerMissed) state.set({\n        onPointerMissed\n      });\n      // Check performance\n      if (performance && !is.equ(performance, state.performance, shallowLoose)) state.set(state => ({\n        performance: {\n          ...state.performance,\n          ...performance\n        }\n      }));\n\n      // Set locals\n      onCreated = onCreatedCallback;\n      configured = true;\n      return this;\n    },\n    render(children) {\n      // The root has to be configured before it can be rendered\n      if (!configured) this.configure();\n      reconciler.updateContainer( /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Provider, {\n        store: store,\n        children: children,\n        onCreated: onCreated,\n        rootElement: canvas\n      }), fiber, null, () => undefined);\n      return store;\n    },\n    unmount() {\n      unmountComponentAtNode(canvas);\n    }\n  };\n}\nfunction render(children, canvas, config) {\n  console.warn('R3F.render is no longer supported in React 18. Use createRoot instead!');\n  const root = createRoot(canvas);\n  root.configure(config);\n  return root.render(children);\n}\nfunction Provider({\n  store,\n  children,\n  onCreated,\n  rootElement\n}) {\n  useIsomorphicLayoutEffect(() => {\n    const state = store.getState();\n    // Flag the canvas active, rendering will now begin\n    state.set(state => ({\n      internal: {\n        ...state.internal,\n        active: true\n      }\n    }));\n    // Notifiy that init is completed, the scene graph exists, but nothing has yet rendered\n    if (onCreated) onCreated(state);\n    // Connect events to the targets parent, this is done to ensure events are registered on\n    // a shared target, and not on the canvas itself\n    if (!store.getState().events.connected) state.events.connect == null ? void 0 : state.events.connect(rootElement);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(context.Provider, {\n    value: store,\n    children: children\n  });\n}\nfunction unmountComponentAtNode(canvas, callback) {\n  const root = roots.get(canvas);\n  const fiber = root == null ? void 0 : root.fiber;\n  if (fiber) {\n    const state = root == null ? void 0 : root.store.getState();\n    if (state) state.internal.active = false;\n    reconciler.updateContainer(null, fiber, null, () => {\n      if (state) {\n        setTimeout(() => {\n          try {\n            var _state$gl, _state$gl$renderLists, _state$gl2, _state$gl3;\n            state.events.disconnect == null ? void 0 : state.events.disconnect();\n            (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();\n            (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();\n            if ((_state$gl3 = state.gl) != null && _state$gl3.xr) state.xr.disconnect();\n            dispose(state);\n            roots.delete(canvas);\n            if (callback) callback(canvas);\n          } catch (e) {\n            /* ... */\n          }\n        }, 500);\n      }\n    });\n  }\n}\nfunction createPortal(children, container, state) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Portal, {\n    children: children,\n    container: container,\n    state: state\n  }, container.uuid);\n}\nfunction Portal({\n  state = {},\n  children,\n  container\n}) {\n  /** This has to be a component because it would not be able to call useThree/useStore otherwise since\r\n   *  if this is our environment, then we are not in r3f's renderer but in react-dom, it would trigger\r\n   *  the \"R3F hooks can only be used within the Canvas component!\" warning:\r\n   *  <Canvas>\r\n   *    {createPortal(...)} */\n  const {\n    events,\n    size,\n    ...rest\n  } = state;\n  const previousRoot = useStore();\n  const [raycaster] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => new three__WEBPACK_IMPORTED_MODULE_5__.Raycaster());\n  const [pointer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => new three__WEBPACK_IMPORTED_MODULE_5__.Vector2());\n  const inject = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((rootState, injectState) => {\n    const intersect = {\n      ...rootState\n    }; // all prev state props\n\n    // Only the fields of \"rootState\" that do not differ from injectState\n    // Some props should be off-limits\n    // Otherwise filter out the props that are different and let the inject layer take precedence\n    Object.keys(rootState).forEach(key => {\n      if (\n      // Some props should be off-limits\n      privateKeys.includes(key) ||\n      // Otherwise filter out the props that are different and let the inject layer take precedence\n      // Unless the inject layer props is undefined, then we keep the root layer\n      rootState[key] !== injectState[key] && injectState[key]) {\n        delete intersect[key];\n      }\n    });\n    let viewport = undefined;\n    if (injectState && size) {\n      const camera = injectState.camera;\n      // Calculate the override viewport, if present\n      viewport = rootState.viewport.getCurrentViewport(camera, new three__WEBPACK_IMPORTED_MODULE_5__.Vector3(), size);\n      // Update the portal camera, if it differs from the previous layer\n      if (camera !== rootState.camera) updateCamera(camera, size);\n    }\n    return {\n      // The intersect consists of the previous root state\n      ...intersect,\n      // Portals have their own scene, which forms the root, a raycaster and a pointer\n      scene: container,\n      raycaster,\n      pointer,\n      mouse: pointer,\n      // Their previous root is the layer before it\n      previousRoot,\n      // Events, size and viewport can be overridden by the inject layer\n      events: {\n        ...rootState.events,\n        ...(injectState == null ? void 0 : injectState.events),\n        ...events\n      },\n      size: {\n        ...rootState.size,\n        ...size\n      },\n      viewport: {\n        ...rootState.viewport,\n        ...viewport\n      },\n      ...rest\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [state]);\n  const [usePortalStore] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => {\n    // Create a mirrored store, based on the previous root with a few overrides ...\n    const previousState = previousRoot.getState();\n    const store = (0,zustand__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((set, get) => ({\n      ...previousState,\n      scene: container,\n      raycaster,\n      pointer,\n      mouse: pointer,\n      previousRoot,\n      events: {\n        ...previousState.events,\n        ...events\n      },\n      size: {\n        ...previousState.size,\n        ...size\n      },\n      ...rest,\n      // Set and get refer to this root-state\n      set,\n      get,\n      // Layers are allowed to override events\n      setEvents: events => set(state => ({\n        ...state,\n        events: {\n          ...state.events,\n          ...events\n        }\n      }))\n    }));\n    return store;\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // Subscribe to previous root-state and copy changes over to the mirrored portal-state\n    const unsub = previousRoot.subscribe(prev => usePortalStore.setState(state => inject(prev, state)));\n    return () => {\n      unsub();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inject]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    usePortalStore.setState(injectState => inject(previousRoot.getState(), injectState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inject]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return () => {\n      usePortalStore.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n    children: reconciler.createPortal( /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(context.Provider, {\n      value: usePortalStore,\n      children: children\n    }), usePortalStore, null)\n  });\n}\n\n/**\r\n * Force React to flush any updates inside the provided callback synchronously and immediately.\r\n * All the same caveats documented for react-dom's `flushSync` apply here (see https://react.dev/reference/react-dom/flushSync).\r\n * Nevertheless, sometimes one needs to render synchronously, for example to keep DOM and 3D changes in lock-step without\r\n * having to revert to a non-React solution.\r\n */\nfunction flushSync(fn) {\n  // `flushSync` implementation only takes one argument. I don't know what's up with the type declaration for it.\n  return reconciler.flushSync(fn, undefined);\n}\nreconciler.injectIntoDevTools({\n  bundleType:  false ? 0 : 1,\n  rendererPackageName: '@react-three/fiber',\n  version: react__WEBPACK_IMPORTED_MODULE_0__.version\n});\nconst act = react__WEBPACK_IMPORTED_MODULE_0__.unstable_act;\n\nconst DOM_EVENTS = {\n  onClick: ['click', false],\n  onContextMenu: ['contextmenu', false],\n  onDoubleClick: ['dblclick', false],\n  onWheel: ['wheel', true],\n  onPointerDown: ['pointerdown', true],\n  onPointerUp: ['pointerup', true],\n  onPointerLeave: ['pointerleave', true],\n  onPointerMove: ['pointermove', true],\n  onPointerCancel: ['pointercancel', true],\n  onLostPointerCapture: ['lostpointercapture', true]\n};\n\n/** Default R3F event manager for web */\nfunction createPointerEvents(store) {\n  const {\n    handlePointer\n  } = createEvents(store);\n  return {\n    priority: 1,\n    enabled: true,\n    compute(event, state, previous) {\n      // https://github.com/pmndrs/react-three-fiber/pull/782\n      // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n      state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    },\n    connected: undefined,\n    handlers: Object.keys(DOM_EVENTS).reduce((acc, key) => ({\n      ...acc,\n      [key]: handlePointer(key)\n    }), {}),\n    update: () => {\n      var _internal$lastEvent;\n      const {\n        events,\n        internal\n      } = store.getState();\n      if ((_internal$lastEvent = internal.lastEvent) != null && _internal$lastEvent.current && events.handlers) events.handlers.onPointerMove(internal.lastEvent.current);\n    },\n    connect: target => {\n      var _events$handlers;\n      const {\n        set,\n        events\n      } = store.getState();\n      events.disconnect == null ? void 0 : events.disconnect();\n      set(state => ({\n        events: {\n          ...state.events,\n          connected: target\n        }\n      }));\n      Object.entries((_events$handlers = events.handlers) != null ? _events$handlers : []).forEach(([name, event]) => {\n        const [eventName, passive] = DOM_EVENTS[name];\n        target.addEventListener(eventName, event, {\n          passive\n        });\n      });\n    },\n    disconnect: () => {\n      const {\n        set,\n        events\n      } = store.getState();\n      if (events.connected) {\n        var _events$handlers2;\n        Object.entries((_events$handlers2 = events.handlers) != null ? _events$handlers2 : []).forEach(([name, event]) => {\n          if (events && events.connected instanceof HTMLElement) {\n            const [eventName] = DOM_EVENTS[name];\n            events.connected.removeEventListener(eventName, event);\n          }\n        });\n        set(state => ({\n          events: {\n            ...state.events,\n            connected: undefined\n          }\n        }));\n      }\n    }\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ReactThreeFiber: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   _roots: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   act: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   addAfterEffect: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   addEffect: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   addTail: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   advance: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   applyProps: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   buildGraph: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   context: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   createEvents: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   createPointerEvents: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createPortal: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   createRoot: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   dispose: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   events: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   extend: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   flushGlobalEffects: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   flushSync: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   getRootState: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   invalidate: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   reconciler: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   render: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   unmountComponentAtNode: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   useFrame: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   useGraph: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   useInstanceHandle: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   useLoader: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   useStore: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   useThree: () => (/* reexport safe */ _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.D)\n/* harmony export */ });\n/* harmony import */ var _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events-321b05fb.esm.js */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-321b05fb.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var debounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! debounce */ \"(ssr)/./node_modules/debounce/index.js\");\n/* harmony import */ var debounce__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(debounce__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! its-fine */ \"(ssr)/./node_modules/its-fine/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/scheduler/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable react-hooks/rules-of-hooks */\nfunction useMeasure({\n  debounce,\n  scroll,\n  polyfill,\n  offsetSize\n} = {\n  debounce: 0,\n  scroll: false,\n  offsetSize: false\n}) {\n  const ResizeObserver = polyfill || typeof window !== 'undefined' && window.ResizeObserver;\n  const [bounds, set] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  });\n\n  // In test mode\n  if (!ResizeObserver) {\n    // @ts-ignore\n    bounds.width = 1280;\n    // @ts-ignore\n    bounds.height = 800;\n    return [() => {}, bounds, () => {}];\n  }\n\n  // keep all state in a ref\n  const state = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds,\n    orientationHandler: null\n  });\n\n  // set actual debounce values early, so effects know if they should react accordingly\n  const scrollDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.scroll : null;\n  const resizeDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.resize : null;\n\n  // make sure to update state only as long as the component is truly mounted\n  const mounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    mounted.current = true;\n    return () => void (mounted.current = false);\n  });\n\n  // memoize handlers, so event-listeners know when they should update\n  const [forceRefresh, resizeChange, scrollChange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      if (state.current.element instanceof HTMLElement && offsetSize) {\n        size.height = state.current.element.offsetHeight;\n        size.width = state.current.element.offsetWidth;\n      }\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n    return [callback, resizeDebounce ? debounce__WEBPACK_IMPORTED_MODULE_2___default()(callback, resizeDebounce) : callback, scrollDebounce ? debounce__WEBPACK_IMPORTED_MODULE_2___default()(callback, scrollDebounce) : callback];\n  }, [set, offsetSize, scrollDebounce, resizeDebounce]);\n\n  // cleanup current scroll-listeners / observers\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n    if (state.current.orientationHandler) {\n      if ('orientation' in screen && 'removeEventListener' in screen.orientation) {\n        screen.orientation.removeEventListener('change', state.current.orientationHandler);\n      } else if ('onorientationchange' in window) {\n        window.removeEventListener('orientationchange', state.current.orientationHandler);\n      }\n    }\n  }\n\n  // add scroll-listeners / observers\n  function addListeners() {\n    var _state$current$resize;\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(resizeChange);\n    (_state$current$resize = state.current.resizeObserver) == null ? void 0 : _state$current$resize.observe(state.current.element);\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n\n    // Handle orientation changes\n    state.current.orientationHandler = () => {\n      scrollChange();\n    };\n\n    // Use screen.orientation if available\n    if ('orientation' in screen && 'addEventListener' in screen.orientation) {\n      screen.orientation.addEventListener('change', state.current.orientationHandler);\n    } else if ('onorientationchange' in window) {\n      // Fallback to orientationchange event\n      window.addEventListener('orientationchange', state.current.orientationHandler);\n    }\n  }\n\n  // the ref we expose to the user\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  };\n\n  // add general event listeners\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange);\n\n  // respond to changes that are relevant for the listeners\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]);\n\n  // remove all listeners when the components unmounts\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n}\n\n// Adds native resize listener to window\nfunction useOnWindowResize(onWindowResize) {\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\nfunction useOnWindowScroll(onScroll, enabled) {\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n}\n\n// Returns a list of scroll offsets\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n}\n\n// Checks if element boundaries are equal\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nconst CanvasImpl = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function Canvas({\n  children,\n  fallback,\n  resize,\n  style,\n  gl,\n  events = _events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.c,\n  eventSource,\n  eventPrefix,\n  shadows,\n  linear,\n  flat,\n  legacy,\n  orthographic,\n  frameloop,\n  dpr,\n  performance,\n  raycaster,\n  camera,\n  scene,\n  onPointerMissed,\n  onCreated,\n  ...props\n}, forwardedRef) {\n  // Create a known catalogue of Threejs-native elements\n  // This will include the entire THREE namespace by default, users can extend\n  // their own elements by using the createRoot API instead\n  react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => (0,_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(three__WEBPACK_IMPORTED_MODULE_7__), []);\n  const Bridge = (0,its_fine__WEBPACK_IMPORTED_MODULE_8__.useContextBridge)();\n  const [containerRef, containerRect] = useMeasure({\n    scroll: true,\n    debounce: {\n      scroll: 50,\n      resize: 0\n    },\n    ...resize\n  });\n  const canvasRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  const divRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(forwardedRef, () => canvasRef.current);\n  const handlePointerMissed = (0,_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)(onPointerMissed);\n  const [block, setBlock] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n  const [error, setError] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n\n  // Suspend this component if block is a promise (2nd run)\n  if (block) throw block;\n  // Throw exception outwards if anything within canvas throws\n  if (error) throw error;\n  const root = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  (0,_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(() => {\n    const canvas = canvasRef.current;\n    if (containerRect.width > 0 && containerRect.height > 0 && canvas) {\n      if (!root.current) root.current = (0,_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)(canvas);\n      root.current.configure({\n        gl,\n        events,\n        shadows,\n        linear,\n        flat,\n        legacy,\n        orthographic,\n        frameloop,\n        dpr,\n        performance,\n        raycaster,\n        camera,\n        scene,\n        size: containerRect,\n        // Pass mutable reference to onPointerMissed so it's free to update\n        onPointerMissed: (...args) => handlePointerMissed.current == null ? void 0 : handlePointerMissed.current(...args),\n        onCreated: state => {\n          // Connect to event source\n          state.events.connect == null ? void 0 : state.events.connect(eventSource ? (0,_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(eventSource) ? eventSource.current : eventSource : divRef.current);\n          // Set up compute function\n          if (eventPrefix) {\n            state.setEvents({\n              compute: (event, state) => {\n                const x = event[eventPrefix + 'X'];\n                const y = event[eventPrefix + 'Y'];\n                state.pointer.set(x / state.size.width * 2 - 1, -(y / state.size.height) * 2 + 1);\n                state.raycaster.setFromCamera(state.pointer, state.camera);\n              }\n            });\n          }\n          // Call onCreated callback\n          onCreated == null ? void 0 : onCreated(state);\n        }\n      });\n      root.current.render( /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Bridge, {\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.E, {\n          set: setError,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n            fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.B, {\n              set: setBlock\n            }),\n            children: children\n          })\n        })\n      }));\n    }\n  });\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) return () => (0,_events_321b05fb_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(canvas);\n  }, []);\n\n  // When the event source is not this div, we need to set pointer-events to none\n  // Or else the canvas will block events from reaching the event source\n  const pointerEvents = eventSource ? 'none' : 'auto';\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n    ref: divRef,\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      pointerEvents,\n      ...style\n    },\n    ...props,\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          display: 'block'\n        },\n        children: fallback\n      })\n    })\n  });\n});\n\n/**\r\n * A DOM canvas which accepts threejs elements as children.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/canvas\r\n */\nconst Canvas = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function CanvasWrapper(props, ref) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(its_fine__WEBPACK_IMPORTED_MODULE_8__.FiberProvider, {\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(CanvasImpl, {\n      ...props,\n      ref: ref\n    })\n  });\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction createStore(createState) {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (nextState !== state) {\n      const previousState = state;\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {\n    console.warn(\"[DEPRECATED] Please use `subscribeWithSelector` middleware\");\n    let currentSlice = selector(state);\n    function listenerToAdd() {\n      const nextSlice = selector(state);\n      if (!equalityFn(currentSlice, nextSlice)) {\n        const previousSlice = currentSlice;\n        listener(currentSlice = nextSlice, previousSlice);\n      }\n    }\n    listeners.add(listenerToAdd);\n    return () => listeners.delete(listenerToAdd);\n  };\n  const subscribe = (listener, selector, equalityFn) => {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => listeners.clear();\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n}\n\nconst isSSR = typeof window === \"undefined\" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\nfunction create(createState) {\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useStore = (selector = api.getState, equalityFn = Object.is) => {\n    const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c) => c + 1, 0);\n    const state = api.getState();\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n    const selectorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selector);\n    const equalityFnRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(equalityFn);\n    const erroredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const currentSliceRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (currentSliceRef.current === void 0) {\n      currentSliceRef.current = selector(state);\n    }\n    let newStateSlice;\n    let hasNewStateSlice = false;\n    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    }\n    useIsomorphicLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n      stateRef.current = state;\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    const stateBeforeSubscriptionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n    useIsomorphicLayoutEffect(() => {\n      const listener = () => {\n        try {\n          const nextState = api.getState();\n          const nextStateSlice = selectorRef.current(nextState);\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            stateRef.current = nextState;\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n      const unsubscribe = api.subscribe(listener);\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener();\n      }\n      return unsubscribe;\n    }, []);\n    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(sliceToReturn);\n    return sliceToReturn;\n  };\n  Object.assign(useStore, api);\n  useStore[Symbol.iterator] = function() {\n    console.warn(\"[useStore, api] = create() is deprecated and will be removed in v4\");\n    const items = [useStore, api];\n    return {\n      next() {\n        const done = items.length <= 0;\n        return { value: items.shift(), done };\n      }\n    };\n  };\n  return useStore;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0Y7O0FBRXRGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyw0Q0FBUyxHQUFHLGtEQUFlO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpREFBVTtBQUN0QztBQUNBLHFCQUFxQiw2Q0FBTTtBQUMzQix3QkFBd0IsNkNBQU07QUFDOUIsMEJBQTBCLDZDQUFNO0FBQ2hDLHVCQUF1Qiw2Q0FBTTtBQUM3Qiw0QkFBNEIsNkNBQU07QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx1Q0FBdUMsNkNBQU07QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSSxvREFBYTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbmlwZXItYWkvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS9pbmRleC5qcz9hYmNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRGVidWdWYWx1ZSwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKGNyZWF0ZVN0YXRlKSB7XG4gIGxldCBzdGF0ZTtcbiAgY29uc3QgbGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgY29uc3Qgc2V0U3RhdGUgPSAocGFydGlhbCwgcmVwbGFjZSkgPT4ge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHR5cGVvZiBwYXJ0aWFsID09PSBcImZ1bmN0aW9uXCIgPyBwYXJ0aWFsKHN0YXRlKSA6IHBhcnRpYWw7XG4gICAgaWYgKG5leHRTdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcbiAgICAgIHN0YXRlID0gcmVwbGFjZSA/IG5leHRTdGF0ZSA6IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCBuZXh0U3RhdGUpO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcihzdGF0ZSwgcHJldmlvdXNTdGF0ZSkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0U3RhdGUgPSAoKSA9PiBzdGF0ZTtcbiAgY29uc3Qgc3Vic2NyaWJlV2l0aFNlbGVjdG9yID0gKGxpc3RlbmVyLCBzZWxlY3RvciA9IGdldFN0YXRlLCBlcXVhbGl0eUZuID0gT2JqZWN0LmlzKSA9PiB7XG4gICAgY29uc29sZS53YXJuKFwiW0RFUFJFQ0FURURdIFBsZWFzZSB1c2UgYHN1YnNjcmliZVdpdGhTZWxlY3RvcmAgbWlkZGxld2FyZVwiKTtcbiAgICBsZXQgY3VycmVudFNsaWNlID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyVG9BZGQoKSB7XG4gICAgICBjb25zdCBuZXh0U2xpY2UgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgICBpZiAoIWVxdWFsaXR5Rm4oY3VycmVudFNsaWNlLCBuZXh0U2xpY2UpKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2xpY2UgPSBjdXJyZW50U2xpY2U7XG4gICAgICAgIGxpc3RlbmVyKGN1cnJlbnRTbGljZSA9IG5leHRTbGljZSwgcHJldmlvdXNTbGljZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXJUb0FkZCk7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXJUb0FkZCk7XG4gIH07XG4gIGNvbnN0IHN1YnNjcmliZSA9IChsaXN0ZW5lciwgc2VsZWN0b3IsIGVxdWFsaXR5Rm4pID0+IHtcbiAgICBpZiAoc2VsZWN0b3IgfHwgZXF1YWxpdHlGbikge1xuICAgICAgcmV0dXJuIHN1YnNjcmliZVdpdGhTZWxlY3RvcihsaXN0ZW5lciwgc2VsZWN0b3IsIGVxdWFsaXR5Rm4pO1xuICAgIH1cbiAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gKCkgPT4gbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gIH07XG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgY29uc3QgYXBpID0geyBzZXRTdGF0ZSwgZ2V0U3RhdGUsIHN1YnNjcmliZSwgZGVzdHJveSB9O1xuICBzdGF0ZSA9IGNyZWF0ZVN0YXRlKHNldFN0YXRlLCBnZXRTdGF0ZSwgYXBpKTtcbiAgcmV0dXJuIGFwaTtcbn1cblxuY29uc3QgaXNTU1IgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8ICF3aW5kb3cubmF2aWdhdG9yIHx8IC9TZXJ2ZXJTaWRlUmVuZGVyaW5nfF5EZW5vXFwvLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBpc1NTUiA/IHVzZUVmZmVjdCA6IHVzZUxheW91dEVmZmVjdDtcbmZ1bmN0aW9uIGNyZWF0ZShjcmVhdGVTdGF0ZSkge1xuICBjb25zdCBhcGkgPSB0eXBlb2YgY3JlYXRlU3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGNyZWF0ZVN0b3JlKGNyZWF0ZVN0YXRlKSA6IGNyZWF0ZVN0YXRlO1xuICBjb25zdCB1c2VTdG9yZSA9IChzZWxlY3RvciA9IGFwaS5nZXRTdGF0ZSwgZXF1YWxpdHlGbiA9IE9iamVjdC5pcykgPT4ge1xuICAgIGNvbnN0IFssIGZvcmNlVXBkYXRlXSA9IHVzZVJlZHVjZXIoKGMpID0+IGMgKyAxLCAwKTtcbiAgICBjb25zdCBzdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHN0YXRlUmVmID0gdXNlUmVmKHN0YXRlKTtcbiAgICBjb25zdCBzZWxlY3RvclJlZiA9IHVzZVJlZihzZWxlY3Rvcik7XG4gICAgY29uc3QgZXF1YWxpdHlGblJlZiA9IHVzZVJlZihlcXVhbGl0eUZuKTtcbiAgICBjb25zdCBlcnJvcmVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBjdXJyZW50U2xpY2VSZWYgPSB1c2VSZWYoKTtcbiAgICBpZiAoY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgfVxuICAgIGxldCBuZXdTdGF0ZVNsaWNlO1xuICAgIGxldCBoYXNOZXdTdGF0ZVNsaWNlID0gZmFsc2U7XG4gICAgaWYgKHN0YXRlUmVmLmN1cnJlbnQgIT09IHN0YXRlIHx8IHNlbGVjdG9yUmVmLmN1cnJlbnQgIT09IHNlbGVjdG9yIHx8IGVxdWFsaXR5Rm5SZWYuY3VycmVudCAhPT0gZXF1YWxpdHlGbiB8fCBlcnJvcmVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIG5ld1N0YXRlU2xpY2UgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgICBoYXNOZXdTdGF0ZVNsaWNlID0gIWVxdWFsaXR5Rm4oY3VycmVudFNsaWNlUmVmLmN1cnJlbnQsIG5ld1N0YXRlU2xpY2UpO1xuICAgIH1cbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChoYXNOZXdTdGF0ZVNsaWNlKSB7XG4gICAgICAgIGN1cnJlbnRTbGljZVJlZi5jdXJyZW50ID0gbmV3U3RhdGVTbGljZTtcbiAgICAgIH1cbiAgICAgIHN0YXRlUmVmLmN1cnJlbnQgPSBzdGF0ZTtcbiAgICAgIHNlbGVjdG9yUmVmLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICAgIGVxdWFsaXR5Rm5SZWYuY3VycmVudCA9IGVxdWFsaXR5Rm47XG4gICAgICBlcnJvcmVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICBjb25zdCBzdGF0ZUJlZm9yZVN1YnNjcmlwdGlvblJlZiA9IHVzZVJlZihzdGF0ZSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSBhcGkuZ2V0U3RhdGUoKTtcbiAgICAgICAgICBjb25zdCBuZXh0U3RhdGVTbGljZSA9IHNlbGVjdG9yUmVmLmN1cnJlbnQobmV4dFN0YXRlKTtcbiAgICAgICAgICBpZiAoIWVxdWFsaXR5Rm5SZWYuY3VycmVudChjdXJyZW50U2xpY2VSZWYuY3VycmVudCwgbmV4dFN0YXRlU2xpY2UpKSB7XG4gICAgICAgICAgICBzdGF0ZVJlZi5jdXJyZW50ID0gbmV4dFN0YXRlO1xuICAgICAgICAgICAgY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPSBuZXh0U3RhdGVTbGljZTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGVycm9yZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gYXBpLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gICAgICBpZiAoYXBpLmdldFN0YXRlKCkgIT09IHN0YXRlQmVmb3JlU3Vic2NyaXB0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3Qgc2xpY2VUb1JldHVybiA9IGhhc05ld1N0YXRlU2xpY2UgPyBuZXdTdGF0ZVNsaWNlIDogY3VycmVudFNsaWNlUmVmLmN1cnJlbnQ7XG4gICAgdXNlRGVidWdWYWx1ZShzbGljZVRvUmV0dXJuKTtcbiAgICByZXR1cm4gc2xpY2VUb1JldHVybjtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbih1c2VTdG9yZSwgYXBpKTtcbiAgdXNlU3RvcmVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUud2FybihcIlt1c2VTdG9yZSwgYXBpXSA9IGNyZWF0ZSgpIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NFwiKTtcbiAgICBjb25zdCBpdGVtcyA9IFt1c2VTdG9yZSwgYXBpXTtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgZG9uZSA9IGl0ZW1zLmxlbmd0aCA8PSAwO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogaXRlbXMuc2hpZnQoKSwgZG9uZSB9O1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHJldHVybiB1c2VTdG9yZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js\n");

/***/ })

};
;